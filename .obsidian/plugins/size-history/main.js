/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/chart.xkcd/dist/index.js
var require_dist = __commonJS({
  "node_modules/chart.xkcd/dist/index.js"(exports, module2) {
    (function() {
      function wb(a2) {
        return a2 && a2.__esModule ? { d: a2.default } : { d: a2 };
      }
      var xb = {};
      function yb(t2, e2) {
        var i2 = Object.keys(t2);
        if (Object.getOwnPropertySymbols) {
          var o2 = Object.getOwnPropertySymbols(t2);
          e2 && (o2 = o2.filter(function(e3) {
            return Object.getOwnPropertyDescriptor(t2, e3).enumerable;
          })), i2.push.apply(i2, o2);
        }
        return i2;
      }
      function od(t2) {
        for (var e2 = 1; e2 < arguments.length; e2++) {
          var i2 = null != arguments[e2] ? arguments[e2] : {};
          e2 % 2 ? yb(i2, true).forEach(function(e3) {
            pd(t2, e3, i2[e3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t2, Object.getOwnPropertyDescriptors(i2)) : yb(i2).forEach(function(e3) {
            Object.defineProperty(t2, e3, Object.getOwnPropertyDescriptor(i2, e3));
          });
        }
        return t2;
      }
      function pd(t2, e2, i2) {
        return e2 in t2 ? Object.defineProperty(t2, e2, { value: i2, enumerable: true, configurable: true, writable: true }) : t2[e2] = i2, t2;
      }
      function qd() {
      }
      var zb = function($2) {
        return null == $2 ? qd : function() {
          return this.querySelector($2);
        };
      };
      var rd = function(e2) {
        "function" != typeof e2 && (e2 = zb(e2));
        for (var r2 = this._groups, t2 = r2.length, a2 = new Array(t2), l2 = 0; l2 < t2; ++l2)
          for (var $2, _2, o2 = r2[l2], n2 = o2.length, i2 = a2[l2] = new Array(n2), p2 = 0; p2 < n2; ++p2)
            ($2 = o2[p2]) && (_2 = e2.call($2, $2.__data__, p2, o2)) && ("__data__" in $2 && (_2.__data__ = $2.__data__), i2[p2] = _2);
        return new m(a2, this._parents);
      };
      function sd() {
        return [];
      }
      var td = function(t2) {
        return null == t2 ? sd : function() {
          return this.querySelectorAll(t2);
        };
      };
      var ud = function(e2) {
        "function" != typeof e2 && (e2 = td(e2));
        for (var r2 = this._groups, p2 = r2.length, t2 = [], $2 = [], f2 = 0; f2 < p2; ++f2)
          for (var l2, o2 = r2[f2], a2 = o2.length, u2 = 0; u2 < a2; ++u2)
            (l2 = o2[u2]) && (t2.push(e2.call(l2, l2.__data__, u2, o2)), $2.push(l2));
        return new m(t2, $2);
      };
      var vd = function(r2) {
        return function() {
          return this.matches(r2);
        };
      };
      var wd = function(r2) {
        "function" != typeof r2 && (r2 = vd(r2));
        for (var e2 = this._groups, a2 = e2.length, t2 = new Array(a2), $2 = 0; $2 < a2; ++$2)
          for (var S2, o2 = e2[$2], n2 = o2.length, p2 = t2[$2] = [], i2 = 0; i2 < n2; ++i2)
            (S2 = o2[i2]) && r2.call(S2, S2.__data__, i2, o2) && p2.push(S2);
        return new m(t2, this._parents);
      };
      var Ab = function(e2) {
        return new Array(e2.length);
      };
      var xd = function() {
        return new m(this._enter || this._groups.map(Ab), this._parents);
      };
      function ia(e2, t2) {
        this.ownerDocument = e2.ownerDocument, this.namespaceURI = e2.namespaceURI, this._next = null, this._parent = e2, this.__data__ = t2;
      }
      ia.prototype = { constructor: ia, appendChild: function(e2) {
        return this._parent.insertBefore(e2, this._next);
      }, insertBefore: function(e2, t2) {
        return this._parent.insertBefore(e2, t2);
      }, querySelector: function(e2) {
        return this._parent.querySelector(e2);
      }, querySelectorAll: function(e2) {
        return this._parent.querySelectorAll(e2);
      } };
      var yd = function(r2) {
        return function() {
          return r2;
        };
      };
      var Bb = "$";
      function zd(r2, e2, n2, $2, t2, a2) {
        for (var c2, i2 = 0, o2 = e2.length, l2 = a2.length; i2 < l2; ++i2)
          (c2 = e2[i2]) ? (c2.__data__ = a2[i2], $2[i2] = c2) : n2[i2] = new ia(r2, a2[i2]);
        for (; i2 < o2; ++i2)
          (c2 = e2[i2]) && (t2[i2] = c2);
      }
      function Ad(r2, e2, n2, $2, t2, a2, c2) {
        var i2, o2, l2, f2 = {}, q2 = e2.length, _2 = a2.length, O2 = new Array(q2);
        for (i2 = 0; i2 < q2; ++i2)
          (o2 = e2[i2]) && (O2[i2] = l2 = Bb + c2.call(o2, o2.__data__, i2, e2), l2 in f2 ? t2[i2] = o2 : f2[l2] = o2);
        for (i2 = 0; i2 < _2; ++i2)
          (o2 = f2[l2 = Bb + c2.call(r2, a2[i2], i2, a2)]) ? ($2[i2] = o2, o2.__data__ = a2[i2], f2[l2] = null) : n2[i2] = new ia(r2, a2[i2]);
        for (i2 = 0; i2 < q2; ++i2)
          (o2 = e2[i2]) && f2[O2[i2]] === o2 && (t2[i2] = o2);
      }
      var Bd = function(r2, e2) {
        if (!r2)
          return O2 = new Array(this.size()), l2 = -1, this.each(function(r3) {
            O2[++l2] = r3;
          }), O2;
        var n2 = e2 ? Ad : zd, $2 = this._parents, t2 = this._groups;
        "function" != typeof r2 && (r2 = yd(r2));
        for (var a2 = t2.length, c2 = new Array(a2), i2 = new Array(a2), o2 = new Array(a2), l2 = 0; l2 < a2; ++l2) {
          var f2 = $2[l2], q2 = t2[l2], _2 = q2.length, O2 = r2.call(f2, f2 && f2.__data__, l2, $2), d2 = O2.length, u2 = i2[l2] = new Array(d2), v2 = c2[l2] = new Array(d2);
          n2(f2, q2, u2, v2, o2[l2] = new Array(_2), O2, e2);
          for (var p2, y2, h2 = 0, x2 = 0; h2 < d2; ++h2)
            if (p2 = u2[h2]) {
              for (h2 >= x2 && (x2 = h2 + 1); !(y2 = v2[x2]) && ++x2 < d2; )
                ;
              p2._next = y2 || null;
            }
        }
        return (c2 = new m(c2, $2))._enter = i2, c2._exit = o2, c2;
      };
      var Cd = function() {
        return new m(this._exit || this._groups.map(Ab), this._parents);
      };
      var Dd = function(e2, t2, r2) {
        var $2 = this.enter(), n2 = this, o2 = this.exit();
        return $2 = "function" == typeof e2 ? e2($2) : $2.append(e2 + ""), null != t2 && (n2 = t2(n2)), null == r2 ? o2.remove() : r2(o2), $2 && n2 ? $2.merge(n2).order() : n2;
      };
      var Ed = function(r2) {
        for (var e2 = this._groups, t2 = r2._groups, $2 = e2.length, n2 = t2.length, a2 = Math.min($2, n2), o2 = new Array($2), x2 = 0; x2 < a2; ++x2)
          for (var p2, i2 = e2[x2], l2 = t2[x2], u2 = i2.length, f2 = o2[x2] = new Array(u2), s2 = 0; s2 < u2; ++s2)
            (p2 = i2[s2] || l2[s2]) && (f2[s2] = p2);
        for (; x2 < $2; ++x2)
          o2[x2] = e2[x2];
        return new m(o2, this._parents);
      };
      var Fd = function() {
        for (var e2 = this._groups, t2 = -1, r2 = e2.length; ++t2 < r2; )
          for (var o2, $2 = e2[t2], n2 = $2.length - 1, a2 = $2[n2]; --n2 >= 0; )
            (o2 = $2[n2]) && (a2 && 4 ^ o2.compareDocumentPosition(a2) && a2.parentNode.insertBefore(o2, a2), a2 = o2);
        return this;
      };
      var Gd = function(r2) {
        function e2(e3, t3) {
          return e3 && t3 ? r2(e3.__data__, t3.__data__) : !e3 - !t3;
        }
        r2 || (r2 = Hd);
        for (var t2 = this._groups, n2 = t2.length, $2 = new Array(n2), a2 = 0; a2 < n2; ++a2) {
          for (var w2, o2 = t2[a2], i2 = o2.length, u2 = $2[a2] = new Array(i2), _2 = 0; _2 < i2; ++_2)
            (w2 = o2[_2]) && (u2[_2] = w2);
          u2.sort(e2);
        }
        return new m($2, this._parents).order();
      };
      function Hd(r2, e2) {
        return r2 < e2 ? -1 : r2 > e2 ? 1 : r2 >= e2 ? 0 : NaN;
      }
      var Id = function() {
        var t2 = arguments[0];
        return arguments[0] = this, t2.apply(null, arguments), this;
      };
      var Jd = function() {
        var t2 = new Array(this.size()), a2 = -1;
        return this.each(function() {
          t2[++a2] = this;
        }), t2;
      };
      var Kd = function() {
        for (var r2 = this._groups, t2 = 0, e2 = r2.length; t2 < e2; ++t2)
          for (var $2 = r2[t2], o2 = 0, u2 = $2.length; o2 < u2; ++o2) {
            var a2 = $2[o2];
            if (a2)
              return a2;
          }
        return null;
      };
      var Ld = function() {
        var e2 = 0;
        return this.each(function() {
          ++e2;
        }), e2;
      };
      var Md = function() {
        return !this.node();
      };
      var Nd = function(t2) {
        for (var r2 = this._groups, e2 = 0, $2 = r2.length; e2 < $2; ++e2)
          for (var a2, n2 = r2[e2], p2 = 0, o2 = n2.length; p2 < o2; ++p2)
            (a2 = n2[p2]) && t2.call(a2, a2.__data__, p2, n2);
        return this;
      };
      function Od(t2) {
        return function() {
          this.removeAttribute(t2);
        };
      }
      function Pd(t2) {
        return function() {
          this.removeAttributeNS(t2.space, t2.local);
        };
      }
      function Qd(t2, r2) {
        return function() {
          this.setAttribute(t2, r2);
        };
      }
      function Rd(t2, r2) {
        return function() {
          this.setAttributeNS(t2.space, t2.local, r2);
        };
      }
      function Sd(t2, r2) {
        return function() {
          var e2 = r2.apply(this, arguments);
          null == e2 ? this.removeAttribute(t2) : this.setAttribute(t2, e2);
        };
      }
      function Td(t2, r2) {
        return function() {
          var e2 = r2.apply(this, arguments);
          null == e2 ? this.removeAttributeNS(t2.space, t2.local) : this.setAttributeNS(t2.space, t2.local, e2);
        };
      }
      var Ha = "http://www.w3.org/1999/xhtml";
      var Cb = { svg: "http://www.w3.org/2000/svg", xhtml: Ha, xlink: "http://www.w3.org/1999/xlink", xml: "http://www.w3.org/XML/1998/namespace", xmlns: "http://www.w3.org/2000/xmlns/" };
      var Db = function(e2) {
        var $2 = e2 += "", a2 = $2.indexOf(":");
        return a2 >= 0 && "xmlns" !== ($2 = e2.slice(0, a2)) && (e2 = e2.slice(a2 + 1)), Cb.hasOwnProperty($2) ? { space: Cb[$2], local: e2 } : e2;
      };
      var Ud = function(t2, r2) {
        var e2 = Db(t2);
        if (arguments.length < 2) {
          var a2 = this.node();
          return e2.local ? a2.getAttributeNS(e2.space, e2.local) : a2.getAttribute(e2);
        }
        return this.each((null == r2 ? e2.local ? Pd : Od : "function" == typeof r2 ? e2.local ? Td : Sd : e2.local ? Rd : Qd)(e2, r2));
      };
      function Vd(e2) {
        return function() {
          this.style.removeProperty(e2);
        };
      }
      function Wd(e2, t2, r2) {
        return function() {
          this.style.setProperty(e2, t2, r2);
        };
      }
      function Xd(e2, t2, r2) {
        return function() {
          var $2 = t2.apply(this, arguments);
          null == $2 ? this.style.removeProperty(e2) : this.style.setProperty(e2, $2, r2);
        };
      }
      var Eb = function(e2) {
        return e2.ownerDocument && e2.ownerDocument.defaultView || e2.document && e2 || e2.defaultView;
      };
      var Yd = function(e2, t2, r2) {
        return arguments.length > 1 ? this.each((null == t2 ? Vd : "function" == typeof t2 ? Xd : Wd)(e2, t2, null == r2 ? "" : r2)) : Zd(this.node(), e2);
      };
      function Zd(e2, t2) {
        return e2.style.getPropertyValue(t2) || Eb(e2).getComputedStyle(e2, null).getPropertyValue(t2);
      }
      function $d(r2) {
        return function() {
          delete this[r2];
        };
      }
      function _d(r2, t2) {
        return function() {
          this[r2] = t2;
        };
      }
      function ae(r2, t2) {
        return function() {
          var n2 = t2.apply(this, arguments);
          null == n2 ? delete this[r2] : this[r2] = n2;
        };
      }
      var be = function(r2, t2) {
        return arguments.length > 1 ? this.each((null == t2 ? $d : "function" == typeof t2 ? ae : _d)(r2, t2)) : this.node()[r2];
      };
      function Fb(s2) {
        return s2.trim().split(/^|\s+/);
      }
      function Ia(s2) {
        return s2.classList || new Gb(s2);
      }
      function Gb(s2) {
        this._node = s2, this._names = Fb(s2.getAttribute("class") || "");
      }
      function Hb(s2, t2) {
        for (var a2 = Ia(s2), $2 = -1, e2 = t2.length; ++$2 < e2; )
          a2.add(t2[$2]);
      }
      function Ib(s2, t2) {
        for (var a2 = Ia(s2), $2 = -1, e2 = t2.length; ++$2 < e2; )
          a2.remove(t2[$2]);
      }
      function ce(s2) {
        return function() {
          Hb(this, s2);
        };
      }
      function de(s2) {
        return function() {
          Ib(this, s2);
        };
      }
      function ee(s2, t2) {
        return function() {
          (t2.apply(this, arguments) ? Hb : Ib)(this, s2);
        };
      }
      Gb.prototype = { add: function(s2) {
        this._names.indexOf(s2) < 0 && (this._names.push(s2), this._node.setAttribute("class", this._names.join(" ")));
      }, remove: function(s2) {
        var t2 = this._names.indexOf(s2);
        t2 >= 0 && (this._names.splice(t2, 1), this._node.setAttribute("class", this._names.join(" ")));
      }, contains: function(s2) {
        return this._names.indexOf(s2) >= 0;
      } };
      var fe = function(s2, t2) {
        var a2 = Fb(s2 + "");
        if (arguments.length < 2) {
          for (var $2 = Ia(this.node()), e2 = -1, n2 = a2.length; ++e2 < n2; )
            if (!$2.contains(a2[e2]))
              return false;
          return true;
        }
        return this.each(("function" == typeof t2 ? ee : t2 ? ce : de)(a2, t2));
      };
      function ge() {
        this.textContent = "";
      }
      function he(t2) {
        return function() {
          this.textContent = t2;
        };
      }
      function ie(t2) {
        return function() {
          var n2 = t2.apply(this, arguments);
          this.textContent = null == n2 ? "" : n2;
        };
      }
      var je = function(t2) {
        return arguments.length ? this.each(null == t2 ? ge : ("function" == typeof t2 ? ie : he)(t2)) : this.node().textContent;
      };
      function ke() {
        this.innerHTML = "";
      }
      function le(n2) {
        return function() {
          this.innerHTML = n2;
        };
      }
      function me(n2) {
        return function() {
          var t2 = n2.apply(this, arguments);
          this.innerHTML = null == t2 ? "" : t2;
        };
      }
      var ne = function(n2) {
        return arguments.length ? this.each(null == n2 ? ke : ("function" == typeof n2 ? me : le)(n2)) : this.node().innerHTML;
      };
      function oe() {
        this.nextSibling && this.parentNode.appendChild(this);
      }
      var pe = function() {
        return this.each(oe);
      };
      function qe() {
        this.previousSibling && this.parentNode.insertBefore(this, this.parentNode.firstChild);
      }
      var re = function() {
        return this.each(qe);
      };
      function se(e2) {
        return function() {
          var r2 = this.ownerDocument, t2 = this.namespaceURI;
          return t2 === Ha && r2.documentElement.namespaceURI === Ha ? r2.createElement(e2) : r2.createElementNS(t2, e2);
        };
      }
      function te(e2) {
        return function() {
          return this.ownerDocument.createElementNS(e2.space, e2.local);
        };
      }
      var Jb = function(e2) {
        var r2 = Db(e2);
        return (r2.local ? te : se)(r2);
      };
      var ue = function(t2) {
        var r2 = "function" == typeof t2 ? t2 : Jb(t2);
        return this.select(function() {
          return this.appendChild(r2.apply(this, arguments));
        });
      };
      function ve() {
        return null;
      }
      var we = function(t2, r2) {
        var e2 = "function" == typeof t2 ? t2 : Jb(t2), $2 = null == r2 ? ve : "function" == typeof r2 ? r2 : zb(r2);
        return this.select(function() {
          return this.insertBefore(e2.apply(this, arguments), $2.apply(this, arguments) || null);
        });
      };
      function xe() {
        var e2 = this.parentNode;
        e2 && e2.removeChild(this);
      }
      var ye = function() {
        return this.each(xe);
      };
      function ze() {
        return this.parentNode.insertBefore(this.cloneNode(false), this.nextSibling);
      }
      function Ae() {
        return this.parentNode.insertBefore(this.cloneNode(true), this.nextSibling);
      }
      var Be = function(e2) {
        return this.select(e2 ? Ae : ze);
      };
      var Ce = function(t2) {
        return arguments.length ? this.property("__data__", t2) : this.node().__data__;
      };
      var De = {}, Kb = null;
      if ("undefined" != typeof document) {
        var Ee = document.documentElement;
        "onmouseenter" in Ee || (De = { mouseenter: "mouseover", mouseleave: "mouseout" });
      }
      function Fe(e2, t2, n2) {
        return e2 = Lb(e2, t2, n2), function(t3) {
          var n3 = t3.relatedTarget;
          n3 && (n3 === this || 8 & n3.compareDocumentPosition(this)) || e2.call(this, t3);
        };
      }
      function Lb(e2, t2, n2) {
        return function(r2) {
          var $2 = Kb;
          Kb = r2;
          try {
            e2.call(this, this.__data__, t2, n2);
          } finally {
            Kb = $2;
          }
        };
      }
      function Ge(e2) {
        return e2.trim().split(/^|\s+/).map(function(e3) {
          var t2 = "", n2 = e3.indexOf(".");
          return n2 >= 0 && (t2 = e3.slice(n2 + 1), e3 = e3.slice(0, n2)), { type: e3, name: t2 };
        });
      }
      function He(e2) {
        return function() {
          var t2 = this.__on;
          if (t2) {
            for (var n2, r2 = 0, $2 = -1, i2 = t2.length; r2 < i2; ++r2)
              n2 = t2[r2], e2.type && n2.type !== e2.type || n2.name !== e2.name ? t2[++$2] = n2 : this.removeEventListener(n2.type, n2.listener, n2.capture);
            ++$2 ? t2.length = $2 : delete this.__on;
          }
        };
      }
      function Ie(e2, t2, n2) {
        var r2 = De.hasOwnProperty(e2.type) ? Fe : Lb;
        return function($2, i2, p2) {
          var o2, a2 = this.__on, v2 = r2(t2, i2, p2);
          if (a2) {
            for (var s2 = 0, u2 = a2.length; s2 < u2; ++s2)
              if ((o2 = a2[s2]).type === e2.type && o2.name === e2.name)
                return this.removeEventListener(o2.type, o2.listener, o2.capture), this.addEventListener(o2.type, o2.listener = v2, o2.capture = n2), void (o2.value = t2);
          }
          this.addEventListener(e2.type, v2, n2), o2 = { type: e2.type, name: e2.name, value: t2, listener: v2, capture: n2 }, a2 ? a2.push(o2) : this.__on = [o2];
        };
      }
      var Je = function(e2, t2, n2) {
        var r2, $2, i2 = Ge(e2 + ""), p2 = i2.length;
        if (!(arguments.length < 2)) {
          for (o2 = t2 ? Ie : He, null == n2 && (n2 = false), r2 = 0; r2 < p2; ++r2)
            this.each(o2(i2[r2], t2, n2));
          return this;
        }
        var o2 = this.node().__on;
        if (o2) {
          for (var a2, v2 = 0, s2 = o2.length; v2 < s2; ++v2)
            for (r2 = 0, a2 = o2[v2]; r2 < p2; ++r2)
              if (($2 = i2[r2]).type === a2.type && $2.name === a2.name)
                return a2.value;
        }
      };
      function Mb(t2, n2, e2) {
        var $2 = Eb(t2), a2 = $2.CustomEvent;
        "function" == typeof a2 ? a2 = new a2(n2, e2) : (a2 = $2.document.createEvent("Event"), e2 ? (a2.initEvent(n2, e2.bubbles, e2.cancelable), a2.detail = e2.detail) : a2.initEvent(n2, false, false)), t2.dispatchEvent(a2);
      }
      function Ke(t2, n2) {
        return function() {
          return Mb(this, t2, n2);
        };
      }
      function Le(t2, n2) {
        return function() {
          return Mb(this, t2, n2.apply(this, arguments));
        };
      }
      var Me = function(t2, n2) {
        return this.each(("function" == typeof n2 ? Le : Ke)(t2, n2));
      };
      var Ne = [null];
      function m(e2, $2) {
        this._groups = e2, this._parents = $2;
      }
      m.prototype = { constructor: m, select: rd, selectAll: ud, filter: wd, data: Bd, enter: xd, exit: Cd, join: Dd, merge: Ed, order: Fd, sort: Gd, call: Id, nodes: Jd, node: Kd, size: Ld, empty: Md, each: Nd, attr: Ud, style: Yd, property: be, classed: fe, text: je, html: ne, raise: pe, lower: re, append: ue, insert: we, remove: ye, clone: Be, datum: Ce, on: Je, dispatch: Me };
      var f = function(e2) {
        return "string" == typeof e2 ? new m([[document.querySelector(e2)]], [document.documentElement]) : new m([[e2]], Ne);
      };
      var Oe = function() {
        for (var e2, r2 = Kb; e2 = r2.sourceEvent; )
          r2 = e2;
        return r2;
      };
      var Pe = function(e2, t2) {
        var n2 = e2.ownerSVGElement || e2;
        if (n2.createSVGPoint) {
          var r2 = n2.createSVGPoint();
          return r2.x = t2.clientX, r2.y = t2.clientY, [(r2 = r2.matrixTransform(e2.getScreenCTM().inverse())).x, r2.y];
        }
        var i2 = e2.getBoundingClientRect();
        return [t2.clientX - i2.left - e2.clientLeft, t2.clientY - i2.top - e2.clientTop];
      };
      var w = function(e2) {
        var $2 = Oe();
        return $2.changedTouches && ($2 = $2.changedTouches[0]), Pe(e2, $2);
      };
      function ja() {
        var n2, r2, t2 = Sb().unknown(void 0), e2 = t2.domain, i2 = t2.range, u2 = 0, a2 = 1, o2 = false, $2 = 0, l2 = 0, g2 = 0.5;
        function d2() {
          var t3 = e2().length, d3 = a2 < u2, p2 = d3 ? a2 : u2, c2 = d3 ? u2 : a2;
          n2 = (c2 - p2) / Math.max(1, t3 - $2 + 2 * l2), o2 && (n2 = Math.floor(n2)), p2 += (c2 - p2 - n2 * (t3 - $2)) * g2, r2 = n2 * (1 - $2), o2 && (p2 = Math.round(p2), r2 = Math.round(r2));
          var f2 = Te(t3).map(function(r3) {
            return p2 + n2 * r3;
          });
          return i2(d3 ? f2.reverse() : f2);
        }
        return delete t2.unknown, t2.domain = function(n3) {
          return arguments.length ? (e2(n3), d2()) : e2();
        }, t2.range = function(n3) {
          return arguments.length ? ([u2, a2] = n3, u2 = +u2, a2 = +a2, d2()) : [u2, a2];
        }, t2.rangeRound = function(n3) {
          return [u2, a2] = n3, u2 = +u2, a2 = +a2, o2 = true, d2();
        }, t2.bandwidth = function() {
          return r2;
        }, t2.step = function() {
          return n2;
        }, t2.round = function(n3) {
          return arguments.length ? (o2 = !!n3, d2()) : o2;
        }, t2.padding = function(n3) {
          return arguments.length ? ($2 = Math.min(1, l2 = +n3), d2()) : $2;
        }, t2.paddingInner = function(n3) {
          return arguments.length ? ($2 = Math.min(1, n3), d2()) : $2;
        }, t2.paddingOuter = function(n3) {
          return arguments.length ? (l2 = +n3, d2()) : l2;
        }, t2.align = function(n3) {
          return arguments.length ? (g2 = Math.max(0, Math.min(1, n3)), d2()) : g2;
        }, t2.copy = function() {
          return ja(e2(), [u2, a2]).round(o2).paddingInner($2).paddingOuter(l2).align(g2);
        }, la.apply(d2(), arguments);
      }
      function Nb(n2) {
        var r2 = n2.copy;
        return n2.padding = n2.paddingOuter, delete n2.paddingInner, delete n2.paddingOuter, n2.copy = function() {
          return Nb(r2());
        }, n2;
      }
      function Qe() {
        return Nb(ja.apply(null, arguments).paddingInner(1));
      }
      var Ob = function($2, t2) {
        return $2 < t2 ? -1 : $2 > t2 ? 1 : $2 >= t2 ? 0 : NaN;
      };
      var Pb = function(r2) {
        return 1 === r2.length && (r2 = Re(r2)), { left: function(n2, t2, e2, $2) {
          for (null == e2 && (e2 = 0), null == $2 && ($2 = n2.length); e2 < $2; ) {
            var a2 = e2 + $2 >>> 1;
            r2(n2[a2], t2) < 0 ? e2 = a2 + 1 : $2 = a2;
          }
          return e2;
        }, right: function(n2, t2, e2, $2) {
          for (null == e2 && (e2 = 0), null == $2 && ($2 = n2.length); e2 < $2; ) {
            var a2 = e2 + $2 >>> 1;
            r2(n2[a2], t2) > 0 ? $2 = a2 : e2 = a2 + 1;
          }
          return e2;
        } };
      };
      function Re(r2) {
        return function(n2, t2) {
          return Ob(r2(n2), t2);
        };
      }
      var Qb = Pb(Ob), Se = Qb.right;
      var ci = Qb.left;
      var Te = function(t2, e2, r2) {
        t2 = +t2, e2 = +e2, r2 = (a2 = arguments.length) < 2 ? (e2 = t2, t2 = 0, 1) : a2 < 3 ? 1 : +r2;
        for (var $2 = -1, a2 = 0 | Math.max(0, Math.ceil((e2 - t2) / r2)), c2 = new Array(a2); ++$2 < a2; )
          c2[$2] = t2 + $2 * r2;
        return c2;
      };
      var Ja = Math.sqrt(50), Ka = Math.sqrt(10), La = Math.sqrt(2), Ue = function($2, t2, r2) {
        var e2, a2, o2, g2, z2 = -1;
        if (r2 = +r2, ($2 = +$2) === (t2 = +t2) && r2 > 0)
          return [$2];
        if ((e2 = t2 < $2) && (a2 = $2, $2 = t2, t2 = a2), 0 === (g2 = ka($2, t2, r2)) || !isFinite(g2))
          return [];
        if (g2 > 0)
          for ($2 = Math.ceil($2 / g2), t2 = Math.floor(t2 / g2), o2 = new Array(a2 = Math.ceil(t2 - $2 + 1)); ++z2 < a2; )
            o2[z2] = ($2 + z2) * g2;
        else
          for ($2 = Math.floor($2 * g2), t2 = Math.ceil(t2 * g2), o2 = new Array(a2 = Math.ceil($2 - t2 + 1)); ++z2 < a2; )
            o2[z2] = ($2 - z2) / g2;
        return e2 && o2.reverse(), o2;
      };
      function ka($2, t2, r2) {
        var e2 = (t2 - $2) / Math.max(0, r2), a2 = Math.floor(Math.log(e2) / Math.LN10), o2 = e2 / Math.pow(10, a2);
        return a2 >= 0 ? (o2 >= Ja ? 10 : o2 >= Ka ? 5 : o2 >= La ? 2 : 1) * Math.pow(10, a2) : -Math.pow(10, -a2) / (o2 >= Ja ? 10 : o2 >= Ka ? 5 : o2 >= La ? 2 : 1);
      }
      function Ma($2, t2, r2) {
        var e2 = Math.abs(t2 - $2) / Math.max(0, r2), a2 = Math.pow(10, Math.floor(Math.log(e2) / Math.LN10)), o2 = e2 / a2;
        return o2 >= Ja ? a2 *= 10 : o2 >= Ka ? a2 *= 5 : o2 >= La && (a2 *= 2), t2 < $2 ? -a2 : a2;
      }
      function la(t2, e2) {
        switch (arguments.length) {
          case 0:
            break;
          case 1:
            this.range(t2);
            break;
          default:
            this.range(e2).domain(t2);
        }
        return this;
      }
      const Rb = Symbol("implicit");
      function Sb() {
        var t2 = /* @__PURE__ */ new Map(), n2 = [], e2 = [], r2 = Rb;
        function i2(i3) {
          var $2 = i3 + "", o2 = t2.get($2);
          if (!o2) {
            if (r2 !== Rb)
              return r2;
            t2.set($2, o2 = n2.push(i3));
          }
          return e2[(o2 - 1) % e2.length];
        }
        return i2.domain = function(e3) {
          if (!arguments.length)
            return n2.slice();
          n2 = [], t2 = /* @__PURE__ */ new Map();
          for (const r3 of e3) {
            const e4 = r3 + "";
            t2.has(e4) || t2.set(e4, n2.push(r3));
          }
          return i2;
        }, i2.range = function(t3) {
          return arguments.length ? (e2 = Array.from(t3), i2) : e2.slice();
        }, i2.unknown = function(t3) {
          return arguments.length ? (r2 = t3, i2) : r2;
        }, i2.copy = function() {
          return Sb(n2, e2).unknown(r2);
        }, la.apply(i2, arguments), i2;
      }
      function Ve(t2) {
        var r2 = t2.domain;
        return t2.ticks = function(t3) {
          var $2 = r2();
          return Ue($2[0], $2[$2.length - 1], null == t3 ? 10 : t3);
        }, t2.tickFormat = function(t3, $2) {
          var e2 = r2();
          return Of(e2[0], e2[e2.length - 1], null == t3 ? 10 : t3, $2);
        }, t2.nice = function($2) {
          null == $2 && ($2 = 10);
          var e2, i2 = r2(), n2 = 0, o2 = i2.length - 1, a2 = i2[n2], k2 = i2[o2];
          return k2 < a2 && (e2 = a2, a2 = k2, k2 = e2, e2 = n2, n2 = o2, o2 = e2), (e2 = ka(a2, k2, $2)) > 0 ? (a2 = Math.floor(a2 / e2) * e2, k2 = Math.ceil(k2 / e2) * e2, e2 = ka(a2, k2, $2)) : e2 < 0 && (a2 = Math.ceil(a2 * e2) / e2, k2 = Math.floor(k2 * e2) / e2, e2 = ka(a2, k2, $2)), e2 > 0 ? (i2[n2] = Math.floor(a2 / e2) * e2, i2[o2] = Math.ceil(k2 / e2) * e2, r2(i2)) : e2 < 0 && (i2[n2] = Math.ceil(a2 * e2) / e2, i2[o2] = Math.floor(k2 * e2) / e2, r2(i2)), t2;
        }, t2;
      }
      function A() {
        var t2 = Bc(z, z);
        return t2.copy = function() {
          return Ac(t2, A());
        }, la.apply(t2, arguments), Ve(t2);
      }
      function x() {
      }
      var G = function(t2, e2, r2) {
        t2.prototype = e2.prototype = r2, r2.constructor = t2;
      };
      function P(t2, e2) {
        var r2 = Object.create(t2.prototype);
        for (var o2 in e2)
          r2[o2] = e2[o2];
        return r2;
      }
      var t = 0.7;
      var H = 1 / t;
      var I = "\\s*([+-]?\\d+)\\s*", R = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*", e = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*", We = /^#([0-9a-f]{3})$/, Xe = /^#([0-9a-f]{6})$/, Ye = new RegExp("^rgb\\(" + [I, I, I] + "\\)$"), Ze = new RegExp("^rgb\\(" + [e, e, e] + "\\)$"), $e = new RegExp("^rgba\\(" + [I, I, I, R] + "\\)$"), _e = new RegExp("^rgba\\(" + [e, e, e, R] + "\\)$"), af = new RegExp("^hsl\\(" + [R, e, e] + "\\)$"), bf = new RegExp("^hsla\\(" + [R, e, e, R] + "\\)$"), Tb = { aliceblue: 15792383, antiquewhite: 16444375, aqua: 65535, aquamarine: 8388564, azure: 15794175, beige: 16119260, bisque: 16770244, black: 0, blanchedalmond: 16772045, blue: 255, blueviolet: 9055202, brown: 10824234, burlywood: 14596231, cadetblue: 6266528, chartreuse: 8388352, chocolate: 13789470, coral: 16744272, cornflowerblue: 6591981, cornsilk: 16775388, crimson: 14423100, cyan: 65535, darkblue: 139, darkcyan: 35723, darkgoldenrod: 12092939, darkgray: 11119017, darkgreen: 25600, darkgrey: 11119017, darkkhaki: 12433259, darkmagenta: 9109643, darkolivegreen: 5597999, darkorange: 16747520, darkorchid: 10040012, darkred: 9109504, darksalmon: 15308410, darkseagreen: 9419919, darkslateblue: 4734347, darkslategray: 3100495, darkslategrey: 3100495, darkturquoise: 52945, darkviolet: 9699539, deeppink: 16716947, deepskyblue: 49151, dimgray: 6908265, dimgrey: 6908265, dodgerblue: 2003199, firebrick: 11674146, floralwhite: 16775920, forestgreen: 2263842, fuchsia: 16711935, gainsboro: 14474460, ghostwhite: 16316671, gold: 16766720, goldenrod: 14329120, gray: 8421504, green: 32768, greenyellow: 11403055, grey: 8421504, honeydew: 15794160, hotpink: 16738740, indianred: 13458524, indigo: 4915330, ivory: 16777200, khaki: 15787660, lavender: 15132410, lavenderblush: 16773365, lawngreen: 8190976, lemonchiffon: 16775885, lightblue: 11393254, lightcoral: 15761536, lightcyan: 14745599, lightgoldenrodyellow: 16448210, lightgray: 13882323, lightgreen: 9498256, lightgrey: 13882323, lightpink: 16758465, lightsalmon: 16752762, lightseagreen: 2142890, lightskyblue: 8900346, lightslategray: 7833753, lightslategrey: 7833753, lightsteelblue: 11584734, lightyellow: 16777184, lime: 65280, limegreen: 3329330, linen: 16445670, magenta: 16711935, maroon: 8388608, mediumaquamarine: 6737322, mediumblue: 205, mediumorchid: 12211667, mediumpurple: 9662683, mediumseagreen: 3978097, mediumslateblue: 8087790, mediumspringgreen: 64154, mediumturquoise: 4772300, mediumvioletred: 13047173, midnightblue: 1644912, mintcream: 16121850, mistyrose: 16770273, moccasin: 16770229, navajowhite: 16768685, navy: 128, oldlace: 16643558, olive: 8421376, olivedrab: 7048739, orange: 16753920, orangered: 16729344, orchid: 14315734, palegoldenrod: 15657130, palegreen: 10025880, paleturquoise: 11529966, palevioletred: 14381203, papayawhip: 16773077, peachpuff: 16767673, peru: 13468991, pink: 16761035, plum: 14524637, powderblue: 11591910, purple: 8388736, rebeccapurple: 6697881, red: 16711680, rosybrown: 12357519, royalblue: 4286945, saddlebrown: 9127187, salmon: 16416882, sandybrown: 16032864, seagreen: 3050327, seashell: 16774638, sienna: 10506797, silver: 12632256, skyblue: 8900331, slateblue: 6970061, slategray: 7372944, slategrey: 7372944, snow: 16775930, springgreen: 65407, steelblue: 4620980, tan: 13808780, teal: 32896, thistle: 14204888, tomato: 16737095, turquoise: 4251856, violet: 15631086, wheat: 16113331, white: 16777215, whitesmoke: 16119285, yellow: 16776960, yellowgreen: 10145074 };
      function Ub() {
        return this.rgb().formatHex();
      }
      function cf() {
        return _b(this).formatHsl();
      }
      function Vb() {
        return this.rgb().formatRgb();
      }
      function S(r2) {
        var a2;
        return r2 = (r2 + "").trim().toLowerCase(), (a2 = We.exec(r2)) ? new g((a2 = parseInt(a2[1], 16)) >> 8 & 15 | a2 >> 4 & 240, a2 >> 4 & 15 | 240 & a2, (15 & a2) << 4 | 15 & a2, 1) : (a2 = Xe.exec(r2)) ? Wb(parseInt(a2[1], 16)) : (a2 = Ye.exec(r2)) ? new g(a2[1], a2[2], a2[3], 1) : (a2 = Ze.exec(r2)) ? new g(255 * a2[1] / 100, 255 * a2[2] / 100, 255 * a2[3] / 100, 1) : (a2 = $e.exec(r2)) ? Xb(a2[1], a2[2], a2[3], a2[4]) : (a2 = _e.exec(r2)) ? Xb(255 * a2[1] / 100, 255 * a2[2] / 100, 255 * a2[3] / 100, a2[4]) : (a2 = af.exec(r2)) ? $b(a2[1], a2[2] / 100, a2[3] / 100, 1) : (a2 = bf.exec(r2)) ? $b(a2[1], a2[2] / 100, a2[3] / 100, a2[4]) : Tb.hasOwnProperty(r2) ? Wb(Tb[r2]) : "transparent" === r2 ? new g(NaN, NaN, NaN, 0) : null;
      }
      function Wb(r2) {
        return new g(r2 >> 16 & 255, r2 >> 8 & 255, 255 & r2, 1);
      }
      function Xb(r2, a2, e2, $2) {
        return $2 <= 0 && (r2 = a2 = e2 = NaN), new g(r2, a2, e2, $2);
      }
      function Na(r2) {
        return r2 instanceof x || (r2 = S(r2)), r2 ? new g((r2 = r2.rgb()).r, r2.g, r2.b, r2.opacity) : new g();
      }
      function ma(r2, a2, e2, $2) {
        return 1 === arguments.length ? Na(r2) : new g(r2, a2, e2, null == $2 ? 1 : $2);
      }
      function g(r2, a2, e2, $2) {
        this.r = +r2, this.g = +a2, this.b = +e2, this.opacity = +$2;
      }
      function Yb() {
        return "#" + Oa(this.r) + Oa(this.g) + Oa(this.b);
      }
      function Zb() {
        var r2 = this.opacity;
        return (1 === (r2 = isNaN(r2) ? 1 : Math.max(0, Math.min(1, r2))) ? "rgb(" : "rgba(") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (1 === r2 ? ")" : ", " + r2 + ")");
      }
      function Oa(r2) {
        return ((r2 = Math.max(0, Math.min(255, Math.round(r2) || 0))) < 16 ? "0" : "") + r2.toString(16);
      }
      function $b(r2, a2, e2, $2) {
        return $2 <= 0 ? r2 = a2 = e2 = NaN : e2 <= 0 || e2 >= 1 ? r2 = a2 = NaN : a2 <= 0 && (r2 = NaN), new s(r2, a2, e2, $2);
      }
      function _b(r2) {
        if (r2 instanceof s)
          return new s(r2.h, r2.s, r2.l, r2.opacity);
        if (r2 instanceof x || (r2 = S(r2)), !r2)
          return new s();
        if (r2 instanceof s)
          return r2;
        var a2 = (r2 = r2.rgb()).r / 255, e2 = r2.g / 255, $2 = r2.b / 255, t2 = Math.min(a2, e2, $2), o2 = Math.max(a2, e2, $2), n2 = NaN, i2 = o2 - t2, f2 = (o2 + t2) / 2;
        return i2 ? (n2 = a2 === o2 ? (e2 - $2) / i2 + 6 * (e2 < $2) : e2 === o2 ? ($2 - a2) / i2 + 2 : (a2 - e2) / i2 + 4, i2 /= f2 < 0.5 ? o2 + t2 : 2 - o2 - t2, n2 *= 60) : i2 = f2 > 0 && f2 < 1 ? 0 : n2, new s(n2, i2, f2, r2.opacity);
      }
      function Pa(r2, a2, e2, $2) {
        return 1 === arguments.length ? _b(r2) : new s(r2, a2, e2, null == $2 ? 1 : $2);
      }
      function s(r2, a2, e2, $2) {
        this.h = +r2, this.s = +a2, this.l = +e2, this.opacity = +$2;
      }
      function Qa(r2, a2, e2) {
        return 255 * (r2 < 60 ? a2 + (e2 - a2) * r2 / 60 : r2 < 180 ? e2 : r2 < 240 ? a2 + (e2 - a2) * (240 - r2) / 60 : a2);
      }
      G(x, S, { copy: function(r2) {
        return Object.assign(new this.constructor(), this, r2);
      }, displayable: function() {
        return this.rgb().displayable();
      }, hex: Ub, formatHex: Ub, formatHsl: cf, formatRgb: Vb, toString: Vb }), G(g, ma, P(x, { brighter: function(r2) {
        return r2 = null == r2 ? H : Math.pow(H, r2), new g(this.r * r2, this.g * r2, this.b * r2, this.opacity);
      }, darker: function(r2) {
        return r2 = null == r2 ? t : Math.pow(t, r2), new g(this.r * r2, this.g * r2, this.b * r2, this.opacity);
      }, rgb: function() {
        return this;
      }, displayable: function() {
        return -0.5 <= this.r && this.r < 255.5 && -0.5 <= this.g && this.g < 255.5 && -0.5 <= this.b && this.b < 255.5 && 0 <= this.opacity && this.opacity <= 1;
      }, hex: Yb, formatHex: Yb, formatRgb: Zb, toString: Zb })), G(s, Pa, P(x, { brighter: function(r2) {
        return r2 = null == r2 ? H : Math.pow(H, r2), new s(this.h, this.s, this.l * r2, this.opacity);
      }, darker: function(r2) {
        return r2 = null == r2 ? t : Math.pow(t, r2), new s(this.h, this.s, this.l * r2, this.opacity);
      }, rgb: function() {
        var r2 = this.h % 360 + 360 * (this.h < 0), a2 = isNaN(r2) || isNaN(this.s) ? 0 : this.s, e2 = this.l, $2 = e2 + (e2 < 0.5 ? e2 : 1 - e2) * a2, t2 = 2 * e2 - $2;
        return new g(Qa(r2 >= 240 ? r2 - 240 : r2 + 120, t2, $2), Qa(r2, t2, $2), Qa(r2 < 120 ? r2 + 240 : r2 - 120, t2, $2), this.opacity);
      }, displayable: function() {
        return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && 0 <= this.l && this.l <= 1 && 0 <= this.opacity && this.opacity <= 1;
      }, formatHsl: function() {
        var r2 = this.opacity;
        return (1 === (r2 = isNaN(r2) ? 1 : Math.max(0, Math.min(1, r2))) ? "hsl(" : "hsla(") + (this.h || 0) + ", " + 100 * (this.s || 0) + "%, " + 100 * (this.l || 0) + "%" + (1 === r2 ? ")" : ", " + r2 + ")");
      } }));
      var ac = Math.PI / 180;
      var bc = 180 / Math.PI;
      var na = 18, cc = 0.96422, dc = 1, ec = 0.82521, fc = 4 / 29, J = 6 / 29, gc = 3 * J * J, df = J * J * J;
      function hc($2) {
        if ($2 instanceof i)
          return new i($2.l, $2.a, $2.b, $2.opacity);
        if ($2 instanceof n)
          return ic($2);
        $2 instanceof g || ($2 = Na($2));
        var r2, t2, v2 = Ua($2.r), a2 = Ua($2.g), f2 = Ua($2.b), e2 = Ra((0.2225045 * v2 + 0.7168786 * a2 + 0.0606169 * f2) / dc);
        return v2 === a2 && a2 === f2 ? r2 = t2 = e2 : (r2 = Ra((0.4360747 * v2 + 0.3850649 * a2 + 0.1430804 * f2) / cc), t2 = Ra((0.0139322 * v2 + 0.0971045 * a2 + 0.7141733 * f2) / ec)), new i(116 * e2 - 16, 500 * (r2 - e2), 200 * (e2 - t2), $2.opacity);
      }
      function ef($2, r2, t2, v2) {
        return 1 === arguments.length ? hc($2) : new i($2, r2, t2, null == v2 ? 1 : v2);
      }
      function i($2, r2, t2, v2) {
        this.l = +$2, this.a = +r2, this.b = +t2, this.opacity = +v2;
      }
      function Ra($2) {
        return $2 > df ? Math.pow($2, 1 / 3) : $2 / gc + fc;
      }
      function Sa($2) {
        return $2 > J ? $2 * $2 * $2 : gc * ($2 - fc);
      }
      function Ta($2) {
        return 255 * ($2 <= 31308e-7 ? 12.92 * $2 : 1.055 * Math.pow($2, 1 / 2.4) - 0.055);
      }
      function Ua($2) {
        return ($2 /= 255) <= 0.04045 ? $2 / 12.92 : Math.pow(($2 + 0.055) / 1.055, 2.4);
      }
      function ff($2) {
        if ($2 instanceof n)
          return new n($2.h, $2.c, $2.l, $2.opacity);
        if ($2 instanceof i || ($2 = hc($2)), 0 === $2.a && 0 === $2.b)
          return new n(NaN, 0 < $2.l && $2.l < 100 ? 0 : NaN, $2.l, $2.opacity);
        var r2 = Math.atan2($2.b, $2.a) * bc;
        return new n(r2 < 0 ? r2 + 360 : r2, Math.sqrt($2.a * $2.a + $2.b * $2.b), $2.l, $2.opacity);
      }
      function Va($2, r2, t2, v2) {
        return 1 === arguments.length ? ff($2) : new n($2, r2, t2, null == v2 ? 1 : v2);
      }
      function n($2, r2, t2, v2) {
        this.h = +$2, this.c = +r2, this.l = +t2, this.opacity = +v2;
      }
      function ic($2) {
        if (isNaN($2.h))
          return new i($2.l, 0, 0, $2.opacity);
        var r2 = $2.h * ac;
        return new i($2.l, Math.cos(r2) * $2.c, Math.sin(r2) * $2.c, $2.opacity);
      }
      G(i, ef, P(x, { brighter: function($2) {
        return new i(this.l + na * (null == $2 ? 1 : $2), this.a, this.b, this.opacity);
      }, darker: function($2) {
        return new i(this.l - na * (null == $2 ? 1 : $2), this.a, this.b, this.opacity);
      }, rgb: function() {
        var $2 = (this.l + 16) / 116, r2 = isNaN(this.a) ? $2 : $2 + this.a / 500, t2 = isNaN(this.b) ? $2 : $2 - this.b / 200;
        return r2 = cc * Sa(r2), $2 = dc * Sa($2), t2 = ec * Sa(t2), new g(Ta(3.1338561 * r2 - 1.6168667 * $2 - 0.4906146 * t2), Ta(-0.9787684 * r2 + 1.9161415 * $2 + 0.033454 * t2), Ta(0.0719453 * r2 - 0.2289914 * $2 + 1.4052427 * t2), this.opacity);
      } })), G(n, Va, P(x, { brighter: function($2) {
        return new n(this.h, this.c, this.l + na * (null == $2 ? 1 : $2), this.opacity);
      }, darker: function($2) {
        return new n(this.h, this.c, this.l - na * (null == $2 ? 1 : $2), this.opacity);
      }, rgb: function() {
        return ic(this).rgb();
      } }));
      var jc = -0.14861, Wa = 1.78277, Xa = -0.29227, oa = -0.90649, T = 1.97294, kc = T * oa, lc = T * Wa, mc = Wa * Xa - oa * jc;
      function gf($2) {
        if ($2 instanceof B)
          return new B($2.h, $2.s, $2.l, $2.opacity);
        $2 instanceof g || ($2 = Na($2));
        var r2 = $2.r / 255, t2 = $2.g / 255, e2 = $2.b / 255, C2 = (mc * e2 + kc * r2 - lc * t2) / (mc + kc - lc), a2 = e2 - C2, M2 = (T * (t2 - C2) - Xa * a2) / oa, i2 = Math.sqrt(M2 * M2 + a2 * a2) / (T * C2 * (1 - C2)), X2 = i2 ? Math.atan2(M2, a2) * bc - 120 : NaN;
        return new B(X2 < 0 ? X2 + 360 : X2, i2, C2, $2.opacity);
      }
      function Ya($2, r2, t2, e2) {
        return 1 === arguments.length ? gf($2) : new B($2, r2, t2, null == e2 ? 1 : e2);
      }
      function B($2, r2, t2, e2) {
        this.h = +$2, this.s = +r2, this.l = +t2, this.opacity = +e2;
      }
      G(B, Ya, P(x, { brighter: function($2) {
        return $2 = null == $2 ? H : Math.pow(H, $2), new B(this.h, this.s, this.l * $2, this.opacity);
      }, darker: function($2) {
        return $2 = null == $2 ? t : Math.pow(t, $2), new B(this.h, this.s, this.l * $2, this.opacity);
      }, rgb: function() {
        var $2 = isNaN(this.h) ? 0 : (this.h + 120) * ac, r2 = +this.l, t2 = isNaN(this.s) ? 0 : this.s * r2 * (1 - r2), e2 = Math.cos($2), C2 = Math.sin($2);
        return new g(255 * (r2 + t2 * (jc * e2 + Wa * C2)), 255 * (r2 + t2 * (Xa * e2 + oa * C2)), 255 * (r2 + t2 * (T * e2)), this.opacity);
      } }));
      function nc($2, r2, t2, e2, a2) {
        var l2 = $2 * $2, o2 = l2 * $2;
        return ((1 - 3 * $2 + 3 * l2 - o2) * r2 + (4 - 6 * l2 + 3 * o2) * t2 + (1 + 3 * $2 + 3 * l2 - 3 * o2) * e2 + o2 * a2) / 6;
      }
      var hf = function($2) {
        var r2 = $2.length - 1;
        return function(t2) {
          var e2 = t2 <= 0 ? t2 = 0 : t2 >= 1 ? (t2 = 1, r2 - 1) : Math.floor(t2 * r2), a2 = $2[e2], l2 = $2[e2 + 1], o2 = e2 > 0 ? $2[e2 - 1] : 2 * a2 - l2, s2 = e2 < r2 - 1 ? $2[e2 + 2] : 2 * l2 - a2;
          return nc((t2 - e2 / r2) * r2, o2, a2, l2, s2);
        };
      };
      var jf = function(r2) {
        var $2 = r2.length;
        return function(t2) {
          var e2 = Math.floor(((t2 %= 1) < 0 ? ++t2 : t2) * $2), n2 = r2[(e2 + $2 - 1) % $2], a2 = r2[e2 % $2], o2 = r2[(e2 + 1) % $2], h2 = r2[(e2 + 2) % $2];
          return nc((t2 - e2 / $2) * $2, n2, a2, o2, h2);
        };
      };
      function oc($2, t2) {
        return function(r2) {
          return $2 + r2 * t2;
        };
      }
      function kf($2, t2, r2) {
        return $2 = Math.pow($2, r2), t2 = Math.pow(t2, r2) - $2, r2 = 1 / r2, function(n2) {
          return Math.pow($2 + n2 * t2, r2);
        };
      }
      function Za($2, t2) {
        var r2 = t2 - $2;
        return r2 ? oc($2, r2 > 180 || r2 < -180 ? r2 - 360 * Math.round(r2 / 360) : r2) : pa(isNaN($2) ? t2 : $2);
      }
      function lf($2) {
        return 1 == ($2 = +$2) ? j : function(t2, r2) {
          return r2 - t2 ? kf(t2, r2, $2) : pa(isNaN(t2) ? r2 : t2);
        };
      }
      function j($2, t2) {
        var r2 = t2 - $2;
        return r2 ? oc($2, r2) : pa(isNaN($2) ? t2 : $2);
      }
      var pa = function(t2) {
        return function() {
          return t2;
        };
      };
      var pc = function r2($2) {
        var o2 = lf($2);
        function e2(r3, $3) {
          var e3 = o2((r3 = ma(r3)).r, ($3 = ma($3)).r), a2 = o2(r3.g, $3.g), t2 = o2(r3.b, $3.b), i2 = j(r3.opacity, $3.opacity);
          return function($4) {
            return r3.r = e3($4), r3.g = a2($4), r3.b = t2($4), r3.opacity = i2($4), r3 + "";
          };
        }
        return e2.gamma = r2, e2;
      }(1);
      function qc(r2) {
        return function($2) {
          var o2, e2, a2 = $2.length, t2 = new Array(a2), i2 = new Array(a2), v2 = new Array(a2);
          for (o2 = 0; o2 < a2; ++o2)
            e2 = ma($2[o2]), t2[o2] = e2.r || 0, i2[o2] = e2.g || 0, v2[o2] = e2.b || 0;
          return t2 = r2(t2), i2 = r2(i2), v2 = r2(v2), e2.opacity = 1, function(r3) {
            return e2.r = t2(r3), e2.g = i2(r3), e2.b = v2(r3), e2 + "";
          };
        };
      }
      var di = qc(hf);
      var ei = qc(jf);
      var mf = function(r2, e2) {
        var t2, $2 = e2 ? e2.length : 0, a2 = r2 ? Math.min($2, r2.length) : 0, n2 = new Array(a2), o2 = new Array($2);
        for (t2 = 0; t2 < a2; ++t2)
          n2[t2] = ab(r2[t2], e2[t2]);
        for (; t2 < $2; ++t2)
          o2[t2] = e2[t2];
        return function(r3) {
          for (t2 = 0; t2 < a2; ++t2)
            o2[t2] = n2[t2](r3);
          return o2;
        };
      };
      var nf = function(e2, t2) {
        var r2 = new Date();
        return t2 -= e2 = +e2, function($2) {
          return r2.setTime(e2 + t2 * $2), r2;
        };
      };
      var v = function(t2, $2) {
        return $2 -= t2 = +t2, function(e2) {
          return t2 + $2 * e2;
        };
      };
      var of = function(e2, r2) {
        var t2, $2 = {}, i2 = {};
        for (t2 in null !== e2 && "object" == typeof e2 || (e2 = {}), null !== r2 && "object" == typeof r2 || (r2 = {}), r2)
          t2 in e2 ? $2[t2] = ab(e2[t2], r2[t2]) : i2[t2] = r2[t2];
        return function(e3) {
          for (t2 in $2)
            i2[t2] = $2[t2](e3);
          return i2;
        };
      };
      var $a = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g, _a = new RegExp($a.source, "g");
      function pf(r2) {
        return function() {
          return r2;
        };
      }
      function qf(r2) {
        return function($2) {
          return r2($2) + "";
        };
      }
      var rf = function(r2, $2) {
        var n2, e2, t2, a2 = $a.lastIndex = _a.lastIndex = 0, u2 = -1, E2 = [], o2 = [];
        for (r2 += "", $2 += ""; (n2 = $a.exec(r2)) && (e2 = _a.exec($2)); )
          (t2 = e2.index) > a2 && (t2 = $2.slice(a2, t2), E2[u2] ? E2[u2] += t2 : E2[++u2] = t2), (n2 = n2[0]) === (e2 = e2[0]) ? E2[u2] ? E2[u2] += e2 : E2[++u2] = e2 : (E2[++u2] = null, o2.push({ i: u2, x: v(n2, e2) })), a2 = _a.lastIndex;
        return a2 < $2.length && (t2 = $2.slice(a2), E2[u2] ? E2[u2] += t2 : E2[++u2] = t2), E2.length < 2 ? o2[0] ? qf(o2[0].x) : pf($2) : ($2 = o2.length, function(r3) {
          for (var n3, e3 = 0; e3 < $2; ++e3)
            E2[(n3 = o2[e3]).i] = n3.x(r3);
          return E2.join("");
        });
      };
      var ab = function(r2, $2) {
        var e2, c2 = typeof $2;
        return null == $2 || "boolean" === c2 ? pa($2) : ("number" === c2 ? v : "string" === c2 ? (e2 = S($2)) ? ($2 = e2, pc) : rf : $2 instanceof S ? pc : $2 instanceof Date ? nf : Array.isArray($2) ? mf : "function" != typeof $2.valueOf && "function" != typeof $2.toString || isNaN($2) ? of : v)(r2, $2);
      };
      var sf = function(t2, n2) {
        return n2 -= t2 = +t2, function(r2) {
          return Math.round(t2 + n2 * r2);
        };
      };
      function rc(r2, e2, t2, l2) {
        function n2(r3) {
          return r3.length ? r3.pop() + " " : "";
        }
        return function(a2, $2) {
          var s2 = [], o2 = [];
          return a2 = r2(a2), $2 = r2($2), function(r3, l3, n3, a3, $3, s3) {
            if (r3 !== n3 || l3 !== a3) {
              var o3 = $3.push("translate(", null, e2, null, t2);
              s3.push({ i: o3 - 4, x: v(r3, n3) }, { i: o3 - 2, x: v(l3, a3) });
            } else
              (n3 || a3) && $3.push("translate(" + n3 + e2 + a3 + t2);
          }(a2.translateX, a2.translateY, $2.translateX, $2.translateY, s2, o2), function(r3, e3, t3, a3) {
            r3 !== e3 ? (r3 - e3 > 180 ? e3 += 360 : e3 - r3 > 180 && (r3 += 360), a3.push({ i: t3.push(n2(t3) + "rotate(", null, l2) - 2, x: v(r3, e3) })) : e3 && t3.push(n2(t3) + "rotate(" + e3 + l2);
          }(a2.rotate, $2.rotate, s2, o2), function(r3, e3, t3, a3) {
            r3 !== e3 ? a3.push({ i: t3.push(n2(t3) + "skewX(", null, l2) - 2, x: v(r3, e3) }) : e3 && t3.push(n2(t3) + "skewX(" + e3 + l2);
          }(a2.skewX, $2.skewX, s2, o2), function(r3, e3, t3, l3, a3, $3) {
            if (r3 !== t3 || e3 !== l3) {
              var s3 = a3.push(n2(a3) + "scale(", null, ",", null, ")");
              $3.push({ i: s3 - 4, x: v(r3, t3) }, { i: s3 - 2, x: v(e3, l3) });
            } else
              1 === t3 && 1 === l3 || a3.push(n2(a3) + "scale(" + t3 + "," + l3 + ")");
          }(a2.scaleX, a2.scaleY, $2.scaleX, $2.scaleY, s2, o2), a2 = $2 = null, function(r3) {
            for (var e3, t3 = -1, l3 = o2.length; ++t3 < l3; )
              s2[(e3 = o2[t3]).i] = e3.x(r3);
            return s2.join("");
          };
        };
      }
      var qa, sc, tf, bb;
      function uf($2) {
        return "none" === $2 ? cb : (qa || (qa = document.createElement("DIV"), sc = document.documentElement, tf = document.defaultView), qa.style.transform = $2, $2 = tf.getComputedStyle(sc.appendChild(qa), null).getPropertyValue("transform"), sc.removeChild(qa), $2 = $2.slice(7, -1).split(","), uc(+$2[0], +$2[1], +$2[2], +$2[3], +$2[4], +$2[5]));
      }
      function vf($2) {
        return null == $2 ? cb : (bb || (bb = document.createElementNS("http://www.w3.org/2000/svg", "g")), bb.setAttribute("transform", $2), ($2 = bb.transform.baseVal.consolidate()) ? ($2 = $2.matrix, uc($2.a, $2.b, $2.c, $2.d, $2.e, $2.f)) : cb);
      }
      var tc = 180 / Math.PI, cb = { translateX: 0, translateY: 0, rotate: 0, skewX: 0, scaleX: 1, scaleY: 1 };
      var uc = function(t2, e2, a2, $2, r2, s2) {
        var X2, n2, w2;
        return (X2 = Math.sqrt(t2 * t2 + e2 * e2)) && (t2 /= X2, e2 /= X2), (w2 = t2 * a2 + e2 * $2) && (a2 -= t2 * w2, $2 -= e2 * w2), (n2 = Math.sqrt(a2 * a2 + $2 * $2)) && (a2 /= n2, $2 /= n2, w2 /= n2), t2 * $2 < e2 * a2 && (t2 = -t2, e2 = -e2, w2 = -w2, X2 = -X2), { translateX: r2, translateY: s2, rotate: Math.atan2(e2, t2) * tc, skewX: Math.atan(w2) * tc, scaleX: X2, scaleY: n2 };
      };
      var fi = rc(uf, "px, ", "px)", "deg)");
      var gi = rc(vf, ", ", ")", ")");
      var hi = Math.SQRT2;
      function vc($2) {
        return function(r2, e2) {
          var o2 = $2((r2 = Pa(r2)).h, (e2 = Pa(e2)).h), t2 = j(r2.s, e2.s), l2 = j(r2.l, e2.l), d2 = j(r2.opacity, e2.opacity);
          return function($3) {
            return r2.h = o2($3), r2.s = t2($3), r2.l = l2($3), r2.opacity = d2($3), r2 + "";
          };
        };
      }
      var ii = vc(Za);
      var ji = vc(j);
      function wc($2) {
        return function(r2, o2) {
          var c2 = $2((r2 = Va(r2)).h, (o2 = Va(o2)).h), t2 = j(r2.c, o2.c), x2 = j(r2.l, o2.l), l2 = j(r2.opacity, o2.opacity);
          return function($3) {
            return r2.h = c2($3), r2.c = t2($3), r2.l = x2($3), r2.opacity = l2($3), r2 + "";
          };
        };
      }
      var ki = wc(Za);
      var li = wc(j);
      function xc($2) {
        return function r2(o2) {
          function V2(r3, V3) {
            var e2 = $2((r3 = Ya(r3)).h, (V3 = Ya(V3)).h), t2 = j(r3.s, V3.s), i2 = j(r3.l, V3.l), l2 = j(r3.opacity, V3.opacity);
            return function($3) {
              return r3.h = e2($3), r3.s = t2($3), r3.l = i2(Math.pow($3, o2)), r3.opacity = l2($3), r3 + "";
            };
          }
          return o2 = +o2, V2.gamma = r2, V2;
        }(1);
      }
      var mi = xc(Za);
      var ni = xc(j);
      var wf = function(t2) {
        return function() {
          return t2;
        };
      };
      var xf = function($2) {
        return +$2;
      };
      var yc = [0, 1];
      function z(r2) {
        return r2;
      }
      function db(r2, n2) {
        return (n2 -= r2 = +r2) ? function(t2) {
          return (t2 - r2) / n2;
        } : wf(isNaN(n2) ? NaN : 0.5);
      }
      function zc(r2) {
        var n2, t2 = r2[0], e2 = r2[r2.length - 1];
        return t2 > e2 && (n2 = t2, t2 = e2, e2 = n2), function(r3) {
          return Math.max(t2, Math.min(e2, r3));
        };
      }
      function yf(r2, n2, t2) {
        var e2 = r2[0], $2 = r2[1], a2 = n2[0], o2 = n2[1];
        return $2 < e2 ? (e2 = db($2, e2), a2 = t2(o2, a2)) : (e2 = db(e2, $2), a2 = t2(a2, o2)), function(r3) {
          return a2(e2(r3));
        };
      }
      function zf(r2, n2, t2) {
        var e2 = Math.min(r2.length, n2.length) - 1, $2 = new Array(e2), a2 = new Array(e2), o2 = -1;
        for (r2[e2] < r2[0] && (r2 = r2.slice().reverse(), n2 = n2.slice().reverse()); ++o2 < e2; )
          $2[o2] = db(r2[o2], r2[o2 + 1]), a2[o2] = t2(n2[o2], n2[o2 + 1]);
        return function(n3) {
          var t3 = Se(r2, n3, 1, e2) - 1;
          return a2[t3]($2[t3](n3));
        };
      }
      function Ac(r2, n2) {
        return n2.domain(r2.domain()).range(r2.range()).interpolate(r2.interpolate()).clamp(r2.clamp()).unknown(r2.unknown());
      }
      function Af() {
        var r2, n2, t2, e2, $2, a2, o2 = yc, i2 = yc, u2 = ab, p2 = z;
        function l2() {
          return e2 = Math.min(o2.length, i2.length) > 2 ? zf : yf, $2 = a2 = null, c2;
        }
        function c2(n3) {
          return isNaN(n3 = +n3) ? t2 : ($2 || ($2 = e2(o2.map(r2), i2, u2)))(r2(p2(n3)));
        }
        return c2.invert = function(t3) {
          return p2(n2((a2 || (a2 = e2(i2, o2.map(r2), v)))(t3)));
        }, c2.domain = function(r3) {
          return arguments.length ? (o2 = Array.from(r3, xf), p2 === z || (p2 = zc(o2)), l2()) : o2.slice();
        }, c2.range = function(r3) {
          return arguments.length ? (i2 = Array.from(r3), l2()) : i2.slice();
        }, c2.rangeRound = function(r3) {
          return i2 = Array.from(r3), u2 = sf, l2();
        }, c2.clamp = function(r3) {
          return arguments.length ? (p2 = r3 ? zc(o2) : z, c2) : p2 !== z;
        }, c2.interpolate = function(r3) {
          return arguments.length ? (u2 = r3, l2()) : u2;
        }, c2.unknown = function(r3) {
          return arguments.length ? (t2 = r3, c2) : t2;
        }, function(t3, e3) {
          return r2 = t3, n2 = e3, l2();
        };
      }
      function Bc(r2, n2) {
        return Af()(r2, n2);
      }
      var eb, Bf, Cf;
      function Df($2) {
        return eb = Kf($2), Bf = eb.format, Cf = eb.formatPrefix, eb;
      }
      var ra = function(e2, t2) {
        if ((l2 = (e2 = t2 ? e2.toExponential(t2 - 1) : e2.toExponential()).indexOf("e")) < 0)
          return null;
        var l2, n2 = e2.slice(0, l2);
        return [n2.length > 1 ? n2[0] + n2.slice(2) : n2, +e2.slice(l2 + 1)];
      };
      var K = function(t2) {
        return (t2 = ra(Math.abs(t2))) ? t2[1] : NaN;
      };
      var Ef = function(r2, t2) {
        return function(e2, n2) {
          for (var $2 = e2.length, u2 = [], o2 = 0, a2 = r2[0], f2 = 0; $2 > 0 && a2 > 0 && (f2 + a2 + 1 > n2 && (a2 = Math.max(1, n2 - f2)), u2.push(e2.substring($2 -= a2, $2 + a2)), !((f2 += a2 + 1) > n2)); )
            a2 = r2[o2 = (o2 + 1) % r2.length];
          return u2.reverse().join(t2);
        };
      };
      var Ff = function(t2) {
        return function(e2) {
          return e2.replace(/[0-9]/g, function(e3) {
            return t2[+e3];
          });
        };
      };
      var Gf = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
      function sa(i2) {
        return new fb(i2);
      }
      function fb(i2) {
        if (!(t2 = Gf.exec(i2)))
          throw new Error("invalid format: " + i2);
        var t2;
        this.fill = t2[1] || " ", this.align = t2[2] || ">", this.sign = t2[3] || "-", this.symbol = t2[4] || "", this.zero = !!t2[5], this.width = t2[6] && +t2[6], this.comma = !!t2[7], this.precision = t2[8] && +t2[8].slice(1), this.trim = !!t2[9], this.type = t2[10] || "";
      }
      sa.prototype = fb.prototype, fb.prototype.toString = function() {
        return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (null == this.width ? "" : Math.max(1, 0 | this.width)) + (this.comma ? "," : "") + (null == this.precision ? "" : "." + Math.max(0, 0 | this.precision)) + (this.trim ? "~" : "") + this.type;
      };
      var Hf = function(e2) {
        e:
          for (var r2, t2 = e2.length, a2 = 1, $2 = -1; a2 < t2; ++a2)
            switch (e2[a2]) {
              case ".":
                $2 = r2 = a2;
                break;
              case "0":
                0 === $2 && ($2 = a2), r2 = a2;
                break;
              default:
                if ($2 > 0) {
                  if (!+e2[a2])
                    break e;
                  $2 = 0;
                }
            }
        return $2 > 0 ? e2.slice(0, $2) + e2.slice(r2 + 1) : e2;
      };
      var If;
      var Jf = function(e2, p2) {
        var r2, a2 = ra(e2, p2);
        if (!a2)
          return e2 + "";
        var $2 = a2[0], t2 = a2[1], f2 = t2 - (r2 = If = 3 * Math.max(-8, Math.min(8, Math.floor(t2 / 3))), r2) + 1, o2 = $2.length;
        return f2 === o2 ? $2 : f2 > o2 ? $2 + new Array(f2 - o2 + 1).join("0") : f2 > 0 ? $2.slice(0, f2) + "." + $2.slice(f2) : "0." + new Array(1 - f2).join("0") + ra(e2, Math.max(0, p2 + f2 - 1))[0];
      };
      var Cc = function(r2, e2) {
        var t2 = ra(r2, e2);
        if (!t2)
          return r2 + "";
        var $2 = t2[0], a2 = t2[1];
        return a2 < 0 ? "0." + new Array(-a2).join("0") + $2 : $2.length > a2 + 1 ? $2.slice(0, a2 + 1) + "." + $2.slice(a2 + 1) : $2 + new Array(a2 - $2.length + 2).join("0");
      };
      var Dc = { "%": function(t2, r2) {
        return (100 * t2).toFixed(r2);
      }, b: function(t2) {
        return Math.round(t2).toString(2);
      }, c: function(t2) {
        return t2 + "";
      }, d: function(t2) {
        return Math.round(t2).toString(10);
      }, e: function(t2, r2) {
        return t2.toExponential(r2);
      }, f: function(t2, r2) {
        return t2.toFixed(r2);
      }, g: function(t2, r2) {
        return t2.toPrecision(r2);
      }, o: function(t2) {
        return Math.round(t2).toString(8);
      }, p: function(t2, r2) {
        return Cc(100 * t2, r2);
      }, r: Cc, s: Jf, X: function(t2) {
        return Math.round(t2).toString(16).toUpperCase();
      }, x: function(t2) {
        return Math.round(t2).toString(16);
      } };
      var Ec = function(t2) {
        return t2;
      };
      var Fc = ["y", "z", "a", "f", "p", "n", "\xB5", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"], Kf = function(r2) {
        var e2 = r2.grouping && r2.thousands ? Ef(r2.grouping, r2.thousands) : Ec, t2 = r2.currency, a2 = r2.decimal, m2 = r2.numerals ? Ff(r2.numerals) : Ec, $2 = r2.percent || "%";
        function i2(r3) {
          var i3 = (r3 = sa(r3)).fill, o2 = r3.align, n2 = r3.sign, p2 = r3.symbol, f2 = r3.zero, l2 = r3.width, s2 = r3.comma, u2 = r3.precision, M2 = r3.trim, c2 = r3.type;
          "n" === c2 ? (s2 = true, c2 = "g") : Dc[c2] || (null == u2 && (u2 = 12), M2 = true, c2 = "g"), (f2 || "0" === i3 && "=" === o2) && (f2 = true, i3 = "0", o2 = "=");
          var I2 = "$" === p2 ? t2[0] : "#" === p2 && /[boxX]/.test(c2) ? "0" + c2.toLowerCase() : "", V2 = "$" === p2 ? t2[1] : /[%p]/.test(c2) ? $2 : "", h2 = Dc[c2], g2 = /[defgprs%]/.test(c2);
          function x2(r4) {
            var t3, $3, p3, x3 = I2, d2 = V2;
            if ("c" === c2)
              d2 = h2(r4) + d2, r4 = "";
            else {
              var v2 = (r4 = +r4) < 0;
              if (r4 = h2(Math.abs(r4), u2), M2 && (r4 = Hf(r4)), v2 && 0 == +r4 && (v2 = false), x3 = (v2 ? "(" === n2 ? n2 : "-" : "-" === n2 || "(" === n2 ? "" : n2) + x3, d2 = ("s" === c2 ? Fc[8 + If / 3] : "") + d2 + (v2 && "(" === n2 ? ")" : ""), g2) {
                for (t3 = -1, $3 = r4.length; ++t3 < $3; )
                  if (48 > (p3 = r4.charCodeAt(t3)) || p3 > 57) {
                    d2 = (46 === p3 ? a2 + r4.slice(t3 + 1) : r4.slice(t3)) + d2, r4 = r4.slice(0, t3);
                    break;
                  }
              }
            }
            s2 && !f2 && (r4 = e2(r4, 1 / 0));
            var y2 = x3.length + r4.length + d2.length, q2 = y2 < l2 ? new Array(l2 - y2 + 1).join(i3) : "";
            switch (s2 && f2 && (r4 = e2(q2 + r4, q2.length ? l2 - d2.length : 1 / 0), q2 = ""), o2) {
              case "<":
                r4 = x3 + r4 + d2 + q2;
                break;
              case "=":
                r4 = x3 + q2 + r4 + d2;
                break;
              case "^":
                r4 = q2.slice(0, y2 = q2.length >> 1) + x3 + r4 + d2 + q2.slice(y2);
                break;
              default:
                r4 = q2 + x3 + r4 + d2;
            }
            return m2(r4);
          }
          return u2 = null == u2 ? 6 : /[gprs]/.test(c2) ? Math.max(1, Math.min(21, u2)) : Math.max(0, Math.min(20, u2)), x2.toString = function() {
            return r3 + "";
          }, x2;
        }
        return { format: i2, formatPrefix: function(r3, e3) {
          var t3 = i2(((r3 = sa(r3)).type = "f", r3)), a3 = 3 * Math.max(-8, Math.min(8, Math.floor(K(e3) / 3))), m3 = Math.pow(10, -a3), $3 = Fc[8 + a3 / 3];
          return function(r4) {
            return t3(m3 * r4) + $3;
          };
        } };
      };
      Df({ decimal: ".", thousands: ",", grouping: [3], currency: ["$", ""] });
      var Lf = function(e2) {
        return Math.max(0, -K(Math.abs(e2)));
      };
      var Mf = function(t2, $2) {
        return Math.max(0, 3 * Math.max(-8, Math.min(8, Math.floor(K($2) / 3))) - K(Math.abs(t2)));
      };
      var Nf = function($2, e2) {
        return $2 = Math.abs($2), e2 = Math.abs(e2) - $2, Math.max(0, K(e2) - K($2)) + 1;
      };
      var Of = function(a2, r2, e2, i2) {
        var $2, t2 = Ma(a2, r2, e2);
        switch ((i2 = sa(null == i2 ? ",f" : i2)).type) {
          case "s":
            var p2 = Math.max(Math.abs(a2), Math.abs(r2));
            return null != i2.precision || isNaN($2 = Mf(t2, p2)) || (i2.precision = $2), Cf(i2, p2);
          case "":
          case "e":
          case "g":
          case "p":
          case "r":
            null != i2.precision || isNaN($2 = Nf(t2, Math.max(Math.abs(a2), Math.abs(r2)))) || (i2.precision = $2 - ("e" === i2.type));
            break;
          case "f":
          case "%":
            null != i2.precision || isNaN($2 = Lf(t2)) || (i2.precision = $2 - 2 * ("%" === i2.type));
        }
        return Bf(i2);
      };
      var gb = Array.prototype.slice;
      var Pf = function(x2) {
        return x2;
      };
      var hb = 1, ib = 2, jb = 3, Y = 4, Gc = 1e-6;
      function Qf(t2) {
        return "translate(" + (t2 + 0.5) + ",0)";
      }
      function Rf(t2) {
        return "translate(0," + (t2 + 0.5) + ")";
      }
      function Sf(t2) {
        return function(r2) {
          return +t2(r2);
        };
      }
      function Tf(t2) {
        var r2 = Math.max(0, t2.bandwidth() - 1) / 2;
        return t2.round() && (r2 = Math.round(r2)), function($2) {
          return +t2($2) + r2;
        };
      }
      function Uf() {
        return !this.__axis;
      }
      function Hc(t2, r2) {
        var $2 = [], n2 = null, e2 = null, a2 = 6, i2 = 6, c2 = 3, o2 = t2 === hb || t2 === Y ? -1 : 1, l2 = t2 === Y || t2 === ib ? "x" : "y", s2 = t2 === hb || t2 === jb ? Qf : Rf;
        function u2(u3) {
          var M2 = null == n2 ? r2.ticks ? r2.ticks.apply(r2, $2) : r2.domain() : n2, F2 = null == e2 ? r2.tickFormat ? r2.tickFormat.apply(r2, $2) : Pf : e2, f2 = Math.max(a2, 0) + c2, p2 = r2.range(), v2 = +p2[0] + 0.5, x2 = +p2[p2.length - 1] + 0.5, m2 = (r2.bandwidth ? Tf : Sf)(r2.copy()), h2 = u3.selection ? u3.selection() : u3, g2 = h2.selectAll(".domain").data([null]), d2 = h2.selectAll(".tick").data(M2, r2).order(), k2 = d2.exit(), y2 = d2.enter().append("g").attr("class", "tick"), b2 = d2.select("line"), _2 = d2.select("text");
          g2 = g2.merge(g2.enter().insert("path", ".tick").attr("class", "domain").attr("stroke", "currentColor")), d2 = d2.merge(y2), b2 = b2.merge(y2.append("line").attr("stroke", "currentColor").attr(l2 + "2", o2 * a2)), _2 = _2.merge(y2.append("text").attr("fill", "currentColor").attr(l2, o2 * f2).attr("dy", t2 === hb ? "0em" : t2 === jb ? "0.71em" : "0.32em")), u3 !== h2 && (g2 = g2.transition(u3), d2 = d2.transition(u3), b2 = b2.transition(u3), _2 = _2.transition(u3), k2 = k2.transition(u3).attr("opacity", Gc).attr("transform", function(t3) {
            return isFinite(t3 = m2(t3)) ? s2(t3) : this.getAttribute("transform");
          }), y2.attr("opacity", Gc).attr("transform", function(t3) {
            var r3 = this.parentNode.__axis;
            return s2(r3 && isFinite(r3 = r3(t3)) ? r3 : m2(t3));
          })), k2.remove(), g2.attr("d", t2 === Y || t2 == ib ? i2 ? "M" + o2 * i2 + "," + v2 + "H0.5V" + x2 + "H" + o2 * i2 : "M0.5," + v2 + "V" + x2 : i2 ? "M" + v2 + "," + o2 * i2 + "V0.5H" + x2 + "V" + o2 * i2 : "M" + v2 + ",0.5H" + x2), d2.attr("opacity", 1).attr("transform", function(t3) {
            return s2(m2(t3));
          }), b2.attr(l2 + "2", o2 * a2), _2.attr(l2, o2 * f2).text(F2), h2.filter(Uf).attr("fill", "none").attr("font-size", 10).attr("font-family", "sans-serif").attr("text-anchor", t2 === ib ? "start" : t2 === Y ? "end" : "middle"), h2.each(function() {
            this.__axis = m2;
          });
        }
        return u2.scale = function(t3) {
          return arguments.length ? (r2 = t3, u2) : r2;
        }, u2.ticks = function() {
          return $2 = gb.call(arguments), u2;
        }, u2.tickArguments = function(t3) {
          return arguments.length ? ($2 = null == t3 ? [] : gb.call(t3), u2) : $2.slice();
        }, u2.tickValues = function(t3) {
          return arguments.length ? (n2 = null == t3 ? null : gb.call(t3), u2) : n2 && n2.slice();
        }, u2.tickFormat = function(t3) {
          return arguments.length ? (e2 = t3, u2) : e2;
        }, u2.tickSize = function(t3) {
          return arguments.length ? (a2 = i2 = +t3, u2) : a2;
        }, u2.tickSizeInner = function(t3) {
          return arguments.length ? (a2 = +t3, u2) : a2;
        }, u2.tickSizeOuter = function(t3) {
          return arguments.length ? (i2 = +t3, u2) : i2;
        }, u2.tickPadding = function(t3) {
          return arguments.length ? (c2 = +t3, u2) : c2;
        }, u2;
      }
      function Vf(t2) {
        return Hc(jb, t2);
      }
      function Wf(t2) {
        return Hc(Y, t2);
      }
      const Xf = (t2, { yScale: l2, tickCount: e2, fontFamily: i2, unxkcdify: s2, stroke: a2 }) => {
        t2.append("g").call(Wf(l2).tickSize(1).tickPadding(10).ticks(e2, "s")), t2.selectAll(".domain").attr("filter", s2 ? null : "url(#xkcdify)").style("stroke", a2), t2.selectAll(".tick > text").style("font-family", i2).style("font-size", "16").style("fill", a2);
      }, Yf = (t2, { xScale: l2, tickCount: e2, moveDown: i2, fontFamily: s2, unxkcdify: a2, stroke: $2 }) => {
        t2.append("g").attr("transform", `translate(0,${i2})`).call(Vf(l2).tickSize(0).tickPadding(6).ticks(e2)), t2.selectAll(".domain").attr("filter", a2 ? null : "url(#xkcdify)").style("stroke", $2), t2.selectAll(".tick > text").style("font-family", s2).style("font-size", "16").style("fill", $2);
      };
      var y = { xAxis: Yf, yAxis: Xf };
      const Zf = (t2, e2, a2) => {
        t2.append("text").style("font-size", "20").style("font-weight", "bold").style("fill", a2).attr("x", "50%").attr("y", 30).attr("text-anchor", "middle").text(e2);
      }, $f = (t2, e2, a2) => {
        t2.append("text").style("font-size", 17).style("fill", a2).attr("x", "50%").attr("y", t2.attr("height") - 10).attr("text-anchor", "middle").text(e2);
      }, _f = (t2, e2, a2) => {
        t2.append("text").attr("text-anchor", "end").attr("dy", ".75em").attr("transform", "rotate(-90)").style("font-size", 17).style("fill", a2).text(e2).attr("y", 6).call((e3) => {
          const a3 = e3.node().getComputedTextLength();
          e3.attr("x", 0 - t2.attr("height") / 2 + a3 / 2);
        });
      };
      var k = { title: Zf, xLabel: $f, yLabel: _f };
      const b = { positionType: { upLeft: 1, upRight: 2, downLeft: 3, downRight: 4 } };
      class L {
        constructor({ parent: t2, title: i2, items: e2, position: s2, unxkcdify: r2, backgroundColor: o2, strokeColor: h2 }) {
          this.title = i2, this.items = e2, this.position = s2, this.filter = r2 ? null : "url(#xkcdify)", this.backgroundColor = o2, this.strokeColor = h2, this.svg = t2.append("svg").attr("x", this._getUpLeftX()).attr("y", this._getUpLeftY()).style("visibility", "hidden"), this.tipBackground = this.svg.append("rect").style("fill", this.backgroundColor).attr("fill-opacity", 0.9).attr("stroke", h2).attr("stroke-width", 2).attr("rx", 5).attr("ry", 5).attr("filter", this.filter).attr("width", this._getBackgroundWidth()).attr("height", this._getBackgroundHeight()).attr("x", 5).attr("y", 5), this.tipTitle = this.svg.append("text").style("font-size", 15).style("font-weight", "bold").style("fill", this.strokeColor).attr("x", 15).attr("y", 25).text(i2), this.tipItems = e2.map((t3, i3) => {
            return this._generateTipItem(t3, i3);
          });
        }
        show() {
          this.svg.style("visibility", "visible");
        }
        hide() {
          this.svg.style("visibility", "hidden");
        }
        update({ title: t2, items: i2, position: e2 }) {
          if (t2 && t2 !== this.title && (this.title = t2, this.tipTitle.text(t2)), i2 && JSON.stringify(i2) !== JSON.stringify(this.items)) {
            this.items = i2, this.tipItems.forEach((t4) => t4.svg.remove()), this.tipItems = this.items.map((t4, i3) => {
              return this._generateTipItem(t4, i3);
            });
            const t3 = Math.max(...this.tipItems.map((t4) => t4.width), this.tipTitle.node().getBBox().width);
            this.tipBackground.attr("width", t3 + 15).attr("height", this._getBackgroundHeight());
          }
          e2 && (this.position = e2, this.svg.attr("x", this._getUpLeftX()), this.svg.attr("y", this._getUpLeftY()));
        }
        _generateTipItem(t2, i2) {
          const e2 = this.svg.append("svg");
          e2.append("rect").style("fill", t2.color).attr("width", 8).attr("height", 8).attr("rx", 2).attr("ry", 2).attr("filter", this.filter).attr("x", 15).attr("y", 37 + 20 * i2), e2.append("text").style("font-size", "15").style("fill", this.strokeColor).attr("x", 27).attr("y", 37 + 20 * i2 + 8).text(t2.text);
          const s2 = e2.node().getBBox();
          return { svg: e2, width: s2.width + 15, height: s2.height + 10 };
        }
        _getBackgroundWidth() {
          const t2 = this.items.reduce((t3, i2) => t3 > i2.text.length ? t3 : i2.text.length, 0);
          return 7.4 * Math.max(t2, this.title.length) + 25;
        }
        _getBackgroundHeight() {
          return 20 * (this.items.length + 1) + 10;
        }
        _getUpLeftX() {
          return this.position.type === b.positionType.upRight || this.position.type === b.positionType.downRight ? this.position.x : this.position.x - this._getBackgroundWidth() - 20;
        }
        _getUpLeftY() {
          return this.position.type === b.positionType.downLeft || this.position.type === b.positionType.downRight ? this.position.y : this.position.y - this._getBackgroundHeight() - 20;
        }
      }
      function M(A2) {
        A2.append("defs").append("style").attr("type", "text/css").text(`@font-face {
      font-family: "xkcd";
      src: url(data:application/font-woff;charset=utf-8;base64,) format('woff');
    }`);
      }
      function N(t2) {
        t2.append("filter").attr("id", "xkcdify").attr("filterUnits", "userSpaceOnUse").attr("x", -5).attr("y", -5).attr("width", "100%").attr("height", "100%").call((t3) => t3.append("feTurbulence").attr("type", "fractalNoise").attr("baseFrequency", "0.05").attr("result", "noise")).call((t3) => t3.append("feDisplacementMap").attr("scale", "5").attr("xChannelSelector", "R").attr("yChannelSelector", "G").attr("in", "SourceGraphic").attr("in2", "noise")), t2.append("filter").attr("id", "xkcdify-pie").call((t3) => t3.append("feTurbulence").attr("type", "fractalNoise").attr("baseFrequency", "0.05").attr("result", "noise")).call((t3) => t3.append("feDisplacementMap").attr("scale", "5").attr("xChannelSelector", "R").attr("yChannelSelector", "G").attr("in", "SourceGraphic").attr("in2", "noise"));
      }
      var O = ["#dd4528", "#28a3dd", "#f3db52", "#ed84b5", "#4ab74e", "#9179c0", "#8e6d5a", "#f19839", "#949494"];
      const l = { top: 50, right: 30, bottom: 50, left: 50 };
      class ag {
        constructor(t2, { title: e2, xLabel: i2, yLabel: o2, data: { labels: r2, datasets: s2 }, options: a2 }) {
          this.options = od({ unxkcdify: false, yTickCount: 3, dataColors: O, fontFamily: "xkcd", strokeColor: "black", backgroundColor: "white" }, a2), e2 && (this.title = e2, l.top = 60), i2 && (this.xLabel = i2, l.bottom = 50), o2 && (this.yLabel = o2, l.left = 70), this.data = { labels: r2, datasets: s2 }, this.filter = "url(#xkcdify)", this.fontFamily = this.options.fontFamily || "xkcd", this.options.unxkcdify && (this.filter = null, this.fontFamily = '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif'), this.svgEl = f(t2).style("stroke-width", "3").style("font-family", this.fontFamily).style("background", this.options.backgroundColor).attr("width", t2.parentElement.clientWidth).attr("height", Math.min(2 * t2.parentElement.clientWidth / 3, window.innerHeight)), this.svgEl.selectAll("*").remove(), this.chart = this.svgEl.append("g").attr("transform", `translate(${l.left},${l.top})`), this.width = this.svgEl.attr("width") - l.left - l.right, this.height = this.svgEl.attr("height") - l.top - l.bottom, M(this.svgEl), N(this.svgEl), this.render();
        }
        render() {
          this.title && k.title(this.svgEl, this.title, this.options.strokeColor), this.xLabel && k.xLabel(this.svgEl, this.xLabel, this.options.strokeColor), this.yLabel && k.yLabel(this.svgEl, this.yLabel, this.options.strokeColor);
          const t2 = new L({ parent: this.svgEl, title: "tooltip", items: [{ color: "red", text: "weweyang: 12" }, { color: "blue", text: "timqian: 13" }], position: { x: 30, y: 30, type: b.positionType.upRight }, unxkcdify: this.options.unxkcdify, backgroundColor: this.options.backgroundColor, strokeColor: this.options.strokeColor }), e2 = ja().range([0, this.width]).domain(this.data.labels).padding(0.4), i2 = this.data.datasets.reduce((t3, e3) => t3.concat(e3.data), []), o2 = A().domain([0, Math.max(...i2)]).range([this.height, 0]), r2 = this.chart.append("g");
          y.xAxis(r2, { xScale: e2, tickCount: 3, moveDown: this.height, fontFamily: this.fontFamily, unxkcdify: this.options.unxkcdify, stroke: this.options.strokeColor }), y.yAxis(r2, { yScale: o2, tickCount: this.options.yTickCount || 3, fontFamily: this.fontFamily, unxkcdify: this.options.unxkcdify, stroke: this.options.strokeColor }), r2.selectAll(".xkcd-chart-bar").data(this.data.datasets[0].data).enter().append("rect").attr("class", "xkcd-chart-bar").attr("x", (t3, i3) => e2(this.data.labels[i3])).attr("width", e2.bandwidth()).attr("y", (t3) => o2(t3)).attr("height", (t3) => this.height - o2(t3)).attr("fill", "none").attr("pointer-events", "all").attr("stroke", this.options.strokeColor).attr("stroke-width", 3).attr("rx", 2).attr("filter", this.filter).on("mouseover", (e3, i3, o3) => {
            f(o3[i3]).attr("fill", this.options.dataColors[i3]), t2.show();
          }).on("mouseout", (e3, i3, o3) => {
            f(o3[i3]).attr("fill", "none"), t2.hide();
          }).on("mousemove", (e3, i3, o3) => {
            const r3 = w(o3[i3])[0] + l.left + 10, s2 = w(o3[i3])[1] + l.top + 10;
            let a2 = b.positionType.downRight;
            r3 > this.width / 2 && s2 < this.height / 2 ? a2 = b.positionType.downLeft : r3 > this.width / 2 && s2 > this.height / 2 ? a2 = b.positionType.upLeft : r3 < this.width / 2 && s2 > this.height / 2 && (a2 = b.positionType.upRight), t2.update({ title: this.data.labels[i3], items: [{ color: this.options.dataColors[i3], text: `${this.data.datasets[0].label || ""}: ${e3}` }], position: { x: r3, y: s2, type: a2 } });
          });
        }
        update() {
        }
      }
      function Ic(t2, o2) {
        var e2 = Object.keys(t2);
        if (Object.getOwnPropertySymbols) {
          var i2 = Object.getOwnPropertySymbols(t2);
          o2 && (i2 = i2.filter(function(o3) {
            return Object.getOwnPropertyDescriptor(t2, o3).enumerable;
          })), e2.push.apply(e2, i2);
        }
        return e2;
      }
      function bg(t2) {
        for (var o2 = 1; o2 < arguments.length; o2++) {
          var e2 = null != arguments[o2] ? arguments[o2] : {};
          o2 % 2 ? Ic(e2, true).forEach(function(o3) {
            cg(t2, o3, e2[o3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t2, Object.getOwnPropertyDescriptors(e2)) : Ic(e2).forEach(function(o3) {
            Object.defineProperty(t2, o3, Object.getOwnPropertyDescriptor(e2, o3));
          });
        }
        return t2;
      }
      function cg(t2, o2, e2) {
        return o2 in t2 ? Object.defineProperty(t2, o2, { value: e2, enumerable: true, configurable: true, writable: true }) : t2[o2] = e2, t2;
      }
      function Z(t2, { items: r2, position: e2, unxkcdify: i2, parentWidth: o2, parentHeight: a2, strokeColor: p2, backgroundColor: n2 }) {
        const l2 = i2 ? null : "url(#xkcdify)", $2 = t2.append("svg"), d2 = $2.append("svg"), s2 = $2.append("svg");
        r2.forEach((t3, r3) => {
          s2.append("rect").style("fill", t3.color).attr("width", 8).attr("height", 8).attr("rx", 2).attr("ry", 2).attr("filter", l2).attr("x", 15).attr("y", 17 + 20 * r3), s2.append("text").style("font-size", "15").style("fill", p2).attr("x", 27).attr("y", 17 + 20 * r3 + 8).text(t3.text);
        });
        const f2 = s2.node().getBBox(), c2 = f2.width + 15, g2 = f2.height + 10;
        let y2 = 0, h2 = 0;
        e2 !== b.positionType.downLeft && e2 !== b.positionType.downRight || (h2 = a2 - g2 - 13), e2 !== b.positionType.upRight && e2 !== b.positionType.downRight || (y2 = o2 - c2 - 13), d2.append("rect").style("fill", n2).attr("fill-opacity", 0.85).attr("stroke", p2).attr("stroke-width", 2).attr("rx", 5).attr("ry", 5).attr("filter", l2).attr("width", c2).attr("height", g2).attr("x", 8).attr("y", 5), $2.attr("x", y2).attr("y", h2);
      }
      const p = { top: 50, right: 30, bottom: 50, left: 50 };
      class dg {
        constructor(t2, { title: o2, xLabel: e2, yLabel: i2, data: { labels: r2, datasets: s2 }, options: a2 }) {
          this.options = bg({ unxkcdify: false, yTickCount: 3, dataColors: O, fontFamily: "xkcd", strokeColor: "black", backgroundColor: "white", legendPosition: b.positionType.upLeft, showLegend: true }, a2), o2 && (this.title = o2, p.top = 60), e2 && (this.xLabel = e2, p.bottom = 50), i2 && (this.yLabel = i2, p.left = 70), this.data = { labels: r2, datasets: s2 }, this.filter = "url(#xkcdify)", this.fontFamily = this.options.fontFamily || "xkcd", this.options.unxkcdify && (this.filter = null, this.fontFamily = '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif'), this.svgEl = f(t2).style("stroke-width", "3").style("font-family", this.fontFamily).style("background", this.options.backgroundColor).attr("width", t2.parentElement.clientWidth).attr("height", Math.min(2 * t2.parentElement.clientWidth / 3, window.innerHeight)), this.svgEl.selectAll("*").remove(), this.chart = this.svgEl.append("g").attr("transform", `translate(${p.left},${p.top})`), this.width = this.svgEl.attr("width") - p.left - p.right, this.height = this.svgEl.attr("height") - p.top - p.bottom, M(this.svgEl), N(this.svgEl), this.render();
        }
        render() {
          this.title && k.title(this.svgEl, this.title, this.options.strokeColor), this.xLabel && k.xLabel(this.svgEl, this.xLabel, this.options.strokeColor), this.yLabel && k.yLabel(this.svgEl, this.yLabel, this.options.strokeColor);
          const t2 = new L({ parent: this.svgEl, title: "tooltip", items: [{ color: "red", text: "weweyang: 12" }, { color: "blue", text: "timqian: 13" }], position: { x: 30, y: 30, type: b.positionType.upRight }, unxkcdify: this.options.unxkcdify, backgroundColor: this.options.backgroundColor, strokeColor: this.options.strokeColor }), o2 = ja().range([0, this.width]).domain(this.data.labels).padding(0.4), e2 = this.data.datasets.reduce((t3, o3) => o3.data.map((o4, e3) => (t3[e3] || 0) + o4), []), i2 = A().domain([0, Math.max(...e2)]).range([this.height, 0]), r2 = this.chart.append("g");
          y.xAxis(r2, { xScale: o2, tickCount: 3, moveDown: this.height, fontFamily: this.fontFamily, unxkcdify: this.options.unxkcdify, stroke: this.options.strokeColor }), y.yAxis(r2, { yScale: i2, tickCount: this.options.yTickCount || 3, fontFamily: this.fontFamily, unxkcdify: this.options.unxkcdify, stroke: this.options.strokeColor });
          const s2 = this.data.datasets.reduce((t3, o3) => t3.concat(o3.data), []), a2 = this.data.datasets[0].data.length, n2 = this.data.datasets.reduce((t3, o3, e3) => (e3 > 0 ? t3.push(o3.data.map((o4, i3) => this.data.datasets[e3 - 1].data[i3] + t3[e3 - 1][i3])) : t3.push(new Array(o3.data.length).fill(0)), t3), []).flat();
          if (r2.selectAll(".xkcd-chart-stacked-bar").data(s2).enter().append("rect").attr("class", "xkcd-chart-stacked-bar").attr("x", (t3, e3) => o2(this.data.labels[e3 % a2])).attr("width", o2.bandwidth()).attr("y", (t3, o3) => i2(t3 + n2[o3])).attr("height", (t3) => this.height - i2(t3)).attr("fill", (t3, o3) => this.options.dataColors[Math.floor(o3 / a2)]).attr("pointer-events", "all").attr("stroke", this.options.strokeColor).attr("stroke-width", 3).attr("rx", 2).attr("filter", this.filter).on("mouseover", () => t2.show()).on("mouseout", () => t2.hide()).on("mousemove", (o3, e3, i3) => {
            const r3 = w(i3[e3])[0] + p.left + 10, s3 = w(i3[e3])[1] + p.top + 10, n3 = this.data.datasets.map((t3, o4) => ({ color: this.options.dataColors[o4], text: `${this.data.datasets[o4].label || ""}: ${this.data.datasets[o4].data[e3 % a2]}` })).reverse();
            let l2 = b.positionType.downRight;
            r3 > this.width / 2 && s3 < this.height / 2 ? l2 = b.positionType.downLeft : r3 > this.width / 2 && s3 > this.height / 2 ? l2 = b.positionType.upLeft : r3 < this.width / 2 && s3 > this.height / 2 && (l2 = b.positionType.upRight), t2.update({ title: this.data.labels[e3], items: n3, position: { x: r3, y: s3, type: l2 } });
          }), this.options.showLegend) {
            const t3 = this.data.datasets.map((t4, o3) => ({ color: this.options.dataColors[o3], text: `${this.data.datasets[o3].label || ""}` })).reverse();
            Z(r2, { items: t3, position: this.options.legendPosition, unxkcdify: this.options.unxkcdify, parentWidth: this.width, parentHeight: this.height, strokeColor: this.options.strokeColor, backgroundColor: this.options.backgroundColor });
          }
        }
        update() {
        }
      }
      function Jc(t2, e2) {
        var i2 = Object.keys(t2);
        if (Object.getOwnPropertySymbols) {
          var o2 = Object.getOwnPropertySymbols(t2);
          e2 && (o2 = o2.filter(function(e3) {
            return Object.getOwnPropertyDescriptor(t2, e3).enumerable;
          })), i2.push.apply(i2, o2);
        }
        return i2;
      }
      function eg(t2) {
        for (var e2 = 1; e2 < arguments.length; e2++) {
          var i2 = null != arguments[e2] ? arguments[e2] : {};
          e2 % 2 ? Jc(i2, true).forEach(function(e3) {
            fg(t2, e3, i2[e3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t2, Object.getOwnPropertyDescriptors(i2)) : Jc(i2).forEach(function(e3) {
            Object.defineProperty(t2, e3, Object.getOwnPropertyDescriptor(i2, e3));
          });
        }
        return t2;
      }
      function fg(t2, e2, i2) {
        return e2 in t2 ? Object.defineProperty(t2, e2, { value: i2, enumerable: true, configurable: true, writable: true }) : t2[e2] = i2, t2;
      }
      var c = function(e2) {
        return function() {
          return e2;
        };
      };
      var gg = function($2, t2) {
        return t2 < $2 ? -1 : t2 > $2 ? 1 : t2 >= $2 ? 0 : NaN;
      };
      var hg = function($2) {
        return $2;
      };
      var Kc = Math.abs;
      var Q = Math.atan2;
      var W = Math.cos;
      var ig = Math.max;
      var kb = Math.min;
      var V = Math.sin;
      var X = Math.sqrt;
      var U = 1e-12;
      var _ = Math.PI;
      var ta = _ / 2;
      var ua = 2 * _;
      function jg($2) {
        return $2 > 1 ? 0 : $2 < -1 ? _ : Math.acos($2);
      }
      function Lc($2) {
        return $2 >= 1 ? ta : $2 <= -1 ? -ta : Math.asin($2);
      }
      var kg = function() {
        var t2 = hg, n2 = gg, r2 = null, e2 = c(0), $2 = c(ua), o2 = c(0);
        function a2(a3) {
          var i2, u2, l2, p2, c2, A2 = a3.length, f2 = 0, s2 = new Array(A2), b2 = new Array(A2), U2 = +e2.apply(this, arguments), Z2 = Math.min(ua, Math.max(-ua, $2.apply(this, arguments) - U2)), m2 = Math.min(Math.abs(Z2) / A2, o2.apply(this, arguments)), d2 = m2 * (Z2 < 0 ? -1 : 1);
          for (i2 = 0; i2 < A2; ++i2)
            (c2 = b2[s2[i2] = i2] = +t2(a3[i2], i2, a3)) > 0 && (f2 += c2);
          for (null != n2 ? s2.sort(function(t3, r3) {
            return n2(b2[t3], b2[r3]);
          }) : null != r2 && s2.sort(function(t3, n3) {
            return r2(a3[t3], a3[n3]);
          }), i2 = 0, l2 = f2 ? (Z2 - A2 * d2) / f2 : 0; i2 < A2; ++i2, U2 = p2)
            u2 = s2[i2], p2 = U2 + ((c2 = b2[u2]) > 0 ? c2 * l2 : 0) + d2, b2[u2] = { data: a3[u2], index: i2, value: c2, startAngle: U2, endAngle: p2, padAngle: m2 };
          return b2;
        }
        return a2.value = function(n3) {
          return arguments.length ? (t2 = "function" == typeof n3 ? n3 : c(+n3), a2) : t2;
        }, a2.sortValues = function(t3) {
          return arguments.length ? (n2 = t3, r2 = null, a2) : n2;
        }, a2.sort = function(t3) {
          return arguments.length ? (r2 = t3, n2 = null, a2) : r2;
        }, a2.startAngle = function(t3) {
          return arguments.length ? (e2 = "function" == typeof t3 ? t3 : c(+t3), a2) : e2;
        }, a2.endAngle = function(t3) {
          return arguments.length ? ($2 = "function" == typeof t3 ? t3 : c(+t3), a2) : $2;
        }, a2.padAngle = function(t3) {
          return arguments.length ? (o2 = "function" == typeof t3 ? t3 : c(+t3), a2) : o2;
        }, a2;
      };
      function lg($2) {
        return $2.innerRadius;
      }
      function mg($2) {
        return $2.outerRadius;
      }
      function ng($2) {
        return $2.startAngle;
      }
      function og($2) {
        return $2.endAngle;
      }
      function pg($2) {
        return $2 && $2.padAngle;
      }
      function qg($2, t2, r2, n2, i2, o2, a2, p2) {
        var e2 = r2 - $2, c2 = n2 - t2, I2 = a2 - i2, B2 = p2 - o2, L2 = B2 * e2 - I2 * c2;
        if (!(L2 * L2 < U))
          return [$2 + (L2 = (I2 * (t2 - o2) - B2 * ($2 - i2)) / L2) * e2, t2 + L2 * c2];
      }
      function va($2, t2, r2, n2, i2, o2, a2) {
        var p2 = $2 - r2, e2 = t2 - n2, c2 = (a2 ? o2 : -o2) / X(p2 * p2 + e2 * e2), I2 = c2 * e2, B2 = -c2 * p2, L2 = $2 + I2, m2 = t2 + B2, s2 = r2 + I2, l2 = n2 + B2, u2 = (L2 + s2) / 2, y2 = (m2 + l2) / 2, f2 = s2 - L2, x2 = l2 - m2, v2 = f2 * f2 + x2 * x2, g2 = i2 - o2, h2 = L2 * l2 - s2 * m2, d2 = (x2 < 0 ? -1 : 1) * X(ig(0, g2 * g2 * v2 - h2 * h2)), T2 = (h2 * x2 - f2 * d2) / v2, A2 = (-h2 * f2 - x2 * d2) / v2, R2 = (h2 * x2 + f2 * d2) / v2, q2 = (-h2 * f2 + x2 * d2) / v2, P2 = T2 - u2, b2 = A2 - y2, E2 = R2 - u2, O2 = q2 - y2;
        return P2 * P2 + b2 * b2 > E2 * E2 + O2 * O2 && (T2 = R2, A2 = q2), { cx: T2, cy: A2, x01: -I2, y01: -B2, x11: T2 * (i2 / g2 - 1), y11: A2 * (i2 / g2 - 1) };
      }
      var lb = Math.PI, mb = 2 * lb, C = 1e-6, rg = mb - C;
      function nb() {
        this._x0 = this._y0 = this._x1 = this._y1 = null, this._ = "";
      }
      function ob() {
        return new nb();
      }
      nb.prototype = ob.prototype = { constructor: nb, moveTo: function(t2, h2) {
        this._ += "M" + (this._x0 = this._x1 = +t2) + "," + (this._y0 = this._y1 = +h2);
      }, closePath: function() {
        null !== this._x1 && (this._x1 = this._x0, this._y1 = this._y0, this._ += "Z");
      }, lineTo: function(t2, h2) {
        this._ += "L" + (this._x1 = +t2) + "," + (this._y1 = +h2);
      }, quadraticCurveTo: function(t2, h2, i2, s2) {
        this._ += "Q" + +t2 + "," + +h2 + "," + (this._x1 = +i2) + "," + (this._y1 = +s2);
      }, bezierCurveTo: function(t2, h2, i2, s2, $2, o2) {
        this._ += "C" + +t2 + "," + +h2 + "," + +i2 + "," + +s2 + "," + (this._x1 = +$2) + "," + (this._y1 = +o2);
      }, arcTo: function(t2, h2, i2, s2, $2) {
        t2 = +t2, h2 = +h2, i2 = +i2, s2 = +s2, $2 = +$2;
        var o2 = this._x1, a2 = this._y1, r2 = i2 - t2, _2 = s2 - h2, n2 = o2 - t2, M2 = a2 - h2, e2 = n2 * n2 + M2 * M2;
        if ($2 < 0)
          throw new Error("negative radius: " + $2);
        if (null === this._x1)
          this._ += "M" + (this._x1 = t2) + "," + (this._y1 = h2);
        else if (e2 > C) {
          if (Math.abs(M2 * r2 - _2 * n2) > C && $2) {
            var u2 = i2 - o2, b2 = s2 - a2, v2 = r2 * r2 + _2 * _2, l2 = u2 * u2 + b2 * b2, x2 = Math.sqrt(v2), p2 = Math.sqrt(e2), c2 = $2 * Math.tan((lb - Math.acos((v2 + e2 - l2) / (2 * x2 * p2))) / 2), f2 = c2 / p2, y2 = c2 / x2;
            Math.abs(f2 - 1) > C && (this._ += "L" + (t2 + f2 * n2) + "," + (h2 + f2 * M2)), this._ += "A" + $2 + "," + $2 + ",0,0," + +(M2 * u2 > n2 * b2) + "," + (this._x1 = t2 + y2 * r2) + "," + (this._y1 = h2 + y2 * _2);
          } else
            this._ += "L" + (this._x1 = t2) + "," + (this._y1 = h2);
        } else
          ;
      }, arc: function(t2, h2, i2, s2, $2, o2) {
        t2 = +t2, h2 = +h2, o2 = !!o2;
        var a2 = (i2 = +i2) * Math.cos(s2), r2 = i2 * Math.sin(s2), _2 = t2 + a2, n2 = h2 + r2, M2 = 1 ^ o2, e2 = o2 ? s2 - $2 : $2 - s2;
        if (i2 < 0)
          throw new Error("negative radius: " + i2);
        null === this._x1 ? this._ += "M" + _2 + "," + n2 : (Math.abs(this._x1 - _2) > C || Math.abs(this._y1 - n2) > C) && (this._ += "L" + _2 + "," + n2), i2 && (e2 < 0 && (e2 = e2 % mb + mb), e2 > rg ? this._ += "A" + i2 + "," + i2 + ",0,1," + M2 + "," + (t2 - a2) + "," + (h2 - r2) + "A" + i2 + "," + i2 + ",0,1," + M2 + "," + (this._x1 = _2) + "," + (this._y1 = n2) : e2 > C && (this._ += "A" + i2 + "," + i2 + ",0," + +(e2 >= lb) + "," + M2 + "," + (this._x1 = t2 + i2 * Math.cos($2)) + "," + (this._y1 = h2 + i2 * Math.sin($2))));
      }, rect: function(t2, h2, i2, s2) {
        this._ += "M" + (this._x0 = this._x1 = +t2) + "," + (this._y0 = this._y1 = +h2) + "h" + +i2 + "v" + +s2 + "h" + -i2 + "Z";
      }, toString: function() {
        return this._;
      } };
      var sg = function() {
        var $2 = lg, t2 = mg, r2 = c(0), n2 = null, i2 = ng, o2 = og, a2 = pg, p2 = null;
        function e2() {
          var e3, c2, I2 = +$2.apply(this, arguments), B2 = +t2.apply(this, arguments), L2 = i2.apply(this, arguments) - ta, m2 = o2.apply(this, arguments) - ta, s2 = Kc(m2 - L2), l2 = m2 > L2;
          if (p2 || (p2 = e3 = ob()), B2 < I2 && (c2 = B2, B2 = I2, I2 = c2), B2 > U) {
            if (s2 > ua - U)
              p2.moveTo(B2 * W(L2), B2 * V(L2)), p2.arc(0, 0, B2, L2, m2, !l2), I2 > U && (p2.moveTo(I2 * W(m2), I2 * V(m2)), p2.arc(0, 0, I2, m2, L2, l2));
            else {
              var u2, y2, f2 = L2, x2 = m2, v2 = L2, g2 = m2, h2 = s2, d2 = s2, T2 = a2.apply(this, arguments) / 2, A2 = T2 > U && (n2 ? +n2.apply(this, arguments) : X(I2 * I2 + B2 * B2)), R2 = kb(Kc(B2 - I2) / 2, +r2.apply(this, arguments)), q2 = R2, P2 = R2;
              if (A2 > U) {
                var b2 = Lc(A2 / I2 * V(T2)), E2 = Lc(A2 / B2 * V(T2));
                (h2 -= 2 * b2) > U ? (v2 += b2 *= l2 ? 1 : -1, g2 -= b2) : (h2 = 0, v2 = g2 = (L2 + m2) / 2), (d2 -= 2 * E2) > U ? (f2 += E2 *= l2 ? 1 : -1, x2 -= E2) : (d2 = 0, f2 = x2 = (L2 + m2) / 2);
              }
              var O2 = B2 * W(f2), S2 = B2 * V(f2), j2 = I2 * W(g2), k2 = I2 * V(g2);
              if (R2 > U) {
                var w2, z2 = B2 * W(x2), C2 = B2 * V(x2), D2 = I2 * W(v2), F2 = I2 * V(v2);
                if (s2 < _ && (w2 = qg(O2, S2, D2, F2, z2, C2, j2, k2))) {
                  var G2 = O2 - w2[0], H2 = S2 - w2[1], J2 = z2 - w2[0], K2 = C2 - w2[1], M2 = 1 / V(jg((G2 * J2 + H2 * K2) / (X(G2 * G2 + H2 * H2) * X(J2 * J2 + K2 * K2))) / 2), N2 = X(w2[0] * w2[0] + w2[1] * w2[1]);
                  q2 = kb(R2, (I2 - N2) / (M2 - 1)), P2 = kb(R2, (B2 - N2) / (M2 + 1));
                }
              }
              d2 > U ? P2 > U ? (u2 = va(D2, F2, O2, S2, B2, P2, l2), y2 = va(z2, C2, j2, k2, B2, P2, l2), p2.moveTo(u2.cx + u2.x01, u2.cy + u2.y01), P2 < R2 ? p2.arc(u2.cx, u2.cy, P2, Q(u2.y01, u2.x01), Q(y2.y01, y2.x01), !l2) : (p2.arc(u2.cx, u2.cy, P2, Q(u2.y01, u2.x01), Q(u2.y11, u2.x11), !l2), p2.arc(0, 0, B2, Q(u2.cy + u2.y11, u2.cx + u2.x11), Q(y2.cy + y2.y11, y2.cx + y2.x11), !l2), p2.arc(y2.cx, y2.cy, P2, Q(y2.y11, y2.x11), Q(y2.y01, y2.x01), !l2))) : (p2.moveTo(O2, S2), p2.arc(0, 0, B2, f2, x2, !l2)) : p2.moveTo(O2, S2), I2 > U && h2 > U ? q2 > U ? (u2 = va(j2, k2, z2, C2, I2, -q2, l2), y2 = va(O2, S2, D2, F2, I2, -q2, l2), p2.lineTo(u2.cx + u2.x01, u2.cy + u2.y01), q2 < R2 ? p2.arc(u2.cx, u2.cy, q2, Q(u2.y01, u2.x01), Q(y2.y01, y2.x01), !l2) : (p2.arc(u2.cx, u2.cy, q2, Q(u2.y01, u2.x01), Q(u2.y11, u2.x11), !l2), p2.arc(0, 0, I2, Q(u2.cy + u2.y11, u2.cx + u2.x11), Q(y2.cy + y2.y11, y2.cx + y2.x11), l2), p2.arc(y2.cx, y2.cy, q2, Q(y2.y11, y2.x11), Q(y2.y01, y2.x01), !l2))) : p2.arc(0, 0, I2, g2, v2, l2) : p2.lineTo(j2, k2);
            }
          } else
            p2.moveTo(0, 0);
          if (p2.closePath(), e3)
            return p2 = null, e3 + "" || null;
        }
        return e2.centroid = function() {
          var r3 = (+$2.apply(this, arguments) + +t2.apply(this, arguments)) / 2, n3 = (+i2.apply(this, arguments) + +o2.apply(this, arguments)) / 2 - _ / 2;
          return [W(n3) * r3, V(n3) * r3];
        }, e2.innerRadius = function(t3) {
          return arguments.length ? ($2 = "function" == typeof t3 ? t3 : c(+t3), e2) : $2;
        }, e2.outerRadius = function($3) {
          return arguments.length ? (t2 = "function" == typeof $3 ? $3 : c(+$3), e2) : t2;
        }, e2.cornerRadius = function($3) {
          return arguments.length ? (r2 = "function" == typeof $3 ? $3 : c(+$3), e2) : r2;
        }, e2.padRadius = function($3) {
          return arguments.length ? (n2 = null == $3 ? null : "function" == typeof $3 ? $3 : c(+$3), e2) : n2;
        }, e2.startAngle = function($3) {
          return arguments.length ? (i2 = "function" == typeof $3 ? $3 : c(+$3), e2) : i2;
        }, e2.endAngle = function($3) {
          return arguments.length ? (o2 = "function" == typeof $3 ? $3 : c(+$3), e2) : o2;
        }, e2.padAngle = function($3) {
          return arguments.length ? (a2 = "function" == typeof $3 ? $3 : c(+$3), e2) : a2;
        }, e2.context = function($3) {
          return arguments.length ? (p2 = null == $3 ? null : $3, e2) : p2;
        }, e2;
      };
      const tg = 50;
      class ug {
        constructor(t2, { title: e2, data: { labels: i2, datasets: o2 }, options: r2 }) {
          this.options = eg({ unxkcdify: false, innerRadius: 0.5, legendPosition: b.positionType.upLeft, dataColors: O, fontFamily: "xkcd", strokeColor: "black", backgroundColor: "white", showLegend: true }, r2), this.title = e2, this.data = { labels: i2, datasets: o2 }, this.filter = "url(#xkcdify-pie)", this.fontFamily = this.options.fontFamily || "xkcd", this.options.unxkcdify && (this.filter = null, this.fontFamily = '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif'), this.svgEl = f(t2).style("stroke-width", "3").style("font-family", this.fontFamily).style("background", this.options.backgroundColor).attr("width", t2.parentElement.clientWidth).attr("height", Math.min(2 * t2.parentElement.clientWidth / 3, window.innerHeight)), this.svgEl.selectAll("*").remove(), this.width = this.svgEl.attr("width"), this.height = this.svgEl.attr("height"), this.chart = this.svgEl.append("g").attr("transform", `translate(${this.width / 2},${this.height / 2})`), M(this.svgEl), N(this.svgEl), this.render();
        }
        render() {
          this.title && k.title(this.svgEl, this.title, this.options.strokeColor);
          const t2 = new L({ parent: this.svgEl, title: "tooltip", items: [{ color: "red", text: "weweyang: 12" }, { color: "blue", text: "timqian: 13" }], position: { x: 30, y: 30, type: b.positionType.upRight }, unxkcdify: this.options.unxkcdify, strokeColor: this.options.strokeColor, backgroundColor: this.options.backgroundColor }), e2 = Math.min(this.width, this.height) / 2 - tg, i2 = kg()(this.data.datasets[0].data), o2 = sg().innerRadius(e2 * (void 0 === this.options.innerRadius ? 0.5 : this.options.innerRadius)).outerRadius(e2);
          this.chart.selectAll(".xkcd-chart-arc").data(i2).enter().append("path").attr("class", ".xkcd-chart-arc").attr("d", o2).attr("fill", "none").attr("stroke", this.options.strokeColor).attr("stroke-width", 2).attr("fill", (t3, e3) => this.options.dataColors[e3]).attr("filter", this.filter).on("mouseover", (e3, i3, o3) => {
            f(o3[i3]).attr("fill-opacity", 0.6), t2.show();
          }).on("mouseout", (e3, i3, o3) => {
            f(o3[i3]).attr("fill-opacity", 1), t2.hide();
          }).on("mousemove", (e3, i3, o3) => {
            const r3 = w(o3[i3])[0] + this.width / 2 + 10, s3 = w(o3[i3])[1] + this.height / 2 + 10;
            t2.update({ title: this.data.labels[i3], items: [{ color: this.options.dataColors[i3], text: `${this.data.datasets[0].label || ""}: ${e3.data}` }], position: { x: r3, y: s3, type: b.positionType.downRight } });
          });
          const r2 = this.data.datasets[0].data.map((t3, e3) => ({ color: this.options.dataColors[e3], text: this.data.labels[e3] })), s2 = this.svgEl.append("g").attr("transform", "translate(0, 30)");
          this.options.showLegend && Z(s2, { items: r2, position: this.options.legendPosition, unxkcdify: this.options.unxkcdify, parentWidth: this.width, parentHeight: this.height, strokeColor: this.options.strokeColor, backgroundColor: this.options.backgroundColor });
        }
        update() {
        }
      }
      function Mc(t2, i2) {
        var o2 = Object.keys(t2);
        if (Object.getOwnPropertySymbols) {
          var e2 = Object.getOwnPropertySymbols(t2);
          i2 && (e2 = e2.filter(function(i3) {
            return Object.getOwnPropertyDescriptor(t2, i3).enumerable;
          })), o2.push.apply(o2, e2);
        }
        return o2;
      }
      function vg(t2) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var o2 = null != arguments[i2] ? arguments[i2] : {};
          i2 % 2 ? Mc(o2, true).forEach(function(i3) {
            wg(t2, i3, o2[i3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t2, Object.getOwnPropertyDescriptors(o2)) : Mc(o2).forEach(function(i3) {
            Object.defineProperty(t2, i3, Object.getOwnPropertyDescriptor(o2, i3));
          });
        }
        return t2;
      }
      function wg(t2, i2, o2) {
        return i2 in t2 ? Object.defineProperty(t2, i2, { value: o2, enumerable: true, configurable: true, writable: true }) : t2[i2] = o2, t2;
      }
      function Nc(t2) {
        this._context = t2;
      }
      Nc.prototype = { areaStart: function() {
        this._line = 0;
      }, areaEnd: function() {
        this._line = NaN;
      }, lineStart: function() {
        this._point = 0;
      }, lineEnd: function() {
        (this._line || 0 !== this._line && 1 === this._point) && this._context.closePath(), this._line = 1 - this._line;
      }, point: function(t2, i2) {
        switch (t2 = +t2, i2 = +i2, this._point) {
          case 0:
            this._point = 1, this._line ? this._context.lineTo(t2, i2) : this._context.moveTo(t2, i2);
            break;
          case 1:
            this._point = 2;
          default:
            this._context.lineTo(t2, i2);
        }
      } };
      var xg = function(t2) {
        return new Nc(t2);
      };
      function yg($2) {
        return $2[0];
      }
      function zg($2) {
        return $2[1];
      }
      var pb = function() {
        var n2 = yg, t2 = zg, r2 = c(true), e2 = null, $2 = xg, o2 = null;
        function u2(u3) {
          var i2, l2, p2, h2 = u3.length, c2 = false;
          for (null == e2 && (o2 = $2(p2 = ob())), i2 = 0; i2 <= h2; ++i2)
            !(i2 < h2 && r2(l2 = u3[i2], i2, u3)) === c2 && ((c2 = !c2) ? o2.lineStart() : o2.lineEnd()), c2 && o2.point(+n2(l2, i2, u3), +t2(l2, i2, u3));
          if (p2)
            return o2 = null, p2 + "" || null;
        }
        return u2.x = function(t3) {
          return arguments.length ? (n2 = "function" == typeof t3 ? t3 : c(+t3), u2) : n2;
        }, u2.y = function(n3) {
          return arguments.length ? (t2 = "function" == typeof n3 ? n3 : c(+n3), u2) : t2;
        }, u2.defined = function(n3) {
          return arguments.length ? (r2 = "function" == typeof n3 ? n3 : c(!!n3), u2) : r2;
        }, u2.curve = function(n3) {
          return arguments.length ? ($2 = n3, null != e2 && (o2 = $2(e2)), u2) : $2;
        }, u2.context = function(n3) {
          return arguments.length ? (null == n3 ? e2 = o2 = null : o2 = $2(e2 = n3), u2) : e2;
        }, u2;
      };
      function Oc(t2) {
        return t2 < 0 ? -1 : 1;
      }
      function Pc(t2, o2, n2) {
        var i2 = t2._x1 - t2._x0, e2 = o2 - t2._x1, $2 = (t2._y1 - t2._y0) / (i2 || e2 < 0 && -0), s2 = (n2 - t2._y1) / (e2 || i2 < 0 && -0), x2 = ($2 * e2 + s2 * i2) / (i2 + e2);
        return (Oc($2) + Oc(s2)) * Math.min(Math.abs($2), Math.abs(s2), 0.5 * Math.abs(x2)) || 0;
      }
      function Qc(t2, o2) {
        var n2 = t2._x1 - t2._x0;
        return n2 ? (3 * (t2._y1 - t2._y0) / n2 - o2) / 2 : o2;
      }
      function qb(t2, o2, n2) {
        var i2 = t2._x0, e2 = t2._y0, $2 = t2._x1, s2 = t2._y1, x2 = ($2 - i2) / 3;
        t2._context.bezierCurveTo(i2 + x2, e2 + x2 * o2, $2 - x2, s2 - x2 * n2, $2, s2);
      }
      function $(t2) {
        this._context = t2;
      }
      function Rc(t2) {
        return new $(t2);
      }
      $.prototype = { areaStart: function() {
        this._line = 0;
      }, areaEnd: function() {
        this._line = NaN;
      }, lineStart: function() {
        this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN, this._point = 0;
      }, lineEnd: function() {
        switch (this._point) {
          case 2:
            this._context.lineTo(this._x1, this._y1);
            break;
          case 3:
            qb(this, this._t0, Qc(this, this._t0));
        }
        (this._line || 0 !== this._line && 1 === this._point) && this._context.closePath(), this._line = 1 - this._line;
      }, point: function(t2, o2) {
        var n2 = NaN;
        if (o2 = +o2, (t2 = +t2) !== this._x1 || o2 !== this._y1) {
          switch (this._point) {
            case 0:
              this._point = 1, this._line ? this._context.lineTo(t2, o2) : this._context.moveTo(t2, o2);
              break;
            case 1:
              this._point = 2;
              break;
            case 2:
              this._point = 3, qb(this, Qc(this, n2 = Pc(this, t2, o2)), n2);
              break;
            default:
              qb(this, this._t0, n2 = Pc(this, t2, o2));
          }
          this._x0 = this._x1, this._x1 = t2, this._y0 = this._y1, this._y1 = o2, this._t0 = n2;
        }
      } }, Object.create($.prototype).point = function(t2, o2) {
        $.prototype.point.call(this, o2, t2);
      };
      const q = { top: 50, right: 30, bottom: 50, left: 50 };
      class Ag {
        constructor(t2, { title: i2, xLabel: o2, yLabel: e2, data: { labels: s2, datasets: r2 }, options: a2 }) {
          this.options = vg({ unxkcdify: false, yTickCount: 3, legendPosition: b.positionType.upLeft, dataColors: O, fontFamily: "xkcd", strokeColor: "black", backgroundColor: "white", showLegend: true }, a2), i2 && (this.title = i2, q.top = 60), o2 && (this.xLabel = o2, q.bottom = 50), e2 && (this.yLabel = e2, q.left = 70), this.data = { labels: s2, datasets: r2 }, this.filter = "url(#xkcdify)", this.fontFamily = this.options.fontFamily || "xkcd", this.options.unxkcdify && (this.filter = null, this.fontFamily = '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif'), this.svgEl = f(t2).style("stroke-width", "3").style("font-family", this.fontFamily).style("background", this.options.backgroundColor).attr("width", t2.parentElement.clientWidth).attr("height", Math.min(2 * t2.parentElement.clientWidth / 3, window.innerHeight)), this.svgEl.selectAll("*").remove(), this.chart = this.svgEl.append("g").attr("transform", `translate(${q.left},${q.top})`), this.width = this.svgEl.attr("width") - q.left - q.right, this.height = this.svgEl.attr("height") - q.top - q.bottom, M(this.svgEl), N(this.svgEl), this.render();
        }
        render() {
          this.title && k.title(this.svgEl, this.title, this.options.strokeColor), this.xLabel && k.xLabel(this.svgEl, this.xLabel, this.options.strokeColor), this.yLabel && k.yLabel(this.svgEl, this.yLabel, this.options.strokeColor);
          const t2 = new L({ parent: this.svgEl, title: "", items: [{ color: "red", text: "weweyang" }, { color: "blue", text: "timqian" }], position: { x: 60, y: 60, type: b.positionType.downRight }, unxkcdify: this.options.unxkcdify, backgroundColor: this.options.backgroundColor, strokeColor: this.options.strokeColor }), i2 = Qe().domain(this.data.labels).range([0, this.width]), o2 = this.data.datasets.reduce((t3, i3) => t3.concat(i3.data), []), e2 = A().domain([Math.min(...o2), Math.max(...o2)]).range([this.height, 0]), s2 = this.chart.append("g").attr("pointer-events", "all");
          y.xAxis(s2, { xScale: i2, tickCount: 3, moveDown: this.height, fontFamily: this.fontFamily, unxkcdify: this.options.unxkcdify, stroke: this.options.strokeColor }), y.yAxis(s2, { yScale: e2, tickCount: this.options.yTickCount || 3, fontFamily: this.fontFamily, unxkcdify: this.options.unxkcdify, stroke: this.options.strokeColor }), this.svgEl.selectAll(".domain").attr("filter", this.filter);
          const r2 = pb().x((t3, o3) => i2(this.data.labels[o3])).y((t3) => e2(t3)).curve(Rc);
          s2.selectAll(".xkcd-chart-line").data(this.data.datasets).enter().append("path").attr("class", "xkcd-chart-line").attr("d", (t3) => r2(t3.data)).attr("fill", "none").attr("stroke", (t3, i3) => this.options.dataColors[i3]).attr("filter", this.filter);
          const a2 = s2.append("line").attr("x1", 30).attr("y1", 0).attr("x2", 30).attr("y2", this.height).attr("stroke", "#aaa").attr("stroke-width", 1.5).attr("stroke-dasharray", "7,7").style("visibility", "hidden"), l2 = this.data.datasets.map((t3, i3) => s2.append("circle").style("stroke", this.options.dataColors[i3]).style("fill", this.options.dataColors[i3]).attr("r", 3.5).style("visibility", "hidden"));
          if (s2.append("rect").attr("width", this.width).attr("height", this.height).attr("fill", "none").on("mouseover", () => {
            l2.forEach((t3) => t3.style("visibility", "visible")), a2.style("visibility", "visible"), t2.show();
          }).on("mouseout", () => {
            l2.forEach((t3) => t3.style("visibility", "hidden")), a2.style("visibility", "hidden"), t2.hide();
          }).on("mousemove", (o3, s3, r3) => {
            const n2 = w(r3[s3])[0] + q.left + 10, $2 = w(r3[s3])[1] + q.top + 10, h2 = this.data.labels.map((t3) => i2(t3) + q.left).map((t3) => Math.abs(t3 - w(r3[s3])[0] - q.left)), d2 = h2.indexOf(Math.min(...h2));
            a2.attr("x1", i2(this.data.labels[d2])).attr("x2", i2(this.data.labels[d2])), this.data.datasets.forEach((t3, o4) => {
              l2[o4].style("visibility", "visible").attr("cx", i2(this.data.labels[d2])).attr("cy", e2(t3.data[d2]));
            });
            const m2 = this.data.datasets.map((t3, i3) => ({ color: this.options.dataColors[i3], text: `${this.data.datasets[i3].label || ""}: ${this.data.datasets[i3].data[d2]}` }));
            let p2 = b.positionType.downRight;
            n2 > this.width / 2 && $2 < this.height / 2 ? p2 = b.positionType.downLeft : n2 > this.width / 2 && $2 > this.height / 2 ? p2 = b.positionType.upLeft : n2 < this.width / 2 && $2 > this.height / 2 && (p2 = b.positionType.upRight), t2.update({ title: this.data.labels[d2], items: m2, position: { x: n2, y: $2, type: p2 } });
          }), this.options.showLegend) {
            const t3 = this.data.datasets.map((t4, i3) => ({ color: this.options.dataColors[i3], text: t4.label }));
            Z(s2, { items: t3, position: this.options.legendPosition, unxkcdify: this.options.unxkcdify, parentWidth: this.width, parentHeight: this.height, backgroundColor: this.options.backgroundColor, strokeColor: this.options.strokeColor });
          }
        }
        update() {
        }
      }
      function Sc(t2, o2) {
        var i2 = Object.keys(t2);
        if (Object.getOwnPropertySymbols) {
          var e2 = Object.getOwnPropertySymbols(t2);
          o2 && (e2 = e2.filter(function(o3) {
            return Object.getOwnPropertyDescriptor(t2, o3).enumerable;
          })), i2.push.apply(i2, e2);
        }
        return i2;
      }
      function Bg(t2) {
        for (var o2 = 1; o2 < arguments.length; o2++) {
          var i2 = null != arguments[o2] ? arguments[o2] : {};
          o2 % 2 ? Sc(i2, true).forEach(function(o3) {
            Cg(t2, o3, i2[o3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t2, Object.getOwnPropertyDescriptors(i2)) : Sc(i2).forEach(function(o3) {
            Object.defineProperty(t2, o3, Object.getOwnPropertyDescriptor(i2, o3));
          });
        }
        return t2;
      }
      function Cg(t2, o2, i2) {
        return o2 in t2 ? Object.defineProperty(t2, o2, { value: i2, enumerable: true, configurable: true, writable: true }) : t2[o2] = i2, t2;
      }
      var rb = new Date(), sb = new Date();
      function d(t2, r2, e2, n2) {
        function o2(r3) {
          return t2(r3 = new Date(+r3)), r3;
        }
        return o2.floor = o2, o2.ceil = function(e3) {
          return t2(e3 = new Date(e3 - 1)), r2(e3, 1), t2(e3), e3;
        }, o2.round = function(t3) {
          var r3 = o2(t3), e3 = o2.ceil(t3);
          return t3 - r3 < e3 - t3 ? r3 : e3;
        }, o2.offset = function(t3, e3) {
          return r2(t3 = new Date(+t3), null == e3 ? 1 : Math.floor(e3)), t3;
        }, o2.range = function(e3, n3, $2) {
          var u2, f2 = [];
          if (e3 = o2.ceil(e3), $2 = null == $2 ? 1 : Math.floor($2), !(e3 < n3 && $2 > 0))
            return f2;
          do {
            f2.push(u2 = new Date(+e3)), r2(e3, $2), t2(e3);
          } while (u2 < e3 && e3 < n3);
          return f2;
        }, o2.filter = function(e3) {
          return d(function(r3) {
            if (r3 >= r3)
              for (; t2(r3), !e3(r3); )
                r3.setTime(r3 - 1);
          }, function(t3, n3) {
            if (t3 >= t3)
              if (n3 < 0)
                for (; ++n3 <= 0; )
                  for (; r2(t3, -1), !e3(t3); )
                    ;
              else
                for (; --n3 >= 0; )
                  for (; r2(t3, 1), !e3(t3); )
                    ;
          });
        }, e2 && (o2.count = function(r3, n3) {
          return rb.setTime(+r3), sb.setTime(+n3), t2(rb), t2(sb), Math.floor(e2(rb, sb));
        }, o2.every = function(t3) {
          return t3 = Math.floor(t3), isFinite(t3) && t3 > 0 ? t3 > 1 ? o2.filter(n2 ? function(r3) {
            return n2(r3) % t3 == 0;
          } : function(r3) {
            return o2.count(0, r3) % t3 == 0;
          }) : o2 : null;
        }), o2;
      }
      var wa = d(function() {
      }, function(e2, t2) {
        e2.setTime(+e2 + t2);
      }, function(e2, t2) {
        return t2 - e2;
      });
      wa.every = function(e2) {
        return e2 = Math.floor(e2), isFinite(e2) && e2 > 0 ? e2 > 1 ? d(function(t2) {
          t2.setTime(Math.floor(t2 / e2) * e2);
        }, function(t2, $2) {
          t2.setTime(+t2 + $2 * e2);
        }, function(t2, $2) {
          return ($2 - t2) / e2;
        }) : wa : null;
      };
      var oi = wa.range;
      var xa = 1e3;
      var D = 6e4;
      var ya = 36e5;
      var Tc = 864e5;
      var Uc = 6048e5;
      var Vc = d(function(e2) {
        e2.setTime(e2 - e2.getMilliseconds());
      }, function(e2, $2) {
        e2.setTime(+e2 + $2 * xa);
      }, function(e2, $2) {
        return ($2 - e2) / xa;
      }, function(e2) {
        return e2.getUTCSeconds();
      });
      var pi = Vc.range;
      var Wc = d(function(e2) {
        e2.setTime(e2 - e2.getMilliseconds() - e2.getSeconds() * xa);
      }, function(e2, t2) {
        e2.setTime(+e2 + t2 * D);
      }, function(e2, t2) {
        return (t2 - e2) / D;
      }, function(e2) {
        return e2.getMinutes();
      });
      var qi = Wc.range;
      var Xc = d(function(r2) {
        r2.setTime(r2 - r2.getMilliseconds() - r2.getSeconds() * xa - r2.getMinutes() * D);
      }, function(r2, $2) {
        r2.setTime(+r2 + $2 * ya);
      }, function(r2, $2) {
        return ($2 - r2) / ya;
      }, function(r2) {
        return r2.getHours();
      });
      var ri = Xc.range;
      var za = d(function(r2) {
        r2.setHours(0, 0, 0, 0);
      }, function(r2, e2) {
        r2.setDate(r2.getDate() + e2);
      }, function(r2, e2) {
        return (e2 - r2 - (e2.getTimezoneOffset() - r2.getTimezoneOffset()) * D) / Tc;
      }, function(r2) {
        return r2.getDate() - 1;
      });
      var si = za.range;
      function r(e2) {
        return d(function($2) {
          $2.setDate($2.getDate() - ($2.getDay() + 7 - e2) % 7), $2.setHours(0, 0, 0, 0);
        }, function(e3, $2) {
          e3.setDate(e3.getDate() + 7 * $2);
        }, function(e3, $2) {
          return ($2 - e3 - ($2.getTimezoneOffset() - e3.getTimezoneOffset()) * D) / Uc;
        });
      }
      var tb = r(0);
      var Aa = r(1);
      var Dg = r(2);
      var Eg = r(3);
      var Ba = r(4);
      var Fg = r(5);
      var Gg = r(6);
      var ti = tb.range;
      var ui = Aa.range;
      var vi = Dg.range;
      var wi = Eg.range;
      var xi = Ba.range;
      var yi = Fg.range;
      var zi = Gg.range;
      var Yc = d(function(t2) {
        t2.setDate(1), t2.setHours(0, 0, 0, 0);
      }, function(t2, e2) {
        t2.setMonth(t2.getMonth() + e2);
      }, function(t2, e2) {
        return e2.getMonth() - t2.getMonth() + 12 * (e2.getFullYear() - t2.getFullYear());
      }, function(t2) {
        return t2.getMonth();
      });
      var Ai = Yc.range;
      var o = d(function(e2) {
        e2.setMonth(0, 1), e2.setHours(0, 0, 0, 0);
      }, function(e2, t2) {
        e2.setFullYear(e2.getFullYear() + t2);
      }, function(e2, t2) {
        return t2.getFullYear() - e2.getFullYear();
      }, function(e2) {
        return e2.getFullYear();
      });
      o.every = function(e2) {
        return isFinite(e2 = Math.floor(e2)) && e2 > 0 ? d(function(t2) {
          t2.setFullYear(Math.floor(t2.getFullYear() / e2) * e2), t2.setMonth(0, 1), t2.setHours(0, 0, 0, 0);
        }, function(t2, r2) {
          t2.setFullYear(t2.getFullYear() + r2 * e2);
        }) : null;
      };
      var Bi = o.range;
      var Hg = d(function(t2) {
        t2.setUTCSeconds(0, 0);
      }, function(t2, e2) {
        t2.setTime(+t2 + e2 * D);
      }, function(t2, e2) {
        return (e2 - t2) / D;
      }, function(t2) {
        return t2.getUTCMinutes();
      });
      var Ci = Hg.range;
      var Ig = d(function(r2) {
        r2.setUTCMinutes(0, 0, 0);
      }, function(r2, $2) {
        r2.setTime(+r2 + $2 * ya);
      }, function(r2, $2) {
        return ($2 - r2) / ya;
      }, function(r2) {
        return r2.getUTCHours();
      });
      var Di = Ig.range;
      var ub = d(function(t2) {
        t2.setUTCHours(0, 0, 0, 0);
      }, function(t2, $2) {
        t2.setUTCDate(t2.getUTCDate() + $2);
      }, function(t2, $2) {
        return ($2 - t2) / Tc;
      }, function(t2) {
        return t2.getUTCDate() - 1;
      });
      var Ei = ub.range;
      function E($2) {
        return d(function(t2) {
          t2.setUTCDate(t2.getUTCDate() - (t2.getUTCDay() + 7 - $2) % 7), t2.setUTCHours(0, 0, 0, 0);
        }, function($3, t2) {
          $3.setUTCDate($3.getUTCDate() + 7 * t2);
        }, function($3, t2) {
          return (t2 - $3) / Uc;
        });
      }
      var Zc = E(0);
      var Ca = E(1);
      var Jg = E(2);
      var Kg = E(3);
      var Da = E(4);
      var Lg = E(5);
      var Mg = E(6);
      var Fi = Zc.range;
      var Gi = Ca.range;
      var Hi = Jg.range;
      var Ii = Kg.range;
      var Ji = Da.range;
      var Ki = Lg.range;
      var Li = Mg.range;
      var Ng = d(function(t2) {
        t2.setUTCDate(1), t2.setUTCHours(0, 0, 0, 0);
      }, function(t2, e2) {
        t2.setUTCMonth(t2.getUTCMonth() + e2);
      }, function(t2, e2) {
        return e2.getUTCMonth() - t2.getUTCMonth() + 12 * (e2.getUTCFullYear() - t2.getUTCFullYear());
      }, function(t2) {
        return t2.getUTCMonth();
      });
      var Mi = Ng.range;
      var F = d(function(e2) {
        e2.setUTCMonth(0, 1), e2.setUTCHours(0, 0, 0, 0);
      }, function(e2, t2) {
        e2.setUTCFullYear(e2.getUTCFullYear() + t2);
      }, function(e2, t2) {
        return t2.getUTCFullYear() - e2.getUTCFullYear();
      }, function(e2) {
        return e2.getUTCFullYear();
      });
      F.every = function(e2) {
        return isFinite(e2 = Math.floor(e2)) && e2 > 0 ? d(function(t2) {
          t2.setUTCFullYear(Math.floor(t2.getUTCFullYear() / e2) * e2), t2.setUTCMonth(0, 1), t2.setUTCHours(0, 0, 0, 0);
        }, function(t2, r2) {
          t2.setUTCFullYear(t2.getUTCFullYear() + r2 * e2);
        }) : null;
      };
      var Ni = F.range;
      var aa, Og, Oi, Pg, Qg;
      function Rg($2) {
        return aa = Tg($2), Og = aa.format, Oi = aa.parse, Pg = aa.utcFormat, Qg = aa.utcParse, aa;
      }
      function Sg(r2) {
        if (0 <= r2.y && r2.y < 100) {
          var $2 = new Date(-1, r2.m, r2.d, r2.H, r2.M, r2.S, r2.L);
          return $2.setFullYear(r2.y), $2;
        }
        return new Date(r2.y, r2.m, r2.d, r2.H, r2.M, r2.S, r2.L);
      }
      function Ea(r2) {
        if (0 <= r2.y && r2.y < 100) {
          var $2 = new Date(Date.UTC(-1, r2.m, r2.d, r2.H, r2.M, r2.S, r2.L));
          return $2.setUTCFullYear(r2.y), $2;
        }
        return new Date(Date.UTC(r2.y, r2.m, r2.d, r2.H, r2.M, r2.S, r2.L));
      }
      function ba(r2) {
        return { y: r2, m: 0, d: 1, H: 0, M: 0, S: 0, L: 0 };
      }
      function Tg(r2) {
        var $2 = r2.dateTime, e2 = r2.date, a2 = r2.time, t2 = r2.periods, U2 = r2.days, n2 = r2.shortDays, o2 = r2.months, u2 = r2.shortMonths, b2 = ca(t2), i2 = da(t2), H2 = ca(U2), v2 = da(U2), c2 = ca(n2), f2 = da(n2), m2 = ca(o2), s2 = da(o2), l2 = ca(u2), d2 = da(u2), p2 = { a: function(r3) {
          return n2[r3.getDay()];
        }, A: function(r3) {
          return U2[r3.getDay()];
        }, b: function(r3) {
          return u2[r3.getMonth()];
        }, B: function(r3) {
          return o2[r3.getMonth()];
        }, c: null, d: bd, e: bd, f: ph, H: mh, I: nh, j: oh, L: cd, m: qh, M: rh, p: function(r3) {
          return t2[+(r3.getHours() >= 12)];
        }, Q: gd, s: hd, S: sh, u: th, U: uh, V: vh, w: wh, W: xh, x: null, X: null, y: yh, Y: zh, Z: Ah, "%": fd }, y2 = { a: function(r3) {
          return n2[r3.getUTCDay()];
        }, A: function(r3) {
          return U2[r3.getUTCDay()];
        }, b: function(r3) {
          return u2[r3.getUTCMonth()];
        }, B: function(r3) {
          return o2[r3.getUTCMonth()];
        }, c: null, d: dd, e: dd, f: Eh, H: Bh, I: Ch, j: Dh, L: ed, m: Fh, M: Gh, p: function(r3) {
          return t2[+(r3.getUTCHours() >= 12)];
        }, Q: gd, s: hd, S: Hh, u: Ih, U: Jh, V: Kh, w: Lh, W: Mh, x: null, X: null, y: Nh, Y: Oh, Z: Ph, "%": fd }, g2 = { a: function(r3, $3, e3) {
          var a3 = c2.exec($3.slice(e3));
          return a3 ? (r3.w = f2[a3[0].toLowerCase()], e3 + a3[0].length) : -1;
        }, A: function(r3, $3, e3) {
          var a3 = H2.exec($3.slice(e3));
          return a3 ? (r3.w = v2[a3[0].toLowerCase()], e3 + a3[0].length) : -1;
        }, b: function(r3, $3, e3) {
          var a3 = l2.exec($3.slice(e3));
          return a3 ? (r3.m = d2[a3[0].toLowerCase()], e3 + a3[0].length) : -1;
        }, B: function(r3, $3, e3) {
          var a3 = m2.exec($3.slice(e3));
          return a3 ? (r3.m = s2[a3[0].toLowerCase()], e3 + a3[0].length) : -1;
        }, c: function(r3, e3, a3) {
          return h2(r3, $2, e3, a3);
        }, d: _c, e: _c, f: ih, H: ad, I: ad, j: eh, L: hh, m: dh, M: fh, p: function(r3, $3, e3) {
          var a3 = b2.exec($3.slice(e3));
          return a3 ? (r3.p = i2[a3[0].toLowerCase()], e3 + a3[0].length) : -1;
        }, Q: kh, s: lh, S: gh, u: Yg, U: Zg, V: $g, w: Xg, W: _g, x: function(r3, $3, a3) {
          return h2(r3, e2, $3, a3);
        }, X: function(r3, $3, e3) {
          return h2(r3, a2, $3, e3);
        }, y: bh, Y: ah, Z: ch, "%": jh };
        function T2(r3, $3) {
          return function(e3) {
            var a3, t3, U3, n3 = [], o3 = -1, u3 = 0, b3 = r3.length;
            for (e3 instanceof Date || (e3 = new Date(+e3)); ++o3 < b3; )
              37 === r3.charCodeAt(o3) && (n3.push(r3.slice(u3, o3)), null != (t3 = $c[a3 = r3.charAt(++o3)]) ? a3 = r3.charAt(++o3) : t3 = "e" === a3 ? " " : "0", (U3 = $3[a3]) && (a3 = U3(e3, t3)), n3.push(a3), u3 = o3 + 1);
            return n3.push(r3.slice(u3, o3)), n3.join("");
          };
        }
        function M2(r3, $3) {
          return function(e3) {
            var a3, t3, U3 = ba(1900);
            if (h2(U3, r3, e3 += "", 0) != e3.length)
              return null;
            if ("Q" in U3)
              return new Date(U3.Q);
            if ("p" in U3 && (U3.H = U3.H % 12 + 12 * U3.p), "V" in U3) {
              if (U3.V < 1 || U3.V > 53)
                return null;
              "w" in U3 || (U3.w = 1), "Z" in U3 ? (t3 = (a3 = Ea(ba(U3.y))).getUTCDay(), a3 = t3 > 4 || 0 === t3 ? Ca.ceil(a3) : Ca(a3), a3 = ub.offset(a3, 7 * (U3.V - 1)), U3.y = a3.getUTCFullYear(), U3.m = a3.getUTCMonth(), U3.d = a3.getUTCDate() + (U3.w + 6) % 7) : (t3 = (a3 = $3(ba(U3.y))).getDay(), a3 = t3 > 4 || 0 === t3 ? Aa.ceil(a3) : Aa(a3), a3 = za.offset(a3, 7 * (U3.V - 1)), U3.y = a3.getFullYear(), U3.m = a3.getMonth(), U3.d = a3.getDate() + (U3.w + 6) % 7);
            } else
              ("W" in U3 || "U" in U3) && ("w" in U3 || (U3.w = "u" in U3 ? U3.u % 7 : "W" in U3 ? 1 : 0), t3 = "Z" in U3 ? Ea(ba(U3.y)).getUTCDay() : $3(ba(U3.y)).getDay(), U3.m = 0, U3.d = "W" in U3 ? (U3.w + 6) % 7 + 7 * U3.W - (t3 + 5) % 7 : U3.w + 7 * U3.U - (t3 + 6) % 7);
            return "Z" in U3 ? (U3.H += U3.Z / 100 | 0, U3.M += U3.Z % 100, Ea(U3)) : $3(U3);
          };
        }
        function h2(r3, $3, e3, a3) {
          for (var t3, U3, n3 = 0, o3 = $3.length, u3 = e3.length; n3 < o3; ) {
            if (a3 >= u3)
              return -1;
            if (37 === (t3 = $3.charCodeAt(n3++))) {
              if (t3 = $3.charAt(n3++), !(U3 = g2[t3 in $c ? $3.charAt(n3++) : t3]) || (a3 = U3(r3, e3, a3)) < 0)
                return -1;
            } else if (t3 != e3.charCodeAt(a3++))
              return -1;
          }
          return a3;
        }
        return p2.x = T2(e2, p2), p2.X = T2(a2, p2), p2.c = T2($2, p2), y2.x = T2(e2, y2), y2.X = T2(a2, y2), y2.c = T2($2, y2), { format: function(r3) {
          var $3 = T2(r3 += "", p2);
          return $3.toString = function() {
            return r3;
          }, $3;
        }, parse: function(r3) {
          var $3 = M2(r3 += "", Sg);
          return $3.toString = function() {
            return r3;
          }, $3;
        }, utcFormat: function(r3) {
          var $3 = T2(r3 += "", y2);
          return $3.toString = function() {
            return r3;
          }, $3;
        }, utcParse: function(r3) {
          var $3 = M2(r3, Ea);
          return $3.toString = function() {
            return r3;
          }, $3;
        } };
      }
      var $c = { "-": "", _: " ", 0: "0" }, h = /^\s*\d+/, Ug = /^%/, Vg = /[\\^$*+?|[\]().{}]/g;
      function a(r2, $2, e2) {
        var a2 = r2 < 0 ? "-" : "", t2 = (a2 ? -r2 : r2) + "", U2 = t2.length;
        return a2 + (U2 < e2 ? new Array(e2 - U2 + 1).join($2) + t2 : t2);
      }
      function Wg(r2) {
        return r2.replace(Vg, "\\$&");
      }
      function ca(r2) {
        return new RegExp("^(?:" + r2.map(Wg).join("|") + ")", "i");
      }
      function da(r2) {
        for (var $2 = {}, e2 = -1, a2 = r2.length; ++e2 < a2; )
          $2[r2[e2].toLowerCase()] = e2;
        return $2;
      }
      function Xg(r2, $2, e2) {
        var a2 = h.exec($2.slice(e2, e2 + 1));
        return a2 ? (r2.w = +a2[0], e2 + a2[0].length) : -1;
      }
      function Yg(r2, $2, e2) {
        var a2 = h.exec($2.slice(e2, e2 + 1));
        return a2 ? (r2.u = +a2[0], e2 + a2[0].length) : -1;
      }
      function Zg(r2, $2, e2) {
        var a2 = h.exec($2.slice(e2, e2 + 2));
        return a2 ? (r2.U = +a2[0], e2 + a2[0].length) : -1;
      }
      function $g(r2, $2, e2) {
        var a2 = h.exec($2.slice(e2, e2 + 2));
        return a2 ? (r2.V = +a2[0], e2 + a2[0].length) : -1;
      }
      function _g(r2, $2, e2) {
        var a2 = h.exec($2.slice(e2, e2 + 2));
        return a2 ? (r2.W = +a2[0], e2 + a2[0].length) : -1;
      }
      function ah(r2, $2, e2) {
        var a2 = h.exec($2.slice(e2, e2 + 4));
        return a2 ? (r2.y = +a2[0], e2 + a2[0].length) : -1;
      }
      function bh(r2, $2, e2) {
        var a2 = h.exec($2.slice(e2, e2 + 2));
        return a2 ? (r2.y = +a2[0] + (+a2[0] > 68 ? 1900 : 2e3), e2 + a2[0].length) : -1;
      }
      function ch(r2, $2, e2) {
        var a2 = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec($2.slice(e2, e2 + 6));
        return a2 ? (r2.Z = a2[1] ? 0 : -(a2[2] + (a2[3] || "00")), e2 + a2[0].length) : -1;
      }
      function dh(r2, $2, e2) {
        var a2 = h.exec($2.slice(e2, e2 + 2));
        return a2 ? (r2.m = a2[0] - 1, e2 + a2[0].length) : -1;
      }
      function _c(r2, $2, e2) {
        var a2 = h.exec($2.slice(e2, e2 + 2));
        return a2 ? (r2.d = +a2[0], e2 + a2[0].length) : -1;
      }
      function eh(r2, $2, e2) {
        var a2 = h.exec($2.slice(e2, e2 + 3));
        return a2 ? (r2.m = 0, r2.d = +a2[0], e2 + a2[0].length) : -1;
      }
      function ad(r2, $2, e2) {
        var a2 = h.exec($2.slice(e2, e2 + 2));
        return a2 ? (r2.H = +a2[0], e2 + a2[0].length) : -1;
      }
      function fh(r2, $2, e2) {
        var a2 = h.exec($2.slice(e2, e2 + 2));
        return a2 ? (r2.M = +a2[0], e2 + a2[0].length) : -1;
      }
      function gh(r2, $2, e2) {
        var a2 = h.exec($2.slice(e2, e2 + 2));
        return a2 ? (r2.S = +a2[0], e2 + a2[0].length) : -1;
      }
      function hh(r2, $2, e2) {
        var a2 = h.exec($2.slice(e2, e2 + 3));
        return a2 ? (r2.L = +a2[0], e2 + a2[0].length) : -1;
      }
      function ih(r2, $2, e2) {
        var a2 = h.exec($2.slice(e2, e2 + 6));
        return a2 ? (r2.L = Math.floor(a2[0] / 1e3), e2 + a2[0].length) : -1;
      }
      function jh(r2, $2, e2) {
        var a2 = Ug.exec($2.slice(e2, e2 + 1));
        return a2 ? e2 + a2[0].length : -1;
      }
      function kh(r2, $2, e2) {
        var a2 = h.exec($2.slice(e2));
        return a2 ? (r2.Q = +a2[0], e2 + a2[0].length) : -1;
      }
      function lh(r2, $2, e2) {
        var a2 = h.exec($2.slice(e2));
        return a2 ? (r2.Q = 1e3 * +a2[0], e2 + a2[0].length) : -1;
      }
      function bd(r2, $2) {
        return a(r2.getDate(), $2, 2);
      }
      function mh(r2, $2) {
        return a(r2.getHours(), $2, 2);
      }
      function nh(r2, $2) {
        return a(r2.getHours() % 12 || 12, $2, 2);
      }
      function oh(r2, $2) {
        return a(1 + za.count(o(r2), r2), $2, 3);
      }
      function cd(r2, $2) {
        return a(r2.getMilliseconds(), $2, 3);
      }
      function ph(r2, $2) {
        return cd(r2, $2) + "000";
      }
      function qh(r2, $2) {
        return a(r2.getMonth() + 1, $2, 2);
      }
      function rh(r2, $2) {
        return a(r2.getMinutes(), $2, 2);
      }
      function sh(r2, $2) {
        return a(r2.getSeconds(), $2, 2);
      }
      function th(r2) {
        var $2 = r2.getDay();
        return 0 === $2 ? 7 : $2;
      }
      function uh(r2, $2) {
        return a(tb.count(o(r2), r2), $2, 2);
      }
      function vh(r2, $2) {
        var e2 = r2.getDay();
        return r2 = e2 >= 4 || 0 === e2 ? Ba(r2) : Ba.ceil(r2), a(Ba.count(o(r2), r2) + (4 === o(r2).getDay()), $2, 2);
      }
      function wh(r2) {
        return r2.getDay();
      }
      function xh(r2, $2) {
        return a(Aa.count(o(r2), r2), $2, 2);
      }
      function yh(r2, $2) {
        return a(r2.getFullYear() % 100, $2, 2);
      }
      function zh(r2, $2) {
        return a(r2.getFullYear() % 1e4, $2, 4);
      }
      function Ah(r2) {
        var $2 = r2.getTimezoneOffset();
        return ($2 > 0 ? "-" : ($2 *= -1, "+")) + a($2 / 60 | 0, "0", 2) + a($2 % 60, "0", 2);
      }
      function dd(r2, $2) {
        return a(r2.getUTCDate(), $2, 2);
      }
      function Bh(r2, $2) {
        return a(r2.getUTCHours(), $2, 2);
      }
      function Ch(r2, $2) {
        return a(r2.getUTCHours() % 12 || 12, $2, 2);
      }
      function Dh(r2, $2) {
        return a(1 + ub.count(F(r2), r2), $2, 3);
      }
      function ed(r2, $2) {
        return a(r2.getUTCMilliseconds(), $2, 3);
      }
      function Eh(r2, $2) {
        return ed(r2, $2) + "000";
      }
      function Fh(r2, $2) {
        return a(r2.getUTCMonth() + 1, $2, 2);
      }
      function Gh(r2, $2) {
        return a(r2.getUTCMinutes(), $2, 2);
      }
      function Hh(r2, $2) {
        return a(r2.getUTCSeconds(), $2, 2);
      }
      function Ih(r2) {
        var $2 = r2.getUTCDay();
        return 0 === $2 ? 7 : $2;
      }
      function Jh(r2, $2) {
        return a(Zc.count(F(r2), r2), $2, 2);
      }
      function Kh(r2, $2) {
        var e2 = r2.getUTCDay();
        return r2 = e2 >= 4 || 0 === e2 ? Da(r2) : Da.ceil(r2), a(Da.count(F(r2), r2) + (4 === F(r2).getUTCDay()), $2, 2);
      }
      function Lh(r2) {
        return r2.getUTCDay();
      }
      function Mh(r2, $2) {
        return a(Ca.count(F(r2), r2), $2, 2);
      }
      function Nh(r2, $2) {
        return a(r2.getUTCFullYear() % 100, $2, 2);
      }
      function Oh(r2, $2) {
        return a(r2.getUTCFullYear() % 1e4, $2, 4);
      }
      function Ph() {
        return "+0000";
      }
      function fd() {
        return "%";
      }
      function gd(r2) {
        return +r2;
      }
      function hd(r2) {
        return Math.floor(+r2 / 1e3);
      }
      Rg({ dateTime: "%x, %X", date: "%-m/%-d/%Y", time: "%-I:%M:%S %p", periods: ["AM", "PM"], days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"] });
      var id = "%Y-%m-%dT%H:%M:%S.%LZ";
      function Qh($2) {
        return $2.toISOString();
      }
      var Pi = Date.prototype.toISOString ? Qh : Pg(id);
      function Rh(e2) {
        var $2 = new Date(e2);
        return isNaN($2) ? null : $2;
      }
      var Qi = +new Date("2000-01-01T00:00:00.000Z") ? Rh : Qg(id);
      var Sh = function(e2, t2) {
        var $2, r2 = 0, M2 = (e2 = e2.slice()).length - 1, l2 = e2[r2], o2 = e2[M2];
        return o2 < l2 && ($2 = r2, r2 = M2, M2 = $2, $2 = l2, l2 = o2, o2 = $2), e2[r2] = t2.floor(l2), e2[M2] = t2.ceil(o2), e2;
      };
      var ea = 1e3, fa = 60 * ea, ga = 60 * fa, ha = 24 * ga, Th = 7 * ha, jd = 30 * ha, vb = 365 * ha;
      function Uh(t2) {
        return new Date(t2);
      }
      function Vh(t2) {
        return t2 instanceof Date ? +t2 : +new Date(+t2);
      }
      function kd(t2, $2, r2, a2, n2, e2, i2, o2, u2) {
        var k2 = Bc(z, z), V2 = k2.invert, X2 = k2.domain, d2 = u2(".%L"), v2 = u2(":%S"), c2 = u2("%I:%M"), p2 = u2("%I %p"), m2 = u2("%a %d"), l2 = u2("%b %d"), f2 = u2("%B"), y2 = u2("%Y"), M2 = [[i2, 1, ea], [i2, 5, 5 * ea], [i2, 15, 15 * ea], [i2, 30, 30 * ea], [e2, 1, fa], [e2, 5, 5 * fa], [e2, 15, 15 * fa], [e2, 30, 30 * fa], [n2, 1, ga], [n2, 3, 3 * ga], [n2, 6, 6 * ga], [n2, 12, 12 * ga], [a2, 1, ha], [a2, 2, 2 * ha], [r2, 1, Th], [$2, 1, jd], [$2, 3, 3 * jd], [t2, 1, vb]];
        function D2(o3) {
          return (i2(o3) < o3 ? d2 : e2(o3) < o3 ? v2 : n2(o3) < o3 ? c2 : a2(o3) < o3 ? p2 : $2(o3) < o3 ? r2(o3) < o3 ? m2 : l2 : t2(o3) < o3 ? f2 : y2)(o3);
        }
        function h2($3, r3, a3) {
          if (null == $3 && ($3 = 10), "number" == typeof $3) {
            var n3, e3 = Math.abs(a3 - r3) / $3, i3 = Pb(function(t3) {
              return t3[2];
            }).right(M2, e3);
            return i3 === M2.length ? (n3 = Ma(r3 / vb, a3 / vb, $3), $3 = t2) : i3 ? (n3 = (i3 = M2[e3 / M2[i3 - 1][2] < M2[i3][2] / e3 ? i3 - 1 : i3])[1], $3 = i3[0]) : (n3 = Math.max(Ma(r3, a3, $3), 1), $3 = o2), $3.every(n3);
          }
          return $3;
        }
        return k2.invert = function(t3) {
          return new Date(V2(t3));
        }, k2.domain = function(t3) {
          return arguments.length ? X2(Array.from(t3, Vh)) : X2().map(Uh);
        }, k2.ticks = function(t3) {
          var $3, r3 = X2(), a3 = r3[0], n3 = r3[r3.length - 1], e3 = n3 < a3;
          return e3 && ($3 = a3, a3 = n3, n3 = $3), $3 = ($3 = h2(t3, a3, n3)) ? $3.range(a3, n3 + 1) : [], e3 ? $3.reverse() : $3;
        }, k2.tickFormat = function(t3, $3) {
          return null == $3 ? D2 : u2($3);
        }, k2.nice = function(t3) {
          var $3 = X2();
          return (t3 = h2(t3, $3[0], $3[$3.length - 1])) ? X2(Sh($3, t3)) : k2;
        }, k2.copy = function() {
          return Ac(k2, kd(t2, $2, r2, a2, n2, e2, i2, o2, u2));
        }, k2;
      }
      var Wh = function() {
        return la.apply(kd(o, Yc, tb, za, Xc, Wc, Vc, wa, Og).domain([new Date(2e3, 0, 1), new Date(2e3, 0, 2)]), arguments);
      };
      var Fa = {};
      !function(t2, n2) {
        "object" == typeof Fa ? Fa = n2() : "function" == typeof define && define.amd ? define(n2) : t2.dayjs = n2();
      }(Fa, function() {
        var t2 = "millisecond", n2 = "second", e2 = "minute", r2 = "hour", i2 = "day", s2 = "week", u2 = "month", a2 = "quarter", o2 = "year", h2 = /^(\d{4})-?(\d{1,2})-?(\d{0,2})[^0-9]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?.?(\d{1,3})?$/, f2 = /\[([^\]]+)]|Y{2,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g, c2 = function(t3, n3, e3) {
          var r3 = String(t3);
          return !r3 || r3.length >= n3 ? t3 : "" + Array(n3 + 1 - r3.length).join(e3) + t3;
        }, d2 = { s: c2, z: function(t3) {
          var n3 = -t3.utcOffset(), e3 = Math.abs(n3), r3 = Math.floor(e3 / 60), i3 = e3 % 60;
          return (n3 <= 0 ? "+" : "-") + c2(r3, 2, "0") + ":" + c2(i3, 2, "0");
        }, m: function(t3, n3) {
          var e3 = 12 * (n3.year() - t3.year()) + (n3.month() - t3.month()), r3 = t3.clone().add(e3, u2), i3 = n3 - r3 < 0, s3 = t3.clone().add(e3 + (i3 ? -1 : 1), u2);
          return Number(-(e3 + (n3 - r3) / (i3 ? r3 - s3 : s3 - r3)) || 0);
        }, a: function(t3) {
          return t3 < 0 ? Math.ceil(t3) || 0 : Math.floor(t3);
        }, p: function(h3) {
          return { M: u2, y: o2, w: s2, d: i2, h: r2, m: e2, s: n2, ms: t2, Q: a2 }[h3] || String(h3 || "").toLowerCase().replace(/s$/, "");
        }, u: function(t3) {
          return void 0 === t3;
        } }, $2 = { name: "en", weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_") }, l2 = "en", m2 = {};
        m2[l2] = $2;
        var y2 = function(t3) {
          return t3 instanceof v2;
        }, M2 = function(t3, n3, e3) {
          var r3;
          if (!t3)
            return l2;
          if ("string" == typeof t3)
            m2[t3] && (r3 = t3), n3 && (m2[t3] = n3, r3 = t3);
          else {
            var i3 = t3.name;
            m2[i3] = t3, r3 = i3;
          }
          return e3 || (l2 = r3), r3;
        }, g2 = function(t3, n3, e3) {
          if (y2(t3))
            return t3.clone();
          var r3 = n3 ? "string" == typeof n3 ? { format: n3, pl: e3 } : n3 : {};
          return r3.date = t3, new v2(r3);
        }, D2 = d2;
        D2.l = M2, D2.i = y2, D2.w = function(t3, n3) {
          return g2(t3, { locale: n3.$L, utc: n3.$u });
        };
        var v2 = function() {
          function c3(t3) {
            this.$L = this.$L || M2(t3.locale, null, true), this.parse(t3);
          }
          var d3 = c3.prototype;
          return d3.parse = function(t3) {
            this.$d = function(t4) {
              var n3 = t4.date, e3 = t4.utc;
              if (null === n3)
                return new Date(NaN);
              if (D2.u(n3))
                return new Date();
              if (n3 instanceof Date)
                return new Date(n3);
              if ("string" == typeof n3 && !/Z$/i.test(n3)) {
                var r3 = n3.match(h2);
                if (r3)
                  return e3 ? new Date(Date.UTC(r3[1], r3[2] - 1, r3[3] || 1, r3[4] || 0, r3[5] || 0, r3[6] || 0, r3[7] || 0)) : new Date(r3[1], r3[2] - 1, r3[3] || 1, r3[4] || 0, r3[5] || 0, r3[6] || 0, r3[7] || 0);
              }
              return new Date(n3);
            }(t3), this.init();
          }, d3.init = function() {
            var t3 = this.$d;
            this.$y = t3.getFullYear(), this.$M = t3.getMonth(), this.$D = t3.getDate(), this.$W = t3.getDay(), this.$H = t3.getHours(), this.$m = t3.getMinutes(), this.$s = t3.getSeconds(), this.$ms = t3.getMilliseconds();
          }, d3.$utils = function() {
            return D2;
          }, d3.isValid = function() {
            return !("Invalid Date" === this.$d.toString());
          }, d3.isSame = function(t3, n3) {
            var e3 = g2(t3);
            return this.startOf(n3) <= e3 && e3 <= this.endOf(n3);
          }, d3.isAfter = function(t3, n3) {
            return g2(t3) < this.startOf(n3);
          }, d3.isBefore = function(t3, n3) {
            return this.endOf(n3) < g2(t3);
          }, d3.$g = function(t3, n3, e3) {
            return D2.u(t3) ? this[n3] : this.set(e3, t3);
          }, d3.year = function(t3) {
            return this.$g(t3, "$y", o2);
          }, d3.month = function(t3) {
            return this.$g(t3, "$M", u2);
          }, d3.day = function(t3) {
            return this.$g(t3, "$W", i2);
          }, d3.date = function(t3) {
            return this.$g(t3, "$D", "date");
          }, d3.hour = function(t3) {
            return this.$g(t3, "$H", r2);
          }, d3.minute = function(t3) {
            return this.$g(t3, "$m", e2);
          }, d3.second = function(t3) {
            return this.$g(t3, "$s", n2);
          }, d3.millisecond = function(n3) {
            return this.$g(n3, "$ms", t2);
          }, d3.unix = function() {
            return Math.floor(this.valueOf() / 1e3);
          }, d3.valueOf = function() {
            return this.$d.getTime();
          }, d3.startOf = function(t3, a3) {
            var h3 = this, f3 = !!D2.u(a3) || a3, c4 = D2.p(t3), d4 = function(t4, n3) {
              var e3 = D2.w(h3.$u ? Date.UTC(h3.$y, n3, t4) : new Date(h3.$y, n3, t4), h3);
              return f3 ? e3 : e3.endOf(i2);
            }, $3 = function(t4, n3) {
              return D2.w(h3.toDate()[t4].apply(h3.toDate(), (f3 ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(n3)), h3);
            }, l3 = this.$W, m3 = this.$M, y3 = this.$D, M3 = "set" + (this.$u ? "UTC" : "");
            switch (c4) {
              case o2:
                return f3 ? d4(1, 0) : d4(31, 11);
              case u2:
                return f3 ? d4(1, m3) : d4(0, m3 + 1);
              case s2:
                var g3 = this.$locale().weekStart || 0, v3 = (l3 < g3 ? l3 + 7 : l3) - g3;
                return d4(f3 ? y3 - v3 : y3 + (6 - v3), m3);
              case i2:
              case "date":
                return $3(M3 + "Hours", 0);
              case r2:
                return $3(M3 + "Minutes", 1);
              case e2:
                return $3(M3 + "Seconds", 2);
              case n2:
                return $3(M3 + "Milliseconds", 3);
              default:
                return this.clone();
            }
          }, d3.endOf = function(t3) {
            return this.startOf(t3, false);
          }, d3.$set = function(s3, a3) {
            var h3, f3 = D2.p(s3), c4 = "set" + (this.$u ? "UTC" : ""), d4 = (h3 = {}, h3[i2] = c4 + "Date", h3.date = c4 + "Date", h3[u2] = c4 + "Month", h3[o2] = c4 + "FullYear", h3[r2] = c4 + "Hours", h3[e2] = c4 + "Minutes", h3[n2] = c4 + "Seconds", h3[t2] = c4 + "Milliseconds", h3)[f3], $3 = f3 === i2 ? this.$D + (a3 - this.$W) : a3;
            if (f3 === u2 || f3 === o2) {
              var l3 = this.clone().set("date", 1);
              l3.$d[d4]($3), l3.init(), this.$d = l3.set("date", Math.min(this.$D, l3.daysInMonth())).toDate();
            } else
              d4 && this.$d[d4]($3);
            return this.init(), this;
          }, d3.set = function(t3, n3) {
            return this.clone().$set(t3, n3);
          }, d3.get = function(t3) {
            return this[D2.p(t3)]();
          }, d3.add = function(t3, a3) {
            var h3, f3 = this;
            t3 = Number(t3);
            var c4 = D2.p(a3), d4 = function(n3) {
              var e3 = g2(f3);
              return D2.w(e3.date(e3.date() + Math.round(n3 * t3)), f3);
            };
            if (c4 === u2)
              return this.set(u2, this.$M + t3);
            if (c4 === o2)
              return this.set(o2, this.$y + t3);
            if (c4 === i2)
              return d4(1);
            if (c4 === s2)
              return d4(7);
            var $3 = (h3 = {}, h3[e2] = 6e4, h3[r2] = 36e5, h3[n2] = 1e3, h3)[c4] || 1, l3 = this.valueOf() + t3 * $3;
            return D2.w(l3, this);
          }, d3.subtract = function(t3, n3) {
            return this.add(-1 * t3, n3);
          }, d3.format = function(t3) {
            var n3 = this;
            if (!this.isValid())
              return "Invalid Date";
            var e3 = t3 || "YYYY-MM-DDTHH:mm:ssZ", r3 = D2.z(this), i3 = this.$locale(), s3 = this.$H, u3 = this.$m, a3 = this.$M, o3 = i3.weekdays, h3 = i3.months, c4 = function(t4, r4, i4, s4) {
              return t4 && (t4[r4] || t4(n3, e3)) || i4[r4].substr(0, s4);
            }, d4 = function(t4) {
              return D2.s(s3 % 12 || 12, t4, "0");
            }, $3 = i3.meridiem || function(t4, n4, e4) {
              var r4 = t4 < 12 ? "AM" : "PM";
              return e4 ? r4.toLowerCase() : r4;
            }, l3 = { YY: String(this.$y).slice(-2), YYYY: this.$y, M: a3 + 1, MM: D2.s(a3 + 1, 2, "0"), MMM: c4(i3.monthsShort, a3, h3, 3), MMMM: h3[a3] || h3(this, e3), D: this.$D, DD: D2.s(this.$D, 2, "0"), d: String(this.$W), dd: c4(i3.weekdaysMin, this.$W, o3, 2), ddd: c4(i3.weekdaysShort, this.$W, o3, 3), dddd: o3[this.$W], H: String(s3), HH: D2.s(s3, 2, "0"), h: d4(1), hh: d4(2), a: $3(s3, u3, true), A: $3(s3, u3, false), m: String(u3), mm: D2.s(u3, 2, "0"), s: String(this.$s), ss: D2.s(this.$s, 2, "0"), SSS: D2.s(this.$ms, 3, "0"), Z: r3 };
            return e3.replace(f2, function(t4, n4) {
              return n4 || l3[t4] || r3.replace(":", "");
            });
          }, d3.utcOffset = function() {
            return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
          }, d3.diff = function(t3, h3, f3) {
            var c4, d4 = D2.p(h3), $3 = g2(t3), l3 = 6e4 * ($3.utcOffset() - this.utcOffset()), m3 = this - $3, y3 = D2.m(this, $3);
            return y3 = (c4 = {}, c4[o2] = y3 / 12, c4[u2] = y3, c4[a2] = y3 / 3, c4[s2] = (m3 - l3) / 6048e5, c4[i2] = (m3 - l3) / 864e5, c4[r2] = m3 / 36e5, c4[e2] = m3 / 6e4, c4[n2] = m3 / 1e3, c4)[d4] || m3, f3 ? y3 : D2.a(y3);
          }, d3.daysInMonth = function() {
            return this.endOf(u2).$D;
          }, d3.$locale = function() {
            return m2[this.$L];
          }, d3.locale = function(t3, n3) {
            if (!t3)
              return this.$L;
            var e3 = this.clone();
            return e3.$L = M2(t3, n3, true), e3;
          }, d3.clone = function() {
            return D2.w(this.toDate(), this);
          }, d3.toDate = function() {
            return new Date(this.$d);
          }, d3.toJSON = function() {
            return this.toISOString();
          }, d3.toISOString = function() {
            return this.$d.toISOString();
          }, d3.toString = function() {
            return this.$d.toUTCString();
          }, c3;
        }();
        return g2.prototype = v2.prototype, g2.extend = function(t3, n3) {
          return t3(n3, v2, g2), g2;
        }, g2.locale = M2, g2.isDayjs = y2, g2.unix = function(t3) {
          return g2(1e3 * t3);
        }, g2.en = m2[l2], g2.Ls = m2, g2;
      });
      const u = { top: 50, right: 30, bottom: 50, left: 50 };
      class Xh {
        constructor(t2, { title: o2, xLabel: i2, yLabel: e2, data: { datasets: r2 }, options: s2 }) {
          this.options = Bg({ unxkcdify: false, dotSize: 1, showLine: false, timeFormat: "", xTickCount: 3, yTickCount: 3, legendPosition: b.positionType.upLeft, dataColors: O, fontFamily: "xkcd", strokeColor: "black", backgroundColor: "white", showLegend: true }, s2), o2 && (this.title = o2, u.top = 60), i2 && (this.xLabel = i2, u.bottom = 50), e2 && (this.yLabel = e2, u.left = 70), this.data = { datasets: r2 }, this.filter = "url(#xkcdify)", this.fontFamily = this.options.fontFamily || "xkcd", this.options.unxkcdify && (this.filter = null, this.fontFamily = '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif'), this.svgEl = f(t2).style("stroke-width", 3).style("font-family", this.fontFamily).style("background", this.options.backgroundColor).attr("width", t2.parentElement.clientWidth).attr("height", Math.min(2 * t2.parentElement.clientWidth / 3, window.innerHeight)), this.svgEl.selectAll("*").remove(), this.chart = this.svgEl.append("g").attr("transform", `translate(${u.left},${u.top})`), this.width = this.svgEl.attr("width") - u.left - u.right, this.height = this.svgEl.attr("height") - u.top - u.bottom, M(this.svgEl), N(this.svgEl), this.render();
        }
        render() {
          this.title && k.title(this.svgEl, this.title, this.options.strokeColor), this.xLabel && k.xLabel(this.svgEl, this.xLabel, this.options.strokeColor), this.yLabel && k.yLabel(this.svgEl, this.yLabel, this.options.strokeColor);
          const t2 = new L({ parent: this.svgEl, title: "", items: [{ color: "red", text: "weweyang" }, { color: "blue", text: "timqian" }], position: { x: 60, y: 60, type: b.positionType.dowfnRight }, unxkcdify: this.options.unxkcdify, strokeColor: this.options.strokeColor, backgroundColor: this.options.backgroundColor });
          this.options.timeFormat && this.data.datasets.forEach((t3) => {
            t3.data.forEach((t4) => {
              var $dZYI$$interop$default = wb(Fa);
              t4.x = $dZYI$$interop$default.d(t4.x);
            });
          });
          const o2 = this.data.datasets.reduce((t3, o3) => t3.concat(o3.data), []), i2 = o2.map((t3) => t3.x), e2 = o2.map((t3) => t3.y);
          let r2 = A().domain([Math.min(...i2), Math.max(...i2)]).range([0, this.width]);
          this.options.timeFormat && (r2 = Wh().domain([Math.min(...i2), Math.max(...i2)]).range([0, this.width]));
          const s2 = A().domain([Math.min(...e2), Math.max(...e2)]).range([this.height, 0]), a2 = this.chart.append("g").attr("pointer-events", "all");
          if (y.xAxis(a2, { xScale: r2, tickCount: void 0 === this.options.xTickCount ? 3 : this.options.xTickCount, moveDown: this.height, fontFamily: this.fontFamily, unxkcdify: this.options.unxkcdify, stroke: this.options.strokeColor }), y.yAxis(a2, { yScale: s2, tickCount: void 0 === this.options.yTickCount ? 3 : this.options.yTickCount, fontFamily: this.fontFamily, unxkcdify: this.options.unxkcdify, stroke: this.options.strokeColor }), this.options.showLine) {
            const t3 = pb().x((t4) => r2(t4.x)).y((t4) => s2(t4.y)).curve(Rc);
            a2.selectAll(".xkcd-chart-xyline").data(this.data.datasets).enter().append("path").attr("class", "xkcd-chart-xyline").attr("d", (o3) => t3(o3.data)).attr("fill", "none").attr("stroke", (t4, o3) => this.options.dataColors[o3]).attr("filter", this.filter);
          }
          const n2 = 3.5 * (void 0 === this.options.dotSize ? 1 : this.options.dotSize), l2 = 6 * (void 0 === this.options.dotSize ? 1 : this.options.dotSize);
          if (a2.selectAll(".xkcd-chart-xycircle-group").data(this.data.datasets).enter().append("g").attr("class", ".xkcd-chart-xycircle-group").attr("filter", this.filter).attr("xy-group-index", (t3, o3) => o3).selectAll(".xkcd-chart-xycircle-circle").data((t3) => t3.data).enter().append("circle").style("stroke", (t3, o3, i3) => {
            const e3 = Number(f(i3[o3].parentElement).attr("xy-group-index"));
            return this.options.dataColors[e3];
          }).style("fill", (t3, o3, i3) => {
            const e3 = Number(f(i3[o3].parentElement).attr("xy-group-index"));
            return this.options.dataColors[e3];
          }).attr("r", n2).attr("cx", (t3) => r2(t3.x)).attr("cy", (t3) => s2(t3.y)).attr("pointer-events", "all").on("mouseover", (o3, i3, e3) => {
            const a3 = Number(f(e3[i3].parentElement).attr("xy-group-index"));
            f(e3[i3]).attr("r", l2);
            const n3 = r2(o3.x) + u.left + 5, $2 = s2(o3.y) + u.top + 5;
            let p2 = b.positionType.downRight;
            var $dZYI$$interop$default = wb(Fa);
            n3 > this.width / 2 && $2 < this.height / 2 ? p2 = b.positionType.downLeft : n3 > this.width / 2 && $2 > this.height / 2 ? p2 = b.positionType.upLeft : n3 < this.width / 2 && $2 > this.height / 2 && (p2 = b.positionType.upRight), t2.update({ title: this.options.timeFormat ? $dZYI$$interop$default.d(this.data.datasets[a3].data[i3].x).format(this.options.timeFormat) : `${this.data.datasets[a3].data[i3].x}`, items: [{ color: this.options.dataColors[a3], text: `${this.data.datasets[a3].label || ""}: ${o3.y}` }], position: { x: n3, y: $2, type: p2 } }), t2.show();
          }).on("mouseout", (o3, i3, e3) => {
            f(e3[i3]).attr("r", n2), t2.hide();
          }), this.options.showLegend) {
            const t3 = this.data.datasets.map((t4, o3) => ({ color: this.options.dataColors[o3], text: t4.label }));
            Z(a2, { items: t3, position: this.options.legendPosition, unxkcdify: this.options.unxkcdify, parentWidth: this.width, parentHeight: this.height, strokeColor: this.options.strokeColor, backgroundColor: this.options.backgroundColor });
          }
        }
        update() {
        }
      }
      function ld(t2, e2) {
        var a2 = Object.keys(t2);
        if (Object.getOwnPropertySymbols) {
          var r2 = Object.getOwnPropertySymbols(t2);
          e2 && (r2 = r2.filter(function(e3) {
            return Object.getOwnPropertyDescriptor(t2, e3).enumerable;
          })), a2.push.apply(a2, r2);
        }
        return a2;
      }
      function Yh(t2) {
        for (var e2 = 1; e2 < arguments.length; e2++) {
          var a2 = null != arguments[e2] ? arguments[e2] : {};
          e2 % 2 ? ld(a2, true).forEach(function(e3) {
            Zh(t2, e3, a2[e3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t2, Object.getOwnPropertyDescriptors(a2)) : ld(a2).forEach(function(e3) {
            Object.defineProperty(t2, e3, Object.getOwnPropertyDescriptor(a2, e3));
          });
        }
        return t2;
      }
      function Zh(t2, e2, a2) {
        return e2 in t2 ? Object.defineProperty(t2, e2, { value: a2, enumerable: true, configurable: true, writable: true }) : t2[e2] = a2, t2;
      }
      function md(t2) {
        this._context = t2;
      }
      var nd = function() {
      };
      md.prototype = { areaStart: nd, areaEnd: nd, lineStart: function() {
        this._point = 0;
      }, lineEnd: function() {
        this._point && this._context.closePath();
      }, point: function(t2, o2) {
        t2 = +t2, o2 = +o2, this._point ? this._context.lineTo(t2, o2) : (this._point = 1, this._context.moveTo(t2, o2));
      } };
      var $h = function(t2) {
        return new md(t2);
      };
      const _h = 50, Ga = -Math.PI / 2, ai = 0.2;
      class bi {
        constructor(t2, { title: e2, data: { labels: a2, datasets: r2 }, options: i2 }) {
          this.options = Yh({ showLabels: false, ticksCount: 3, showLegend: false, legendPosition: b.positionType.upLeft, dataColors: O, fontFamily: "xkcd", dotSize: 1, strokeColor: "black", backgroundColor: "white" }, i2), this.title = e2, this.data = { labels: a2, datasets: r2 }, this.directionsCount = r2[0].data.length, this.filter = "url(#xkcdify-pie)", this.fontFamily = this.options.fontFamily || "xkcd", this.options.unxkcdify && (this.filter = null, this.fontFamily = '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif'), this.svgEl = f(t2).style("stroke-width", "3").style("font-family", this.fontFamily).style("background", this.options.backgroundColor).attr("width", t2.parentElement.clientWidth).attr("height", Math.min(2 * t2.parentElement.clientWidth / 3, window.innerHeight)), this.svgEl.selectAll("*").remove(), this.width = this.svgEl.attr("width"), this.height = this.svgEl.attr("height"), this.chart = this.svgEl.append("g").attr("transform", `translate(${this.width / 2},${this.height / 2})`), M(this.svgEl), N(this.svgEl), this.render();
        }
        render() {
          this.title && k.title(this.svgEl, this.title, this.options.strokeColor);
          const t2 = new L({ parent: this.svgEl, title: "", items: [], position: { x: 0, y: 0, type: b.positionType.downRight }, unxkcdify: this.options.unxkcdify, strokeColor: this.options.strokeColor, backgroundColor: this.options.backgroundColor }), e2 = 3.5 * (this.options.dotSize || 1), a2 = 6 * (this.options.dotSize || 1), r2 = Math.min(this.width, this.height) / 2 - _h, i2 = 2 * Math.PI / this.directionsCount, o2 = this.data.datasets.reduce((t3, e3) => t3.concat(e3.data), []), s2 = Math.max(...o2), n2 = Array(this.directionsCount).fill(s2), l2 = A().domain([0, s2]).range([0, r2]), h2 = (t3, e3) => l2(t3) * Math.cos(i2 * e3 + Ga), d2 = (t3, e3) => l2(t3) * Math.sin(i2 * e3 + Ga), c2 = pb().x(h2).y(d2).curve($h), p2 = l2.ticks(this.options.ticksCount || 3), $2 = this.chart.append("g").attr("class", "xkcd-chart-radar-grid").attr("stroke-width", "1").attr("filter", this.filter);
          $2.selectAll(".xkcd-chart-radar-level").data(p2).enter().append("path").attr("class", "xkcd-chart-radar-level").attr("d", (t3) => c2(Array(this.directionsCount).fill(t3))).style("fill", "none").attr("stroke", this.options.strokeColor).attr("stroke-dasharray", "7,7"), $2.selectAll(".xkcd-chart-radar-line").data(n2).enter().append("line").attr("class", ".xkcd-chart-radar-line").attr("stroke", this.options.strokeColor).attr("x1", 0).attr("y1", 0).attr("x2", h2).attr("y2", d2), $2.selectAll(".xkcd-chart-radar-tick").data(p2).enter().append("text").attr("class", "xkcd-chart-radar-tick").attr("x", (t3) => h2(t3, 0)).attr("y", (t3) => d2(t3, 0)).style("font-size", "16").style("fill", this.options.strokeColor).attr("text-anchor", "end").attr("dx", "-.125em").attr("dy", ".35em").text((t3) => t3), this.options.showLabels && $2.selectAll(".xkcd-chart-radar-label").data(n2.map((t3) => 1.15 * t3)).enter().append("text").attr("class", "xkcd-chart-radar-label").style("font-size", "16").style("fill", this.options.strokeColor).attr("x", (t3, e3) => (r2 + 10) * Math.cos(i2 * e3 + Ga)).attr("y", (t3, e3) => (r2 + 10) * Math.sin(i2 * e3 + Ga)).attr("dy", ".35em").attr("text-anchor", (t3, e3, a3) => {
            let r3 = "start";
            return f(a3[e3]).attr("x") < 0 && (r3 = "end"), r3;
          }).text((t3, e3) => this.data.labels[e3]);
          const g2 = this.chart.selectAll(".xkcd-chart-radar-group").data(this.data.datasets).enter().append("g").attr("class", "xkcd-chart-radar-group").attr("filter", this.filter).attr("stroke", (t3, e3) => this.options.dataColors[e3]).attr("fill", (t3, e3) => this.options.dataColors[e3]);
          if (g2.selectAll("circle").data((t3) => t3.data).enter().append("circle").attr("r", e2).attr("cx", h2).attr("cy", d2).attr("pointer-events", "all").on("mouseover", (e3, r3, i3) => {
            f(i3[r3]).attr("r", a2);
            const o3 = h2(e3, r3) + this.width / 2, s3 = d2(e3, r3) + this.height / 2;
            let n3 = b.positionType.downRight;
            o3 > this.width / 2 && s3 < this.height / 2 ? n3 = b.positionType.downLeft : o3 > this.width / 2 && s3 > this.height / 2 ? n3 = b.positionType.upLeft : o3 < this.width / 2 && s3 > this.height / 2 && (n3 = b.positionType.upRight), t2.update({ title: this.data.labels[r3], items: this.data.datasets.map((t3, e4) => ({ color: this.options.dataColors[e4], text: `${t3.label || ""}: ${t3.data[r3]}` })), position: { x: o3, y: s3, type: n3 } }), t2.show();
          }).on("mouseout", (a3, r3, i3) => {
            f(i3[r3]).attr("r", e2), t2.hide();
          }), g2.selectAll("path").data((t3) => [t3.data]).enter().append("path").attr("d", c2).attr("pointer-events", "none").style("fill-opacity", ai), this.options.showLegend) {
            const t3 = this.data.datasets.map((t4, e4) => ({ color: this.options.dataColors[e4], text: t4.label || "" })), e3 = this.svgEl.append("g").attr("transform", "translate(0, 30)");
            Z(e3, { items: t3, position: this.options.legendPosition, unxkcdify: this.options.unxkcdify, parentWidth: this.width, parentHeight: this.height, backgroundColor: this.options.backgroundColor, strokeColor: this.options.strokeColor });
          }
        }
        update() {
        }
      }
      xb = { config: b, Bar: ag, StackedBar: dg, Pie: ug, Line: Ag, XY: Xh, Radar: bi };
      if (typeof exports === "object" && typeof module2 !== "undefined") {
        module2.exports = xb;
      } else if (typeof define === "function" && define.amd) {
        define(function() {
          return xb;
        });
      }
    })();
  }
});

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => SizeHistoryPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var import_chart = __toESM(require_dist());
var EMPTY_HISTORY = {
  datapoints: []
};
var MS_IN_MINUTE = 60 * 1e3;
var MS_IN_DAY = 24 * 60 * MS_IN_MINUTE;
var SizeHistoryPlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.app.workspace.onLayoutReady(async () => {
      await this.updateHistory();
      this.registerInterval(window.setInterval(async () => await this.updateHistory(), MS_IN_MINUTE));
    });
    this.addRibbonIcon("line-chart", "Vault size history", async (evt) => {
      const history = await this.updateHistory();
      new SizeHistoryModal(this.app, history).open();
    });
  }
  async updateHistory() {
    const history = await this.getHistory();
    const latestTimestamp = this.getLatestTimeMs(history);
    const allFiles = this.app.vault.getFiles();
    const unregisterdFiles = allFiles.filter((value) => value.stat.ctime > latestTimestamp + MS_IN_DAY);
    unregisterdFiles.sort((a, b) => a.stat.ctime - b.stat.ctime);
    for (const file of unregisterdFiles) {
      const creationTime = file.stat.ctime;
      const date = new Date(creationTime);
      const dp = {
        day: date.toISOString().substring(0, 10),
        size: 1
      };
      const last2 = history.datapoints.last();
      if (!last2) {
        history.datapoints.push(dp);
        continue;
      }
      if (last2.day == dp.day) {
        last2.size++;
      } else {
        dp.size = last2.size + 1;
        history.datapoints.push(dp);
      }
    }
    const currentDatapoint = {
      day: new Date().toISOString().substring(0, 10),
      size: allFiles.length
    };
    const last = history.datapoints.last();
    if (!last) {
      history.datapoints.push(currentDatapoint);
      return history;
    }
    if (last.day == currentDatapoint.day) {
      last.size = allFiles.length;
    } else {
      history.datapoints.push(currentDatapoint);
    }
    await this.saveData(history);
    return history;
  }
  async getHistory() {
    return Object.assign({}, EMPTY_HISTORY, await this.loadData());
  }
  getLatestTimeMs(history) {
    const lastEnpoint = history.datapoints.last();
    if (!lastEnpoint) {
      return -1;
    }
    const date = new Date(lastEnpoint.day);
    return date.getTime();
  }
};
var SizeHistoryModal = class extends import_obsidian.Modal {
  constructor(app, history) {
    super(app);
    this.history = history;
  }
  onOpen() {
    const { modalEl, contentEl, titleEl } = this;
    titleEl.setText("Vault size history");
    modalEl.addClass("size-history-modal");
    const div = contentEl.createEl("div", { cls: "size-history-chart" });
    const svg = contentEl.createSvg("svg", { cls: "line-chart" });
    div.appendChild(svg);
    contentEl.appendChild(div);
    const svgLine = document.querySelector(".line-chart");
    if (!svgLine) {
      return;
    }
    new SizeHistoryChart(svgLine, this.history.datapoints, this.app.vault.getName());
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var SizeHistoryChart = class {
  constructor(svgElem, datapoints, vaultName) {
    const data = [];
    for (const value of datapoints) {
      data.push({ x: value.day, y: value.size });
    }
    new import_chart.default.XY(svgElem, {
      title: "Vault size",
      xLabel: "Date",
      yLabel: "Number of files",
      data: {
        datasets: [{
          label: vaultName,
          data
        }]
      },
      options: {
        xTickCount: 10,
        yTickCount: 10,
        dotSize: 0.5,
        showLine: true,
        timeFormat: "MM-DD-YYYY"
      }
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
